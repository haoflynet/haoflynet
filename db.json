{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favorites.html","path":"favorites.html","modified":0,"renderable":0},{"_id":"source/google502075e2e0f9c6f7.html","path":"google502075e2e0f9c6f7.html","modified":0,"renderable":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/root.txt","path":"root.txt","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"61984f19b8afe2c3a6d17521c5f7a6eed5e8bdd8","modified":1470575113000},{"_id":"source/404.html","hash":"743ab4ca31051445e8a82092bf16b97410d683e8","modified":1456118638000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1469535027000},{"_id":"source/favorites.html","hash":"27d95cb1fb1a21f4dc8fb8809556cb22a974bf40","modified":1470620526000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1469535027000},{"_id":"source/google502075e2e0f9c6f7.html","hash":"5d3d242ef87fc173f0c9b2f1741be9ddfd2c88d6","modified":1467200303000},{"_id":"themes/landscape/README.md","hash":"3ef1349125fae036f74db0e1865d47ddf92d64bc","modified":1469535027000},{"_id":"themes/landscape/_config.yml","hash":"ab51c43db865bf428a225a38e8b3458f2f0b8920","modified":1469546428000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1469535027000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1469535027000},{"_id":"source/_posts/2014-plan.md","hash":"c7c8745681c1c5f0be494d966fae414e50a1ada7","modified":1456118638000},{"_id":"source/about/index.md","hash":"a46057dff3f0a0da4175609c0789f9516b1f5180","modified":1456118638000},{"_id":"source/_posts/C-and-pointer_0.md","hash":"02e52b8399f30027d0fd2fe6a6477fd39e652f99","modified":1456118638000},{"_id":"source/_posts/2014-the-last.md","hash":"7ac93293998d233cc9179ae809be53c91dbb07bd","modified":1456118638000},{"_id":"source/_posts/C-and-pointer_1.md","hash":"43dbbdf0d4473671da71e526cbc3f69b4a6e302f","modified":1456118638000},{"_id":"source/_posts/C-and-pointer_2.md","hash":"617d5bb360b3c12f8f587adbb13523c0492dfa1b","modified":1456118638000},{"_id":"source/_posts/a-low-key-life.md","hash":"76ada028e9bab6e619b8dc8bade2bc8f215425a3","modified":1456118638000},{"_id":"source/_posts/Gitosis-Git.md","hash":"973d85310cbcbe90bcf37fa20f83a3e6c94f491c","modified":1456118638000},{"_id":"source/_posts/apache-vs-nginx.md","hash":"a18a5d8eb45527f5f2e97d07565ff51326fd7746","modified":1456118638000},{"_id":"source/_posts/anshijian.md","hash":"3db3addec868187cb477c8b68fc66c82a526f027","modified":1462837810000},{"_id":"source/_posts/bashijiandangzuopengyou.md","hash":"50a26174fac390fdea181b145b062125b5c7af5f","modified":1465136959000},{"_id":"source/_posts/bashengminglangfeizaimeihaodeshiwushang.md","hash":"2752504d348681423e85d3a6f456373e2815c903","modified":1459952534000},{"_id":"source/_posts/bianchengzhuji.md","hash":"81fcf681c4dcced8b3f6ee368c313573f0f55b61","modified":1456118638000},{"_id":"source/_posts/believing-the-meaning-of-hard-work.md","hash":"5403a43c4011c6b9241daf11c07902e63382ad07","modified":1456118638000},{"_id":"source/_posts/bianchengzhuji-understand.md","hash":"362ea675cd982d83306988f0a15d4e84b6e8841f","modified":1456118638000},{"_id":"source/_posts/blog-revision.md","hash":"c5aeab68d372be8b23c975d716beff61df842826","modified":1456118638000},{"_id":"source/_posts/brute-force-linux-password.md","hash":"31a5d692c4dd63ffbd499578b018f5e6b6c79f4a","modified":1456118638000},{"_id":"source/_posts/busy-april.md","hash":"f8c9825b4a9c1e62662466b46175792addfb0092","modified":1456118638000},{"_id":"source/_posts/chaijing-look.md","hash":"a012767a93dec279837ae744895fbfb8157c9b8e","modified":1456118638000},{"_id":"source/_posts/bye-myhome.md","hash":"e33634271645c3abebb6c155ad6b24ea84667e20","modified":1456118638000},{"_id":"source/_posts/chengxuyuandefendoushi.md","hash":"bd1689a6ca99fb7b201ab2ce857b45768dfae7d1","modified":1456118638000},{"_id":"source/_posts/chengxuyuanjiankangzhinan.md","hash":"e0a4229eab5b9c8e1b04fe4c767165ffb88c5158","modified":1456118638000},{"_id":"source/_posts/database-application-scenarios.md","hash":"d5de0febbe892ceaf32c205a56fa05240688b3ba","modified":1456118638000},{"_id":"source/_posts/college-entrance-examination-will-deciding.md","hash":"9f5e9b09be8e866c567d421e4c9ef82e3943c2db","modified":1456118638000},{"_id":"source/_posts/chongxinrenshiniziji.md","hash":"c0a84adacac9635f124c48f83dfadecfdf6ad616","modified":1456118638000},{"_id":"source/_posts/compare-of-MyISAM-and-InnoDB.md","hash":"fdfaf6c9322590ab5a2175fc469f1346bf7117bf","modified":1456118638000},{"_id":"source/_posts/chengxuyuanfaze.md","hash":"1818b8a73b0700fdf3db286ee35c601187b50e5f","modified":1456118638000},{"_id":"source/_posts/design-pattern.md","hash":"3a0bcc608f0ddf65f15be5ec58256f1cb17049e9","modified":1456118638000},{"_id":"source/_posts/do-not-know-why.md","hash":"aa80bc43498d16cea88fec2ef8e4f26d2a5ce224","modified":1456118638000},{"_id":"source/_posts/dongwuzhuangyuan.md","hash":"a592bc636c65c4a1220f669f200b5477cbf5a2d4","modified":1456118638000},{"_id":"source/_posts/fate-is-her.md","hash":"2c5daefa5f7cf46f325d66f0f2ba5f98cc2ee7ed","modified":1456118638000},{"_id":"source/_posts/escape_class.md","hash":"7eb4f8771b999e45bd25fdfcbecfa1bafc7eabb1","modified":1456118638000},{"_id":"source/_posts/front-end.md","hash":"d288ad220031905172982cf41dfa0e0784731c12","modified":1456118638000},{"_id":"source/_posts/function-coding-coolshell.md","hash":"066fe265b6d2b07bb371a1b9c86a595f1c1cd590","modified":1456118638000},{"_id":"source/_posts/fushengliuji.md","hash":"d971798ed94043773258963b88f686b492f9f6df","modified":1456118638000},{"_id":"source/_posts/github-set-webhook.md","hash":"39b9a9474e2eaea062e9f5dd19479737227da02a","modified":1464949376000},{"_id":"source/_posts/give-up-halfway.md","hash":"55d6e3783d98ae27323c0fdf46642ba4ebe0a1cd","modified":1456118638000},{"_id":"source/_posts/goodbye-xp.md","hash":"75c4c29aac032f5eec4cbb9e72ed4e9daaa1b969","modified":1456118638000},{"_id":"source/_posts/hacker-and-painter.md","hash":"57aa90f97d8857e1419544c95ff81e565527f11d","modified":1456118638000},{"_id":"source/_posts/hdu-4267.md","hash":"58cd5159d6e743e06cf58f59a33e96eb3d866a34","modified":1456118638000},{"_id":"source/_posts/hulianwangshidai.md","hash":"5985e5e8bc7e1ff7acf5257dc643c55af2774546","modified":1456118638000},{"_id":"source/_posts/haizeiwangjiaohuiwode.md","hash":"6b195eeaa0f92fda45e7f31d14c2063d08a4107d","modified":1456118638000},{"_id":"source/_posts/i-wait-you.md","hash":"122f8e3bae159bc89409b5e58078d629314214f6","modified":1456118638000},{"_id":"source/_posts/install-linux-core.md","hash":"04a30d89240ab532cc8d277885aec70b8b0fe9e8","modified":1456118638000},{"_id":"source/_posts/inspirational-video.md","hash":"b35c94f976153679d2b44caf9a885bfe6629d72d","modified":1456118638000},{"_id":"source/_posts/kanaiji.md","hash":"63c8fe11cab0c7c1cc66f696f01a0250715c2b0f","modified":1456118638000},{"_id":"source/_posts/langchaozhidian.md","hash":"9dc1160ccade5f7ce3cf9b93d33afc6eb2e5299a","modified":1456118638000},{"_id":"source/_posts/laravel-IoC-DI.md","hash":"906bc8c4d5de5b88de14c820139a53b598231ff8","modified":1456118638000},{"_id":"source/_posts/internal-network-penetration.md","hash":"5de4474415f63946065a51c4b203d2d68fb275f3","modified":1461660687000},{"_id":"source/_posts/laravel-container.md","hash":"93dfd75ac2c59b0b2583fa692df3c78af3a19c8a","modified":1456118638000},{"_id":"source/_posts/linux-brute-force-rar-zip-7z.md","hash":"8dd6938697fba771ca4404b50c0294f81f18671a","modified":1456118638000},{"_id":"source/_posts/eclipse-git-coding-net.md","hash":"9c41a998c903c08a478b14ac866978c7f80e3ee8","modified":1456118638000},{"_id":"source/_posts/license.md","hash":"b53d948b7d26c90464d09d489e39857475d7d507","modified":1456118638000},{"_id":"source/_posts/linux-goa gent-chrome.md","hash":"8facd983e6d7d7130b43994099257c32b67c44bf","modified":1456118638000},{"_id":"source/_posts/linux-openkeeper-netkeeper.md","hash":"fc4d814dec3da738f2fd9f9fd82e0496151076d2","modified":1456118638000},{"_id":"source/_posts/modify-u-disk-logo.md","hash":"b2d237a5f2275336d8e2b31e46a3de039dedfd23","modified":1456118638000},{"_id":"source/_posts/linux-watch-network-speed.md","hash":"61f9d92b5e8ef47220b43179464c350e1f97bf27","modified":1456118638000},{"_id":"source/_posts/maitianshouwangzhe.md","hash":"70a0bf42a569389c423e023b789a119ae0b0d8e6","modified":1456118638000},{"_id":"source/_posts/manmanlai.md","hash":"6c9611e741947ed3fa340551b731a6e3a4dcd86d","modified":1456118638000},{"_id":"source/_posts/my-game-life.md","hash":"c385c2199f9c61c7f88ea8316085230ae90daf99","modified":1456118638000},{"_id":"source/_posts/my-university.md","hash":"a263710776bb0b1838ab338df2aa8fca49569ee1","modified":1456118638000},{"_id":"source/_posts/mysql-guanlizhidao.md","hash":"c4f895e5909e2005c2c90c3f07225145415fdb3b","modified":1456118638000},{"_id":"source/_posts/mysql-master-slave.md","hash":"3af78be8d6ea8d781dc2fd53b4744ba6549114db","modified":1460530852000},{"_id":"source/_posts/mysql-cold-backup.md","hash":"cb693c77719b4bd4d8771c5a7d5e24fe402f5982","modified":1456118638000},{"_id":"source/_posts/mysql-design-tips.md","hash":"bbe8eb26fcd7a3235068f456b9990dfc324dc134","modified":1456118638000},{"_id":"source/_posts/mysql-logical-backup.md","hash":"c9349dd2e0e9620ba884c2bc574cf527cdcec0f3","modified":1456118638000},{"_id":"source/_posts/mysql-update.md","hash":"a560dacaa261a7525db15edb8eb4eaf1b17d7473","modified":1456118638000},{"_id":"source/_posts/mysql-migration.md","hash":"2deb824b35c63cfaae8d963102ef6a0f40534ded","modified":1456118638000},{"_id":"source/_posts/mysql-optimization.md","hash":"af0503c06b133793425287ebb603ca5023a2a149","modified":1456118638000},{"_id":"source/_posts/nailiangluwan.md","hash":"ea296840f49375b4f1e9b48be33df668c2507c77","modified":1456118638000},{"_id":"source/_posts/mysql-source-messy-code.md","hash":"18a970efe82a47aa024680e1babda62a592163ae","modified":1456118638000},{"_id":"source/_posts/mysql-multi-instance.md","hash":"788a608773bb1fe68507482c257cc880a3d8df9f","modified":1460530674000},{"_id":"source/_posts/nidegudu,suibaiyourong.md","hash":"e5c137b513c51052786c13aef212196ee2c6c5b1","modified":1456118638000},{"_id":"source/_posts/nixidaxue.md","hash":"0255681b8a57bbe3dc1d37d9063e3a619f7961f0","modified":1456118638000},{"_id":"source/_posts/nginx-multi-apache-load-balance.md","hash":"561beeea4e4bf0e57832df6f162c43fd8ca2dbed","modified":1456118638000},{"_id":"source/_posts/now-know.md","hash":"4bacff241ab233c68bf4d18646d1aed7e2e9f7d7","modified":1456118638000},{"_id":"source/_posts/nothing-is-anything.md","hash":"7c716e4a41eb8eed3af9077cda715d561409488e","modified":1456118638000},{"_id":"source/_posts/oauth-and-sso.md","hash":"58be41ba0e853d409356590d01b620a86dccf821","modified":1470315334000},{"_id":"source/_posts/our-programmer.md","hash":"7c63c184befa4316d5b56454ce481326491da46d","modified":1456118638000},{"_id":"source/_posts/programmer-internal-strength.md","hash":"20c41f42dca6a7371cde51b945364233140f4f45","modified":1456118638000},{"_id":"source/_posts/putty-ssh-connection-refused.md","hash":"fcb48948fe2500cd90ff4f02e8f907d898d32f6a","modified":1456118638000},{"_id":"source/_posts/pdb-\tdebug-python.md","hash":"08cc87c583036ec9f516385ca2018b42adb2a480","modified":1456118638000},{"_id":"source/_posts/python-Chrome-QQ-friends.md","hash":"af71f03d97f4195592933cba94fc90fd19cf15ff","modified":1456118638000},{"_id":"source/_posts/python-Chrome-QQ-album.md","hash":"5ef0a45696ab03954b6efac6ed7eeef2e0c3aef7","modified":1456118638000},{"_id":"source/_posts/python-configparser.md","hash":"ce9cd48c8195d7dbbf1b1b8cfe34516ba9f39458","modified":1456118638000},{"_id":"source/_posts/python-connect-mysql.md","hash":"bb0c99575764fc5d6f12c8aa7cb6b8a2d5e26023","modified":1470292662000},{"_id":"source/_posts/python-beautifulsoup-parse-html-xml.md","hash":"eb0f1dd88ae352a15c6c949a45d2002160728a81","modified":1469862997000},{"_id":"source/_posts/python-encode-decode.md","hash":"9282e343c3edeabe2b60b4c6eba8a5fbb5ca5028","modified":1456118638000},{"_id":"source/_posts/python-execute-pythonfile-effiency.md","hash":"b4186bf29b063baadf9a653d9ed5c33e3f111587","modified":1456118638000},{"_id":"source/_posts/python-encoding-specification.md","hash":"f0aa93622dc97ea00e0496d9a6d35fafdbc2b8da","modified":1456118638000},{"_id":"source/_posts/python-eric-pyqt.md","hash":"f353fcdbf8a0bfa46178fad381107b07fb51ed69","modified":1456118638000},{"_id":"source/_posts/python-requests.md","hash":"4169f390786edeaf617ad6fd437c393a8624acc6","modified":1470388651000},{"_id":"source/_posts/python-use-redis.md","hash":"e3296dedf3db65994fa805b9fb8333d018598bba","modified":1456118638000},{"_id":"source/_posts/python-multithreading-multiprocess.md","hash":"35eb14ecefcfc8d9541d7287c59e7a964b48f652","modified":1456118638000},{"_id":"source/_posts/raspberrypi.md","hash":"3f579d2856eef0c4c516e68a38fc97c1dc9e0f4a","modified":1460530739000},{"_id":"source/_posts/regret-living-on-others-life.md","hash":"9c9cc477de3f3486d2ac4ceae4f92bff2cf08d99","modified":1456118638000},{"_id":"source/_posts/renshegnyuanbiancheng.md","hash":"1f5aad59a6b74be1e04334285f6028cf72da3284","modified":1469367563000},{"_id":"source/_posts/run-for-fun.md","hash":"4d5f75f5ca5ad556abe47483ee52b84d5fa328c5","modified":1464358950000},{"_id":"source/_posts/student-should-buy-genuine.md","hash":"4c36fd66f9d9dfaff09bbf2b322b9f9144129d04","modified":1456118638000},{"_id":"source/_posts/santi.md","hash":"d9abf25cec97130f09cf264326970ce68d840651","modified":1456118638000},{"_id":"source/_posts/ssl-jks-to-pem.md","hash":"ef5796eebc52d1360b43ebfc7fdaebc6a5b155b1","modified":1456118638000},{"_id":"source/_posts/restful-api.md","hash":"683b744f4742c7ea9c87765a3d49a7be945d2368","modified":1460530791000},{"_id":"source/_posts/supervisor-manage-processor.md","hash":"1e69b80d8386ce5011e2c7e587153d3bfb45fcd0","modified":1456118638000},{"_id":"source/_posts/sysbench-effiency-test.md","hash":"9bd357da0cc39a1146a3788856cae4b7ca45ba1a","modified":1456118638000},{"_id":"source/_posts/ten-years-english-learning.md","hash":"197bd5a7f33d5f7d3a1b96ae5d6e8fa34a711643","modified":1456118638000},{"_id":"source/_posts/terriable-lazy.md","hash":"320dac72a5439aa72983ff3ef802e3a19204c076","modified":1459701476000},{"_id":"source/_posts/that-year-dream.md","hash":"f6fd6f5e9ca27ad4d0872d14bbbe3ef77714a435","modified":1456118638000},{"_id":"source/_posts/the-conclusion-of-the-first-project-of-studio.md","hash":"24d93eb38f787fdc897cd9a03ba7873be695ceb8","modified":1456118638000},{"_id":"source/_posts/the-computer-knowledge-i-know.md","hash":"4c18e2ee55fa496a8d48e6f80b5e646ce6f5536d","modified":1456118638000},{"_id":"source/_posts/the-difference-of-frame-and-framework.md","hash":"70c1a33f88da791731cbd9bd7eb6195883ed75d7","modified":1456118638000},{"_id":"source/_posts/the-most-bad-man-is-who-think-to-do-the-good-thing.md","hash":"6ad615aeda4477c931ddd64ab288dfd78044e223","modified":1456118638000},{"_id":"source/_posts/the-future-of-coding.md","hash":"db0bfe60f3d4178fce94fa4b273935df7904ab36","modified":1456118638000},{"_id":"source/_posts/the-end-of-junior.md","hash":"2577c2ce360b4d1e7dcd1a2bbd717e0d5b263a8a","modified":1456118638000},{"_id":"source/_posts/the-plan-of-2015.md","hash":"0eb2cbdafb992f80390dbc3766a6267911a81c4e","modified":1456118638000},{"_id":"source/_posts/to-entrance-examination-friends.md","hash":"a043c3b78cfe0eb4f17cf3915ecfe51e26fc9343","modified":1456118638000},{"_id":"source/_posts/tornado-asynchronous.md","hash":"378598bc86178809043c1cbe1bb6f7bc84485b25","modified":1460530810000},{"_id":"source/_posts/tiancaizaizuo,fengzizaiyou.md","hash":"22d474ed357060c0c245bbf38597d975d64095df","modified":1456118638000},{"_id":"source/_posts/to-the-future-of-me.md","hash":"7873d4ac299b4ec2a3359b83799a99161c922210","modified":1456118638000},{"_id":"source/_posts/ubuntu-install-phpmyadmin.md","hash":"ca372619a7abfa9bd87e7c1bed5b6b9f04bf258c","modified":1456118638000},{"_id":"source/_posts/unitedstack-database-remote-login.md","hash":"94a5dac28309cbf9f3bc630d57ebd4a416e22139","modified":1456118638000},{"_id":"source/_posts/two-years-coding-life.md","hash":"3d890eb1bb5eb695be7e8ac07b2fbeb0f8c3e56d","modified":1456118638000},{"_id":"source/_posts/virtualbox-guest-host-share-file.md","hash":"04bdb0f7a7c5400795668e7368c825a0432fef0c","modified":1456118638000},{"_id":"source/_posts/virtualenv-python-django.md","hash":"aa7dcf12fa5ece0116fd541afaab5d61cddfa5c7","modified":1456118638000},{"_id":"source/_posts/vps-nginx-reverse-proxy.md","hash":"5ba3c70217998e14885a3803a4ee4e858a6455f3","modified":1456118638000},{"_id":"source/_posts/wait-until-today.md","hash":"d229c137d8317e51e589e662acc96004c403f716","modified":1456118638000},{"_id":"source/_posts/want-the-one.md","hash":"74f249d0a97185383f5c368030ea689744fbf716","modified":1456118638000},{"_id":"source/_posts/web-application-scenarios.md","hash":"83cd222463abe935044875de04c1c4b770bbf9b2","modified":1459156368000},{"_id":"source/_posts/weibo.md","hash":"d74acd9dfac225df3e7dd19209ee0612967b5288","modified":1456118638000},{"_id":"source/_posts/whose-youth-is-not-confused.md","hash":"f2cc9c5b7609cf130ff0d4f13fdafeccd3f87a93","modified":1456118638000},{"_id":"source/_posts/web-status-code.md","hash":"fb2ff2ad0c78be8662c52063afa759378bbbed71","modified":1456118638000},{"_id":"source/_posts/windows-install-vagrant.md","hash":"41ba7dbe8410a79231666da6db8d7cf8e5d4ffbb","modified":1456118638000},{"_id":"source/_posts/windows-wamp-install-laravel.md","hash":"90de73853b49e24e2f48e4d7789a2b85d7798a11","modified":1456118638000},{"_id":"source/_posts/wordpress-qiniu.md","hash":"d6849566f31eb010b340aea9b1cc08a13fca175f","modified":1456118638000},{"_id":"source/_posts/woyiranainiwozhishibuxihuannile.md","hash":"3365680838edcab2a2c345d284c89a8f64f74334","modified":1463224077000},{"_id":"source/_posts/wukongzhuan.md","hash":"5f30c7a17e90fc86af6af7954e20d8c281742ff4","modified":1456118638000},{"_id":"source/_posts/write-poem.md","hash":"52590637f974cfb1ab774c85eac7c5b20b5235c6","modified":1456118638000},{"_id":"source/_posts/wutuobang.md","hash":"b03f2a8e5ba29d9dbff8ad134676e886f0a6faad","modified":1456118638000},{"_id":"source/_posts/yundianzhishang.md","hash":"fc6d875e97ae46ee0bb81a75a77ee2180ffe0f95","modified":1456118638000},{"_id":"source/_posts/write-to-girls.md","hash":"21be0ac773bae2cd9f74eaf1f53ba1575273e7fe","modified":1456118638000},{"_id":"source/_posts/xiyouriji.md","hash":"7685766840c33816f01c6da336474eaa88966d65","modified":1456118638000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1469535027000},{"_id":"source/_posts/zhihu.md","hash":"3729ca5308cb1713f9bdc28835cb2dc37f2b350e","modified":1456118638000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1469535027000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1469535027000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1469535027000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1469535027000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1469535027000},{"_id":"themes/landscape/languages/pt.yml","hash":"46bd5f121f4704e2cd6c0950ec18b549f03bfe5c","modified":1469535027000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1469535027000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1469535027000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1469535027000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1469535027000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1469535027000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1469535027000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1469535027000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469535027000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469535027000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"458ca5b63462050fe2dbdf24dd5be37d4940a5a1","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"66c21211c434a085606eabe70f572a0bfb597f1d","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1469535027000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1469535027000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1469535027000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1469535027000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1469535027000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1469535027000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1469535027000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469535027000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1469535027000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1469535027000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1469535027000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1469535027000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1469535027000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1469535027000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1469535027000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1469535027000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469535027000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1469535027000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1469535027000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1469535027000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1469535027000},{"_id":"public/atom.xml","hash":"b75705ad450d80deeb1d346de056e680f0f3a1a8","modified":1471263194864},{"_id":"public/sitemap.xml","hash":"04df26aae0d3dc65664a71c8d521d0167b1db460","modified":1471263194867},{"_id":"public/404.html","hash":"ef63dd08646c4f73637f37aef9a53020ed0a8998","modified":1471261547005},{"_id":"public/about/index.html","hash":"28b7c92ebb0ce62718b601f1c81a802e9d4b07a6","modified":1471261547090},{"_id":"public/run-for-fun/index.html","hash":"30a4fd7ac55dc838e304a6a39b6d413b7fa2a7d8","modified":1471263260398},{"_id":"public/renshegnyuanbiancheng/index.html","hash":"b17c01956477e4e44123b461862f056c8cb6b8d6","modified":1471263260398},{"_id":"public/oauth-and-sso/index.html","hash":"c7a1e465ad3c0f20cdf6d44c34479bc03214b4cf","modified":1471263260398},{"_id":"public/bashijiandangzuopengyou/index.html","hash":"76d5ea294629e41bb0b6571269b0c805a259af77","modified":1471263260398},{"_id":"public/anshijian/index.html","hash":"af485dff573a6e2cdd8a2e36f97e1077c364d6cc","modified":1471263260399},{"_id":"public/woyiranainiwozhishibuxihuannile/index.html","hash":"6df862742ef2057c42cfe196400043de2f9b5c57","modified":1471263260399},{"_id":"public/tornado-asynchronous/index.html","hash":"5795eea8398dfdb2ad65f702575d123cc15e8734","modified":1471263260399},{"_id":"public/bashengminglangfeizaimeihaodeshiwushang/index.html","hash":"e3bc52fd6bf49c1cd9c47944dfb2bb75db1e95a1","modified":1471263260399},{"_id":"public/web-application-scenarios/index.html","hash":"92ff8eae19cf9e674220af1827a3ed5d59266172","modified":1471263260399},{"_id":"public/mysql-multi-instance/index.html","hash":"d9c512d05617ee48950641c33cb430ceb46d7bb9","modified":1471263260399},{"_id":"public/dongwuzhuangyuan/index.html","hash":"1622adf33e3ab3db7ed21996e70e69e7b6e5f419","modified":1471263260402},{"_id":"public/maitianshouwangzhe/index.html","hash":"809c8f7d161bc9ce6172783258d8bbcc895a175c","modified":1471263260408},{"_id":"public/mysql-update/index.html","hash":"048e6b034d12a2f1e5889b7354390338ad4051a6","modified":1471263260407},{"_id":"public/python-multithreading-multiprocess/index.html","hash":"08a8fd809b0ed759b2ac9a5fbf6e80c6ea07e4a6","modified":1471263260408},{"_id":"public/mysql-migration/index.html","hash":"bd09d5840cf1671f30c17d4afafd20bdcf9ea607","modified":1471263260408},{"_id":"public/mysql-optimization/index.html","hash":"a355099f62cd8a783e8356d5e55f6069082f795d","modified":1471534432571},{"_id":"public/mysql-design-tips/index.html","hash":"5830814e6769340fa8d4d47b1ec7aaa25b37dd32","modified":1471534432410},{"_id":"public/database-application-scenarios/index.html","hash":"c3eae629af14e824725fb4d51afd58fbb5602988","modified":1471534432575},{"_id":"public/internal-network-penetration/index.html","hash":"85d3dbb030317c37d8fa697e8a76bbf95f731906","modified":1471534432576},{"_id":"public/blog-revision/index.html","hash":"372733633cc66d8fdd15df390311e008d9b1b7c1","modified":1471534432580},{"_id":"public/supervisor-manage-processor/index.html","hash":"e22f4d2db4446582f4a6d84a54e0c8a888c8ce22","modified":1471534432578},{"_id":"public/ssl-jks-to-pem/index.html","hash":"414288e706b490e7fa91295e6cf91d173bd889cc","modified":1471534432582},{"_id":"public/pdb-\tdebug-python/index.html","hash":"281998a5f7b4086820de51f4743f4f7a81ea3d42","modified":1471534432585},{"_id":"public/the-end-of-junior/index.html","hash":"5e74f158bdfbe9f9c74ea1e9b3501de9b7e906ef","modified":1471534432587},{"_id":"public/python-use-redis/index.html","hash":"4b953ddaeefa122fa8cc0aeb6dbd17602a8c26e4","modified":1471534432587},{"_id":"public/vps-nginx-reverse-proxy/index.html","hash":"12f40320f3ef5f125528cff7cf4dfe9e47734a70","modified":1471534432588},{"_id":"public/tiancaizaizuo,fengzizaiyou/index.html","hash":"855169bf65dbaa08f61d72371ccd23a87e1abb64","modified":1471534432588},{"_id":"public/chengxuyuanjiankangzhinan/index.html","hash":"2ac64c11410868a7bbef6bf20b2355e4ab94f1bb","modified":1471534432589},{"_id":"public/langchaozhidian/index.html","hash":"72bb85cb19ec2c612c6885480545a85e644b6056","modified":1471534432699},{"_id":"public/python-encode-decode/index.html","hash":"bee79a0b99e25f42dc6c3d09000ae820fdd44487","modified":1471534432703},{"_id":"public/programmer-internal-strength/index.html","hash":"eff15b20ea60a8b8f210efeffd037cb815791bb2","modified":1471534432702},{"_id":"public/python-encoding-specification/index.html","hash":"5289906e57e47a738cd6f357e53d4bd34d716cbe","modified":1471534432702},{"_id":"public/github-set-webhook/index.html","hash":"e0e286cdf93ea72564f6d44e4dd5a12415bc8472","modified":1471534432704},{"_id":"public/weibo/index.html","hash":"cccee611db6c6259704b381e75477ede4d2cf509","modified":1471534432709},{"_id":"public/hulianwangshidai/index.html","hash":"afa9934989ff90c40afc301d81e9019d9aad37e2","modified":1471534432705},{"_id":"public/yundianzhishang/index.html","hash":"bcfa68ee35e494338010bddb363eaa112d24abfa","modified":1471534432712},{"_id":"public/the-most-bad-man-is-who-think-to-do-the-good-thing/index.html","hash":"d82b338cc8bb01bbccd0b89ca0193b1b419c5eab","modified":1471534432705},{"_id":"public/front-end/index.html","hash":"c62e4277a2f9054a8d44b0c9e998d5bf60a4fd99","modified":1471534432712},{"_id":"public/the-plan-of-2015/index.html","hash":"8199d7f305524af012cc6ea968192c4b9646b186","modified":1471534432710},{"_id":"public/escape_class/index.html","hash":"7bf7add54368b3588c67149acf722c18be4a7ab1","modified":1471534432713},{"_id":"public/web-status-code/index.html","hash":"ebaaad4702ec44ca76edc25bc8ee46cbf896de52","modified":1471534432718},{"_id":"public/unitedstack-database-remote-login/index.html","hash":"54f3c38b2f72e290c9cde3affc3dfdb67cfee61a","modified":1471534432717},{"_id":"public/mysql-source-messy-code/index.html","hash":"48b3a0820c784008475d4ce414e4154ad1561b6e","modified":1471534432719},{"_id":"public/ubuntu-install-phpmyadmin/index.html","hash":"bcd7d4ee98acb523b3d773e7a43fa890a957f5fb","modified":1471534432719},{"_id":"public/mysql-logical-backup/index.html","hash":"613b4b9e4cf3e032c14b7e4a2ba8a3043fa95826","modified":1471534432720},{"_id":"public/compare-of-MyISAM-and-InnoDB/index.html","hash":"4ae8bc519392c1c875de61aac0f8f25d75e477f0","modified":1471534432722},{"_id":"public/sysbench-effiency-test/index.html","hash":"2759d98ffc4335f8c55af4607d51087ea4a11040","modified":1471534432721},{"_id":"public/mysql-cold-backup/index.html","hash":"488537a9d03e6cfeda0502ad2700500d220c9305","modified":1471534432720},{"_id":"public/mysql-guanlizhidao/index.html","hash":"b03811bd6e5133537b5cc38237637496402ec076","modified":1471534432723},{"_id":"public/modify-u-disk-logo/index.html","hash":"7cfa057d5b963738a2c850ab987f75cb0a7b8648","modified":1471534432723},{"_id":"public/python-execute-pythonfile-effiency/index.html","hash":"2c9b0b44f9c1e23c4353c560585bf45d5145d7d7","modified":1471534432760},{"_id":"public/python-configparser/index.html","hash":"6909d683053baf03ec4e46ed5ad9e90ad7cd5bcf","modified":1471534432762},{"_id":"public/kanaiji/index.html","hash":"e18398b12f4c06dfb008a1fa086c1f52e6f3dab4","modified":1471534432763},{"_id":"public/putty-ssh-connection-refused/index.html","hash":"646e31b7f02cee5e07da5c801a8fb5623727ca21","modified":1471534432767},{"_id":"public/inspirational-video/index.html","hash":"90071d7bc28d4feb66864ac8be7a452de7be2233","modified":1471534432770},{"_id":"public/wordpress-qiniu/index.html","hash":"739b15147e7eef05961b0090dcdc71bb8c1f6863","modified":1471534432769},{"_id":"public/xiyouriji/index.html","hash":"2c795e0af3ef9ea406a678d0506e5e64457765b3","modified":1471534432770},{"_id":"public/linux-goa gent-chrome/index.html","hash":"60ec490a62d968ebbfea572c5d750e53f9318fc4","modified":1471534432781},{"_id":"public/a-low-key-life/index.html","hash":"069ad0bde3a2ffc1c8aec7118470cb5bb2de9f59","modified":1471534432773},{"_id":"public/C-and-pointer_0/index.html","hash":"a5fcf8b9a7776fe82a14f7f6f7a59a74bdc14113","modified":1471534432790},{"_id":"public/fushengliuji/index.html","hash":"9f040fec465c9ea283ef725fa3a6da91a65a3291","modified":1471534432790},{"_id":"public/busy-april/index.html","hash":"17cf98af709e0ace94d8b5545f1e41bfebd0bd85","modified":1471534432792},{"_id":"public/want-the-one/index.html","hash":"c61d7b84dc77a41c6a069174b5f24bdf0a0dfc48","modified":1471534432792},{"_id":"public/2014-plan/index.html","hash":"396b68359393c77463c8058e9f33bd5cbe7ea228","modified":1471534432795},{"_id":"public/our-programmer/index.html","hash":"fe5f7650d890cdc02fc5fbf32b965a9da4c1babc","modified":1471534432798},{"_id":"public/linux-openkeeper-netkeeper/index.html","hash":"cfe6413d03972fa3fa9eabc4fb1676773deff0d5","modified":1471534432796},{"_id":"public/linux-watch-network-speed/index.html","hash":"cf4f47ac06bfc0948e061e0f41b0d192ff471a38","modified":1471534432801},{"_id":"public/brute-force-linux-password/index.html","hash":"84b23c95d89866d0465a40135b791abb96fe4d8d","modified":1471534432799},{"_id":"public/install-linux-core/index.html","hash":"83cd8b56a4b391c272875b72a75c9d5ac9cb78eb","modified":1471534432799},{"_id":"public/linux-brute-force-rar-zip-7z/index.html","hash":"701ccaa0f812b0f7892b9f913e693c4be9ce294c","modified":1471534432798},{"_id":"public/ten-years-english-learning/index.html","hash":"4f4921ae3dd89e3f2ea305f4232aa7793bf10f07","modified":1471534432802},{"_id":"public/student-should-buy-genuine/index.html","hash":"d711923ffc446722439604a9b71b04f4e715f9e5","modified":1471534432802},{"_id":"public/two-years-coding-life/index.html","hash":"eba382aaf18187e47ab5100dd897d6da66cd601d","modified":1471534432802},{"_id":"public/to-entrance-examination-friends/index.html","hash":"d1967b96e0ce0fe4c4cfc67b0db36c2105925a55","modified":1471534432802},{"_id":"public/wait-until-today/index.html","hash":"120749a6d2077cc991ca945b7d5c711b6b8fabf1","modified":1471534432803},{"_id":"public/fate-is-her/index.html","hash":"4f38681691ea87e4ac0c21cee61d5e80a347bf0d","modified":1471534432803},{"_id":"public/my-game-life/index.html","hash":"6721e980336cdbf015beb6586dc07d0ab70fa14c","modified":1471534432806},{"_id":"public/write-to-girls/index.html","hash":"bbe3eededacfdb1d3918d09affb7605eb4e0ce64","modified":1471534432804},{"_id":"public/i-wait-you/index.html","hash":"9be6ab7277f6e185768edf786fde8a014ec378db","modified":1471534432806},{"_id":"public/do-not-know-why/index.html","hash":"2cc0f8dc3da24fc9514388cd492315aa0d939ce3","modified":1471534432808},{"_id":"public/write-poem/index.html","hash":"75a381e4fcf900cafd4e518a1adb16c70b327d74","modified":1471534432809},{"_id":"public/now-know/index.html","hash":"3a6117b0b520744e453f8dd9962de8d9ed09d278","modified":1471534432810},{"_id":"public/archives/index.html","hash":"8b3940f96a2a90c8d1df8180efe45055ecbade01","modified":1471263260408},{"_id":"public/archives/page/3/index.html","hash":"f03717128ec4ce2d189318a05b0740b7ceb02d54","modified":1471263260409},{"_id":"public/archives/page/2/index.html","hash":"eaa1d5e6f188cda7d1d18d6cf03bb12a38520581","modified":1471263260409},{"_id":"public/archives/page/4/index.html","hash":"160778cf8326672d122fb5e58bec206164846f9e","modified":1471263260409},{"_id":"public/archives/page/5/index.html","hash":"99bdc1d7adf2acd1bf7127d9a714905f9f73ea7d","modified":1471263260409},{"_id":"public/archives/page/7/index.html","hash":"074617dc2d446c314aa45fed6b68ff50dd94d51b","modified":1471263260410},{"_id":"public/archives/page/8/index.html","hash":"5d204108971c89bb371e2766bf2043a9f0934071","modified":1471263260409},{"_id":"public/archives/page/6/index.html","hash":"e8dd648f72702a35fb2c011f33cd0786752333e5","modified":1471263260409},{"_id":"public/archives/page/12/index.html","hash":"f552249c1d2b57a9e1059f87b82f8834b2ea7b93","modified":1471263260410},{"_id":"public/archives/page/9/index.html","hash":"adba6babc2c0cb125a6c7becb3e13c64c60b3f97","modified":1471263260410},{"_id":"public/archives/page/10/index.html","hash":"576e59602e531c209a2b7190f26474cb52e89415","modified":1471263260410},{"_id":"public/archives/page/11/index.html","hash":"8b553f9e534bbc2c5e28dcae904c43dcf7f7832a","modified":1471263260410},{"_id":"public/archives/page/13/index.html","hash":"741586841917faa618f791b72beb532ebad006f0","modified":1471263260410},{"_id":"public/archives/page/14/index.html","hash":"db1ba94bf6b1f7bf00d913e62761c15412ad8125","modified":1471263260410},{"_id":"public/archives/2009/index.html","hash":"368c46036a4c33b0a172a7da0099df88d61522fb","modified":1471263260385},{"_id":"public/archives/2010/index.html","hash":"617b5cae80fa3ab786f20557da0e424faa84016e","modified":1471263260386},{"_id":"public/archives/2010/08/index.html","hash":"3c120a1ea35dfc255ba3c3f1143e145ec90eb8b9","modified":1471263260387},{"_id":"public/archives/2010/07/index.html","hash":"6cb53266344301d4879d9218f99bcac0b3a3d783","modified":1471263260387},{"_id":"public/archives/2009/07/index.html","hash":"c49bae1c15eab18513e644fd32afa9857b66d969","modified":1471263260386},{"_id":"public/archives/2010/04/index.html","hash":"b9db14d45d40b177990cc2dd9ed7973ffcaed9e0","modified":1471263260387},{"_id":"public/archives/2011/index.html","hash":"af7b7ac62c148ad8c2bef4154ce0da930f8db3a3","modified":1471263260388},{"_id":"public/archives/2012/index.html","hash":"08bdb089f1a64ff6901a8f6cb43fb47fd467dc96","modified":1471263260388},{"_id":"public/archives/2011/03/index.html","hash":"21716a06b12fa62784cc499a42c7dbe13eb52012","modified":1471263260388},{"_id":"public/archives/2012/02/index.html","hash":"facba6b07a5075513a497a9ac2aa58058e93cd46","modified":1471263260388},{"_id":"public/archives/2013/index.html","hash":"3c090762753f4472d531261142d6a3d01f55513d","modified":1471263260388},{"_id":"public/archives/2012/06/index.html","hash":"e7bdac87b6da9a37d695334125b36a27a797704d","modified":1471263260388},{"_id":"public/archives/2013/06/index.html","hash":"ec05719c6f1f09e0960de196f47064d1d6c259b9","modified":1471263260388},{"_id":"public/archives/2013/09/index.html","hash":"7031da1978d36f227499cfe56a8829f6bbc81bc0","modified":1471263260388},{"_id":"public/archives/2013/12/index.html","hash":"44bc181ffd19d140c50d35f7c8dce599e1422d00","modified":1471263260388},{"_id":"public/archives/2014/index.html","hash":"e1b935a97a3be7c9ab33923eec3158d77d86b070","modified":1471263260410},{"_id":"public/archives/2014/page/2/index.html","hash":"3354d30cf50b98ce6386b9e904bc5c932010abe2","modified":1471263260410},{"_id":"public/archives/2014/page/3/index.html","hash":"4f608b95de7922011366efd167a911220fad0a95","modified":1471263260411},{"_id":"public/archives/2014/page/4/index.html","hash":"8a51355a8c7a5d21337ee1f4beda5f051bf10e90","modified":1471263260411},{"_id":"public/archives/2014/page/5/index.html","hash":"27e19f693827794d52ce3d338c033ffd373a1f03","modified":1471263260411},{"_id":"public/archives/2014/page/6/index.html","hash":"226eb543d52de73d7b6ba09260a5a473c1037ef7","modified":1471263260411},{"_id":"public/archives/2014/01/index.html","hash":"05a5048ddb907ed268168c3876e86b37df5e3ee8","modified":1471263260389},{"_id":"public/archives/2014/02/index.html","hash":"087ec3edefbb80f25591e8ba6db6b4cdb445020f","modified":1471263260391},{"_id":"public/archives/2014/page/7/index.html","hash":"7f1d5e2a091e4631ff765a3cd540e5c9f7e22844","modified":1471263260388},{"_id":"public/archives/2014/03/index.html","hash":"017ca49493fef98b895907c17dc447962fd94e8a","modified":1471263260392},{"_id":"public/archives/2014/05/index.html","hash":"0db607e36e89b073fed2a545f4e4278ef5725ad1","modified":1471263260411},{"_id":"public/archives/2014/04/index.html","hash":"0482317195f40fdc75dea82d086bfed6096cdd69","modified":1471263260393},{"_id":"public/archives/2014/06/index.html","hash":"4c61c52b82a06f4934b34715c6d2276f2866cdc0","modified":1471263260393},{"_id":"public/archives/2014/07/index.html","hash":"21dc0ee0cd8c73201ae8eb590b2792dd73c66e4b","modified":1471263260393},{"_id":"public/archives/2014/08/index.html","hash":"ddd1980247e78a53f0cad1812413c7f5e63a1606","modified":1471263260393},{"_id":"public/archives/2014/09/index.html","hash":"312841f4edb1d07ce9a3fa90b930b3b3acf4837f","modified":1471263260411},{"_id":"public/archives/2014/10/index.html","hash":"370e9e630e5aed4c7ef6de13eaedd20e57104e01","modified":1471263260411},{"_id":"public/archives/2014/11/index.html","hash":"5223d0b469ccab6119db9eb0104bafc430b63f15","modified":1471263260411},{"_id":"public/archives/2014/12/index.html","hash":"54b4e98982a76043f092abb68f72182b9acd576a","modified":1471263260393},{"_id":"public/archives/2014/11/page/2/index.html","hash":"2f008fa557b1d8c4d151a1bb9a1ed6cc906e6546","modified":1471263260394},{"_id":"public/archives/2015/index.html","hash":"e6170e267328d97bcac24ef99273455e791b4006","modified":1471263260411},{"_id":"public/archives/2015/page/2/index.html","hash":"1ce310fc4ab1275a3a019301772bf735a09d24b1","modified":1471263260412},{"_id":"public/archives/2015/page/3/index.html","hash":"f3082a80edfdab812228c03fdc3ba8f7da2a7fc1","modified":1471263260413},{"_id":"public/archives/2015/01/index.html","hash":"07fa78f619fa53eee2115b9a337eaeed552a429f","modified":1471263260394},{"_id":"public/archives/2015/page/4/index.html","hash":"5577e112415f610ff7a0a932162d5c5577bd20b1","modified":1471263260413},{"_id":"public/archives/2015/page/5/index.html","hash":"69f87aac2b956fb92675422ac37843085786642f","modified":1471263260394},{"_id":"public/archives/2015/03/index.html","hash":"1ae8c0c3b45dfaa4fab626c7b75c848d075dafe8","modified":1471263260394},{"_id":"public/archives/2015/02/index.html","hash":"4063bf8ed02c3ee7a5b8ed56f7e52e9bf2cfeeca","modified":1471263260394},{"_id":"public/archives/2015/04/index.html","hash":"bd16cd6712c5cd9b89f2f06aabd6deb95e77d99d","modified":1471263260413},{"_id":"public/archives/2015/05/index.html","hash":"bdb47d87891a0c3967b38cb176321172f46875ac","modified":1471263260413},{"_id":"public/archives/2015/07/index.html","hash":"727daae42d37a2ad5a8caadf123a271b3e696726","modified":1471263260394},{"_id":"public/archives/2016/index.html","hash":"6fa6688b5b731a0006ef7f4065a6b7aad01409f6","modified":1471263260414},{"_id":"public/archives/2015/11/index.html","hash":"7a4e6f317595f90d7d43149322785d7112ecb68c","modified":1471263260395},{"_id":"public/archives/2015/08/index.html","hash":"64f0d46b4d596bbdb05291f7982e528786064d59","modified":1471263260394},{"_id":"public/archives/2016/01/index.html","hash":"5dc2ab61f873b3841b79b49e842f547aa5d6e3ba","modified":1471263260395},{"_id":"public/archives/2016/page/2/index.html","hash":"5dd80d1f9780af4b1f921cad0dc269b40b17a53b","modified":1471263260414},{"_id":"public/archives/2015/12/index.html","hash":"57c1b462df8a0f2690fbfdfe4f4a89e6f1caa95f","modified":1471263260413},{"_id":"public/archives/2016/03/index.html","hash":"ca2dd0767d655dc7eba151ef822227d93a6b51c3","modified":1471263260396},{"_id":"public/archives/2016/04/index.html","hash":"7aa62a66207e8845728aaa425f0facc82c435423","modified":1471263260395},{"_id":"public/archives/2016/02/index.html","hash":"a45a846be584d48e27f51bdb9498e34f9f6ab48c","modified":1471263260395},{"_id":"public/archives/2016/06/index.html","hash":"e0332feabccffba1922a8952758221630589ff78","modified":1471263260396},{"_id":"public/archives/2016/05/index.html","hash":"782eb605365c777ed02653d9a5f44d8642c359a1","modified":1471263260395},{"_id":"public/categories/边走边想/index.html","hash":"fffb448854632b5fb7bfed798dfac5ae93747734","modified":1471263260414},{"_id":"public/archives/2016/07/index.html","hash":"88ba3a94eaf486b9d076cde594f946b8c91245f0","modified":1471263260396},{"_id":"public/categories/边走边想/page/2/index.html","hash":"cd608e7a3504c5e3f0c09a7b1a52567557b24b52","modified":1471263260414},{"_id":"public/categories/边走边想/page/3/index.html","hash":"5e96c01d9798a39c11a500f6b36e97265957432d","modified":1471263260397},{"_id":"public/categories/韦编三绝/index.html","hash":"432a2967c3ea2ccdcdad1e44038f27de2dd8cac9","modified":1471263260414},{"_id":"public/categories/编程之路/index.html","hash":"9bac0812ec487708493c7b4929092180d98ed005","modified":1471263260415},{"_id":"public/categories/韦编三绝/page/2/index.html","hash":"817de11d0295947e88b20d229a1e50d042124779","modified":1471263260414},{"_id":"public/categories/韦编三绝/page/4/index.html","hash":"a1f09fff797d597bca508f1abd4d291a0cc6f61a","modified":1471263260415},{"_id":"public/categories/韦编三绝/page/3/index.html","hash":"d5c6b96548aa90eecb5d739d985d1ecb0e1abced","modified":1471263260415},{"_id":"public/categories/编程之路/page/2/index.html","hash":"df4ec63cf65ae7dde8cc5b61eba307f69804e7ee","modified":1471263260415},{"_id":"public/categories/编程之路/page/3/index.html","hash":"96640a68de93f391fe3bc40a853ed562056321ba","modified":1471263260415},{"_id":"public/categories/编程之路/page/4/index.html","hash":"82b5be5765123817687ec1e85b551973bbcddca7","modified":1471263260416},{"_id":"public/categories/编程之路/page/5/index.html","hash":"f1d7603133acbc89d3e234b99838a83ee3817f32","modified":1471263260416},{"_id":"public/categories/编程之路/page/6/index.html","hash":"fb9a47a5d66b41e1294e89d53169a025f06cdae1","modified":1471263260416},{"_id":"public/categories/那时年少/index.html","hash":"3c3f13256bbefaa70094af7422218bd415e18999","modified":1471263260416},{"_id":"public/categories/就是爱玩/index.html","hash":"e965f069ff5ad20ef57d2d2ce3592f58f559e823","modified":1471263260397},{"_id":"public/categories/平凡之路/index.html","hash":"8b843d9be6d151bcfc46c64d8656604b5a733753","modified":1471263260397},{"_id":"public/terriable-lazy/index.html","hash":"22dff34c43609156414bc54159e5dd66fba0915a","modified":1471263260399},{"_id":"public/bye-myhome/index.html","hash":"806f14c60861932903e247f19b44f1b0baf8b033","modified":1471263260400},{"_id":"public/santi/index.html","hash":"27cd408005e4bfe76394cc9ec32754cb8f956cce","modified":1471263260400},{"_id":"public/my-university/index.html","hash":"3bc635d05244dc29bd323e5f0901867fda7f865b","modified":1471263260400},{"_id":"public/mysql-master-slave/index.html","hash":"5ff26b400a620e1b9d50c4869b853d9ae36f25bd","modified":1471263260408},{"_id":"public/design-pattern/index.html","hash":"85aed1ce2d462ed70c67f88bebabb25f50fbbb83","modified":1471534432575},{"_id":"public/raspberrypi/index.html","hash":"e0d9428f52151504fed106b8f0f3f77ce81a9588","modified":1471534432573},{"_id":"public/python-requests/index.html","hash":"42178299eac5069fa08a2e98116855f3a559cabf","modified":1471534432577},{"_id":"public/python-connect-mysql/index.html","hash":"be5f213900351a6dce83f7b01c40ded49d5e2605","modified":1471534432578},{"_id":"public/function-coding-coolshell/index.html","hash":"1f1543c4cc51b54c9a830457e92f70fdc42b1400","modified":1471534432583},{"_id":"public/apache-vs-nginx/index.html","hash":"f91a4fe20a4c7c906290daef83db38ee39067861","modified":1471534432584},{"_id":"public/laravel-container/index.html","hash":"18cd25fd8e4922ec0c28e865645bb59d56078853","modified":1471534432586},{"_id":"public/python-beautifulsoup-parse-html-xml/index.html","hash":"ef4dedeee1dc6e95c2fcd055d1806a4c0f9c9f21","modified":1471534432586},{"_id":"public/laravel-IoC-DI/index.html","hash":"9e7315a8678525ec71293b9c619b0fe034d654c3","modified":1471534432588},{"_id":"public/nidegudu,suibaiyourong/index.html","hash":"8ace4fbccb924a69f3ed0b10b375180c747aa79c","modified":1471534432699},{"_id":"public/chongxinrenshiniziji/index.html","hash":"ed633cceffa1eab3a08cf1df4e37f7595b1d529b","modified":1471534432589},{"_id":"public/nailiangluwan/index.html","hash":"47c73a98c0d7b1a082399d892700b8f2ce51fe69","modified":1471534432700},{"_id":"public/restful-api/index.html","hash":"ec777d871027e45461b0fafb0e479e1b8fd6f127","modified":1471534432700},{"_id":"public/zhihu/index.html","hash":"2ace0bf82605f65de79cfa85c0ee034d705ea12a","modified":1471534432702},{"_id":"public/the-difference-of-frame-and-framework/index.html","hash":"86794105d6feb826ec6af432ef2003f19cac9bf0","modified":1471534432703},{"_id":"public/regret-living-on-others-life/index.html","hash":"d11a78a4c3513c8286e6eb353f5c505cc8e2d3d7","modified":1471534432705},{"_id":"public/virtualenv-python-django/index.html","hash":"da1827bbd127ab4d86722dc2ec294a94e4177f90","modified":1471534432713},{"_id":"public/wutuobang/index.html","hash":"27e7eafaa6dd837612a3f8b54dffc387f25e11b1","modified":1471534432714},{"_id":"public/2014-the-last/index.html","hash":"1e9bf3333fc63dbbc82cd15c7cf4c56444bf7a02","modified":1471534432714},{"_id":"public/windows-install-vagrant/index.html","hash":"3113b8b48e8159c78ad63827810a24b19743404c","modified":1471534432714},{"_id":"public/license/index.html","hash":"94c332454b96e49ee081b4bfcc9ffba963c31ec5","modified":1471534432715},{"_id":"public/the-conclusion-of-the-first-project-of-studio/index.html","hash":"583a36122cefcd2a77778327d11be8b4751cfc28","modified":1471534432715},{"_id":"public/the-computer-knowledge-i-know/index.html","hash":"e772db220986de564d210ab463ed96af70fc1805","modified":1471534432719},{"_id":"public/bianchengzhuji-understand/index.html","hash":"4268bdb122db6bfc73e848c6f989692d7188584f","modified":1471534432761},{"_id":"public/bianchengzhuji/index.html","hash":"dd1957d749e25b8cd605122fd002c902908a47ca","modified":1471534432723},{"_id":"public/virtualbox-guest-host-share-file/index.html","hash":"069a71849d181f913c9e48f0d8598b5d115800a6","modified":1471534432728},{"_id":"public/nginx-multi-apache-load-balance/index.html","hash":"94921d4a7be8201c551b4ffdb5b5f0dc48886adb","modified":1471534432761},{"_id":"public/python-Chrome-QQ-album/index.html","hash":"0d7182e3de05885a779d8a5f91390c2e27354005","modified":1471534432763},{"_id":"public/to-the-future-of-me/index.html","hash":"18a5115ce855551aa1f7d6e49b7964f7d4e2b417","modified":1471534432765},{"_id":"public/nixidaxue/index.html","hash":"69b946e8c34f0dfef3618ef15a66ea4da95054ac","modified":1471534432765},{"_id":"public/python-Chrome-QQ-friends/index.html","hash":"2a45df4a5582fc86e4c66dc5ea8d0a9ed37d2be3","modified":1471534432766},{"_id":"public/Gitosis-Git/index.html","hash":"5db4bc36d36145a3812031c91fd2e6dc6d8c79f1","modified":1471534432766},{"_id":"public/windows-wamp-install-laravel/index.html","hash":"d48b2f4e7fb8364ea7087ab3faf675d3b2d09f40","modified":1471534432768},{"_id":"public/chengxuyuandefendoushi/index.html","hash":"ba4ebf84517db6ddfa630cc89dcf0daae15d211c","modified":1471534432767},{"_id":"public/eclipse-git-coding-net/index.html","hash":"8a73aa7793ff56421bd636b6393b9b9c2f6363e6","modified":1471534432768},{"_id":"public/hacker-and-painter/index.html","hash":"74d166619aa81dd01b9edbf90bb987f17dd14c18","modified":1471534432769},{"_id":"public/the-future-of-coding/index.html","hash":"5b8c35b7ae9cfd798a1380585a49d0a59695381c","modified":1471534432769},{"_id":"public/manmanlai/index.html","hash":"e12a01f9f739dcecdfdaf938853f3121e3ca9a3a","modified":1471534432770},{"_id":"public/python-eric-pyqt/index.html","hash":"bd76f94503461253bf0293d3fba914e0c8fcc3ac","modified":1471534432770},{"_id":"public/haizeiwangjiaohuiwode/index.html","hash":"a0c31913032387abff54ef6541f864be7d675ae5","modified":1471534432771},{"_id":"public/nothing-is-anything/index.html","hash":"69a69b1677308115a4ee86afcdd110344d8a3f63","modified":1471534432772},{"_id":"public/give-up-halfway/index.html","hash":"d8a299fd768bf0ea7a2e6c58c65f35356419c6ed","modified":1471534432773},{"_id":"public/chengxuyuanfaze/index.html","hash":"d8f3e214d05c19b55313fb627fde5da809def9bb","modified":1471534432780},{"_id":"public/wukongzhuan/index.html","hash":"eb5b935f468d1b1ad8643d2ef24979b81ac7e37b","modified":1471534432776},{"_id":"public/C-and-pointer_2/index.html","hash":"c6fb851f89337b1588120fd90d2fe208cad72afe","modified":1471534432783},{"_id":"public/C-and-pointer_1/index.html","hash":"f4bfcd19b9e6b5e20319f5ed4c87a802ece33ce5","modified":1471534432785},{"_id":"public/chaijing-look/index.html","hash":"16cda081b39566d836583fe22933ff2bb9fa1de2","modified":1471534432792},{"_id":"public/whose-youth-is-not-confused/index.html","hash":"11e8379cfe596778ef2178a152595f9eeb94c56f","modified":1471534432793},{"_id":"public/goodbye-xp/index.html","hash":"d028ee5b6a687f4fa9ebf84a5be39486e6ad9fe5","modified":1471534432793},{"_id":"public/hdu-4267/index.html","hash":"4e9005a55eb00461d6ec1bf75a417ee0b32faeca","modified":1471534432793},{"_id":"public/believing-the-meaning-of-hard-work/index.html","hash":"bb5ccc21be65a7847d5d6a350d10beb3668ff2fa","modified":1471534432800},{"_id":"public/college-entrance-examination-will-deciding/index.html","hash":"978ade1835766033af70b9048b89d3019a6ae602","modified":1471534432802},{"_id":"public/that-year-dream/index.html","hash":"91e4803604b6ba835caa28d40c15ebcc79f211a1","modified":1471534432802},{"_id":"public/index.html","hash":"560725be16b15f8c083a7262e70e1a729b51c2cd","modified":1471263260417},{"_id":"public/page/3/index.html","hash":"7662b54b6b5ae15b4bb46784de92cd53d763a567","modified":1471263260417},{"_id":"public/page/4/index.html","hash":"10d743e320a49fc1a262b9779f980798728d0152","modified":1471263260417},{"_id":"public/page/2/index.html","hash":"7be6899ede866c8fbf037652e92399393a52e4fc","modified":1471263260417},{"_id":"public/page/5/index.html","hash":"e9469b1e1d3997478a6251431238a9abe7854ee0","modified":1471263260418},{"_id":"public/page/6/index.html","hash":"138d8c009b7b17f231217e36613c8e25667ffbcf","modified":1471263260418},{"_id":"public/page/7/index.html","hash":"05404ce5e1e0f5149b70597feb682b18b770deb0","modified":1471263260418},{"_id":"public/page/8/index.html","hash":"985771bdf50d758c5f499eb92e46544a8bfe7bc9","modified":1471263260418},{"_id":"public/page/9/index.html","hash":"ddbc892de693dec24a8551d7817779af0667c07c","modified":1471263260418},{"_id":"public/page/10/index.html","hash":"50a969e651aed5c0e554d8951dcd0ef53cf58b19","modified":1471263260418},{"_id":"public/page/11/index.html","hash":"bb72e20c3268e3981b6f4458952e73864cf7f2e6","modified":1471263260419},{"_id":"public/page/12/index.html","hash":"f37f63fca4ca3e165952b4b1800ec32b47f4a37e","modified":1471263260419},{"_id":"public/page/13/index.html","hash":"e6e777a5bdd04c893df5a10cd89c10f6ecf98c67","modified":1471263260419},{"_id":"public/page/14/index.html","hash":"7029289e6ab7e450b52c78a9aae063fce825bf10","modified":1471263260419},{"_id":"public/google502075e2e0f9c6f7.html","hash":"5d3d242ef87fc173f0c9b2f1741be9ddfd2c88d6","modified":1469544884671},{"_id":"public/favorites.html","hash":"27d95cb1fb1a21f4dc8fb8809556cb22a974bf40","modified":1471261547265},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469544884671},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469544884671},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469544884672},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469544884672},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469544884672},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469544884672},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1469544884672},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1469544884672},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1469544884672},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469544884714},{"_id":"public/css/style.css","hash":"c11dd033e33b758d4b04449a014a4b5bcb6ccca3","modified":1469544889928},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1469544889928},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1469544889937},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1469544889937},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469544889937},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1469544889937},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1469544889937},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1469544889937},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469544889937},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1469544889937},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1469544889937},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1469544890350},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1469544890350},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1469546740000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1469546740000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1469546740000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1469546740000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1469546740000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1469546740000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1469546740000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1469546740000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1469546740000},{"_id":"themes/next/_config.yml","hash":"cd86d9b0508758549d93b5b662bd849951449dae","modified":1471263697000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1469546741000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1469546740000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1469546740000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469546693000},{"_id":"themes/next/.git/index","hash":"b57540d0002bfe31ec6e40cef7c666b044425325","modified":1469549722000},{"_id":"themes/next/.git/config","hash":"fec75e77ab11fa87793dc28c26e24a3cd9688854","modified":1469546740000},{"_id":"themes/next/.git/packed-refs","hash":"4466857f1a41f86e8a1c29bc9088bff54a5c90d1","modified":1469546740000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1469546740000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1469546740000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1469546741000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1469546741000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1469546741000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1469546741000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1469546741000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1469546741000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1469546741000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1469546741000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1469546740000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1469546740000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1469546740000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1469546740000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1469546740000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1469546740000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1469546740000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1469546741000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"fd11e365da35b19d54e1ffb5c1d27b0d9c954732","modified":1469547937000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1469546741000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1469546741000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1469546741000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469546742000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469546742000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469546742000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1469546693000},{"_id":"themes/next/.git/logs/HEAD","hash":"36c334d403dff1a444b8ec580e8e97fc1d1eae80","modified":1469546740000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469546693000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469546693000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1469546693000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469546693000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1469546693000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1469546693000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1469546693000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1469546693000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469546693000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1469546741000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469546741000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1469546741000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1469546741000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1469546741000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1469546741000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1469546741000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469546741000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469546741000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1469546741000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1469546741000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469546741000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1469546741000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1469546741000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1469546741000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1469546741000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1469546741000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469546741000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1469546741000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469546741000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469546741000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469546741000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469546741000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469546741000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469546741000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469546741000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469546741000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469546741000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469546741000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469546741000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469546741000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469546741000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469546741000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469546741000},{"_id":"themes/next/.git/refs/heads/master","hash":"4ad994fe133b79fa089d49b7a6e68860bbc420e5","modified":1469546740000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469546741000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1469546741000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1469546741000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469546741000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469546741000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469546741000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1469546741000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1469546741000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469546741000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1469546741000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469546741000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469546741000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469546741000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469546741000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469546741000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469546741000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469546741000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1469546741000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1469546741000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469546741000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469546741000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1469546741000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1469546741000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1469546741000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1469546741000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469546741000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469546741000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469546741000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1469546741000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1469546741000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469546742000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469546742000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469546742000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1469546741000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469546740000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"36c334d403dff1a444b8ec580e8e97fc1d1eae80","modified":1469546740000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1469546741000},{"_id":"themes/next/.git/objects/pack/pack-345898870d8b68e4ebed84c3d3465fdb56659266.idx","hash":"3f3afc731c20d6e8f4fe27d8c291ba087071b9e7","modified":1469546740000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1469546741000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469546741000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469546741000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469546741000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1469546741000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469546741000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1469546741000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1469546741000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469546741000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469546741000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469546741000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469546741000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469546741000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469546741000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"36c334d403dff1a444b8ec580e8e97fc1d1eae80","modified":1469546740000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1469546741000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469546741000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469546741000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469546741000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469546741000},{"_id":"themes/next/.git/objects/pack/pack-345898870d8b68e4ebed84c3d3465fdb56659266.pack","hash":"079353d29b7b69e6f5b0774354c03f580d86794e","modified":1469546740000},{"_id":"themes/next/._config.yml.swp","hash":"397e9308916a578be2f04e57a456dc904704e582","modified":1469549132000},{"_id":"themes/next/languages/.zh-Hans.yml.swp","hash":"9478e0367d59f5bbbf85e9c1faf91d083cd74f50","modified":1469547962000},{"_id":"source/uploads/avatar.png","hash":"389272571f1f51c14535f18895e41f121a99f3c1","modified":1469548514000},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469549553484},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469549553485},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469549553486},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469549553486},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469549553486},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469549553486},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469549553486},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469549553486},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469549553486},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469549553487},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469549553487},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469549553487},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469549553487},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469549553487},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469549553487},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469549553488},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469549553488},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469549553488},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469549553488},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469549553488},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469549553488},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469549553494},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469549553494},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469549553494},{"_id":"public/uploads/avatar.png","hash":"389272571f1f51c14535f18895e41f121a99f3c1","modified":1469549553495},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469549557097},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469549557098},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469549557102},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469549557103},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469549557103},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469549557104},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469549557104},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1469549557104},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1469549557104},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1469549557104},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1469549557105},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469549557105},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1469549557106},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1469549557106},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469549557106},{"_id":"public/css/main.css","hash":"98837d0964ec3ace02a14b598e2a35651d36a9e0","modified":1469549557106},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469549557106},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469549557106},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469549557106},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469549557107},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469549557107},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469549557107},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469549557143},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469549557144},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1469549557144},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469549557144},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469549557144},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469549557145},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469549557145},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469549557146},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469549557147},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469549557147},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469549557167},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469549557167},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469549557168},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469549557168},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469549557168},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469549557168},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469549557169},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1469549557169},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469549557170},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469549557352},{"_id":"source/_posts/kanbokederendouxiangyaoganhuo.md","hash":"29ff05a51a24e48fd4ad13933e1d65e4c47144ab","modified":1470575249000},{"_id":"public/kanbokederendouxiangyaoganhuo/index.html","hash":"191620fa994b93bfb6e6504f3367355c3009e075","modified":1471263260398},{"_id":"public/archives/page/15/index.html","hash":"fde891d969c337d1d8f2de11c962e6c441faa2a3","modified":1471263260344},{"_id":"public/archives/2016/08/index.html","hash":"8fda04acb32db895768113e7cdd96ef2055795c7","modified":1471263260396},{"_id":"public/page/15/index.html","hash":"a015c0cbc7d632990281ad6d928f3bf237393d0a","modified":1471263260398},{"_id":"public/编程之路/renshegnyuanbiancheng/index.html","hash":"87b3cb2683c5a13f6e8220a627fdb17bfb3e1b20","modified":1471263043841},{"_id":"public/韦编三绝/bashijiandangzuopengyou/index.html","hash":"63b17406bac83ceb3e53b1b82bd864eca4fed973","modified":1471263043842},{"_id":"public/韦编三绝/woyiranainiwozhishibuxihuannile/index.html","hash":"be817e00105bdf5f03e41b387e80315f9a881e9c","modified":1471263043843},{"_id":"public/韦编三绝/anshijian/index.html","hash":"6f0486e63fa6e4c57159a63915505e67e17632a9","modified":1471263043843},{"_id":"public/编程之路/tornado-asynchronous/index.html","hash":"bd36a18bbf4fb04b649466812279b85ca7515673","modified":1471263043843},{"_id":"public/韦编三绝/bashengminglangfeizaimeihaodeshiwushang/index.html","hash":"6e8c894901ac075bdf8a7a11f3ef5d9bd72bee0d","modified":1471263043844},{"_id":"public/边走边想/terriable-lazy/index.html","hash":"acb65f3afb44477b82f74f4e84e4471ce8c879ff","modified":1471263043844},{"_id":"public/编程之路/web-application-scenarios/index.html","hash":"20080c716cb299a4f903d0f7f8cb2fbabf738604","modified":1471263043844},{"_id":"public/编程之路/mysql-multi-instance/index.html","hash":"85f057cc2d876e3b05ba282db27b54dcfd9f34a2","modified":1471263043844},{"_id":"public/边走边想/bye-myhome/index.html","hash":"37c04365d8824ed589ffe3cbd866e626faba0f95","modified":1471263043845},{"_id":"public/韦编三绝/santi/index.html","hash":"010524a01105b9d95f2f117c69782f3d5f208368","modified":1471263043845},{"_id":"public/边走边想/my-university/index.html","hash":"2902a871b532b572ef52ae1da19bb13fccb1ac6f","modified":1471263043845},{"_id":"public/韦编三绝/dongwuzhuangyuan/index.html","hash":"5b11e9550acd2db5af3ef585bc0b392a4c78bf5e","modified":1471263043845},{"_id":"public/边走边想/maitianshouwangzhe/index.html","hash":"f28f2b169421ea6bc97fad270744258f1ddfc19a","modified":1471263043846},{"_id":"public/编程之路/mysql-update/index.html","hash":"f8609c4f9e5c1952f7696a1cdb2cffd416704854","modified":1471263043846},{"_id":"public/编程之路/mysql-master-slave/index.html","hash":"3d872312e9cd018a186939b24e3400876101f1e0","modified":1471263043846},{"_id":"public/编程之路/python-multithreading-multiprocess/index.html","hash":"35aa394d0e68278fa1cf4c0d65e10b689a40ee53","modified":1471263043847},{"_id":"public/编程之路/mysql-migration/index.html","hash":"e2efb595027874966c4a7e69b7a7e2a8e04e2bee","modified":1471263044019},{"_id":"public/编程之路/design-pattern/index.html","hash":"138354cb996b0283d650d11565201d843f035246","modified":1471263044019},{"_id":"public/编程之路/oauth-and-sso/index.html","hash":"4cdd361fdc3eb15caee6c21117b859dd658dc90e","modified":1471263044019},{"_id":"public/编程之路/kanbokederendouxiangyaoganhuo/index.html","hash":"f458e23df85c2989863c3246aae3fca6df82382a","modified":1471263044020},{"_id":"public/就是爱玩/raspberrypi/index.html","hash":"e2448bc62f86b3eba7819c8d343f4876d4eae819","modified":1471263044020},{"_id":"public/编程之路/database-application-scenarios/index.html","hash":"87b589cc6c1d9c4b93715b8d6fe0e33ad79f416b","modified":1471263044020},{"_id":"public/编程之路/python-requests/index.html","hash":"419234b4c2f7498abb51180ef7589bff31d5c476","modified":1471263044021},{"_id":"public/编程之路/internal-network-penetration/index.html","hash":"0a97b5608bd6838b015dfe811f50ab78a8522c95","modified":1471263044021},{"_id":"public/编程之路/blog-revision/index.html","hash":"cb863ded70f514a96bebd433817092ddb9a546d7","modified":1471263044021},{"_id":"public/编程之路/python-connect-mysql/index.html","hash":"3e61c8c671c8d1c2fe55b5fbf128366ce389454b","modified":1471263044024},{"_id":"public/编程之路/supervisor-manage-processor/index.html","hash":"ba99b41d38e07caf1ce37a7d911a1f8c06475019","modified":1471263044032},{"_id":"public/编程之路/ssl-jks-to-pem/index.html","hash":"3ac8931b2e94e2e1a2638268d31537f28610893b","modified":1471263044035},{"_id":"public/韦编三绝/function-coding-coolshell/index.html","hash":"226c5b2073f1156070d4c678a3c99621cde08912","modified":1471263044035},{"_id":"public/编程之路/apache-vs-nginx/index.html","hash":"2b575ba582fef42df5b8a0f5f5dce374cd5725f9","modified":1471263044036},{"_id":"public/编程之路/pdb-\tdebug-python/index.html","hash":"33c86f173272bd5a81100ea2a5a2922969d8a2d0","modified":1471263044036},{"_id":"public/韦编三绝/laravel-container/index.html","hash":"6b65da73f4eaf28ff3e9797c52a0613c03982ff3","modified":1471263044037},{"_id":"public/边走边想/the-end-of-junior/index.html","hash":"a4af91ca737be9dcadae8fa5d20ad00a48eb0303","modified":1471263044037},{"_id":"public/编程之路/python-use-redis/index.html","hash":"8f9a282e19f8c878f088710387b724fe543f4f5c","modified":1471263044037},{"_id":"public/编程之路/python-beautifulsoup-parse-html-xml/index.html","hash":"f84fe97144d3711275147d3bc662306c14f29812","modified":1471263044038},{"_id":"public/编程之路/laravel-IoC-DI/index.html","hash":"4b2664cbf9b9a375cb5eb47b4fc7d65632af01d3","modified":1471263044038},{"_id":"public/就是爱玩/vps-nginx-reverse-proxy/index.html","hash":"2f75b555c7822ef8e9ad03a645eb7f9b7d6106e1","modified":1471263044038},{"_id":"public/韦编三绝/tiancaizaizuo,fengzizaiyou/index.html","hash":"6858c379eddba2f5222870e361a3511d5be3d48b","modified":1471263044038},{"_id":"public/韦编三绝/chengxuyuanjiankangzhinan/index.html","hash":"4dfdf8d01a626684de9f699d9c23b1820e871332","modified":1471263044038},{"_id":"public/韦编三绝/nidegudu,suibaiyourong/index.html","hash":"76865a549b811387c1277f5e13bd023cb1817c1e","modified":1471263044038},{"_id":"public/韦编三绝/chongxinrenshiniziji/index.html","hash":"df877a171a5df12edac25286d43a4288bfe53d2b","modified":1471263044038},{"_id":"public/韦编三绝/langchaozhidian/index.html","hash":"eb2ced5692a72df083debdfd9d548a7f66138521","modified":1471263044038},{"_id":"public/韦编三绝/nailiangluwan/index.html","hash":"5931af9c681486f65ff6db6e2be76d5b50ff8858","modified":1471263044038},{"_id":"public/编程之路/restful-api/index.html","hash":"0fac2b34a8efb9a5bc005e45a59ca9d5f1fc3461","modified":1471263044039},{"_id":"public/编程之路/python-encode-decode/index.html","hash":"0dafab5b12103bcd1dad8fbd3fd053137c836382","modified":1471263044039},{"_id":"public/边走边想/programmer-internal-strength/index.html","hash":"69f2be7bbe23595e752100ce9be9c0df61336a75","modified":1471263044039},{"_id":"public/编程之路/zhihu/index.html","hash":"ffe4d17bf4311df45e4ddf2b904e48ec69164dca","modified":1471263044039},{"_id":"public/编程之路/python-encoding-specification/index.html","hash":"8dfc0d73f666e770e8a7c5383296121983e7f897","modified":1471263044039},{"_id":"public/编程之路/the-difference-of-frame-and-framework/index.html","hash":"6af65c07c6fa53bb04c47acd25f68afd040a9ab6","modified":1471263044039},{"_id":"public/编程之路/github-set-webhook/index.html","hash":"cfec27065a18063a57050ad5ac6902254ed25dbf","modified":1471263044039},{"_id":"public/边走边想/regret-living-on-others-life/index.html","hash":"10cb2289c75ba5620507775e93e37e9ef076b567","modified":1471263044039},{"_id":"public/边走边想/weibo/index.html","hash":"f0cf16328bc8f8e877f92392a56187d53ad4e070","modified":1471263044039},{"_id":"public/韦编三绝/hulianwangshidai/index.html","hash":"2102fdf0aee5bef5d870bf65d3f12b4cc6b91e48","modified":1471263044039},{"_id":"public/边走边想/the-most-bad-man-is-who-think-to-do-the-good-thing/index.html","hash":"6dbd6cf8cac3898abb3c32ac172af7e9fc92a962","modified":1471263044039},{"_id":"public/边走边想/the-plan-of-2015/index.html","hash":"592df429cd9e944f9816743178abf4c3d75b801a","modified":1471263044039},{"_id":"public/平凡之路/run-for-fun/index.html","hash":"1d462489f84e9279b7bd575799ab1604f291821c","modified":1471263044039},{"_id":"public/编程之路/mysql-optimization/index.html","hash":"316647b93e148bffe2f9952d420d7572f8e076bf","modified":1471263044040},{"_id":"public/编程之路/virtualenv-python-django/index.html","hash":"537ce8b16ae51620d1a167efe53f461647e98f90","modified":1471263044040},{"_id":"public/边走边想/escape_class/index.html","hash":"72f55297365c0ab56b56fffda9df006f21361af0","modified":1471263044040},{"_id":"public/韦编三绝/wutuobang/index.html","hash":"d79047711535544f022194fc7d8d05778eb4e0d4","modified":1471263044040},{"_id":"public/边走边想/2014-the-last/index.html","hash":"988d2671d18ce978b4f1cd673577709f1df3979f","modified":1471263044040},{"_id":"public/编程之路/windows-install-vagrant/index.html","hash":"4a54eb9ec4cc9e5a93453d7e8c45ae9e847533fc","modified":1471263044040},{"_id":"public/编程之路/web-status-code/index.html","hash":"ce16954a5d8df15c371d465f0c8b9a9a83a81c92","modified":1471263044040},{"_id":"public/编程之路/license/index.html","hash":"7112009272103e31cf3a14fff8c58448fbb746d8","modified":1471263044040},{"_id":"public/边走边想/the-conclusion-of-the-first-project-of-studio/index.html","hash":"20b851bdbc162eb45f3565adc8309792b66abd5c","modified":1471263044040},{"_id":"public/编程之路/unitedstack-database-remote-login/index.html","hash":"309ac9cf1f5dff0002ea4a18bdc11bcc1ef08854","modified":1471263044040},{"_id":"public/编程之路/mysql-source-messy-code/index.html","hash":"95263fac0384146fa18d0ae567c27ee3635160fc","modified":1471263044041},{"_id":"public/编程之路/ubuntu-install-phpmyadmin/index.html","hash":"6e4fea11a329ad36a20c739dd873716afad97c7d","modified":1471263044041},{"_id":"public/边走边想/the-computer-knowledge-i-know/index.html","hash":"cf6a8e62146411da2334aa9b7f1d2719bd69793f","modified":1471263044041},{"_id":"public/编程之路/mysql-logical-backup/index.html","hash":"3f0185e615995dcd1c7665be545aef76457a858f","modified":1471263044041},{"_id":"public/编程之路/mysql-cold-backup/index.html","hash":"efc49c3cc26bc5df9b9d814fffaa29d356f28b30","modified":1471263044041},{"_id":"public/编程之路/sysbench-effiency-test/index.html","hash":"64c12b24ce33c264fcf5b2688d2a42e00f0f959a","modified":1471263044041},{"_id":"public/编程之路/compare-of-MyISAM-and-InnoDB/index.html","hash":"371f33b9e6ce01df6ea543be07965d34a351c8c1","modified":1471263044041},{"_id":"public/韦编三绝/mysql-guanlizhidao/index.html","hash":"f7dddd1df920cfe9d2829eea7e18a8aab9cd3255","modified":1471263044041},{"_id":"public/韦编三绝/bianchengzhuji-understand/index.html","hash":"66cd663700862af196d3e08917bd895c88fe9ff4","modified":1471263044041},{"_id":"public/韦编三绝/bianchengzhuji/index.html","hash":"bd5ef036910a7635b164e89e399f59f34ce7c40d","modified":1471263044041},{"_id":"public/就是爱玩/modify-u-disk-logo/index.html","hash":"3aded7c1adbcbdb78259b0821dbede9884a15649","modified":1471263044042},{"_id":"public/编程之路/virtualbox-guest-host-share-file/index.html","hash":"d76dab77130d31b3fa86560f644673d6ae5de06c","modified":1471263044042},{"_id":"public/编程之路/python-execute-pythonfile-effiency/index.html","hash":"76740c7f1373d1d625cffae9dc26595163d81815","modified":1471263044042},{"_id":"public/编程之路/nginx-multi-apache-load-balance/index.html","hash":"aad29c3e18a53752a2ae1e91777379a2685c2028","modified":1471263044042},{"_id":"public/编程之路/mysql-design-tips/index.html","hash":"9e57ed01ac99e42713b18d74cf308f96f007e7e5","modified":1471263044042},{"_id":"public/韦编三绝/yundianzhishang/index.html","hash":"c774416ba523ef2f5bde616cf3cf962265502d0a","modified":1471263044042},{"_id":"public/韦编三绝/kanaiji/index.html","hash":"9d5875f2d2cb02954578cb484a30185e121f1d25","modified":1471263044042},{"_id":"public/边走边想/to-the-future-of-me/index.html","hash":"ce88d534b2d22f520463c74e369b2b2323d4f6af","modified":1471263044042},{"_id":"public/韦编三绝/nixidaxue/index.html","hash":"6a26ae9f6deb4034741dff8e06ed2c165048dab6","modified":1471263044042},{"_id":"public/就是爱玩/python-Chrome-QQ-friends/index.html","hash":"3cbc14b56a7394ce84e49e2c60ce340bed713357","modified":1471263044042},{"_id":"public/编程之路/Gitosis-Git/index.html","hash":"0bb88f0b6e8e9a379f8f8ee9f9d470259aca6405","modified":1471263044042},{"_id":"public/编程之路/windows-wamp-install-laravel/index.html","hash":"d4cabbab299be1011b336111278aabd13e379596","modified":1471263044043},{"_id":"public/编程之路/putty-ssh-connection-refused/index.html","hash":"e1491eee2f742ede833a9fcaef65aa22c4b62db6","modified":1471263044043},{"_id":"public/韦编三绝/chengxuyuandefendoushi/index.html","hash":"3998a96c301c8927cfff9631f3813d0fafa51c5b","modified":1471263044043},{"_id":"public/编程之路/eclipse-git-coding-net/index.html","hash":"12176bcc33e5d3bf1119372079765af0ea0f5667","modified":1471263044043},{"_id":"public/韦编三绝/hacker-and-painter/index.html","hash":"5b146140546fb63dc3cf09f7a29ea9c5499bdb8c","modified":1471263044043},{"_id":"public/韦编三绝/the-future-of-coding/index.html","hash":"20fcafcfb0936f1d4d7608164d7ff26f8ae5c4fd","modified":1471263044043},{"_id":"public/编程之路/wordpress-qiniu/index.html","hash":"2a6cfa9cfe3e678e7113fd3f505c26e1fa9364f9","modified":1471263044043},{"_id":"public/韦编三绝/inspirational-video/index.html","hash":"619c5ba5ed9f7c4972b85ad053de001849993116","modified":1471263044043},{"_id":"public/韦编三绝/manmanlai/index.html","hash":"3f539c3840b4fc14f7646c0e46c450f0aa746bdf","modified":1471263044044},{"_id":"public/韦编三绝/xiyouriji/index.html","hash":"d5e1cfb41faba1815f76c6babaede9bcab92584c","modified":1471263044044},{"_id":"public/编程之路/python-eric-pyqt/index.html","hash":"f76a4587177041a294f7d8c073288316e4424e71","modified":1471263044044},{"_id":"public/韦编三绝/haizeiwangjiaohuiwode/index.html","hash":"70707bd0ed234dd01b3eac09d508c9225cb9ed65","modified":1471263044044},{"_id":"public/韦编三绝/nothing-is-anything/index.html","hash":"3e00c307608b99ae56d8aef38f4ee3ec946e59ae","modified":1471263044044},{"_id":"public/边走边想/give-up-halfway/index.html","hash":"a92eab5c49b40463a2c304d70a52f43a32043dbf","modified":1471263044044},{"_id":"public/韦编三绝/chengxuyuanfaze/index.html","hash":"38e0d5f79981c595145acda8c8d32574364b6d9d","modified":1471263044044},{"_id":"public/边走边想/a-low-key-life/index.html","hash":"d12e6701b5eebc89f28f08c809e745f8874196b7","modified":1471263044044},{"_id":"public/韦编三绝/wukongzhuan/index.html","hash":"217ab90115d8c484da766a90f8c6b305a53997b4","modified":1471263044045},{"_id":"public/编程之路/linux-goa gent-chrome/index.html","hash":"039c6577ec0cc51b630d97f55d1870988a6a4b29","modified":1471263044045},{"_id":"public/韦编三绝/C-and-pointer_2/index.html","hash":"e70f38176322b48d1ee1556d7d3eacfbe175860b","modified":1471263044045},{"_id":"public/韦编三绝/C-and-pointer_1/index.html","hash":"459a045a23c266159ce9540ead7cc2a6715a1297","modified":1471263044045},{"_id":"public/韦编三绝/C-and-pointer_0/index.html","hash":"661b0f2bf3418e3f68f1792ab4baf4e241187281","modified":1471263044046},{"_id":"public/编程之路/front-end/index.html","hash":"57227d88a8e4741ce1b54ed038629aea10aa39e2","modified":1471263044046},{"_id":"public/编程之路/python-configparser/index.html","hash":"f2b57e7335e4bbfa89231d16512d116e6cdd11fe","modified":1471263044046},{"_id":"public/边走边想/busy-april/index.html","hash":"b8686074dfa7af74cf0c1b64c87e9c12c2d64ad9","modified":1471263044046},{"_id":"public/那时年少/want-the-one/index.html","hash":"bcd8131256b6ff28d760858d462e22f4262d6442","modified":1471263044046},{"_id":"public/韦编三绝/whose-youth-is-not-confused/index.html","hash":"26a176f29ccf5ae138e5cfa1666601779e847a86","modified":1471263044046},{"_id":"public/边走边想/goodbye-xp/index.html","hash":"afa6303394877659a8067fb88592e276e0c052be","modified":1471263044046},{"_id":"public/编程之路/hdu-4267/index.html","hash":"31bad9842a660fa01af5d9302b882aac44e79f46","modified":1471263044046},{"_id":"public/边走边想/2014-plan/index.html","hash":"13dcd9d8e6afab795563994d8ade68a5c7eadebe","modified":1471263044046},{"_id":"public/编程之路/linux-openkeeper-netkeeper/index.html","hash":"c86f20edf05faf024c5a60fd568377b455f66d54","modified":1471263044046},{"_id":"public/边走边想/our-programmer/index.html","hash":"252f388af61ec02513576f1fa2e89feab1c73041","modified":1471263044046},{"_id":"public/编程之路/linux-brute-force-rar-zip-7z/index.html","hash":"2fc203f472471609642d8d6ad7916a3c915bf930","modified":1471263044047},{"_id":"public/编程之路/linux-watch-network-speed/index.html","hash":"4d864b8f35a7a0bf5324fa705ffa30e2cc484e5b","modified":1471263044047},{"_id":"public/编程之路/brute-force-linux-password/index.html","hash":"29d1c05d2d547570a4adf9c5e321bfc8e1f6d029","modified":1471263044047},{"_id":"public/编程之路/install-linux-core/index.html","hash":"99f0c1320248e404733bfc8c0e6c733fbdbd1cac","modified":1471263044047},{"_id":"public/韦编三绝/believing-the-meaning-of-hard-work/index.html","hash":"642292d24c1cafcb400f135438ff81db849f2f18","modified":1471263044047},{"_id":"public/边走边想/ten-years-english-learning/index.html","hash":"e65b92434accabe927445d5fa931de507dca8d42","modified":1471263044047},{"_id":"public/边走边想/student-should-buy-genuine/index.html","hash":"cc70f417f26687b73e8a7879b3f665ed88ed66f5","modified":1471263044047},{"_id":"public/边走边想/two-years-coding-life/index.html","hash":"a7466403ae0e584c7732d11c262cad838bd5e426","modified":1471263044047},{"_id":"public/边走边想/college-entrance-examination-will-deciding/index.html","hash":"6ad3543cdf0382b5086ebc1a74f393e2d5b62706","modified":1471263044048},{"_id":"public/边走边想/to-entrance-examination-friends/index.html","hash":"25eae1af4dc7033664322ec3dddaee1c9d6d4c41","modified":1471263044048},{"_id":"public/边走边想/that-year-dream/index.html","hash":"51d3962a81db2e72e90cafbac75c1546d75bcdfd","modified":1471263044048},{"_id":"public/那时年少/wait-until-today/index.html","hash":"17835a22e818e526b1a99dd9778f9c6f32666b29","modified":1471263044048},{"_id":"public/那时年少/fate-is-her/index.html","hash":"058d57f3f4fc115571303c4f0b3b5f24368eafd5","modified":1471263044048},{"_id":"public/那时年少/my-game-life/index.html","hash":"6c2ecf1f88462f63faa809d2211b2f29ef0d251c","modified":1471263044049},{"_id":"public/那时年少/write-to-girls/index.html","hash":"3cd9a00ef93cd08f4a78fac6e17d08017de6ab95","modified":1471263044049},{"_id":"public/那时年少/i-wait-you/index.html","hash":"5d10cf5c2ef0cab6504e2e8488ae9b95adc148d2","modified":1471263044049},{"_id":"public/那时年少/do-not-know-why/index.html","hash":"3b3da987c83c83204eabeca37f6bbf3464e621b7","modified":1471263044049},{"_id":"public/那时年少/write-poem/index.html","hash":"03f8f5180b4cc7aa36eea73d8c544a823e5f68ea","modified":1471263044049},{"_id":"public/那时年少/now-know/index.html","hash":"9a72b352f2b46d5134e0e2502785eda8b3952a62","modified":1471263044049},{"_id":"public/就是爱玩/python-Chrome-QQ-album/index.html","hash":"2315a3e5fa0c9bf658409898f65b13e7c8092812","modified":1471263044049},{"_id":"public/韦编三绝/chaijing-look/index.html","hash":"7b843b237d21ad2f58a2e0542b58bf574c0d1299","modified":1471263044049},{"_id":"public/韦编三绝/fushengliuji/index.html","hash":"00522e64bd8faeb9bf649adda8de3442ecc9a222","modified":1471263044050},{"_id":"source/root.txt","hash":"be0755e51e47eacda69706b419fa127d774480dc","modified":1471534708000},{"_id":"public/root.txt","hash":"be0755e51e47eacda69706b419fa127d774480dc","modified":1471534826867}],"Category":[{"name":"边走边想","_id":"cir3l2p1w00049vnzdhs3vluz"},{"name":"韦编三绝","_id":"cir3l2p35000c9vnzc42wfmx8"},{"name":"编程之路","_id":"cir3l2p47000q9vnzk57q4st6"},{"name":"那时年少","_id":"cir3l2p6r001n9vnzyebkvfy5"},{"name":"就是爱玩","_id":"cir3l2pbf00399vnzioqpowq8"},{"name":"平凡之路","_id":"cir3l2phb005u9vnz56cdh01b"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://haofly.net\" homePageName=\"回到主页\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://haofly.net\" homePageName=\"回到主页\"></script>\n</body>\n</html>\n","date":"2016-02-22T05:23:58.000Z","updated":"2016-02-22T05:23:58.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cir3l2osr00009vnzpxgwribl","content":"<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://haofly.net\" homepagename=\"回到主页\"></script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://haofly.net\" homePageName=\"回到主页\"></script>\n</body>\n</html>\n"},{"_content":"# 关于我\n我的博客，可以说是历经数次改版，从Github托管，到云主机中的wordpress，再到自己的>服务器中的Django，最后还是回到静态博客，完全用markdown来书写，同样可以托管到其他\n平台。当然由于我必须有至少一台云服务器，所以还是直接放到服务器上了。\n\n如果不写代码，我周末将无所事事  \n如果不写代码，我周末将找不到朋友  \n如果不写代码，我周末将浑身难受  \n如果不写代码，我的电脑将失去生命  \n如果不写代码，我就对不起安静的大好时光  \n如果不写代码，我等于没过周末  \n如果不写代码……  \n\n## 我\n\n93年生，总是在犹豫的天秤  \n爱coding  爱开源  爱Linux  \n高中开始变成，学了很多很多很多  \n最擅长的是Python，最喜欢的也是Python  \n另外还学过Android、Qt、PHP、C/C++等语言  \n学了这么多还是不确定以后怎么走  \n不如做个Full Stack Developer  \n人生，就是要会玩儿  \n\n## 联系方式\n\n![](http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/twitter.png)[Twitter](https://twitter.com/haofly)  \n![](http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/github.png)[Github](https://github.com/haoflynet)  \n![](http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/weibo.png)[微博](http://weibo.com/haoflynet)  \nEmail：haoflynet@gmail.com\n\n## 博客历史\n\n2013年8月 申请域名\n\n2013年12月 托管到Github\n\n2014年1月  重新搭建\n\n2014年6月 转到万网虚拟主机\n\n2014年7月 域名备案\n\n2014年7月 使用wordpress重新搭建\n\n2014年10月  单日访问量最高突破600，累计浏览量突破3000(google analytics)\n\n2014年11月  将数据统计从google analytics切换到百度统计，之前总PV=6225，UV=2117，\nIP=3150\n\n2015年12月 自建博客程序，将wiki性质的文章分离出来\n\n2016年2月  使用hexo重新搭建\n\n","source":"about/index.md","raw":"# 关于我\n我的博客，可以说是历经数次改版，从Github托管，到云主机中的wordpress，再到自己的>服务器中的Django，最后还是回到静态博客，完全用markdown来书写，同样可以托管到其他\n平台。当然由于我必须有至少一台云服务器，所以还是直接放到服务器上了。\n\n如果不写代码，我周末将无所事事  \n如果不写代码，我周末将找不到朋友  \n如果不写代码，我周末将浑身难受  \n如果不写代码，我的电脑将失去生命  \n如果不写代码，我就对不起安静的大好时光  \n如果不写代码，我等于没过周末  \n如果不写代码……  \n\n## 我\n\n93年生，总是在犹豫的天秤  \n爱coding  爱开源  爱Linux  \n高中开始变成，学了很多很多很多  \n最擅长的是Python，最喜欢的也是Python  \n另外还学过Android、Qt、PHP、C/C++等语言  \n学了这么多还是不确定以后怎么走  \n不如做个Full Stack Developer  \n人生，就是要会玩儿  \n\n## 联系方式\n\n![](http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/twitter.png)[Twitter](https://twitter.com/haofly)  \n![](http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/github.png)[Github](https://github.com/haoflynet)  \n![](http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/weibo.png)[微博](http://weibo.com/haoflynet)  \nEmail：haoflynet@gmail.com\n\n## 博客历史\n\n2013年8月 申请域名\n\n2013年12月 托管到Github\n\n2014年1月  重新搭建\n\n2014年6月 转到万网虚拟主机\n\n2014年7月 域名备案\n\n2014年7月 使用wordpress重新搭建\n\n2014年10月  单日访问量最高突破600，累计浏览量突破3000(google analytics)\n\n2014年11月  将数据统计从google analytics切换到百度统计，之前总PV=6225，UV=2117，\nIP=3150\n\n2015年12月 自建博客程序，将wiki性质的文章分离出来\n\n2016年2月  使用hexo重新搭建\n\n","date":"2016-02-22T05:23:58.000Z","updated":"2016-02-22T05:23:58.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cir3l2p1e00029vnzpy62tde6","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>我的博客，可以说是历经数次改版，从Github托管，到云主机中的wordpress，再到自己的&gt;服务器中的Django，最后还是回到静态博客，完全用markdown来书写，同样可以托管到其他<br>平台。当然由于我必须有至少一台云服务器，所以还是直接放到服务器上了。</p>\n<p>如果不写代码，我周末将无所事事<br>如果不写代码，我周末将找不到朋友<br>如果不写代码，我周末将浑身难受<br>如果不写代码，我的电脑将失去生命<br>如果不写代码，我就对不起安静的大好时光<br>如果不写代码，我等于没过周末<br>如果不写代码……  </p>\n<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>93年生，总是在犹豫的天秤<br>爱coding  爱开源  爱Linux<br>高中开始变成，学了很多很多很多<br>最擅长的是Python，最喜欢的也是Python<br>另外还学过Android、Qt、PHP、C/C++等语言<br>学了这么多还是不确定以后怎么走<br>不如做个Full Stack Developer<br>人生，就是要会玩儿  </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p><img src=\"http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/twitter.png\" alt=\"\"><a href=\"https://twitter.com/haofly\" target=\"_blank\" rel=\"external\">Twitter</a><br><img src=\"http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/github.png\" alt=\"\"><a href=\"https://github.com/haoflynet\" target=\"_blank\" rel=\"external\">Github</a><br><img src=\"http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/weibo.png\" alt=\"\"><a href=\"http://weibo.com/haoflynet\" target=\"_blank\" rel=\"external\">微博</a><br>Email：haoflynet@gmail.com</p>\n<h2 id=\"博客历史\"><a href=\"#博客历史\" class=\"headerlink\" title=\"博客历史\"></a>博客历史</h2><p>2013年8月 申请域名</p>\n<p>2013年12月 托管到Github</p>\n<p>2014年1月  重新搭建</p>\n<p>2014年6月 转到万网虚拟主机</p>\n<p>2014年7月 域名备案</p>\n<p>2014年7月 使用wordpress重新搭建</p>\n<p>2014年10月  单日访问量最高突破600，累计浏览量突破3000(google analytics)</p>\n<p>2014年11月  将数据统计从google analytics切换到百度统计，之前总PV=6225，UV=2117，<br>IP=3150</p>\n<p>2015年12月 自建博客程序，将wiki性质的文章分离出来</p>\n<p>2016年2月  使用hexo重新搭建</p>\n","excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>我的博客，可以说是历经数次改版，从Github托管，到云主机中的wordpress，再到自己的&gt;服务器中的Django，最后还是回到静态博客，完全用markdown来书写，同样可以托管到其他<br>平台。当然由于我必须有至少一台云服务器，所以还是直接放到服务器上了。</p>\n<p>如果不写代码，我周末将无所事事<br>如果不写代码，我周末将找不到朋友<br>如果不写代码，我周末将浑身难受<br>如果不写代码，我的电脑将失去生命<br>如果不写代码，我就对不起安静的大好时光<br>如果不写代码，我等于没过周末<br>如果不写代码……  </p>\n<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>93年生，总是在犹豫的天秤<br>爱coding  爱开源  爱Linux<br>高中开始变成，学了很多很多很多<br>最擅长的是Python，最喜欢的也是Python<br>另外还学过Android、Qt、PHP、C/C++等语言<br>学了这么多还是不确定以后怎么走<br>不如做个Full Stack Developer<br>人生，就是要会玩儿  </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p><img src=\"http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/twitter.png\" alt=\"\"><a href=\"https://twitter.com/haofly\">Twitter</a><br><img src=\"http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/github.png\" alt=\"\"><a href=\"https://github.com/haoflynet\">Github</a><br><img src=\"http://ipp0tsuk0.qiniudn.com/wp-content/uploads/2013/07/weibo.png\" alt=\"\"><a href=\"http://weibo.com/haoflynet\">微博</a><br>Email：haoflynet@gmail.com</p>\n<h2 id=\"博客历史\"><a href=\"#博客历史\" class=\"headerlink\" title=\"博客历史\"></a>博客历史</h2><p>2013年8月 申请域名</p>\n<p>2013年12月 托管到Github</p>\n<p>2014年1月  重新搭建</p>\n<p>2014年6月 转到万网虚拟主机</p>\n<p>2014年7月 域名备案</p>\n<p>2014年7月 使用wordpress重新搭建</p>\n<p>2014年10月  单日访问量最高突破600，累计浏览量突破3000(google analytics)</p>\n<p>2014年11月  将数据统计从google analytics切换到百度统计，之前总PV=6225，UV=2117，<br>IP=3150</p>\n<p>2015年12月 自建博客程序，将wiki性质的文章分离出来</p>\n<p>2016年2月  使用hexo重新搭建</p>\n"}],"Post":[{"title":"大二下学期计划(回顾2013展望2014)","date":"2014-03-08T07:17:21.000Z","_content":"### 回顾2013  \n\n2013年可以算作是我真正进入编程界大门的一年，这一年把C语言基础学了，然后又学了C++，还浅学了汇编、Delphi、python等语言，当然都局限于基础部\n分。这一年，我又申请了一个域名haofly.net，但还是没有建立什么网站，而是在接触了github后将网站搭建在了这上面。  \n这一年，我去了四川，体验了那里的风土人情，突然明白了一些，旅行不是要证明去了某个地方，而是去体验了某个地方。所以以后的旅行我会尽量一个人去，而不是和一群人去\n走马观花，而且不一定要风景名胜，或许去一个安静的地方更能偶遇到美丽的姑娘。  \n这一年，我从大一到了大二，从一个奔二的人成为了一个奔三的人，逐渐开始进入人生与学习的迷茫期。\n\n### 展望2014\n\n无论2013年里我做过了什么，错过了什么，它已经过去，2014年已经开始向前迈进，在这学期开学前夕，特别做了如下计划。\n\n### 计算机\n\n我曾经说过，在大二的时候，我练的是内功，所以仍然不会专注于某一种语言或某一种技术去专研，而是广撒网，弄清自己兴趣到底在哪里，了解自己擅长的是什么。当然主线还\n是C/C++语言和信息安全方向，而且把工作环境转移到linux，以前一直觉得linux的使用有很多极不方便的地方，而现在已经用了一个寒假了，几乎没有任何异样\n，而且自己动手解决问题的感觉，太爽了。\n\n### 工作\n\n上学期已经很累了，我很想推掉自己的很多职务，但是又觉得却是该锻炼锻炼自己。所以这学期我不会为自己增加事情，反而会减少。这学期课很少，我想放松一学期，好好观察\n一下大学生活。\n\n### 改变\n\n虽然我是一个自己都不怎么了解自己的人，但是我肯定比很多不关心我的人更了解自己。很多人都说我很幼稚，没错，我确实是幼稚，幼稚到二十岁了还在为理想而活，幼稚到二\n十岁还那么固执，幼稚到二十岁还不愿改变自己。或许，我永远不会把幼稚和成熟当成反义词来看待，当然，这也或许只是时间问题，或许我也会被以后的现实打磨掉棱角，而逐\n渐让自己看起来像一个成年人。原谅我，我这个人最讨厌的是伪装，而我却依然坚持不把自己成熟的一面露给我在乎的人看。  \n拖延症\n\n最后再写一些比较具体的计划，之所以要添加这一项，是为了给自己一些约束，我也不知道自己能不能做完，但是不试试又怎么知道自己不行呢。  \n1.阅读： 看10-20本书，专业和非专业均可，当然专业书籍不一定要全部吃透，七分熟即可。  \n2.博客： 写50-100篇博客，大概是每周一篇，写博客主要是为了记录自己的学习历程，目的并不是给别人看，所以没必要有多大的技术含量也没必要有多久的推敲  \n3.翻译：\n译50-100篇文章，大概也是每周一篇，翻译文章虽然挺辛苦的，但我不想放弃，因为它不仅能提高我阅读外文的能力，而且还能把外国的优秀文章分享给国内的爱好者  \n4.上课： 学4-10门coursera课程，无论是专业的还是非专业的，反正都比老师上课有动力，而且对提高阅读英语的能力也有很大的帮助  \n5.恋爱： 苍天呀，保佑我今年能找个女朋友吧\n","source":"_posts/2014-plan.md","raw":"---\ntitle: \"大二下学期计划(回顾2013展望2014)\"\ndate: 2014-03-08 15:17:21\ncategories: 边走边想\n---\n### 回顾2013  \n\n2013年可以算作是我真正进入编程界大门的一年，这一年把C语言基础学了，然后又学了C++，还浅学了汇编、Delphi、python等语言，当然都局限于基础部\n分。这一年，我又申请了一个域名haofly.net，但还是没有建立什么网站，而是在接触了github后将网站搭建在了这上面。  \n这一年，我去了四川，体验了那里的风土人情，突然明白了一些，旅行不是要证明去了某个地方，而是去体验了某个地方。所以以后的旅行我会尽量一个人去，而不是和一群人去\n走马观花，而且不一定要风景名胜，或许去一个安静的地方更能偶遇到美丽的姑娘。  \n这一年，我从大一到了大二，从一个奔二的人成为了一个奔三的人，逐渐开始进入人生与学习的迷茫期。\n\n### 展望2014\n\n无论2013年里我做过了什么，错过了什么，它已经过去，2014年已经开始向前迈进，在这学期开学前夕，特别做了如下计划。\n\n### 计算机\n\n我曾经说过，在大二的时候，我练的是内功，所以仍然不会专注于某一种语言或某一种技术去专研，而是广撒网，弄清自己兴趣到底在哪里，了解自己擅长的是什么。当然主线还\n是C/C++语言和信息安全方向，而且把工作环境转移到linux，以前一直觉得linux的使用有很多极不方便的地方，而现在已经用了一个寒假了，几乎没有任何异样\n，而且自己动手解决问题的感觉，太爽了。\n\n### 工作\n\n上学期已经很累了，我很想推掉自己的很多职务，但是又觉得却是该锻炼锻炼自己。所以这学期我不会为自己增加事情，反而会减少。这学期课很少，我想放松一学期，好好观察\n一下大学生活。\n\n### 改变\n\n虽然我是一个自己都不怎么了解自己的人，但是我肯定比很多不关心我的人更了解自己。很多人都说我很幼稚，没错，我确实是幼稚，幼稚到二十岁了还在为理想而活，幼稚到二\n十岁还那么固执，幼稚到二十岁还不愿改变自己。或许，我永远不会把幼稚和成熟当成反义词来看待，当然，这也或许只是时间问题，或许我也会被以后的现实打磨掉棱角，而逐\n渐让自己看起来像一个成年人。原谅我，我这个人最讨厌的是伪装，而我却依然坚持不把自己成熟的一面露给我在乎的人看。  \n拖延症\n\n最后再写一些比较具体的计划，之所以要添加这一项，是为了给自己一些约束，我也不知道自己能不能做完，但是不试试又怎么知道自己不行呢。  \n1.阅读： 看10-20本书，专业和非专业均可，当然专业书籍不一定要全部吃透，七分熟即可。  \n2.博客： 写50-100篇博客，大概是每周一篇，写博客主要是为了记录自己的学习历程，目的并不是给别人看，所以没必要有多大的技术含量也没必要有多久的推敲  \n3.翻译：\n译50-100篇文章，大概也是每周一篇，翻译文章虽然挺辛苦的，但我不想放弃，因为它不仅能提高我阅读外文的能力，而且还能把外国的优秀文章分享给国内的爱好者  \n4.上课： 学4-10门coursera课程，无论是专业的还是非专业的，反正都比老师上课有动力，而且对提高阅读英语的能力也有很大的帮助  \n5.恋爱： 苍天呀，保佑我今年能找个女朋友吧\n","slug":"2014-plan","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p0g00019vnzgrl2k342","content":"<h3 id=\"回顾2013\"><a href=\"#回顾2013\" class=\"headerlink\" title=\"回顾2013\"></a>回顾2013</h3><p>2013年可以算作是我真正进入编程界大门的一年，这一年把C语言基础学了，然后又学了C++，还浅学了汇编、Delphi、python等语言，当然都局限于基础部<br>分。这一年，我又申请了一个域名haofly.net，但还是没有建立什么网站，而是在接触了github后将网站搭建在了这上面。<br>这一年，我去了四川，体验了那里的风土人情，突然明白了一些，旅行不是要证明去了某个地方，而是去体验了某个地方。所以以后的旅行我会尽量一个人去，而不是和一群人去<br>走马观花，而且不一定要风景名胜，或许去一个安静的地方更能偶遇到美丽的姑娘。<br>这一年，我从大一到了大二，从一个奔二的人成为了一个奔三的人，逐渐开始进入人生与学习的迷茫期。</p>\n<h3 id=\"展望2014\"><a href=\"#展望2014\" class=\"headerlink\" title=\"展望2014\"></a>展望2014</h3><p>无论2013年里我做过了什么，错过了什么，它已经过去，2014年已经开始向前迈进，在这学期开学前夕，特别做了如下计划。</p>\n<h3 id=\"计算机\"><a href=\"#计算机\" class=\"headerlink\" title=\"计算机\"></a>计算机</h3><p>我曾经说过，在大二的时候，我练的是内功，所以仍然不会专注于某一种语言或某一种技术去专研，而是广撒网，弄清自己兴趣到底在哪里，了解自己擅长的是什么。当然主线还<br>是C/C++语言和信息安全方向，而且把工作环境转移到linux，以前一直觉得linux的使用有很多极不方便的地方，而现在已经用了一个寒假了，几乎没有任何异样<br>，而且自己动手解决问题的感觉，太爽了。</p>\n<h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>上学期已经很累了，我很想推掉自己的很多职务，但是又觉得却是该锻炼锻炼自己。所以这学期我不会为自己增加事情，反而会减少。这学期课很少，我想放松一学期，好好观察<br>一下大学生活。</p>\n<h3 id=\"改变\"><a href=\"#改变\" class=\"headerlink\" title=\"改变\"></a>改变</h3><p>虽然我是一个自己都不怎么了解自己的人，但是我肯定比很多不关心我的人更了解自己。很多人都说我很幼稚，没错，我确实是幼稚，幼稚到二十岁了还在为理想而活，幼稚到二<br>十岁还那么固执，幼稚到二十岁还不愿改变自己。或许，我永远不会把幼稚和成熟当成反义词来看待，当然，这也或许只是时间问题，或许我也会被以后的现实打磨掉棱角，而逐<br>渐让自己看起来像一个成年人。原谅我，我这个人最讨厌的是伪装，而我却依然坚持不把自己成熟的一面露给我在乎的人看。<br>拖延症</p>\n<p>最后再写一些比较具体的计划，之所以要添加这一项，是为了给自己一些约束，我也不知道自己能不能做完，但是不试试又怎么知道自己不行呢。<br>1.阅读： 看10-20本书，专业和非专业均可，当然专业书籍不一定要全部吃透，七分熟即可。<br>2.博客： 写50-100篇博客，大概是每周一篇，写博客主要是为了记录自己的学习历程，目的并不是给别人看，所以没必要有多大的技术含量也没必要有多久的推敲<br>3.翻译：<br>译50-100篇文章，大概也是每周一篇，翻译文章虽然挺辛苦的，但我不想放弃，因为它不仅能提高我阅读外文的能力，而且还能把外国的优秀文章分享给国内的爱好者<br>4.上课： 学4-10门coursera课程，无论是专业的还是非专业的，反正都比老师上课有动力，而且对提高阅读英语的能力也有很大的帮助<br>5.恋爱： 苍天呀，保佑我今年能找个女朋友吧</p>\n","excerpt":"","more":"<h3 id=\"回顾2013\"><a href=\"#回顾2013\" class=\"headerlink\" title=\"回顾2013\"></a>回顾2013</h3><p>2013年可以算作是我真正进入编程界大门的一年，这一年把C语言基础学了，然后又学了C++，还浅学了汇编、Delphi、python等语言，当然都局限于基础部<br>分。这一年，我又申请了一个域名haofly.net，但还是没有建立什么网站，而是在接触了github后将网站搭建在了这上面。<br>这一年，我去了四川，体验了那里的风土人情，突然明白了一些，旅行不是要证明去了某个地方，而是去体验了某个地方。所以以后的旅行我会尽量一个人去，而不是和一群人去<br>走马观花，而且不一定要风景名胜，或许去一个安静的地方更能偶遇到美丽的姑娘。<br>这一年，我从大一到了大二，从一个奔二的人成为了一个奔三的人，逐渐开始进入人生与学习的迷茫期。</p>\n<h3 id=\"展望2014\"><a href=\"#展望2014\" class=\"headerlink\" title=\"展望2014\"></a>展望2014</h3><p>无论2013年里我做过了什么，错过了什么，它已经过去，2014年已经开始向前迈进，在这学期开学前夕，特别做了如下计划。</p>\n<h3 id=\"计算机\"><a href=\"#计算机\" class=\"headerlink\" title=\"计算机\"></a>计算机</h3><p>我曾经说过，在大二的时候，我练的是内功，所以仍然不会专注于某一种语言或某一种技术去专研，而是广撒网，弄清自己兴趣到底在哪里，了解自己擅长的是什么。当然主线还<br>是C/C++语言和信息安全方向，而且把工作环境转移到linux，以前一直觉得linux的使用有很多极不方便的地方，而现在已经用了一个寒假了，几乎没有任何异样<br>，而且自己动手解决问题的感觉，太爽了。</p>\n<h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>上学期已经很累了，我很想推掉自己的很多职务，但是又觉得却是该锻炼锻炼自己。所以这学期我不会为自己增加事情，反而会减少。这学期课很少，我想放松一学期，好好观察<br>一下大学生活。</p>\n<h3 id=\"改变\"><a href=\"#改变\" class=\"headerlink\" title=\"改变\"></a>改变</h3><p>虽然我是一个自己都不怎么了解自己的人，但是我肯定比很多不关心我的人更了解自己。很多人都说我很幼稚，没错，我确实是幼稚，幼稚到二十岁了还在为理想而活，幼稚到二<br>十岁还那么固执，幼稚到二十岁还不愿改变自己。或许，我永远不会把幼稚和成熟当成反义词来看待，当然，这也或许只是时间问题，或许我也会被以后的现实打磨掉棱角，而逐<br>渐让自己看起来像一个成年人。原谅我，我这个人最讨厌的是伪装，而我却依然坚持不把自己成熟的一面露给我在乎的人看。<br>拖延症</p>\n<p>最后再写一些比较具体的计划，之所以要添加这一项，是为了给自己一些约束，我也不知道自己能不能做完，但是不试试又怎么知道自己不行呢。<br>1.阅读： 看10-20本书，专业和非专业均可，当然专业书籍不一定要全部吃透，七分熟即可。<br>2.博客： 写50-100篇博客，大概是每周一篇，写博客主要是为了记录自己的学习历程，目的并不是给别人看，所以没必要有多大的技术含量也没必要有多久的推敲<br>3.翻译：<br>译50-100篇文章，大概也是每周一篇，翻译文章虽然挺辛苦的，但我不想放弃，因为它不仅能提高我阅读外文的能力，而且还能把外国的优秀文章分享给国内的爱好者<br>4.上课： 学4-10门coursera课程，无论是专业的还是非专业的，反正都比老师上课有动力，而且对提高阅读英语的能力也有很大的帮助<br>5.恋爱： 苍天呀，保佑我今年能找个女朋友吧</p>\n"},{"title":"2014总结：平凡的一年","date":"2014-12-30T11:15:44.000Z","_content":"2014，我很喜欢这一年，过得很平淡，或许是我20几岁中最平淡的一年。当然，平淡中还是有不少的心灵上的起伏，今年最大的收获便是想明白了很多事情，没有以前那么\n迷茫了。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_0.jpg)  \n\n# 那些一如往常的事\n\n  * 还是拿了二等奖学金(1000)，还是没有挂科(这学期没算上)，今年没去考什么证了(一直不想考证，四六级只是毕业的需要)，依然没想去参加什么比赛\n  * 今年，依然看了很多的书，算下来，大概看了十二本技术书籍，六本非技术书籍，当然还有二十四本《读者》(唉，今年涨价了)\n\n# 那些万万没想到的事\n\n  * **万万没想到**，今年还是没找到女朋友\n  * **万万没想到**，曾经视金钱如粪土的我，如今也开始为钱、为工作发愁了\n  * **万万没想到**，今年居然有腾讯的一个负责人邀请我加入\n  * **万万没想到**，曾经那么讨厌Web、Android的我，今年却学习了Html/PHP/Java/JS/NodeJS等语言以及相关的一些框架，并参与了一个实际的web项目\n  * **万万没想到**，一直对信息安全专业感兴趣并且因此而来到重邮的我，在大二大三分专业之际，如愿以偿进入了信息安全专业，并且还是最好的一个班之后，我却突然不想学了。那种感觉就像，你一直在追逐某样东西，但当你最终要到达终点的时候，结果已经不重要了。之所以放弃信息安全，是因为我认为这个行业技术要求确实高，而且技术分层太明显了，我从来不认为自己是一个高手，并且我不大喜欢去研究别人的东西(信安，必须知己知彼)，我更喜欢创造，所以，即使我现在在信息安全专业，但也没怎么用心学习那个方向\n  * **万万没想到**，大一大二一直信誓旦旦地说要考研的我，居然在大二下学期突然放弃了考研这个想法，并且把之前的教材都卖了，我称之为破釜沉舟，这或许是我做得最决绝的一次。以前一直认为，大学本科多学一些基本知识，然后研究生阶段就多做一些实际的事情，这样或许能找一个更好的工作。但当我真正去采访了几个研究生后，我发现，考研或许并没有我想象的那么好。考研的学长多半都后悔了(当然，不可否认，没考研的人也多半都后悔了)。三年时间，毕业的时候是2019年，好像是25或者26了吧，我不想把我最美好的20几岁花在这上面，即使这样做或许会有更舒适的未来，但那样获得的未来我一定不会很高兴。所以，我还是坚持以前的想法，人生得意须尽欢，莫使金樽空对月，及时行乐，万一明天就挂了呢。我这个人想法很多，我喜欢的是创造，而不是看那些无聊的论文，而且没准研究生还要应付比社会上还要复杂的关系。所以，找工作，或者创业吧。\n\n# 那些难忘的事\n\n  * 今年，全家人在一起照了全家福(虽然还是有几个堂姐堂哥没到)\n  * 今年，我发现，世界上不会吐痰的不只我一个，还有胡一菲......\n  * 今年，大年初一就和一群朋友去河边吃烧烤，永远忘不了他们   \n![](http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_1.jpg)  \n\n  * 今年，家里终于把宽带升级为4M了，学校的宽带也免费升级到了4M，不过我回家的时间也越来越少了\n  * 暑假参加了一次“三下乡”活动，现在都还记得酉阳那群小朋友\n  * 今年，第一次一个人去看了一场电影《后会无期》\n  * 今年将域名备案了，把服务器迁移回国内，并且采用了wordpress框架\n  * 今年博客的单日最高访问量达到1600\n  * 第一次暑假在学校呆了这么长的时间，大概一个月，而且几乎每天都在坚持锻炼，每天至少8圈\n  * 第一次一个人生活了那么久，一个人在堂姐的房子里生活，每天按时起床、按时吃饭、按时睡觉，没想到一个人也能生活得这么有规律。但一个人的日子里，真想找另外一个人陪，那段日子，真的好憧憬能拥有自己的一个家\n  * 第一次记错了开学时间，还好原计划就是提早来了几天\n  * 第一次拥有了自己的一个云服务器，Github学生计划，Digitalocean的服务器\n  * 第一次参加了开源活动，在我们学校举行的opensuse的发行party\n  * 第一次参与实际的项目中去\n  * 第一次在网上参加活动中奖￥600\n  * 第一次因为写代码获得￥500\n  * 终于买了一个机械表，顺便买了一个win8平板\n  * 今年，侄女儿终于到我们家对面的学校上学了，我当年可是上初中才享受到这种待遇\n  * 今年，哥哥又生了一个孩子，我终于有侄儿了，哈哈\n  * 今年，火影漫画完结了，不过还好，我从不看漫画，不过明年，电视版也要结束了吧\n  * 今年，学习了四个Coursera课程，并获得了三个完成声明\n  * 今年，总共花费两万多   \n![](http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_2.jpg)  \n\n# 感情方面\n\n  * **以前**：和前女友分手两年了，今年终于没有怎么找她了，偶尔朋友式的聊聊天，完全没有了以前的感觉，这样也挺好，大家都能去追求新的幸福。不过，在我的内心，依然渴望能找到一个女朋友，因为我渴望爱情，渴望有一个家，我想为这个家努力奋斗。\n  * **现在**：曾经看到一句话：我们不是越长大越不相信爱情，而是越长大越分不清那是不是爱情。2014，上半年的我，什么都没想，连我都不知道上半年都做了什么，下半年却一直在和一个女生几乎天天聊天，年底就想向她表白，但是突然发现，我对她，她对我，都只是朋友的关系，其实完全没有其他的感情。\n  * **未来**：曾经有人问我，世界上有没有人会心甘情愿做备胎？我当时就说，有人。真正爱一个人的时候，你会心甘情愿付出，完全不会去想她会不会回报；真正爱一个人的时候，即使是做备胎，你也愿意一直守护在她身边；真正爱一个人的时候，哪怕十年，你也愿意等。其实，在我心里一直有这么一个人。现在的我不再迷茫，所以，无论她还会不会在意我长得矮，我也想自信一次，我只想为她努力一次。（其实，花了几天学习前端然后做了一个网页<http://love.haofly.net>想给她看的，但被v2ex上的网友批得惨不忍睹，想想还是放弃吧，女生或许更喜欢当面表白）\n我还真不相信会有谁一字一句把我的总结看完的，不过，反正主要是写个自己看的，也是为了写给以后的自己看看。\n\n# 平淡的一年，继续走我的平凡之路。\n\n[![2014-the-last4](http://haofly.net/wp-content/uploads/2014/12/2014-the-\nlast4.jpg)](http://haofly.net/wp-content/uploads/2014/12/2014-the-last4.jpg)\n","source":"_posts/2014-the-last.md","raw":"---\ntitle: \"2014总结：平凡的一年\"\ndate: 2014-12-30 19:15:44\ncategories: 边走边想\n---\n2014，我很喜欢这一年，过得很平淡，或许是我20几岁中最平淡的一年。当然，平淡中还是有不少的心灵上的起伏，今年最大的收获便是想明白了很多事情，没有以前那么\n迷茫了。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_0.jpg)  \n\n# 那些一如往常的事\n\n  * 还是拿了二等奖学金(1000)，还是没有挂科(这学期没算上)，今年没去考什么证了(一直不想考证，四六级只是毕业的需要)，依然没想去参加什么比赛\n  * 今年，依然看了很多的书，算下来，大概看了十二本技术书籍，六本非技术书籍，当然还有二十四本《读者》(唉，今年涨价了)\n\n# 那些万万没想到的事\n\n  * **万万没想到**，今年还是没找到女朋友\n  * **万万没想到**，曾经视金钱如粪土的我，如今也开始为钱、为工作发愁了\n  * **万万没想到**，今年居然有腾讯的一个负责人邀请我加入\n  * **万万没想到**，曾经那么讨厌Web、Android的我，今年却学习了Html/PHP/Java/JS/NodeJS等语言以及相关的一些框架，并参与了一个实际的web项目\n  * **万万没想到**，一直对信息安全专业感兴趣并且因此而来到重邮的我，在大二大三分专业之际，如愿以偿进入了信息安全专业，并且还是最好的一个班之后，我却突然不想学了。那种感觉就像，你一直在追逐某样东西，但当你最终要到达终点的时候，结果已经不重要了。之所以放弃信息安全，是因为我认为这个行业技术要求确实高，而且技术分层太明显了，我从来不认为自己是一个高手，并且我不大喜欢去研究别人的东西(信安，必须知己知彼)，我更喜欢创造，所以，即使我现在在信息安全专业，但也没怎么用心学习那个方向\n  * **万万没想到**，大一大二一直信誓旦旦地说要考研的我，居然在大二下学期突然放弃了考研这个想法，并且把之前的教材都卖了，我称之为破釜沉舟，这或许是我做得最决绝的一次。以前一直认为，大学本科多学一些基本知识，然后研究生阶段就多做一些实际的事情，这样或许能找一个更好的工作。但当我真正去采访了几个研究生后，我发现，考研或许并没有我想象的那么好。考研的学长多半都后悔了(当然，不可否认，没考研的人也多半都后悔了)。三年时间，毕业的时候是2019年，好像是25或者26了吧，我不想把我最美好的20几岁花在这上面，即使这样做或许会有更舒适的未来，但那样获得的未来我一定不会很高兴。所以，我还是坚持以前的想法，人生得意须尽欢，莫使金樽空对月，及时行乐，万一明天就挂了呢。我这个人想法很多，我喜欢的是创造，而不是看那些无聊的论文，而且没准研究生还要应付比社会上还要复杂的关系。所以，找工作，或者创业吧。\n\n# 那些难忘的事\n\n  * 今年，全家人在一起照了全家福(虽然还是有几个堂姐堂哥没到)\n  * 今年，我发现，世界上不会吐痰的不只我一个，还有胡一菲......\n  * 今年，大年初一就和一群朋友去河边吃烧烤，永远忘不了他们   \n![](http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_1.jpg)  \n\n  * 今年，家里终于把宽带升级为4M了，学校的宽带也免费升级到了4M，不过我回家的时间也越来越少了\n  * 暑假参加了一次“三下乡”活动，现在都还记得酉阳那群小朋友\n  * 今年，第一次一个人去看了一场电影《后会无期》\n  * 今年将域名备案了，把服务器迁移回国内，并且采用了wordpress框架\n  * 今年博客的单日最高访问量达到1600\n  * 第一次暑假在学校呆了这么长的时间，大概一个月，而且几乎每天都在坚持锻炼，每天至少8圈\n  * 第一次一个人生活了那么久，一个人在堂姐的房子里生活，每天按时起床、按时吃饭、按时睡觉，没想到一个人也能生活得这么有规律。但一个人的日子里，真想找另外一个人陪，那段日子，真的好憧憬能拥有自己的一个家\n  * 第一次记错了开学时间，还好原计划就是提早来了几天\n  * 第一次拥有了自己的一个云服务器，Github学生计划，Digitalocean的服务器\n  * 第一次参加了开源活动，在我们学校举行的opensuse的发行party\n  * 第一次参与实际的项目中去\n  * 第一次在网上参加活动中奖￥600\n  * 第一次因为写代码获得￥500\n  * 终于买了一个机械表，顺便买了一个win8平板\n  * 今年，侄女儿终于到我们家对面的学校上学了，我当年可是上初中才享受到这种待遇\n  * 今年，哥哥又生了一个孩子，我终于有侄儿了，哈哈\n  * 今年，火影漫画完结了，不过还好，我从不看漫画，不过明年，电视版也要结束了吧\n  * 今年，学习了四个Coursera课程，并获得了三个完成声明\n  * 今年，总共花费两万多   \n![](http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_2.jpg)  \n\n# 感情方面\n\n  * **以前**：和前女友分手两年了，今年终于没有怎么找她了，偶尔朋友式的聊聊天，完全没有了以前的感觉，这样也挺好，大家都能去追求新的幸福。不过，在我的内心，依然渴望能找到一个女朋友，因为我渴望爱情，渴望有一个家，我想为这个家努力奋斗。\n  * **现在**：曾经看到一句话：我们不是越长大越不相信爱情，而是越长大越分不清那是不是爱情。2014，上半年的我，什么都没想，连我都不知道上半年都做了什么，下半年却一直在和一个女生几乎天天聊天，年底就想向她表白，但是突然发现，我对她，她对我，都只是朋友的关系，其实完全没有其他的感情。\n  * **未来**：曾经有人问我，世界上有没有人会心甘情愿做备胎？我当时就说，有人。真正爱一个人的时候，你会心甘情愿付出，完全不会去想她会不会回报；真正爱一个人的时候，即使是做备胎，你也愿意一直守护在她身边；真正爱一个人的时候，哪怕十年，你也愿意等。其实，在我心里一直有这么一个人。现在的我不再迷茫，所以，无论她还会不会在意我长得矮，我也想自信一次，我只想为她努力一次。（其实，花了几天学习前端然后做了一个网页<http://love.haofly.net>想给她看的，但被v2ex上的网友批得惨不忍睹，想想还是放弃吧，女生或许更喜欢当面表白）\n我还真不相信会有谁一字一句把我的总结看完的，不过，反正主要是写个自己看的，也是为了写给以后的自己看看。\n\n# 平淡的一年，继续走我的平凡之路。\n\n[![2014-the-last4](http://haofly.net/wp-content/uploads/2014/12/2014-the-\nlast4.jpg)](http://haofly.net/wp-content/uploads/2014/12/2014-the-last4.jpg)\n","slug":"2014-the-last","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p1s00039vnzjrkjo0pk","content":"<p>2014，我很喜欢这一年，过得很平淡，或许是我20几岁中最平淡的一年。当然，平淡中还是有不少的心灵上的起伏，今年最大的收获便是想明白了很多事情，没有以前那么<br>迷茫了。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_0.jpg\" alt=\"\">  </p>\n<h1 id=\"那些一如往常的事\"><a href=\"#那些一如往常的事\" class=\"headerlink\" title=\"那些一如往常的事\"></a>那些一如往常的事</h1><ul>\n<li>还是拿了二等奖学金(1000)，还是没有挂科(这学期没算上)，今年没去考什么证了(一直不想考证，四六级只是毕业的需要)，依然没想去参加什么比赛</li>\n<li>今年，依然看了很多的书，算下来，大概看了十二本技术书籍，六本非技术书籍，当然还有二十四本《读者》(唉，今年涨价了)</li>\n</ul>\n<h1 id=\"那些万万没想到的事\"><a href=\"#那些万万没想到的事\" class=\"headerlink\" title=\"那些万万没想到的事\"></a>那些万万没想到的事</h1><ul>\n<li><strong>万万没想到</strong>，今年还是没找到女朋友</li>\n<li><strong>万万没想到</strong>，曾经视金钱如粪土的我，如今也开始为钱、为工作发愁了</li>\n<li><strong>万万没想到</strong>，今年居然有腾讯的一个负责人邀请我加入</li>\n<li><strong>万万没想到</strong>，曾经那么讨厌Web、Android的我，今年却学习了Html/PHP/Java/JS/NodeJS等语言以及相关的一些框架，并参与了一个实际的web项目</li>\n<li><strong>万万没想到</strong>，一直对信息安全专业感兴趣并且因此而来到重邮的我，在大二大三分专业之际，如愿以偿进入了信息安全专业，并且还是最好的一个班之后，我却突然不想学了。那种感觉就像，你一直在追逐某样东西，但当你最终要到达终点的时候，结果已经不重要了。之所以放弃信息安全，是因为我认为这个行业技术要求确实高，而且技术分层太明显了，我从来不认为自己是一个高手，并且我不大喜欢去研究别人的东西(信安，必须知己知彼)，我更喜欢创造，所以，即使我现在在信息安全专业，但也没怎么用心学习那个方向</li>\n<li><strong>万万没想到</strong>，大一大二一直信誓旦旦地说要考研的我，居然在大二下学期突然放弃了考研这个想法，并且把之前的教材都卖了，我称之为破釜沉舟，这或许是我做得最决绝的一次。以前一直认为，大学本科多学一些基本知识，然后研究生阶段就多做一些实际的事情，这样或许能找一个更好的工作。但当我真正去采访了几个研究生后，我发现，考研或许并没有我想象的那么好。考研的学长多半都后悔了(当然，不可否认，没考研的人也多半都后悔了)。三年时间，毕业的时候是2019年，好像是25或者26了吧，我不想把我最美好的20几岁花在这上面，即使这样做或许会有更舒适的未来，但那样获得的未来我一定不会很高兴。所以，我还是坚持以前的想法，人生得意须尽欢，莫使金樽空对月，及时行乐，万一明天就挂了呢。我这个人想法很多，我喜欢的是创造，而不是看那些无聊的论文，而且没准研究生还要应付比社会上还要复杂的关系。所以，找工作，或者创业吧。</li>\n</ul>\n<h1 id=\"那些难忘的事\"><a href=\"#那些难忘的事\" class=\"headerlink\" title=\"那些难忘的事\"></a>那些难忘的事</h1><ul>\n<li>今年，全家人在一起照了全家福(虽然还是有几个堂姐堂哥没到)</li>\n<li>今年，我发现，世界上不会吐痰的不只我一个，还有胡一菲……</li>\n<li><p>今年，大年初一就和一群朋友去河边吃烧烤，永远忘不了他们<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_1.jpg\" alt=\"\">  </p>\n</li>\n<li><p>今年，家里终于把宽带升级为4M了，学校的宽带也免费升级到了4M，不过我回家的时间也越来越少了</p>\n</li>\n<li>暑假参加了一次“三下乡”活动，现在都还记得酉阳那群小朋友</li>\n<li>今年，第一次一个人去看了一场电影《后会无期》</li>\n<li>今年将域名备案了，把服务器迁移回国内，并且采用了wordpress框架</li>\n<li>今年博客的单日最高访问量达到1600</li>\n<li>第一次暑假在学校呆了这么长的时间，大概一个月，而且几乎每天都在坚持锻炼，每天至少8圈</li>\n<li>第一次一个人生活了那么久，一个人在堂姐的房子里生活，每天按时起床、按时吃饭、按时睡觉，没想到一个人也能生活得这么有规律。但一个人的日子里，真想找另外一个人陪，那段日子，真的好憧憬能拥有自己的一个家</li>\n<li>第一次记错了开学时间，还好原计划就是提早来了几天</li>\n<li>第一次拥有了自己的一个云服务器，Github学生计划，Digitalocean的服务器</li>\n<li>第一次参加了开源活动，在我们学校举行的opensuse的发行party</li>\n<li>第一次参与实际的项目中去</li>\n<li>第一次在网上参加活动中奖￥600</li>\n<li>第一次因为写代码获得￥500</li>\n<li>终于买了一个机械表，顺便买了一个win8平板</li>\n<li>今年，侄女儿终于到我们家对面的学校上学了，我当年可是上初中才享受到这种待遇</li>\n<li>今年，哥哥又生了一个孩子，我终于有侄儿了，哈哈</li>\n<li>今年，火影漫画完结了，不过还好，我从不看漫画，不过明年，电视版也要结束了吧</li>\n<li>今年，学习了四个Coursera课程，并获得了三个完成声明</li>\n<li>今年，总共花费两万多<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_2.jpg\" alt=\"\">  </li>\n</ul>\n<h1 id=\"感情方面\"><a href=\"#感情方面\" class=\"headerlink\" title=\"感情方面\"></a>感情方面</h1><ul>\n<li><strong>以前</strong>：和前女友分手两年了，今年终于没有怎么找她了，偶尔朋友式的聊聊天，完全没有了以前的感觉，这样也挺好，大家都能去追求新的幸福。不过，在我的内心，依然渴望能找到一个女朋友，因为我渴望爱情，渴望有一个家，我想为这个家努力奋斗。</li>\n<li><strong>现在</strong>：曾经看到一句话：我们不是越长大越不相信爱情，而是越长大越分不清那是不是爱情。2014，上半年的我，什么都没想，连我都不知道上半年都做了什么，下半年却一直在和一个女生几乎天天聊天，年底就想向她表白，但是突然发现，我对她，她对我，都只是朋友的关系，其实完全没有其他的感情。</li>\n<li><strong>未来</strong>：曾经有人问我，世界上有没有人会心甘情愿做备胎？我当时就说，有人。真正爱一个人的时候，你会心甘情愿付出，完全不会去想她会不会回报；真正爱一个人的时候，即使是做备胎，你也愿意一直守护在她身边；真正爱一个人的时候，哪怕十年，你也愿意等。其实，在我心里一直有这么一个人。现在的我不再迷茫，所以，无论她还会不会在意我长得矮，我也想自信一次，我只想为她努力一次。（其实，花了几天学习前端然后做了一个网页<a href=\"http://love.haofly.net\" target=\"_blank\" rel=\"external\">http://love.haofly.net</a>想给她看的，但被v2ex上的网友批得惨不忍睹，想想还是放弃吧，女生或许更喜欢当面表白）<br>我还真不相信会有谁一字一句把我的总结看完的，不过，反正主要是写个自己看的，也是为了写给以后的自己看看。</li>\n</ul>\n<h1 id=\"平淡的一年，继续走我的平凡之路。\"><a href=\"#平淡的一年，继续走我的平凡之路。\" class=\"headerlink\" title=\"平淡的一年，继续走我的平凡之路。\"></a>平淡的一年，继续走我的平凡之路。</h1><p><a href=\"http://haofly.net/wp-content/uploads/2014/12/2014-the-last4.jpg\"><img src=\"http://haofly.net/wp-content/uploads/2014/12/2014-the-\nlast4.jpg\" alt=\"2014-the-last4\"></a></p>\n","excerpt":"","more":"<p>2014，我很喜欢这一年，过得很平淡，或许是我20几岁中最平淡的一年。当然，平淡中还是有不少的心灵上的起伏，今年最大的收获便是想明白了很多事情，没有以前那么<br>迷茫了。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_0.jpg\" alt=\"\">  </p>\n<h1 id=\"那些一如往常的事\"><a href=\"#那些一如往常的事\" class=\"headerlink\" title=\"那些一如往常的事\"></a>那些一如往常的事</h1><ul>\n<li>还是拿了二等奖学金(1000)，还是没有挂科(这学期没算上)，今年没去考什么证了(一直不想考证，四六级只是毕业的需要)，依然没想去参加什么比赛</li>\n<li>今年，依然看了很多的书，算下来，大概看了十二本技术书籍，六本非技术书籍，当然还有二十四本《读者》(唉，今年涨价了)</li>\n</ul>\n<h1 id=\"那些万万没想到的事\"><a href=\"#那些万万没想到的事\" class=\"headerlink\" title=\"那些万万没想到的事\"></a>那些万万没想到的事</h1><ul>\n<li><strong>万万没想到</strong>，今年还是没找到女朋友</li>\n<li><strong>万万没想到</strong>，曾经视金钱如粪土的我，如今也开始为钱、为工作发愁了</li>\n<li><strong>万万没想到</strong>，今年居然有腾讯的一个负责人邀请我加入</li>\n<li><strong>万万没想到</strong>，曾经那么讨厌Web、Android的我，今年却学习了Html/PHP/Java/JS/NodeJS等语言以及相关的一些框架，并参与了一个实际的web项目</li>\n<li><strong>万万没想到</strong>，一直对信息安全专业感兴趣并且因此而来到重邮的我，在大二大三分专业之际，如愿以偿进入了信息安全专业，并且还是最好的一个班之后，我却突然不想学了。那种感觉就像，你一直在追逐某样东西，但当你最终要到达终点的时候，结果已经不重要了。之所以放弃信息安全，是因为我认为这个行业技术要求确实高，而且技术分层太明显了，我从来不认为自己是一个高手，并且我不大喜欢去研究别人的东西(信安，必须知己知彼)，我更喜欢创造，所以，即使我现在在信息安全专业，但也没怎么用心学习那个方向</li>\n<li><strong>万万没想到</strong>，大一大二一直信誓旦旦地说要考研的我，居然在大二下学期突然放弃了考研这个想法，并且把之前的教材都卖了，我称之为破釜沉舟，这或许是我做得最决绝的一次。以前一直认为，大学本科多学一些基本知识，然后研究生阶段就多做一些实际的事情，这样或许能找一个更好的工作。但当我真正去采访了几个研究生后，我发现，考研或许并没有我想象的那么好。考研的学长多半都后悔了(当然，不可否认，没考研的人也多半都后悔了)。三年时间，毕业的时候是2019年，好像是25或者26了吧，我不想把我最美好的20几岁花在这上面，即使这样做或许会有更舒适的未来，但那样获得的未来我一定不会很高兴。所以，我还是坚持以前的想法，人生得意须尽欢，莫使金樽空对月，及时行乐，万一明天就挂了呢。我这个人想法很多，我喜欢的是创造，而不是看那些无聊的论文，而且没准研究生还要应付比社会上还要复杂的关系。所以，找工作，或者创业吧。</li>\n</ul>\n<h1 id=\"那些难忘的事\"><a href=\"#那些难忘的事\" class=\"headerlink\" title=\"那些难忘的事\"></a>那些难忘的事</h1><ul>\n<li>今年，全家人在一起照了全家福(虽然还是有几个堂姐堂哥没到)</li>\n<li>今年，我发现，世界上不会吐痰的不只我一个，还有胡一菲……</li>\n<li><p>今年，大年初一就和一群朋友去河边吃烧烤，永远忘不了他们<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_1.jpg\" alt=\"\">  </p>\n</li>\n<li><p>今年，家里终于把宽带升级为4M了，学校的宽带也免费升级到了4M，不过我回家的时间也越来越少了</p>\n</li>\n<li>暑假参加了一次“三下乡”活动，现在都还记得酉阳那群小朋友</li>\n<li>今年，第一次一个人去看了一场电影《后会无期》</li>\n<li>今年将域名备案了，把服务器迁移回国内，并且采用了wordpress框架</li>\n<li>今年博客的单日最高访问量达到1600</li>\n<li>第一次暑假在学校呆了这么长的时间，大概一个月，而且几乎每天都在坚持锻炼，每天至少8圈</li>\n<li>第一次一个人生活了那么久，一个人在堂姐的房子里生活，每天按时起床、按时吃饭、按时睡觉，没想到一个人也能生活得这么有规律。但一个人的日子里，真想找另外一个人陪，那段日子，真的好憧憬能拥有自己的一个家</li>\n<li>第一次记错了开学时间，还好原计划就是提早来了几天</li>\n<li>第一次拥有了自己的一个云服务器，Github学生计划，Digitalocean的服务器</li>\n<li>第一次参加了开源活动，在我们学校举行的opensuse的发行party</li>\n<li>第一次参与实际的项目中去</li>\n<li>第一次在网上参加活动中奖￥600</li>\n<li>第一次因为写代码获得￥500</li>\n<li>终于买了一个机械表，顺便买了一个win8平板</li>\n<li>今年，侄女儿终于到我们家对面的学校上学了，我当年可是上初中才享受到这种待遇</li>\n<li>今年，哥哥又生了一个孩子，我终于有侄儿了，哈哈</li>\n<li>今年，火影漫画完结了，不过还好，我从不看漫画，不过明年，电视版也要结束了吧</li>\n<li>今年，学习了四个Coursera课程，并获得了三个完成声明</li>\n<li>今年，总共花费两万多<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2014-the-last_2.jpg\" alt=\"\">  </li>\n</ul>\n<h1 id=\"感情方面\"><a href=\"#感情方面\" class=\"headerlink\" title=\"感情方面\"></a>感情方面</h1><ul>\n<li><strong>以前</strong>：和前女友分手两年了，今年终于没有怎么找她了，偶尔朋友式的聊聊天，完全没有了以前的感觉，这样也挺好，大家都能去追求新的幸福。不过，在我的内心，依然渴望能找到一个女朋友，因为我渴望爱情，渴望有一个家，我想为这个家努力奋斗。</li>\n<li><strong>现在</strong>：曾经看到一句话：我们不是越长大越不相信爱情，而是越长大越分不清那是不是爱情。2014，上半年的我，什么都没想，连我都不知道上半年都做了什么，下半年却一直在和一个女生几乎天天聊天，年底就想向她表白，但是突然发现，我对她，她对我，都只是朋友的关系，其实完全没有其他的感情。</li>\n<li><strong>未来</strong>：曾经有人问我，世界上有没有人会心甘情愿做备胎？我当时就说，有人。真正爱一个人的时候，你会心甘情愿付出，完全不会去想她会不会回报；真正爱一个人的时候，即使是做备胎，你也愿意一直守护在她身边；真正爱一个人的时候，哪怕十年，你也愿意等。其实，在我心里一直有这么一个人。现在的我不再迷茫，所以，无论她还会不会在意我长得矮，我也想自信一次，我只想为她努力一次。（其实，花了几天学习前端然后做了一个网页<a href=\"http://love.haofly.net\">http://love.haofly.net</a>想给她看的，但被v2ex上的网友批得惨不忍睹，想想还是放弃吧，女生或许更喜欢当面表白）<br>我还真不相信会有谁一字一句把我的总结看完的，不过，反正主要是写个自己看的，也是为了写给以后的自己看看。</li>\n</ul>\n<h1 id=\"平淡的一年，继续走我的平凡之路。\"><a href=\"#平淡的一年，继续走我的平凡之路。\" class=\"headerlink\" title=\"平淡的一年，继续走我的平凡之路。\"></a>平淡的一年，继续走我的平凡之路。</h1><p><a href=\"http://haofly.net/wp-content/uploads/2014/12/2014-the-last4.jpg\"><img src=\"http://haofly.net/wp-content/uploads/2014/12/2014-the-\nlast4.jpg\" alt=\"2014-the-last4\"></a></p>\n"},{"title":"《C和指针》——C语言补漏(指针篇)","date":"2014-05-14T11:06:20.000Z","_content":"没错，对于指针，我确实只能摘取书上的少许内容，因为我在数据结构的时候已经弄明白了很多，所以这一部分并没有仔细的看，还有后面的用\nC语言实现抽象数据类型，数据结构里也有讲，所以我建议还是先看《C和指针》再去学数据结构。\n\n1.在声明指针变量时，可以为它指定初始值，如：\n\nchar *message = “Hello World!”;  \n2.指向整型常量的指针，可以修改指针的的值，但不能修改它所指向的值：`int const * p;`  \n指向整型的常量指针，指针本身无法被修改，但是可以修改它说指向的整型的值：`int * const p;`  \n3.指针变量可以作为左值，如*d = &a;并不是因为他们是指针，而是因为他们试试变量，左值必须要能找到确切的位置  \n4.指针其实也可以相减，前提是他们都指向同一个数组中的元素，而且减法的结果是经过了调整的，会除以元素类型的长度。  \n5.数组(指针)也可以用负来访问，如a[-1]，但是这和其它语言的负索引并不一样，它是指a这个指针前面的一个元素。数组甚至可以用诸如`2[array]`访问\n，因为他们都会被翻译为`#( 2 + (array) )`  \n6.之所以我们在函数声明中包含二维数组的时候必须把第二维的数目声明，是因为我们传递进去的是一个指针数组  \n7.在建立指向函数的指针的时候可以建立一个转换表，就是一个函数指针数组  \n8.在数组不够用的时候要学会使用动态内存分配，一般初始用malloc，之后如果发现不够用，就用realloc  \n9.字符串常量也是一个指针，如”123″+1表示的并不是123，而是123这个字符串的指针加1即元素2的指针，也可以这样烦我呢”123″[1]，他就是元素2\n\n\n封面图片来自Pixabay\n","source":"_posts/C-and-pointer_0.md","raw":"---\ntitle: \"《C和指针》——C语言补漏(指针篇)\"\ndate: 2014-05-14 19:06:20\ncategories: 韦编三绝\n---\n没错，对于指针，我确实只能摘取书上的少许内容，因为我在数据结构的时候已经弄明白了很多，所以这一部分并没有仔细的看，还有后面的用\nC语言实现抽象数据类型，数据结构里也有讲，所以我建议还是先看《C和指针》再去学数据结构。\n\n1.在声明指针变量时，可以为它指定初始值，如：\n\nchar *message = “Hello World!”;  \n2.指向整型常量的指针，可以修改指针的的值，但不能修改它所指向的值：`int const * p;`  \n指向整型的常量指针，指针本身无法被修改，但是可以修改它说指向的整型的值：`int * const p;`  \n3.指针变量可以作为左值，如*d = &a;并不是因为他们是指针，而是因为他们试试变量，左值必须要能找到确切的位置  \n4.指针其实也可以相减，前提是他们都指向同一个数组中的元素，而且减法的结果是经过了调整的，会除以元素类型的长度。  \n5.数组(指针)也可以用负来访问，如a[-1]，但是这和其它语言的负索引并不一样，它是指a这个指针前面的一个元素。数组甚至可以用诸如`2[array]`访问\n，因为他们都会被翻译为`#( 2 + (array) )`  \n6.之所以我们在函数声明中包含二维数组的时候必须把第二维的数目声明，是因为我们传递进去的是一个指针数组  \n7.在建立指向函数的指针的时候可以建立一个转换表，就是一个函数指针数组  \n8.在数组不够用的时候要学会使用动态内存分配，一般初始用malloc，之后如果发现不够用，就用realloc  \n9.字符串常量也是一个指针，如”123″+1表示的并不是123，而是123这个字符串的指针加1即元素2的指针，也可以这样烦我呢”123″[1]，他就是元素2\n\n\n封面图片来自Pixabay\n","slug":"C-and-pointer_0","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p2200059vnz04spda8t","content":"<p>没错，对于指针，我确实只能摘取书上的少许内容，因为我在数据结构的时候已经弄明白了很多，所以这一部分并没有仔细的看，还有后面的用<br>C语言实现抽象数据类型，数据结构里也有讲，所以我建议还是先看《C和指针》再去学数据结构。</p>\n<p>1.在声明指针变量时，可以为它指定初始值，如：</p>\n<p>char <em>message = “Hello World!”;<br>2.指向整型常量的指针，可以修改指针的的值，但不能修改它所指向的值：`int const </em> p;<code>指向整型的常量指针，指针本身无法被修改，但是可以修改它说指向的整型的值：</code>int <em> const p;`<br>3.指针变量可以作为左值，如</em>d = &a;并不是因为他们是指针，而是因为他们试试变量，左值必须要能找到确切的位置<br>4.指针其实也可以相减，前提是他们都指向同一个数组中的元素，而且减法的结果是经过了调整的，会除以元素类型的长度。<br>5.数组(指针)也可以用负来访问，如a[-1]，但是这和其它语言的负索引并不一样，它是指a这个指针前面的一个元素。数组甚至可以用诸如<code>2[array]</code>访问<br>，因为他们都会被翻译为<code>#( 2 + (array) )</code><br>6.之所以我们在函数声明中包含二维数组的时候必须把第二维的数目声明，是因为我们传递进去的是一个指针数组<br>7.在建立指向函数的指针的时候可以建立一个转换表，就是一个函数指针数组<br>8.在数组不够用的时候要学会使用动态内存分配，一般初始用malloc，之后如果发现不够用，就用realloc<br>9.字符串常量也是一个指针，如”123″+1表示的并不是123，而是123这个字符串的指针加1即元素2的指针，也可以这样烦我呢”123″[1]，他就是元素2</p>\n<p>封面图片来自Pixabay</p>\n","excerpt":"","more":"<p>没错，对于指针，我确实只能摘取书上的少许内容，因为我在数据结构的时候已经弄明白了很多，所以这一部分并没有仔细的看，还有后面的用<br>C语言实现抽象数据类型，数据结构里也有讲，所以我建议还是先看《C和指针》再去学数据结构。</p>\n<p>1.在声明指针变量时，可以为它指定初始值，如：</p>\n<p>char <em>message = “Hello World!”;<br>2.指向整型常量的指针，可以修改指针的的值，但不能修改它所指向的值：`int const </em> p;<code>指向整型的常量指针，指针本身无法被修改，但是可以修改它说指向的整型的值：</code>int <em> const p;`<br>3.指针变量可以作为左值，如</em>d = &a;并不是因为他们是指针，而是因为他们试试变量，左值必须要能找到确切的位置<br>4.指针其实也可以相减，前提是他们都指向同一个数组中的元素，而且减法的结果是经过了调整的，会除以元素类型的长度。<br>5.数组(指针)也可以用负来访问，如a[-1]，但是这和其它语言的负索引并不一样，它是指a这个指针前面的一个元素。数组甚至可以用诸如<code>2[array]</code>访问<br>，因为他们都会被翻译为<code>#( 2 + (array) )</code><br>6.之所以我们在函数声明中包含二维数组的时候必须把第二维的数目声明，是因为我们传递进去的是一个指针数组<br>7.在建立指向函数的指针的时候可以建立一个转换表，就是一个函数指针数组<br>8.在数组不够用的时候要学会使用动态内存分配，一般初始用malloc，之后如果发现不够用，就用realloc<br>9.字符串常量也是一个指针，如”123″+1表示的并不是123，而是123这个字符串的指针加1即元素2的指针，也可以这样烦我呢”123″[1]，他就是元素2</p>\n<p>封面图片来自Pixabay</p>\n"},{"title":"《C和指针》——C语言补漏(基本用法篇)","date":"2014-05-14T11:06:57.000Z","_content":"[《C和指针》——Kenneth\nA.Reek](http://www.amazon.cn/C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88-Pointers-On-C-\nKenneth-A-Reek/dp/B00163LU68/ref=sr_1_1?ie=UTF8&qid=1400057920&sr=8-1&keywords\n=C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88)\n\n这本书应该是我最后一次买盗版的经典书籍了，买了这本书后我就写下了[学生应尽量购买正版](http://haofly.net/thoughts1/)，发誓以后\n都在正规的书店(包括网上书店)买书。  \n本来以为这本书的内容挺少的，但当读到指针的部分发现我以前了解的真的很少，还好我上学期认真学过《数据结构》这门课，对指针的使用还算熟练，不然光靠以前自学的谭浩\n强的C语言和课堂上教的，根本就只能算是一个只知道C语言这个东西的人。  \n至于这本书的阅读时间，我觉得我的时间并不正确，这本书应该是在C语言基础学完后，在数据结构之前来学习，不仅可以深入理解一下C语言的精髓，还可以顺利过渡到数据结\n构的学习。  \n在这里就以前我不了解的一些C语言知识做一些归纳(不过这里很多都是一些以前没见过的函数以及一些用法，当然这些函数或者是用法并不是罕见的，只是在学生中比较罕见罢\n了，我在网上看过很多高手的代码，发现有一些还是挺常用的)。  \n\n1.要从逻辑上删除一段C代码，更好的办法是使用#if指令。这样可以防止在一段内部已经有注释的代码外面加上注释所引起的注释不匹配的问题：\n\n> #if 0  \nstatements  \n#endif\n\n2.EOF是一个整型值，在很多读入字符的情况下，如果要判断输入是否结束，需要把字符读入为整型值，这样可以判断输入是否结束。  \n3.程序会使用一个运行时堆栈，它用于存储函数的局部变量和返回地址。程序同时也可以使用静态内存，存储与静态内存中的变量在程序的整个执行过程中将一直保留着他们的\n值。  \n4.标准规定了几个特殊的三字母词，比如??(代表[，不过这个应该很少见，至少我之前一直没碰到这种情况  \n5.如果要创建新的类名，应该使用typedef而不是#define，因为后者无法正确处理指针类型，例如：\n\n> #define ptr char *  \nptr a, b;\n\n上面代码会使a成为一个char指针，而b却被声明为一个char  \n6.在定义常量的时候我们应该使用#define而不是const：\n\n> #define MAX_ELEMENTS 50  \nint const max_eleemnts 50;\n\n因为只要允许使用字面值的地方都可以使用前者，比如声明数组的长度，const变量只能用于允许使用变量的地方。  \n7.链接属性：分为3种——external(外部)、internal(内部)和none(无)。没有链接属性的标识符(none)总是被当作单独的个体，也就是说\n该标识符被当作独立不同的实体。属于internal链接属性的标识符在同一个源文件内的所有声明都指同一个实体，但位于不同源文件的多个声明则分属不同的实体。最后\n，属于external链接属性的标识符不论声明多少次，位于几个源文件都表示同一个实体。  \n8.凡是在任何代码块之外声明的变量总是存储于静态内存中，也就是不属于堆栈的内存，这类变量称为静态变量。  \n9.标准说明无符号值的所有移位操作都是逻辑移位，但对于有符号值，到底是采用逻辑移位还是算术移位取决于编译器。也就是说一个程序如果所使用了有符号数的移位操作，\n他就是不可移植的。  \n10.C函数可以理解为所有的参数均以“传值调用”的方式进行传递，传递数组时也传递的是指针的值。  \n11.只要有可能，函数的指针形参都应该声明为const  \n12.不要使用strlen来相减，因为strlen是无符号数，那么相减的结果必然也是无符号数，所以像`if( strlen(x) - strlen(y)\n>= 0 )`这种用法就是错的，因为结果永远都是大于等于零  \n13.注重可移植的程序应该避免使用位段。任何可以用位段实现的任务都可以使用移位和屏蔽来实现。  \n14.编译器为一个结构变量的成员分配内存时要满足他们的边界对齐要求。在实现结构存储的边界对齐时，可能会浪费一部分内存空间。根据边界对齐要求降序排列结构成员可\n以最大限度地减少结构存储中浪费的内存空间。  \n15.在程序中，数组的长度一般是根据运行后决定的，所以最好使用动态内存分配。  \n16.几个预定义符号：\n\n__FILE__：进行编译的源文件名  \n__LINE__：文件当前行的行号  \n__DATE__：文件被编译的日期  \n__TIME__：文件被编译的时间  \n__STDC__：如果编译器遵循ANSI C，其值就为1，否则未定义  \n17.如果相同的代码需要出现在程序的几个地方，通常的做法是将它实现为一个函数，而不是宏#define  \n18.条件编译：可以允许选择某条语句或某组语句进行翻译或者被忽略，这常用语本地调试：\n\n> #if constant-expression  \nstatements  \n#endif\n\n19.文件包含：如果是库文件一般用<>，如果是本地文件一般用””  \n20.删除多重包含引发的危险：\n\n> #ifndef _HEADERNAME_H  \n#define _HEADERNAME_H 1  \n/*  \n** All the stuff that you want in the header file  \n*/  \n#endif\n\n19.绝大多数流是完全缓冲的，意味着“读取”和“写入”实际上是从一块被称为缓冲区的内存区域来回赋值数据。用于输出流的缓冲区只有当它写满时才会被刷新到设备或文\n件中。也可使用fflush迫使缓冲区的数据立即写入，不管它是否已满。  \n20.函数库为I/O所提供的接口称为流。  \n21.fgets函数比gets函数更为安全，它把缓冲区长度作为参数之一，可以保证一个长输入行不会溢出缓冲区，gets函数会去除它所读取的行的换行符，puts\n函数在写入到缓冲区的文本后面加上一个换行符\n\n封面图片来自Pixebay\n","source":"_posts/C-and-pointer_2.md","raw":"---\ntitle: \"《C和指针》——C语言补漏(基本用法篇)\"\ndate: 2014-05-14 19:06:57\ncategories: 韦编三绝\n---\n[《C和指针》——Kenneth\nA.Reek](http://www.amazon.cn/C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88-Pointers-On-C-\nKenneth-A-Reek/dp/B00163LU68/ref=sr_1_1?ie=UTF8&qid=1400057920&sr=8-1&keywords\n=C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88)\n\n这本书应该是我最后一次买盗版的经典书籍了，买了这本书后我就写下了[学生应尽量购买正版](http://haofly.net/thoughts1/)，发誓以后\n都在正规的书店(包括网上书店)买书。  \n本来以为这本书的内容挺少的，但当读到指针的部分发现我以前了解的真的很少，还好我上学期认真学过《数据结构》这门课，对指针的使用还算熟练，不然光靠以前自学的谭浩\n强的C语言和课堂上教的，根本就只能算是一个只知道C语言这个东西的人。  \n至于这本书的阅读时间，我觉得我的时间并不正确，这本书应该是在C语言基础学完后，在数据结构之前来学习，不仅可以深入理解一下C语言的精髓，还可以顺利过渡到数据结\n构的学习。  \n在这里就以前我不了解的一些C语言知识做一些归纳(不过这里很多都是一些以前没见过的函数以及一些用法，当然这些函数或者是用法并不是罕见的，只是在学生中比较罕见罢\n了，我在网上看过很多高手的代码，发现有一些还是挺常用的)。  \n\n1.要从逻辑上删除一段C代码，更好的办法是使用#if指令。这样可以防止在一段内部已经有注释的代码外面加上注释所引起的注释不匹配的问题：\n\n> #if 0  \nstatements  \n#endif\n\n2.EOF是一个整型值，在很多读入字符的情况下，如果要判断输入是否结束，需要把字符读入为整型值，这样可以判断输入是否结束。  \n3.程序会使用一个运行时堆栈，它用于存储函数的局部变量和返回地址。程序同时也可以使用静态内存，存储与静态内存中的变量在程序的整个执行过程中将一直保留着他们的\n值。  \n4.标准规定了几个特殊的三字母词，比如??(代表[，不过这个应该很少见，至少我之前一直没碰到这种情况  \n5.如果要创建新的类名，应该使用typedef而不是#define，因为后者无法正确处理指针类型，例如：\n\n> #define ptr char *  \nptr a, b;\n\n上面代码会使a成为一个char指针，而b却被声明为一个char  \n6.在定义常量的时候我们应该使用#define而不是const：\n\n> #define MAX_ELEMENTS 50  \nint const max_eleemnts 50;\n\n因为只要允许使用字面值的地方都可以使用前者，比如声明数组的长度，const变量只能用于允许使用变量的地方。  \n7.链接属性：分为3种——external(外部)、internal(内部)和none(无)。没有链接属性的标识符(none)总是被当作单独的个体，也就是说\n该标识符被当作独立不同的实体。属于internal链接属性的标识符在同一个源文件内的所有声明都指同一个实体，但位于不同源文件的多个声明则分属不同的实体。最后\n，属于external链接属性的标识符不论声明多少次，位于几个源文件都表示同一个实体。  \n8.凡是在任何代码块之外声明的变量总是存储于静态内存中，也就是不属于堆栈的内存，这类变量称为静态变量。  \n9.标准说明无符号值的所有移位操作都是逻辑移位，但对于有符号值，到底是采用逻辑移位还是算术移位取决于编译器。也就是说一个程序如果所使用了有符号数的移位操作，\n他就是不可移植的。  \n10.C函数可以理解为所有的参数均以“传值调用”的方式进行传递，传递数组时也传递的是指针的值。  \n11.只要有可能，函数的指针形参都应该声明为const  \n12.不要使用strlen来相减，因为strlen是无符号数，那么相减的结果必然也是无符号数，所以像`if( strlen(x) - strlen(y)\n>= 0 )`这种用法就是错的，因为结果永远都是大于等于零  \n13.注重可移植的程序应该避免使用位段。任何可以用位段实现的任务都可以使用移位和屏蔽来实现。  \n14.编译器为一个结构变量的成员分配内存时要满足他们的边界对齐要求。在实现结构存储的边界对齐时，可能会浪费一部分内存空间。根据边界对齐要求降序排列结构成员可\n以最大限度地减少结构存储中浪费的内存空间。  \n15.在程序中，数组的长度一般是根据运行后决定的，所以最好使用动态内存分配。  \n16.几个预定义符号：\n\n__FILE__：进行编译的源文件名  \n__LINE__：文件当前行的行号  \n__DATE__：文件被编译的日期  \n__TIME__：文件被编译的时间  \n__STDC__：如果编译器遵循ANSI C，其值就为1，否则未定义  \n17.如果相同的代码需要出现在程序的几个地方，通常的做法是将它实现为一个函数，而不是宏#define  \n18.条件编译：可以允许选择某条语句或某组语句进行翻译或者被忽略，这常用语本地调试：\n\n> #if constant-expression  \nstatements  \n#endif\n\n19.文件包含：如果是库文件一般用<>，如果是本地文件一般用””  \n20.删除多重包含引发的危险：\n\n> #ifndef _HEADERNAME_H  \n#define _HEADERNAME_H 1  \n/*  \n** All the stuff that you want in the header file  \n*/  \n#endif\n\n19.绝大多数流是完全缓冲的，意味着“读取”和“写入”实际上是从一块被称为缓冲区的内存区域来回赋值数据。用于输出流的缓冲区只有当它写满时才会被刷新到设备或文\n件中。也可使用fflush迫使缓冲区的数据立即写入，不管它是否已满。  \n20.函数库为I/O所提供的接口称为流。  \n21.fgets函数比gets函数更为安全，它把缓冲区长度作为参数之一，可以保证一个长输入行不会溢出缓冲区，gets函数会去除它所读取的行的换行符，puts\n函数在写入到缓冲区的文本后面加上一个换行符\n\n封面图片来自Pixebay\n","slug":"C-and-pointer_2","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p2a00069vnzkjxboygm","content":"<p><a href=\"http://www.amazon.cn/C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88-Pointers-On-C-\nKenneth-A-Reek/dp/B00163LU68/ref=sr_1_1?ie=UTF8&amp;qid=1400057920&amp;sr=8-1&amp;keywords\n=C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88\" target=\"_blank\" rel=\"external\">《C和指针》——Kenneth<br>A.Reek</a></p>\n<p>这本书应该是我最后一次买盗版的经典书籍了，买了这本书后我就写下了<a href=\"http://haofly.net/thoughts1/\">学生应尽量购买正版</a>，发誓以后<br>都在正规的书店(包括网上书店)买书。<br>本来以为这本书的内容挺少的，但当读到指针的部分发现我以前了解的真的很少，还好我上学期认真学过《数据结构》这门课，对指针的使用还算熟练，不然光靠以前自学的谭浩<br>强的C语言和课堂上教的，根本就只能算是一个只知道C语言这个东西的人。<br>至于这本书的阅读时间，我觉得我的时间并不正确，这本书应该是在C语言基础学完后，在数据结构之前来学习，不仅可以深入理解一下C语言的精髓，还可以顺利过渡到数据结<br>构的学习。<br>在这里就以前我不了解的一些C语言知识做一些归纳(不过这里很多都是一些以前没见过的函数以及一些用法，当然这些函数或者是用法并不是罕见的，只是在学生中比较罕见罢<br>了，我在网上看过很多高手的代码，发现有一些还是挺常用的)。  </p>\n<p>1.要从逻辑上删除一段C代码，更好的办法是使用#if指令。这样可以防止在一段内部已经有注释的代码外面加上注释所引起的注释不匹配的问题：</p>\n<blockquote>\n<p>#if 0<br>statements  </p>\n<p>#endif</p>\n</blockquote>\n<p>2.EOF是一个整型值，在很多读入字符的情况下，如果要判断输入是否结束，需要把字符读入为整型值，这样可以判断输入是否结束。<br>3.程序会使用一个运行时堆栈，它用于存储函数的局部变量和返回地址。程序同时也可以使用静态内存，存储与静态内存中的变量在程序的整个执行过程中将一直保留着他们的<br>值。<br>4.标准规定了几个特殊的三字母词，比如??(代表[，不过这个应该很少见，至少我之前一直没碰到这种情况<br>5.如果要创建新的类名，应该使用typedef而不是#define，因为后者无法正确处理指针类型，例如：</p>\n<blockquote>\n<p>#define ptr char *<br>ptr a, b;</p>\n</blockquote>\n<p>上面代码会使a成为一个char指针，而b却被声明为一个char<br>6.在定义常量的时候我们应该使用#define而不是const：</p>\n<blockquote>\n<p>#define MAX_ELEMENTS 50<br>int const max_eleemnts 50;</p>\n</blockquote>\n<p>因为只要允许使用字面值的地方都可以使用前者，比如声明数组的长度，const变量只能用于允许使用变量的地方。<br>7.链接属性：分为3种——external(外部)、internal(内部)和none(无)。没有链接属性的标识符(none)总是被当作单独的个体，也就是说<br>该标识符被当作独立不同的实体。属于internal链接属性的标识符在同一个源文件内的所有声明都指同一个实体，但位于不同源文件的多个声明则分属不同的实体。最后<br>，属于external链接属性的标识符不论声明多少次，位于几个源文件都表示同一个实体。<br>8.凡是在任何代码块之外声明的变量总是存储于静态内存中，也就是不属于堆栈的内存，这类变量称为静态变量。<br>9.标准说明无符号值的所有移位操作都是逻辑移位，但对于有符号值，到底是采用逻辑移位还是算术移位取决于编译器。也就是说一个程序如果所使用了有符号数的移位操作，<br>他就是不可移植的。<br>10.C函数可以理解为所有的参数均以“传值调用”的方式进行传递，传递数组时也传递的是指针的值。<br>11.只要有可能，函数的指针形参都应该声明为const<br>12.不要使用strlen来相减，因为strlen是无符号数，那么相减的结果必然也是无符号数，所以像`if( strlen(x) - strlen(y)</p>\n<blockquote>\n<p>= 0 )`这种用法就是错的，因为结果永远都是大于等于零<br>13.注重可移植的程序应该避免使用位段。任何可以用位段实现的任务都可以使用移位和屏蔽来实现。<br>14.编译器为一个结构变量的成员分配内存时要满足他们的边界对齐要求。在实现结构存储的边界对齐时，可能会浪费一部分内存空间。根据边界对齐要求降序排列结构成员可<br>以最大限度地减少结构存储中浪费的内存空间。<br>15.在程序中，数组的长度一般是根据运行后决定的，所以最好使用动态内存分配。<br>16.几个预定义符号：</p>\n</blockquote>\n<p><strong>FILE</strong>：进行编译的源文件名<br><strong>LINE</strong>：文件当前行的行号<br><strong>DATE</strong>：文件被编译的日期<br><strong>TIME</strong>：文件被编译的时间<br><strong>STDC</strong>：如果编译器遵循ANSI C，其值就为1，否则未定义<br>17.如果相同的代码需要出现在程序的几个地方，通常的做法是将它实现为一个函数，而不是宏#define<br>18.条件编译：可以允许选择某条语句或某组语句进行翻译或者被忽略，这常用语本地调试：</p>\n<blockquote>\n<p>#if constant-expression<br>statements  </p>\n<p>#endif</p>\n</blockquote>\n<p>19.文件包含：如果是库文件一般用&lt;&gt;，如果是本地文件一般用””<br>20.删除多重包含引发的危险：</p>\n<blockquote>\n<p>#ifndef _HEADERNAME_H  </p>\n<p>#define _HEADERNAME_H 1<br>/<em><br>** All the stuff that you want in the header file  \n</em>/  </p>\n<p>#endif</p>\n</blockquote>\n<p>19.绝大多数流是完全缓冲的，意味着“读取”和“写入”实际上是从一块被称为缓冲区的内存区域来回赋值数据。用于输出流的缓冲区只有当它写满时才会被刷新到设备或文<br>件中。也可使用fflush迫使缓冲区的数据立即写入，不管它是否已满。<br>20.函数库为I/O所提供的接口称为流。<br>21.fgets函数比gets函数更为安全，它把缓冲区长度作为参数之一，可以保证一个长输入行不会溢出缓冲区，gets函数会去除它所读取的行的换行符，puts<br>函数在写入到缓冲区的文本后面加上一个换行符</p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p><a href=\"http://www.amazon.cn/C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88-Pointers-On-C-\nKenneth-A-Reek/dp/B00163LU68/ref=sr_1_1?ie=UTF8&amp;qid=1400057920&amp;sr=8-1&amp;keywords\n=C\\%E5\\%92\\%8C\\%E6\\%8C\\%87\\%E9\\%92\\%88\">《C和指针》——Kenneth<br>A.Reek</a></p>\n<p>这本书应该是我最后一次买盗版的经典书籍了，买了这本书后我就写下了<a href=\"http://haofly.net/thoughts1/\">学生应尽量购买正版</a>，发誓以后<br>都在正规的书店(包括网上书店)买书。<br>本来以为这本书的内容挺少的，但当读到指针的部分发现我以前了解的真的很少，还好我上学期认真学过《数据结构》这门课，对指针的使用还算熟练，不然光靠以前自学的谭浩<br>强的C语言和课堂上教的，根本就只能算是一个只知道C语言这个东西的人。<br>至于这本书的阅读时间，我觉得我的时间并不正确，这本书应该是在C语言基础学完后，在数据结构之前来学习，不仅可以深入理解一下C语言的精髓，还可以顺利过渡到数据结<br>构的学习。<br>在这里就以前我不了解的一些C语言知识做一些归纳(不过这里很多都是一些以前没见过的函数以及一些用法，当然这些函数或者是用法并不是罕见的，只是在学生中比较罕见罢<br>了，我在网上看过很多高手的代码，发现有一些还是挺常用的)。  </p>\n<p>1.要从逻辑上删除一段C代码，更好的办法是使用#if指令。这样可以防止在一段内部已经有注释的代码外面加上注释所引起的注释不匹配的问题：</p>\n<blockquote>\n<p>#if 0<br>statements  </p>\n<p>#endif</p>\n</blockquote>\n<p>2.EOF是一个整型值，在很多读入字符的情况下，如果要判断输入是否结束，需要把字符读入为整型值，这样可以判断输入是否结束。<br>3.程序会使用一个运行时堆栈，它用于存储函数的局部变量和返回地址。程序同时也可以使用静态内存，存储与静态内存中的变量在程序的整个执行过程中将一直保留着他们的<br>值。<br>4.标准规定了几个特殊的三字母词，比如??(代表[，不过这个应该很少见，至少我之前一直没碰到这种情况<br>5.如果要创建新的类名，应该使用typedef而不是#define，因为后者无法正确处理指针类型，例如：</p>\n<blockquote>\n<p>#define ptr char *<br>ptr a, b;</p>\n</blockquote>\n<p>上面代码会使a成为一个char指针，而b却被声明为一个char<br>6.在定义常量的时候我们应该使用#define而不是const：</p>\n<blockquote>\n<p>#define MAX_ELEMENTS 50<br>int const max_eleemnts 50;</p>\n</blockquote>\n<p>因为只要允许使用字面值的地方都可以使用前者，比如声明数组的长度，const变量只能用于允许使用变量的地方。<br>7.链接属性：分为3种——external(外部)、internal(内部)和none(无)。没有链接属性的标识符(none)总是被当作单独的个体，也就是说<br>该标识符被当作独立不同的实体。属于internal链接属性的标识符在同一个源文件内的所有声明都指同一个实体，但位于不同源文件的多个声明则分属不同的实体。最后<br>，属于external链接属性的标识符不论声明多少次，位于几个源文件都表示同一个实体。<br>8.凡是在任何代码块之外声明的变量总是存储于静态内存中，也就是不属于堆栈的内存，这类变量称为静态变量。<br>9.标准说明无符号值的所有移位操作都是逻辑移位，但对于有符号值，到底是采用逻辑移位还是算术移位取决于编译器。也就是说一个程序如果所使用了有符号数的移位操作，<br>他就是不可移植的。<br>10.C函数可以理解为所有的参数均以“传值调用”的方式进行传递，传递数组时也传递的是指针的值。<br>11.只要有可能，函数的指针形参都应该声明为const<br>12.不要使用strlen来相减，因为strlen是无符号数，那么相减的结果必然也是无符号数，所以像`if( strlen(x) - strlen(y)</p>\n<blockquote>\n<p>= 0 )`这种用法就是错的，因为结果永远都是大于等于零<br>13.注重可移植的程序应该避免使用位段。任何可以用位段实现的任务都可以使用移位和屏蔽来实现。<br>14.编译器为一个结构变量的成员分配内存时要满足他们的边界对齐要求。在实现结构存储的边界对齐时，可能会浪费一部分内存空间。根据边界对齐要求降序排列结构成员可<br>以最大限度地减少结构存储中浪费的内存空间。<br>15.在程序中，数组的长度一般是根据运行后决定的，所以最好使用动态内存分配。<br>16.几个预定义符号：</p>\n</blockquote>\n<p><strong>FILE</strong>：进行编译的源文件名<br><strong>LINE</strong>：文件当前行的行号<br><strong>DATE</strong>：文件被编译的日期<br><strong>TIME</strong>：文件被编译的时间<br><strong>STDC</strong>：如果编译器遵循ANSI C，其值就为1，否则未定义<br>17.如果相同的代码需要出现在程序的几个地方，通常的做法是将它实现为一个函数，而不是宏#define<br>18.条件编译：可以允许选择某条语句或某组语句进行翻译或者被忽略，这常用语本地调试：</p>\n<blockquote>\n<p>#if constant-expression<br>statements  </p>\n<p>#endif</p>\n</blockquote>\n<p>19.文件包含：如果是库文件一般用&lt;&gt;，如果是本地文件一般用””<br>20.删除多重包含引发的危险：</p>\n<blockquote>\n<p>#ifndef _HEADERNAME_H  </p>\n<p>#define _HEADERNAME_H 1<br>/<em><br>** All the stuff that you want in the header file  \n</em>/  </p>\n<p>#endif</p>\n</blockquote>\n<p>19.绝大多数流是完全缓冲的，意味着“读取”和“写入”实际上是从一块被称为缓冲区的内存区域来回赋值数据。用于输出流的缓冲区只有当它写满时才会被刷新到设备或文<br>件中。也可使用fflush迫使缓冲区的数据立即写入，不管它是否已满。<br>20.函数库为I/O所提供的接口称为流。<br>21.fgets函数比gets函数更为安全，它把缓冲区长度作为参数之一，可以保证一个长输入行不会溢出缓冲区，gets函数会去除它所读取的行的换行符，puts<br>函数在写入到缓冲区的文本后面加上一个换行符</p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"选择低调的人生","date":"2014-06-14T09:59:29.000Z","_content":"很多人都不喜欢太高调的人，但又有很多人觉得低调的人很虚伪。\n\n大一的时候因为C语言自学得比较早，学得比较刻苦，所以当时有很多同学都叫我“大神”，“大神”这个词我也是到了大学才听过，现在多用于尊称那些技术非常牛逼之人。其\n实我第一次看到牛人也会不自觉地用“大神”这个称呼，但之后我就不会这么称呼了，因为我自己也很讨厌这个叫法，我很反感别人叫我“大神”，我知道自己几斤几两，我只是\n比下有余，但我比上确实是不足的。大学的前两年里，我接触的东西肯定是比百分之八九十的人都还多吧，但这又能证明什么，我清楚地明白我只是知识面比较广而已，并不代表\n我在那些方面有什么很深的研究学习，真正的“大神”应该是对自己的技术有非常高的造诣并且十分热爱该技术之人。其实神也是人，只是他做了普通人做不到的事情，所以人们\n才尊称他为“神”。在我看来，无论是对技术的了解，还是对技术的热爱程度，我都比不上真正的大神，而且山外有山，人外有人，你永远不知道还有多少比你强的人。\n\n\n怕别人叫我“大神”除了因为我配不上这个名号外，还因为有了这个称呼后，压力会更大。众所周知，人怕出名猪怕壮，我不怕别人看不起我，就怕别人看高我。虽然我一向不是\n活在别人的眼光里，但对别人对自己的看法多少还是有点关注的。当别人把你看高后，你不得不面对巨大的压力，生怕达不到别人的要求。其实这又何必呢，我学技术不是为了利\n益更不是为了别人的认可，只是想获得自己内心的满足而已，就像我博客的小标题一样“Change My World by\nProgram”。我热爱编程，并愿意为之奋斗终身。\n\n很多人都有一种错觉，总感觉身边的人都在关注自己的一举一动，但经过我的观察发现，其实身边大多数人并没有你想象的那么在意你，有你或没你，对他没有任何的影响。所以\n做事别太高调，只有心甘情愿低调的人，才能充分享受生活，活得平心静气、踏踏实实，这样的人才能体会人间的真性情，才能不为外界左右，是最有思想的一群人。\n\n高调生活在自己的世界里，低调生活在别人的世界里。安于低调，享受低调。\n\n封面图片来自Pixebay\n","source":"_posts/a-low-key-life.md","raw":"---\ntitle: \"选择低调的人生\"\ndate: 2014-06-14 17:59:29\ncategories: 边走边想\n---\n很多人都不喜欢太高调的人，但又有很多人觉得低调的人很虚伪。\n\n大一的时候因为C语言自学得比较早，学得比较刻苦，所以当时有很多同学都叫我“大神”，“大神”这个词我也是到了大学才听过，现在多用于尊称那些技术非常牛逼之人。其\n实我第一次看到牛人也会不自觉地用“大神”这个称呼，但之后我就不会这么称呼了，因为我自己也很讨厌这个叫法，我很反感别人叫我“大神”，我知道自己几斤几两，我只是\n比下有余，但我比上确实是不足的。大学的前两年里，我接触的东西肯定是比百分之八九十的人都还多吧，但这又能证明什么，我清楚地明白我只是知识面比较广而已，并不代表\n我在那些方面有什么很深的研究学习，真正的“大神”应该是对自己的技术有非常高的造诣并且十分热爱该技术之人。其实神也是人，只是他做了普通人做不到的事情，所以人们\n才尊称他为“神”。在我看来，无论是对技术的了解，还是对技术的热爱程度，我都比不上真正的大神，而且山外有山，人外有人，你永远不知道还有多少比你强的人。\n\n\n怕别人叫我“大神”除了因为我配不上这个名号外，还因为有了这个称呼后，压力会更大。众所周知，人怕出名猪怕壮，我不怕别人看不起我，就怕别人看高我。虽然我一向不是\n活在别人的眼光里，但对别人对自己的看法多少还是有点关注的。当别人把你看高后，你不得不面对巨大的压力，生怕达不到别人的要求。其实这又何必呢，我学技术不是为了利\n益更不是为了别人的认可，只是想获得自己内心的满足而已，就像我博客的小标题一样“Change My World by\nProgram”。我热爱编程，并愿意为之奋斗终身。\n\n很多人都有一种错觉，总感觉身边的人都在关注自己的一举一动，但经过我的观察发现，其实身边大多数人并没有你想象的那么在意你，有你或没你，对他没有任何的影响。所以\n做事别太高调，只有心甘情愿低调的人，才能充分享受生活，活得平心静气、踏踏实实，这样的人才能体会人间的真性情，才能不为外界左右，是最有思想的一群人。\n\n高调生活在自己的世界里，低调生活在别人的世界里。安于低调，享受低调。\n\n封面图片来自Pixebay\n","slug":"a-low-key-life","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p2r00079vnz4l8v18ad","content":"<p>很多人都不喜欢太高调的人，但又有很多人觉得低调的人很虚伪。</p>\n<p>大一的时候因为C语言自学得比较早，学得比较刻苦，所以当时有很多同学都叫我“大神”，“大神”这个词我也是到了大学才听过，现在多用于尊称那些技术非常牛逼之人。其<br>实我第一次看到牛人也会不自觉地用“大神”这个称呼，但之后我就不会这么称呼了，因为我自己也很讨厌这个叫法，我很反感别人叫我“大神”，我知道自己几斤几两，我只是<br>比下有余，但我比上确实是不足的。大学的前两年里，我接触的东西肯定是比百分之八九十的人都还多吧，但这又能证明什么，我清楚地明白我只是知识面比较广而已，并不代表<br>我在那些方面有什么很深的研究学习，真正的“大神”应该是对自己的技术有非常高的造诣并且十分热爱该技术之人。其实神也是人，只是他做了普通人做不到的事情，所以人们<br>才尊称他为“神”。在我看来，无论是对技术的了解，还是对技术的热爱程度，我都比不上真正的大神，而且山外有山，人外有人，你永远不知道还有多少比你强的人。</p>\n<p>怕别人叫我“大神”除了因为我配不上这个名号外，还因为有了这个称呼后，压力会更大。众所周知，人怕出名猪怕壮，我不怕别人看不起我，就怕别人看高我。虽然我一向不是<br>活在别人的眼光里，但对别人对自己的看法多少还是有点关注的。当别人把你看高后，你不得不面对巨大的压力，生怕达不到别人的要求。其实这又何必呢，我学技术不是为了利<br>益更不是为了别人的认可，只是想获得自己内心的满足而已，就像我博客的小标题一样“Change My World by<br>Program”。我热爱编程，并愿意为之奋斗终身。</p>\n<p>很多人都有一种错觉，总感觉身边的人都在关注自己的一举一动，但经过我的观察发现，其实身边大多数人并没有你想象的那么在意你，有你或没你，对他没有任何的影响。所以<br>做事别太高调，只有心甘情愿低调的人，才能充分享受生活，活得平心静气、踏踏实实，这样的人才能体会人间的真性情，才能不为外界左右，是最有思想的一群人。</p>\n<p>高调生活在自己的世界里，低调生活在别人的世界里。安于低调，享受低调。</p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>很多人都不喜欢太高调的人，但又有很多人觉得低调的人很虚伪。</p>\n<p>大一的时候因为C语言自学得比较早，学得比较刻苦，所以当时有很多同学都叫我“大神”，“大神”这个词我也是到了大学才听过，现在多用于尊称那些技术非常牛逼之人。其<br>实我第一次看到牛人也会不自觉地用“大神”这个称呼，但之后我就不会这么称呼了，因为我自己也很讨厌这个叫法，我很反感别人叫我“大神”，我知道自己几斤几两，我只是<br>比下有余，但我比上确实是不足的。大学的前两年里，我接触的东西肯定是比百分之八九十的人都还多吧，但这又能证明什么，我清楚地明白我只是知识面比较广而已，并不代表<br>我在那些方面有什么很深的研究学习，真正的“大神”应该是对自己的技术有非常高的造诣并且十分热爱该技术之人。其实神也是人，只是他做了普通人做不到的事情，所以人们<br>才尊称他为“神”。在我看来，无论是对技术的了解，还是对技术的热爱程度，我都比不上真正的大神，而且山外有山，人外有人，你永远不知道还有多少比你强的人。</p>\n<p>怕别人叫我“大神”除了因为我配不上这个名号外，还因为有了这个称呼后，压力会更大。众所周知，人怕出名猪怕壮，我不怕别人看不起我，就怕别人看高我。虽然我一向不是<br>活在别人的眼光里，但对别人对自己的看法多少还是有点关注的。当别人把你看高后，你不得不面对巨大的压力，生怕达不到别人的要求。其实这又何必呢，我学技术不是为了利<br>益更不是为了别人的认可，只是想获得自己内心的满足而已，就像我博客的小标题一样“Change My World by<br>Program”。我热爱编程，并愿意为之奋斗终身。</p>\n<p>很多人都有一种错觉，总感觉身边的人都在关注自己的一举一动，但经过我的观察发现，其实身边大多数人并没有你想象的那么在意你，有你或没你，对他没有任何的影响。所以<br>做事别太高调，只有心甘情愿低调的人，才能充分享受生活，活得平心静气、踏踏实实，这样的人才能体会人间的真性情，才能不为外界左右，是最有思想的一群人。</p>\n<p>高调生活在自己的世界里，低调生活在别人的世界里。安于低调，享受低调。</p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"《暗时间》","date":"2016-05-08T12:06:20.000Z","_content":"最近真的太忙，但是再忙我也强迫自己抽出一些碎片时间来阅读，所以写书评也是必要的，因为，一本书不写书评，我根本就看不下去另一本书。对了，其实前几天还看过一本书叫《程序员的数学思维修炼》，这本书几乎是直接翻过去的，因为里面的内容基本上是给没上过大学的人看的，所以也就没有写书评的必要了。\n\n《暗时间》是本与效率有很大关系的书，有很多套路，但是也不乏新奇之处，很多章节虽然啰嗦而且段落太长(不知道是不是我kindle显示的原因)，但是书中对于每一个结论的得出，都是经过了层层推敲，循序渐进地引导我们进入作者的思维中去。而不是如其他效率书一样，上来就是一个结论，然后教我们步骤。整体感觉上，这本书还是挺不错的，可以给四分。对于“暗时间”的概念，我是觉得作者在这里并不是标题党，确实作者的“暗时间”并不仅仅是指传统意义上的碎片时间。\n\n更深层次地讲，此书，并不是完全讲时间管理，而更多的是一种引导，引导我们认知、学习，文中提到很多关于学习的方法以及很多学习不好的方法对我来说都受益匪浅。对于时间管理，我现在使用的是番茄工作法，基本上解决了碎片时间的利用率问题和工作休息切换的问题；但另一方面，天秤座最主要的特点，犹豫不决，我在这一点上依然会浪费很多的时间，而且总是给自己和身边的人造成困扰。我想或许经历得更多，我就能有更多的果断和从容，但是又该怎样在有限的时间里比普通人经历更多呢？\n\n书中关于学习算法那个章节我的印象是十分深刻的，因为我也曾经参加过ACM比赛，也曾经疯狂地刷题，虽然最终放弃了，但是那段一心钻研算法的日子真心值得回忆。看了该书，我仿佛茅塞顿开，仔细想想，曾经的很多算法书，特别是我们的教材上面讲算法，包括数学的公式证明，在引导我们的中途几乎都会突然来一个转折，“不妨在这里...”这样的坑我以前也踩过很多次，特别是在啃那部《算法导论》的时候，当时我就一直想弄明白，这里凭什么就突然要这么做了。事实上，正如作者所说好多的书籍都弱化了思考的这一环节，事实上，我猜，那些书的作者可能也没理解到这样转折的理由，如果真要把思考的过程全部加起来，那么随便一个K(kan)M(mao)P(pian)算法也足矣成一本书了。在刷OJ的那几个月里，我记住了很多算法，也记不住很多算法，但现在仔细想来，基本上能记住的算法，我都能清清楚楚地知道那个算法是怎么演变而来的以及为什么要用那个算法和什么时候用那个算法。\n\n书中还提到几个日常中非常实用的思维训练以及时间管理方法：  \n\n- 设置自己的进度条，将目标分割成一个个里程碑，再讲里程碑分割为一个个TODO list列表\n- 如果有什么难题困扰你了，那就在睡觉前一直想，你永远不知道大脑在你睡着的时候会怎么奇迹般地解决这个问题。这点相信很多人都是有实际体会的吧。 \n- 走路睡觉吃饭都可以思考，当你完完全全陷入一个问题的时候你就会知道你突然多了好多的时间\n- 时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要把原先的思维过程回顾一遍，看看到底是哪个过程被阻塞住了妨碍了理解。\n\n后记：写完了整个书评，突然觉得这本书比我之前认为的还要有意义得多，我现在可以给它五星了。\n\n\n## 语录\n你会在这本书当中看到的一个重复出现的现象就是自学，大规模的自学，逃课自学，上网找书自学，程序员行业是最适合自学的行业，网络是程序员的天堂，需要的资源、工具，比课堂上的多出何止百倍，如果说还有一个学科，并不需要传统的教育就可以成才，估计非程序员莫属了。作为程序员如果没有查过wikipedia，没有看过几本原版电子书，没有在国内外主要邮件列表里面提过问题吵过架，没有用技术博客记录学习的独特体会，没有订阅技术牛人们的博客，怎么好意思说身在这个行业呢？\n\n利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。将思考成为习惯还有一个很大的好处--避免焦虑。\n\n尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的\"不能再拖了\"，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓\"紧急\"的事情牵着鼻子走了。\n\n有一句话说：看一个人，只要看他读的书和见的人。还是很有道理的，这两者是一个人成长中最有价值的信息来源。\n\n一个你不明白其证明的定理在我看来比不知道这个定理还要糟糕，因它给你造成一种懂了的错觉。与看定理必看证明类似，看一个问题的解法，必然要看解法所诞生的过程，背后是否隐藏着更具一般性的解决问题的思路和原则。否则一个解法就只是一个问题的解法，跟背口诀一样。即，知道了算法是怎样一步步被推导出来的，我们就一下拥有了大量的记忆提取线索：对算法发现过程中的任何一个关键步骤（尤其是本质）的回忆都可能使我们能够自己动手推导出剩余的内容","source":"_posts/anshijian.md","raw":"---\ntitle: \"《暗时间》\"\ndate: 2016-05-8 20:06:20\ncategories: 韦编三绝\n---\n最近真的太忙，但是再忙我也强迫自己抽出一些碎片时间来阅读，所以写书评也是必要的，因为，一本书不写书评，我根本就看不下去另一本书。对了，其实前几天还看过一本书叫《程序员的数学思维修炼》，这本书几乎是直接翻过去的，因为里面的内容基本上是给没上过大学的人看的，所以也就没有写书评的必要了。\n\n《暗时间》是本与效率有很大关系的书，有很多套路，但是也不乏新奇之处，很多章节虽然啰嗦而且段落太长(不知道是不是我kindle显示的原因)，但是书中对于每一个结论的得出，都是经过了层层推敲，循序渐进地引导我们进入作者的思维中去。而不是如其他效率书一样，上来就是一个结论，然后教我们步骤。整体感觉上，这本书还是挺不错的，可以给四分。对于“暗时间”的概念，我是觉得作者在这里并不是标题党，确实作者的“暗时间”并不仅仅是指传统意义上的碎片时间。\n\n更深层次地讲，此书，并不是完全讲时间管理，而更多的是一种引导，引导我们认知、学习，文中提到很多关于学习的方法以及很多学习不好的方法对我来说都受益匪浅。对于时间管理，我现在使用的是番茄工作法，基本上解决了碎片时间的利用率问题和工作休息切换的问题；但另一方面，天秤座最主要的特点，犹豫不决，我在这一点上依然会浪费很多的时间，而且总是给自己和身边的人造成困扰。我想或许经历得更多，我就能有更多的果断和从容，但是又该怎样在有限的时间里比普通人经历更多呢？\n\n书中关于学习算法那个章节我的印象是十分深刻的，因为我也曾经参加过ACM比赛，也曾经疯狂地刷题，虽然最终放弃了，但是那段一心钻研算法的日子真心值得回忆。看了该书，我仿佛茅塞顿开，仔细想想，曾经的很多算法书，特别是我们的教材上面讲算法，包括数学的公式证明，在引导我们的中途几乎都会突然来一个转折，“不妨在这里...”这样的坑我以前也踩过很多次，特别是在啃那部《算法导论》的时候，当时我就一直想弄明白，这里凭什么就突然要这么做了。事实上，正如作者所说好多的书籍都弱化了思考的这一环节，事实上，我猜，那些书的作者可能也没理解到这样转折的理由，如果真要把思考的过程全部加起来，那么随便一个K(kan)M(mao)P(pian)算法也足矣成一本书了。在刷OJ的那几个月里，我记住了很多算法，也记不住很多算法，但现在仔细想来，基本上能记住的算法，我都能清清楚楚地知道那个算法是怎么演变而来的以及为什么要用那个算法和什么时候用那个算法。\n\n书中还提到几个日常中非常实用的思维训练以及时间管理方法：  \n\n- 设置自己的进度条，将目标分割成一个个里程碑，再讲里程碑分割为一个个TODO list列表\n- 如果有什么难题困扰你了，那就在睡觉前一直想，你永远不知道大脑在你睡着的时候会怎么奇迹般地解决这个问题。这点相信很多人都是有实际体会的吧。 \n- 走路睡觉吃饭都可以思考，当你完完全全陷入一个问题的时候你就会知道你突然多了好多的时间\n- 时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要把原先的思维过程回顾一遍，看看到底是哪个过程被阻塞住了妨碍了理解。\n\n后记：写完了整个书评，突然觉得这本书比我之前认为的还要有意义得多，我现在可以给它五星了。\n\n\n## 语录\n你会在这本书当中看到的一个重复出现的现象就是自学，大规模的自学，逃课自学，上网找书自学，程序员行业是最适合自学的行业，网络是程序员的天堂，需要的资源、工具，比课堂上的多出何止百倍，如果说还有一个学科，并不需要传统的教育就可以成才，估计非程序员莫属了。作为程序员如果没有查过wikipedia，没有看过几本原版电子书，没有在国内外主要邮件列表里面提过问题吵过架，没有用技术博客记录学习的独特体会，没有订阅技术牛人们的博客，怎么好意思说身在这个行业呢？\n\n利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。将思考成为习惯还有一个很大的好处--避免焦虑。\n\n尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的\"不能再拖了\"，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓\"紧急\"的事情牵着鼻子走了。\n\n有一句话说：看一个人，只要看他读的书和见的人。还是很有道理的，这两者是一个人成长中最有价值的信息来源。\n\n一个你不明白其证明的定理在我看来比不知道这个定理还要糟糕，因它给你造成一种懂了的错觉。与看定理必看证明类似，看一个问题的解法，必然要看解法所诞生的过程，背后是否隐藏着更具一般性的解决问题的思路和原则。否则一个解法就只是一个问题的解法，跟背口诀一样。即，知道了算法是怎样一步步被推导出来的，我们就一下拥有了大量的记忆提取线索：对算法发现过程中的任何一个关键步骤（尤其是本质）的回忆都可能使我们能够自己动手推导出剩余的内容","slug":"anshijian","published":1,"updated":"2016-05-09T23:50:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p2v00099vnzt60hq5m2","content":"<p>最近真的太忙，但是再忙我也强迫自己抽出一些碎片时间来阅读，所以写书评也是必要的，因为，一本书不写书评，我根本就看不下去另一本书。对了，其实前几天还看过一本书叫《程序员的数学思维修炼》，这本书几乎是直接翻过去的，因为里面的内容基本上是给没上过大学的人看的，所以也就没有写书评的必要了。</p>\n<p>《暗时间》是本与效率有很大关系的书，有很多套路，但是也不乏新奇之处，很多章节虽然啰嗦而且段落太长(不知道是不是我kindle显示的原因)，但是书中对于每一个结论的得出，都是经过了层层推敲，循序渐进地引导我们进入作者的思维中去。而不是如其他效率书一样，上来就是一个结论，然后教我们步骤。整体感觉上，这本书还是挺不错的，可以给四分。对于“暗时间”的概念，我是觉得作者在这里并不是标题党，确实作者的“暗时间”并不仅仅是指传统意义上的碎片时间。</p>\n<p>更深层次地讲，此书，并不是完全讲时间管理，而更多的是一种引导，引导我们认知、学习，文中提到很多关于学习的方法以及很多学习不好的方法对我来说都受益匪浅。对于时间管理，我现在使用的是番茄工作法，基本上解决了碎片时间的利用率问题和工作休息切换的问题；但另一方面，天秤座最主要的特点，犹豫不决，我在这一点上依然会浪费很多的时间，而且总是给自己和身边的人造成困扰。我想或许经历得更多，我就能有更多的果断和从容，但是又该怎样在有限的时间里比普通人经历更多呢？</p>\n<p>书中关于学习算法那个章节我的印象是十分深刻的，因为我也曾经参加过ACM比赛，也曾经疯狂地刷题，虽然最终放弃了，但是那段一心钻研算法的日子真心值得回忆。看了该书，我仿佛茅塞顿开，仔细想想，曾经的很多算法书，特别是我们的教材上面讲算法，包括数学的公式证明，在引导我们的中途几乎都会突然来一个转折，“不妨在这里…”这样的坑我以前也踩过很多次，特别是在啃那部《算法导论》的时候，当时我就一直想弄明白，这里凭什么就突然要这么做了。事实上，正如作者所说好多的书籍都弱化了思考的这一环节，事实上，我猜，那些书的作者可能也没理解到这样转折的理由，如果真要把思考的过程全部加起来，那么随便一个K(kan)M(mao)P(pian)算法也足矣成一本书了。在刷OJ的那几个月里，我记住了很多算法，也记不住很多算法，但现在仔细想来，基本上能记住的算法，我都能清清楚楚地知道那个算法是怎么演变而来的以及为什么要用那个算法和什么时候用那个算法。</p>\n<p>书中还提到几个日常中非常实用的思维训练以及时间管理方法：  </p>\n<ul>\n<li>设置自己的进度条，将目标分割成一个个里程碑，再讲里程碑分割为一个个TODO list列表</li>\n<li>如果有什么难题困扰你了，那就在睡觉前一直想，你永远不知道大脑在你睡着的时候会怎么奇迹般地解决这个问题。这点相信很多人都是有实际体会的吧。 </li>\n<li>走路睡觉吃饭都可以思考，当你完完全全陷入一个问题的时候你就会知道你突然多了好多的时间</li>\n<li>时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要把原先的思维过程回顾一遍，看看到底是哪个过程被阻塞住了妨碍了理解。</li>\n</ul>\n<p>后记：写完了整个书评，突然觉得这本书比我之前认为的还要有意义得多，我现在可以给它五星了。</p>\n<h2 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h2><p>你会在这本书当中看到的一个重复出现的现象就是自学，大规模的自学，逃课自学，上网找书自学，程序员行业是最适合自学的行业，网络是程序员的天堂，需要的资源、工具，比课堂上的多出何止百倍，如果说还有一个学科，并不需要传统的教育就可以成才，估计非程序员莫属了。作为程序员如果没有查过wikipedia，没有看过几本原版电子书，没有在国内外主要邮件列表里面提过问题吵过架，没有用技术博客记录学习的独特体会，没有订阅技术牛人们的博客，怎么好意思说身在这个行业呢？</p>\n<p>利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。将思考成为习惯还有一个很大的好处–避免焦虑。</p>\n<p>尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的”不能再拖了”，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓”紧急”的事情牵着鼻子走了。</p>\n<p>有一句话说：看一个人，只要看他读的书和见的人。还是很有道理的，这两者是一个人成长中最有价值的信息来源。</p>\n<p>一个你不明白其证明的定理在我看来比不知道这个定理还要糟糕，因它给你造成一种懂了的错觉。与看定理必看证明类似，看一个问题的解法，必然要看解法所诞生的过程，背后是否隐藏着更具一般性的解决问题的思路和原则。否则一个解法就只是一个问题的解法，跟背口诀一样。即，知道了算法是怎样一步步被推导出来的，我们就一下拥有了大量的记忆提取线索：对算法发现过程中的任何一个关键步骤（尤其是本质）的回忆都可能使我们能够自己动手推导出剩余的内容</p>\n","excerpt":"","more":"<p>最近真的太忙，但是再忙我也强迫自己抽出一些碎片时间来阅读，所以写书评也是必要的，因为，一本书不写书评，我根本就看不下去另一本书。对了，其实前几天还看过一本书叫《程序员的数学思维修炼》，这本书几乎是直接翻过去的，因为里面的内容基本上是给没上过大学的人看的，所以也就没有写书评的必要了。</p>\n<p>《暗时间》是本与效率有很大关系的书，有很多套路，但是也不乏新奇之处，很多章节虽然啰嗦而且段落太长(不知道是不是我kindle显示的原因)，但是书中对于每一个结论的得出，都是经过了层层推敲，循序渐进地引导我们进入作者的思维中去。而不是如其他效率书一样，上来就是一个结论，然后教我们步骤。整体感觉上，这本书还是挺不错的，可以给四分。对于“暗时间”的概念，我是觉得作者在这里并不是标题党，确实作者的“暗时间”并不仅仅是指传统意义上的碎片时间。</p>\n<p>更深层次地讲，此书，并不是完全讲时间管理，而更多的是一种引导，引导我们认知、学习，文中提到很多关于学习的方法以及很多学习不好的方法对我来说都受益匪浅。对于时间管理，我现在使用的是番茄工作法，基本上解决了碎片时间的利用率问题和工作休息切换的问题；但另一方面，天秤座最主要的特点，犹豫不决，我在这一点上依然会浪费很多的时间，而且总是给自己和身边的人造成困扰。我想或许经历得更多，我就能有更多的果断和从容，但是又该怎样在有限的时间里比普通人经历更多呢？</p>\n<p>书中关于学习算法那个章节我的印象是十分深刻的，因为我也曾经参加过ACM比赛，也曾经疯狂地刷题，虽然最终放弃了，但是那段一心钻研算法的日子真心值得回忆。看了该书，我仿佛茅塞顿开，仔细想想，曾经的很多算法书，特别是我们的教材上面讲算法，包括数学的公式证明，在引导我们的中途几乎都会突然来一个转折，“不妨在这里…”这样的坑我以前也踩过很多次，特别是在啃那部《算法导论》的时候，当时我就一直想弄明白，这里凭什么就突然要这么做了。事实上，正如作者所说好多的书籍都弱化了思考的这一环节，事实上，我猜，那些书的作者可能也没理解到这样转折的理由，如果真要把思考的过程全部加起来，那么随便一个K(kan)M(mao)P(pian)算法也足矣成一本书了。在刷OJ的那几个月里，我记住了很多算法，也记不住很多算法，但现在仔细想来，基本上能记住的算法，我都能清清楚楚地知道那个算法是怎么演变而来的以及为什么要用那个算法和什么时候用那个算法。</p>\n<p>书中还提到几个日常中非常实用的思维训练以及时间管理方法：  </p>\n<ul>\n<li>设置自己的进度条，将目标分割成一个个里程碑，再讲里程碑分割为一个个TODO list列表</li>\n<li>如果有什么难题困扰你了，那就在睡觉前一直想，你永远不知道大脑在你睡着的时候会怎么奇迹般地解决这个问题。这点相信很多人都是有实际体会的吧。 </li>\n<li>走路睡觉吃饭都可以思考，当你完完全全陷入一个问题的时候你就会知道你突然多了好多的时间</li>\n<li>时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要把原先的思维过程回顾一遍，看看到底是哪个过程被阻塞住了妨碍了理解。</li>\n</ul>\n<p>后记：写完了整个书评，突然觉得这本书比我之前认为的还要有意义得多，我现在可以给它五星了。</p>\n<h2 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h2><p>你会在这本书当中看到的一个重复出现的现象就是自学，大规模的自学，逃课自学，上网找书自学，程序员行业是最适合自学的行业，网络是程序员的天堂，需要的资源、工具，比课堂上的多出何止百倍，如果说还有一个学科，并不需要传统的教育就可以成才，估计非程序员莫属了。作为程序员如果没有查过wikipedia，没有看过几本原版电子书，没有在国内外主要邮件列表里面提过问题吵过架，没有用技术博客记录学习的独特体会，没有订阅技术牛人们的博客，怎么好意思说身在这个行业呢？</p>\n<p>利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。将思考成为习惯还有一个很大的好处–避免焦虑。</p>\n<p>尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的”不能再拖了”，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓”紧急”的事情牵着鼻子走了。</p>\n<p>有一句话说：看一个人，只要看他读的书和见的人。还是很有道理的，这两者是一个人成长中最有价值的信息来源。</p>\n<p>一个你不明白其证明的定理在我看来比不知道这个定理还要糟糕，因它给你造成一种懂了的错觉。与看定理必看证明类似，看一个问题的解法，必然要看解法所诞生的过程，背后是否隐藏着更具一般性的解决问题的思路和原则。否则一个解法就只是一个问题的解法，跟背口诀一样。即，知道了算法是怎样一步步被推导出来的，我们就一下拥有了大量的记忆提取线索：对算法发现过程中的任何一个关键步骤（尤其是本质）的回忆都可能使我们能够自己动手推导出剩余的内容</p>\n"},{"title":"[转]Apache vs Nginx: Practical Considerations","date":"2015-07-18T01:34:47.000Z","_content":"原文地址：<https://www.digitalocean.com/community/tutorials/apache-vs-nginx-\npractical-considerations>\n\n> **总之就是各有各的优点，最好的方式就是nginx在前面做反向代理，并顺便处理静态内容，而apache则负责处理动态内容。**\n\n## Introduction\n\nApache and Nginx are the two most common open source web servers in the world.\nTogether, they are responsible for serving over 50\\% of traffic on the\ninternet. Both solutions are capable of handling diverse workloads and working\nwith other software to provide a complete web stack.\n\nWhile Apache and Nginx share many qualities, they should not be thought of as\nentirely interchangeable. Each excels in its own way and it is important to\nunderstand the situations where you may need to reevaluate your web server of\nchoice. This article will be devoted to a discussion of how each server stacks\nup in various areas.\n\n## General Overview\n\nBefore we dive into the differences between Apache and Nginx, let's take a\nquick look at the background of these two projects and their general\ncharacteristics.\n\n#### Apache\n\nThe Apache HTTP Server was created by Robert McCool in 1995 and has been\ndeveloped under the direction of the Apache Software Foundation since 1999.\nSince the HTTP web server is the foundation's original project and is by far\ntheir most popular piece of software, it is often referred to simply as\n\"Apache\".\n\nThe Apache web server has been the most popular server on the internet since\n1996. Because of this popularity, Apache benefits from great documentation and\nintegrated support from other software projects.\n\nApache is often chosen by administrators for its flexibility, power, and\nwidespread support. It is extensible through a dynamically loadable module\nsystem and can process a large number of interpreted languages without\nconnecting out to separate software.\n\n#### Nginx\n\nIn 2002, Igor Sysoev began work on Nginx as an answer to the C10K problem,\nwhich was a challenge for web servers to begin handling ten thousand\nconcurrent connections as a requirement for the modern web. The initial public\nrelease was made in 2004, meeting this goal by relying on an asynchronous(异步),\nevents-driven(事件驱动) architecture.\n\nNginx has grown in popularity since its release due to its light-weight\nresource utilization and its ability to scale easily on minimal hardware.\nNginx excels at serving static content(静态内容) quickly and is designed to pass\ndynamic requests off to other software that is better suited for those\npurposes.\n\nNginx is often selected by administrators for its resource efficiency and\nresponsiveness under load. Advocates welcome Nginx's focus on core web server\nand proxy features.\n\n## Connection Handling Architecturel(连接处理架构)\n\nOne big difference between Apache and Nginx is the actual way that they handle\nconnections and traffic. This provides perhaps the most significant difference\nin the way that they respond to different traffic conditions.\n\n#### Apache\n\nApache provides a variety of multi-processing modules (Apache calls these\nMPMs) that dictate(决定) how client requests are handled. Basically, this allows\nadministrators to swap out its connection handling architecture easily. These\nare:\n\n  * **mpm_prefork**: This processing module spawns(产生) processes with a single thread each to handle request(一个请求一个线程). Each child can handle a single connection at a time. As long as the number of requests is fewer than the number of processes, this MPM is very fast(请求数量比进程数量少的时候会很快). However, performance degrades quickly after the requests surpass the number of processes, so this is not a good choice in many scenarios. Each process has a significant impact on RAM consumption, so this MPM is difficult to scale effectively. This may still be a good choice though if used in conjunction with other components that are not built with threads in mind. For instance, PHP is not thread-safe, so this MPM is recommended as the only safe way of working with mod_php, the Apache module for processing these files.\n  * **mpm_worker**: This module spawns processes that can each manage multiple threads(每个进程可以管理多个线程). Each of these threads can handle a single connection. Threads are much more efficient than processes(线程比进程更高效), which means that this MPM scales better than the prefork MPM. Since there are more threads than processes, this also means that new connections can immediately take a free thread instead of having to wait for a free process(处理新的连接只需要有新的线程而不需要等待进程释放).\n  * **mpm_event**: This module is similar to the worker module in most situations, but is optimized to handle keep-alive connections(对持久连接进行了优化). When using the worker MPM, a connection will hold a thread regardless of whether a request is actively being made for as long as the connection is kept alive. The event MPM handles keep alive connections by setting aside dedicated(专用的) threads for handling keep alive connections and passing active requests off to other threads. This keeps the module from getting bogged down by keep-alive requests, allowing for faster execution. This was marked stable with the release of Apache 2.4. As you can see, Apache provides a flexible architecture for choosing different connection and request handling algorithms. The choices provided are mainly a function of the server's evolution and the increasing need for concurrency as the internet landscape has changed.\n\n#### Nginx\n\nNginx came onto the scene after Apache, with more awareness of the concurrency\nproblems that would face sites at scale(更注重并发问题). Leveraging(利用) this\nknowledge, Nginx was designed from the ground up to use an asynchronous, non-\nblocking, event-driven connection handling algorithm.\n\nNginx spawns worker processes, each of which can handle thousands of\nconnections(产生的是worker进程，每个都可以处理上千个连接). The worker processes accomplish this\nby implementing a fast looping mechanism(快速的循环机制) that continuously checks for\nand processes events. Decoupling(解耦) actual work from connections allows each\nworker to concern itself with a connection only when a new event has been\ntriggered.\n\nEach of the connections handled by the worker are placed within the event loop\nwhere they exist with other connections. Within the loop, events are processed\nasynchronously, allowing work to be handled in a non-blocking manner. When the\nconnection closes, it is removed from the loop.\n\nThis style of connection processing allows Nginx to scale incredibly far with\nlimited resources. Since the server is single-threaded and processes are not\nspawned to handle each new connection, the memory and CPU usage tends to stay\nrelatively consistent, even at times of heavy load.\n\n# Static vs Dynamic Content\n\nIn terms of real world use-cases, one of the most common comparisons between\nApache and Nginx is the way in which each server handles requests for static\nand dynamic content.\n\n#### Apache\n\nApache servers can handle static content using its conventional file-based\nmethods. The performance of these operations is mainly a function of the MPM\nmethods described above.\n\nApache can also process dynamic content by embedding(嵌入) a processor of the\nlanguage in question into each of its worker instances. This allows it to\nexecute dynamic content within the web server itself without having to rely on\nexternal components. These dynamic processors can be enabled through the use\nof dynamically loadable modules.\n\nApache's ability to handle dynamic content internally means that configuration\nof dynamic processing tends to be simpler. Communication does not need to be\ncoordinated with an additional piece of software and modules can easily be\nswapped out if the content requirements change.\n\n#### Nginx\n\nNginx does not have any ability to process dynamic content\nnatively(本身无法处理动态内容). To handle PHP and other requests for dynamic content,\nNginx must pass to an external processor for execution and wait for the\nrendered content to be sent back(必须使用外部的执行程序然后等待返回). The results can then be\nrelayed to the client.\n\nFor administrators, this means that communication must be configured between\nNginx and the processor over one of the protocols Nginx knows how to speak\n(http, FastCGI, SCGI, uWSGI, memcache). This can complicate things slightly,\nespecially when trying to anticipate the number of connections to allow, as an\nadditional connection will be used for each call to the processor.\n\nHowever, this method has some advantages as well. Since the dynamic\ninterpreter is not embedded in the worker process, its overhead will only be\npresent for dynamic content. Static content can be served in a straight-\nforward manner and the interpreter will only be contacted when needed. Apache\ncan also function in this manner, but doing so removes the benefits in the\nprevious section.\n\n# Distributed vs Centralized Configuration\n\nFor administrators, one of the most readily apparent differences between these\ntwo pieces of software is whether directory-level configuration is permitted\nwithin the content directories.\n\n#### Apache\n\nApache includes an option to allow additional configuration on a per-directory\nbasis by inspecting and interpreting directives in hidden files within the\ncontent directories themselves. These files are known as .htaccess\nfiles.(可以管理每个目录)\n\nSince these files reside within the content directories themselves, when\nhandling a request, Apache checks each component of the path to the requested\nfile for an .htaccess file and applies the directives found within. This\neffectively allows decentralized configuration of the web server, which is\noften used for implementing URL rewrites, access restrictions, authorization\nand authentication, even caching policies.\n\nWhile the above examples can all be configured in the main Apache\nconfiguration file,.htaccess files have some important advantages. First,\nsince these are interpreted each time they are found along a request path,\nthey are implemented immediately without reloading the server. Second, it\nmakes it possible to allow non-privileged users to control certain aspects of\ntheir own web content without giving them control over the entire\nconfiguration file.\n\nThis provides an easy way for certain web software, like content management\nsystems, to configure their environment without providing access to the\ncentral configuration file. This is also used by shared hosting providers to\nretain control of the main configuration while giving clients control over\ntheir specific directories.\n\n#### Nginx\n\nNginx does not interpret .htaccess files, nor does it provide any mechanism\nfor evaluating per-directory configuration outside of the main configuration\nfile. This may be less flexible than the Apache model, but it does have its\nown advantages.\n\nThe most notable improvement over the .htaccess system of directory-level\nconfiguration is increased performance. For a typical Apache setup that may\nallow .htaccess in any directory, the server will check for these files in\neach of the parent directories leading up to the requested file, for each\nrequest. If one or more .htaccess files are found during this search, they\nmust be read and interpreted. By not allowing directory overrides, Nginx can\nserve requests faster by doing a single directory lookup and file read for\neach request (assuming that the file is found in the conventional directory\nstructure).\n\nAnother advantage is security related(安全). Distributing directory-level\nconfiguration access also distributes the responsibility of security to\nindividual users, who may not be trusted to handle this task well. Ensuring\nthat the administrator maintains control over the entire web server can\nprevent some security missteps that may occur when access is given to other\nparties.\n\nKeep in mind that it is possible to turn off .htaccess interpretation in\nApache if these concerns resonate with you.\n\n# File vs URI-Based Interpretation\n\nHow the web server interprets requests and maps them to actual resources on\nthe system is another area where these two servers differ.\n\n#### Apache\n\nApache provides the ability to interpret a request as a physical resource on\nthe filesystem or as a URI location that may need a more abstract evaluation.\nIn general, for the former Apache uses <Directory> or <Files> blocks, while it\nutilizes <Location> blocks for more abstract resources.\n\nBecause Apache was designed from the ground up as a web server, the default is\nusually to interpret requests as filesystem resources. It begins by taking the\ndocument root and appending the portion of the request following the host and\nport number to try to find an actual file. Basically, the filesystem hierarchy\nis represented on the web as the available document tree.\n\nApache provides a number of alternatives for when the request does not match\nthe underlying filesystem. For instance, an Alias directive can be used to map\nto an alternative location. Using <Location> blocks is a method of working\nwith the URI itself instead of the filesystem. There are also regular\nexpression variants which can be used to apply configuration more flexibly\nthroughout the filesystem.\n\nWhile Apache has the ability to operate on both the underlying filesystem and\nthe webspace, it leans heavily towards filesystem methods. This can be seen in\nsome of the design decisions, including the use of .htaccess files for per-\ndirectory configuration. The Apache docs themselves warn against using URI-\nbased blocks to restrict access when the request mirrors the underlying\nfilesystem.\n\n#### Nginx\n\nNginx was created to be both a web server and a proxy server. Due to the\narchitecture required for these two roles, it works primarily with URIs,\ntranslating to the filesystem when necessary.\n\nThis can be seen in some of the ways that Nginx configuration files are\nconstructed and interpreted.Nginx does not provide a mechanism for specifying\nconfiguration for a filesystem directory and instead parses the URI itself.\n\nFor instance, the primary configuration blocks for Nginx are server and\nlocation blocks. The server block interprets the host being requested, while\nthe location blocks are responsible for matching portions of the URI that\ncomes after the host and port. At this point, the request is being interpreted\nas a URI, not as a location on the filesystem.\n\nFor static files, all requests eventually have to be mapped to a location on\nthe filesystem. First, Nginx selects the server and location blocks that will\nhandle the request and then combines the document root with the URI, adapting\nanything necessary according to the configuration specified.\n\nThis may seem similar, but parsing requests primarily as URIs instead of\nfilesystem locations allows Nginx to more easily function in both web, mail,\nand proxy server roles. Nginx is configured simply by laying out how to\nrespond to different request patterns. Nginx does not check the filesystem\nuntil it is ready to serve the request, which explains why it does not\nimplement a form of .htaccess files.\n\n# Modules\n\nBoth Nginx and Apache are extensible through module systems, but the way that\nthey work differ significantly.\n\n#### Apache\n\nApache's module system allows you to dynamically load or unload modules to\nsatisfy your needs during the course of running the server. The Apache core is\nalways present, while modules can be turned on or off, adding or removing\nadditional functionality and hooking into the main server.\n\nApache uses this functionality for a large variety tasks. Due to the maturity\nof the platform, there is an extensive library of modules available. These can\nbe used to alter some of the core functionality of the server, such as\nmod_php, which embeds a PHP interpreter into each running worker.\n\nModules are not limited to processing dynamic content, however. Among other\nfunctions, they can be used for rewriting URLs, authenticating clients,\nhardening the server, logging, caching, compression, proxying, rate limiting,\nand encrypting. Dynamic modules can extend the core functionality considerably\nwithout much additional work.\n\n#### Nginx\n\nNginx also implements a module system, but it is quite different from the\nApache system. In Nginx, modules are not dynamically loadable, so they must be\nselected and compiled into the core software(模块居然不是动态加载的).\n\nFor many users, this will make Nginx much less flexible. This is especially\ntrue for users who are not comfortable maintaining their own compiled software\noutside of their distribution's conventional packaging system. While\ndistributions' packages tend to include the most commonly used modules, if you\nrequire a non-standard module, you will have to build the server from source\nyourself.\n\nNginx modules are still very useful though, and they allow you to dictate what\nyou want out of your server by only including the functionality you intend to\nuse. Some users also may consider this more secure, as arbitrary components\ncannot be hooked into the server. However, if your server is ever put in a\nposition where this is possible, it is likely compromised already.\n\nNginx modules allow many of the same capabilities as Apache modules. For\ninstance, Nginx modules can provide proxying support, compression, rate\nlimiting, logging, rewriting, geolocation, authentication, encryption,\nstreaming, and mail functionality.\n\n## Support, Compatibility, Ecosystem, and Documentation\n\nA major point to consider is what the actual process of getting up and running\nwill be given the landscape of available help and support among other\nsoftware.\n\n#### Apache\n\nBecause Apache has been popular for so long, support for the server is fairly\nubiquitous. There is a large library of first- and third-party documentation\navailable for the core server and for task-based scenarios involving hooking\nApache up with other software.\n\nAlong with documentation, many tools and web projects include tools to\nbootstrap themselves within an Apache environment. This may be included in the\nprojects themselves, or in the packages maintained by your distribution's\npackaging team.\n\nApache, in general, will have more support from third-party projects simply\nbecause of its market share and the length of time it has been available.\nAdministrators are also somewhat more likely to have experience working with\nApache not only due to its prevalence, but also because many people start off\nin shared-hosting scenarios which almost exclusively rely on Apache due to the\n.htaccess distributed management capabilities.\n\n#### Nginx\n\nNginx is experiencing increased support as more users adopt it for its\nperformance profile, but it still has some catching up to do in some key\nareas.\n\nIn the past, it was difficult to find comprehensive English-language\ndocumentation regarding Nginx due to the fact that most of the early\ndevelopment and documentation were in Russian. As interest in the project\ngrew, the documentation has been filled out and there are now plenty of\nadministration resources on the Nginx site and through third parties.\n\nIn regards to third-party applications, support and documentation is becoming\nmore readily available, and package maintainers are beginning, in some cases,\nto give choices between auto-configuring for Apache and Nginx. Even without\nsupport, configuring Nginx to work with alternative software is usually\nstraight-forward so long as the project itself documents its requirements\n(permissions, headers, etc).\n\n## Using Apache and Nginx Together\n\nAfter going over the benefits and limitations of both Apache and Nginx, you\nmay have a better idea of which server is more suited to your needs. However,\nmany users find that it is possible to leverage each server's strengths by\nusing them together.\n\nThe conventional configuration for this partnership is to place Nginx in front\nof Apache as a reverse proxy(Nginx做反向代理). This will allow Nginx to handle all\nrequests from clients. This takes advantage of Nginx's fast processing speed\nand ability to handle large numbers of connections concurrently.\n\nFor static content, which Nginx excels at, the files will be served quickly\nand directly to the client. For dynamic content, for instance PHP files, Nginx\nwill proxy the request to Apache, which can then process the results and\nreturn the rendered page. Nginx can then pass the content back to the client.\n\nThis setup works well for many people because it allows Nginx to function as a\nsorting machine. It will handle all requests it can and pass on the ones that\nit has no native ability to serve. By cutting down on the requests the Apache\nserver is asked to handle, we can alleviate some of the blocking that occurs\nwhen an Apache process or thread is occupied.\n\nThis configuration also allows you to scale out by adding additional backend\nservers as necessary. Nginx can be configured to pass to a pool of servers\neasily, increasing this configuration's resilience to failure and performance.\n\n## Conclusion\n\nAs you can see, both Apache and Nginx are powerful, flexible, and capable.\nDeciding which server is best for you is largely a function of evaluating your\nspecific requirements and testing with the patterns that you expect to see.\n\nThere are differences between these projects that have a very real impact on\nthe raw performance, capabilities, and the implementation time necessary to\nget each solution up and running. However, these usually are the result of a\nseries of trade offs that should not be casually dismissed. In the end, there\nis no one-size-fits-all web server, so use the solution that best aligns with\nyour objectives.\n","source":"_posts/apache-vs-nginx.md","raw":"---\ntitle: \"[转]Apache vs Nginx: Practical Considerations\"\ndate: 2015-07-18 09:34:47\ncategories: 编程之路\n---\n原文地址：<https://www.digitalocean.com/community/tutorials/apache-vs-nginx-\npractical-considerations>\n\n> **总之就是各有各的优点，最好的方式就是nginx在前面做反向代理，并顺便处理静态内容，而apache则负责处理动态内容。**\n\n## Introduction\n\nApache and Nginx are the two most common open source web servers in the world.\nTogether, they are responsible for serving over 50\\% of traffic on the\ninternet. Both solutions are capable of handling diverse workloads and working\nwith other software to provide a complete web stack.\n\nWhile Apache and Nginx share many qualities, they should not be thought of as\nentirely interchangeable. Each excels in its own way and it is important to\nunderstand the situations where you may need to reevaluate your web server of\nchoice. This article will be devoted to a discussion of how each server stacks\nup in various areas.\n\n## General Overview\n\nBefore we dive into the differences between Apache and Nginx, let's take a\nquick look at the background of these two projects and their general\ncharacteristics.\n\n#### Apache\n\nThe Apache HTTP Server was created by Robert McCool in 1995 and has been\ndeveloped under the direction of the Apache Software Foundation since 1999.\nSince the HTTP web server is the foundation's original project and is by far\ntheir most popular piece of software, it is often referred to simply as\n\"Apache\".\n\nThe Apache web server has been the most popular server on the internet since\n1996. Because of this popularity, Apache benefits from great documentation and\nintegrated support from other software projects.\n\nApache is often chosen by administrators for its flexibility, power, and\nwidespread support. It is extensible through a dynamically loadable module\nsystem and can process a large number of interpreted languages without\nconnecting out to separate software.\n\n#### Nginx\n\nIn 2002, Igor Sysoev began work on Nginx as an answer to the C10K problem,\nwhich was a challenge for web servers to begin handling ten thousand\nconcurrent connections as a requirement for the modern web. The initial public\nrelease was made in 2004, meeting this goal by relying on an asynchronous(异步),\nevents-driven(事件驱动) architecture.\n\nNginx has grown in popularity since its release due to its light-weight\nresource utilization and its ability to scale easily on minimal hardware.\nNginx excels at serving static content(静态内容) quickly and is designed to pass\ndynamic requests off to other software that is better suited for those\npurposes.\n\nNginx is often selected by administrators for its resource efficiency and\nresponsiveness under load. Advocates welcome Nginx's focus on core web server\nand proxy features.\n\n## Connection Handling Architecturel(连接处理架构)\n\nOne big difference between Apache and Nginx is the actual way that they handle\nconnections and traffic. This provides perhaps the most significant difference\nin the way that they respond to different traffic conditions.\n\n#### Apache\n\nApache provides a variety of multi-processing modules (Apache calls these\nMPMs) that dictate(决定) how client requests are handled. Basically, this allows\nadministrators to swap out its connection handling architecture easily. These\nare:\n\n  * **mpm_prefork**: This processing module spawns(产生) processes with a single thread each to handle request(一个请求一个线程). Each child can handle a single connection at a time. As long as the number of requests is fewer than the number of processes, this MPM is very fast(请求数量比进程数量少的时候会很快). However, performance degrades quickly after the requests surpass the number of processes, so this is not a good choice in many scenarios. Each process has a significant impact on RAM consumption, so this MPM is difficult to scale effectively. This may still be a good choice though if used in conjunction with other components that are not built with threads in mind. For instance, PHP is not thread-safe, so this MPM is recommended as the only safe way of working with mod_php, the Apache module for processing these files.\n  * **mpm_worker**: This module spawns processes that can each manage multiple threads(每个进程可以管理多个线程). Each of these threads can handle a single connection. Threads are much more efficient than processes(线程比进程更高效), which means that this MPM scales better than the prefork MPM. Since there are more threads than processes, this also means that new connections can immediately take a free thread instead of having to wait for a free process(处理新的连接只需要有新的线程而不需要等待进程释放).\n  * **mpm_event**: This module is similar to the worker module in most situations, but is optimized to handle keep-alive connections(对持久连接进行了优化). When using the worker MPM, a connection will hold a thread regardless of whether a request is actively being made for as long as the connection is kept alive. The event MPM handles keep alive connections by setting aside dedicated(专用的) threads for handling keep alive connections and passing active requests off to other threads. This keeps the module from getting bogged down by keep-alive requests, allowing for faster execution. This was marked stable with the release of Apache 2.4. As you can see, Apache provides a flexible architecture for choosing different connection and request handling algorithms. The choices provided are mainly a function of the server's evolution and the increasing need for concurrency as the internet landscape has changed.\n\n#### Nginx\n\nNginx came onto the scene after Apache, with more awareness of the concurrency\nproblems that would face sites at scale(更注重并发问题). Leveraging(利用) this\nknowledge, Nginx was designed from the ground up to use an asynchronous, non-\nblocking, event-driven connection handling algorithm.\n\nNginx spawns worker processes, each of which can handle thousands of\nconnections(产生的是worker进程，每个都可以处理上千个连接). The worker processes accomplish this\nby implementing a fast looping mechanism(快速的循环机制) that continuously checks for\nand processes events. Decoupling(解耦) actual work from connections allows each\nworker to concern itself with a connection only when a new event has been\ntriggered.\n\nEach of the connections handled by the worker are placed within the event loop\nwhere they exist with other connections. Within the loop, events are processed\nasynchronously, allowing work to be handled in a non-blocking manner. When the\nconnection closes, it is removed from the loop.\n\nThis style of connection processing allows Nginx to scale incredibly far with\nlimited resources. Since the server is single-threaded and processes are not\nspawned to handle each new connection, the memory and CPU usage tends to stay\nrelatively consistent, even at times of heavy load.\n\n# Static vs Dynamic Content\n\nIn terms of real world use-cases, one of the most common comparisons between\nApache and Nginx is the way in which each server handles requests for static\nand dynamic content.\n\n#### Apache\n\nApache servers can handle static content using its conventional file-based\nmethods. The performance of these operations is mainly a function of the MPM\nmethods described above.\n\nApache can also process dynamic content by embedding(嵌入) a processor of the\nlanguage in question into each of its worker instances. This allows it to\nexecute dynamic content within the web server itself without having to rely on\nexternal components. These dynamic processors can be enabled through the use\nof dynamically loadable modules.\n\nApache's ability to handle dynamic content internally means that configuration\nof dynamic processing tends to be simpler. Communication does not need to be\ncoordinated with an additional piece of software and modules can easily be\nswapped out if the content requirements change.\n\n#### Nginx\n\nNginx does not have any ability to process dynamic content\nnatively(本身无法处理动态内容). To handle PHP and other requests for dynamic content,\nNginx must pass to an external processor for execution and wait for the\nrendered content to be sent back(必须使用外部的执行程序然后等待返回). The results can then be\nrelayed to the client.\n\nFor administrators, this means that communication must be configured between\nNginx and the processor over one of the protocols Nginx knows how to speak\n(http, FastCGI, SCGI, uWSGI, memcache). This can complicate things slightly,\nespecially when trying to anticipate the number of connections to allow, as an\nadditional connection will be used for each call to the processor.\n\nHowever, this method has some advantages as well. Since the dynamic\ninterpreter is not embedded in the worker process, its overhead will only be\npresent for dynamic content. Static content can be served in a straight-\nforward manner and the interpreter will only be contacted when needed. Apache\ncan also function in this manner, but doing so removes the benefits in the\nprevious section.\n\n# Distributed vs Centralized Configuration\n\nFor administrators, one of the most readily apparent differences between these\ntwo pieces of software is whether directory-level configuration is permitted\nwithin the content directories.\n\n#### Apache\n\nApache includes an option to allow additional configuration on a per-directory\nbasis by inspecting and interpreting directives in hidden files within the\ncontent directories themselves. These files are known as .htaccess\nfiles.(可以管理每个目录)\n\nSince these files reside within the content directories themselves, when\nhandling a request, Apache checks each component of the path to the requested\nfile for an .htaccess file and applies the directives found within. This\neffectively allows decentralized configuration of the web server, which is\noften used for implementing URL rewrites, access restrictions, authorization\nand authentication, even caching policies.\n\nWhile the above examples can all be configured in the main Apache\nconfiguration file,.htaccess files have some important advantages. First,\nsince these are interpreted each time they are found along a request path,\nthey are implemented immediately without reloading the server. Second, it\nmakes it possible to allow non-privileged users to control certain aspects of\ntheir own web content without giving them control over the entire\nconfiguration file.\n\nThis provides an easy way for certain web software, like content management\nsystems, to configure their environment without providing access to the\ncentral configuration file. This is also used by shared hosting providers to\nretain control of the main configuration while giving clients control over\ntheir specific directories.\n\n#### Nginx\n\nNginx does not interpret .htaccess files, nor does it provide any mechanism\nfor evaluating per-directory configuration outside of the main configuration\nfile. This may be less flexible than the Apache model, but it does have its\nown advantages.\n\nThe most notable improvement over the .htaccess system of directory-level\nconfiguration is increased performance. For a typical Apache setup that may\nallow .htaccess in any directory, the server will check for these files in\neach of the parent directories leading up to the requested file, for each\nrequest. If one or more .htaccess files are found during this search, they\nmust be read and interpreted. By not allowing directory overrides, Nginx can\nserve requests faster by doing a single directory lookup and file read for\neach request (assuming that the file is found in the conventional directory\nstructure).\n\nAnother advantage is security related(安全). Distributing directory-level\nconfiguration access also distributes the responsibility of security to\nindividual users, who may not be trusted to handle this task well. Ensuring\nthat the administrator maintains control over the entire web server can\nprevent some security missteps that may occur when access is given to other\nparties.\n\nKeep in mind that it is possible to turn off .htaccess interpretation in\nApache if these concerns resonate with you.\n\n# File vs URI-Based Interpretation\n\nHow the web server interprets requests and maps them to actual resources on\nthe system is another area where these two servers differ.\n\n#### Apache\n\nApache provides the ability to interpret a request as a physical resource on\nthe filesystem or as a URI location that may need a more abstract evaluation.\nIn general, for the former Apache uses <Directory> or <Files> blocks, while it\nutilizes <Location> blocks for more abstract resources.\n\nBecause Apache was designed from the ground up as a web server, the default is\nusually to interpret requests as filesystem resources. It begins by taking the\ndocument root and appending the portion of the request following the host and\nport number to try to find an actual file. Basically, the filesystem hierarchy\nis represented on the web as the available document tree.\n\nApache provides a number of alternatives for when the request does not match\nthe underlying filesystem. For instance, an Alias directive can be used to map\nto an alternative location. Using <Location> blocks is a method of working\nwith the URI itself instead of the filesystem. There are also regular\nexpression variants which can be used to apply configuration more flexibly\nthroughout the filesystem.\n\nWhile Apache has the ability to operate on both the underlying filesystem and\nthe webspace, it leans heavily towards filesystem methods. This can be seen in\nsome of the design decisions, including the use of .htaccess files for per-\ndirectory configuration. The Apache docs themselves warn against using URI-\nbased blocks to restrict access when the request mirrors the underlying\nfilesystem.\n\n#### Nginx\n\nNginx was created to be both a web server and a proxy server. Due to the\narchitecture required for these two roles, it works primarily with URIs,\ntranslating to the filesystem when necessary.\n\nThis can be seen in some of the ways that Nginx configuration files are\nconstructed and interpreted.Nginx does not provide a mechanism for specifying\nconfiguration for a filesystem directory and instead parses the URI itself.\n\nFor instance, the primary configuration blocks for Nginx are server and\nlocation blocks. The server block interprets the host being requested, while\nthe location blocks are responsible for matching portions of the URI that\ncomes after the host and port. At this point, the request is being interpreted\nas a URI, not as a location on the filesystem.\n\nFor static files, all requests eventually have to be mapped to a location on\nthe filesystem. First, Nginx selects the server and location blocks that will\nhandle the request and then combines the document root with the URI, adapting\nanything necessary according to the configuration specified.\n\nThis may seem similar, but parsing requests primarily as URIs instead of\nfilesystem locations allows Nginx to more easily function in both web, mail,\nand proxy server roles. Nginx is configured simply by laying out how to\nrespond to different request patterns. Nginx does not check the filesystem\nuntil it is ready to serve the request, which explains why it does not\nimplement a form of .htaccess files.\n\n# Modules\n\nBoth Nginx and Apache are extensible through module systems, but the way that\nthey work differ significantly.\n\n#### Apache\n\nApache's module system allows you to dynamically load or unload modules to\nsatisfy your needs during the course of running the server. The Apache core is\nalways present, while modules can be turned on or off, adding or removing\nadditional functionality and hooking into the main server.\n\nApache uses this functionality for a large variety tasks. Due to the maturity\nof the platform, there is an extensive library of modules available. These can\nbe used to alter some of the core functionality of the server, such as\nmod_php, which embeds a PHP interpreter into each running worker.\n\nModules are not limited to processing dynamic content, however. Among other\nfunctions, they can be used for rewriting URLs, authenticating clients,\nhardening the server, logging, caching, compression, proxying, rate limiting,\nand encrypting. Dynamic modules can extend the core functionality considerably\nwithout much additional work.\n\n#### Nginx\n\nNginx also implements a module system, but it is quite different from the\nApache system. In Nginx, modules are not dynamically loadable, so they must be\nselected and compiled into the core software(模块居然不是动态加载的).\n\nFor many users, this will make Nginx much less flexible. This is especially\ntrue for users who are not comfortable maintaining their own compiled software\noutside of their distribution's conventional packaging system. While\ndistributions' packages tend to include the most commonly used modules, if you\nrequire a non-standard module, you will have to build the server from source\nyourself.\n\nNginx modules are still very useful though, and they allow you to dictate what\nyou want out of your server by only including the functionality you intend to\nuse. Some users also may consider this more secure, as arbitrary components\ncannot be hooked into the server. However, if your server is ever put in a\nposition where this is possible, it is likely compromised already.\n\nNginx modules allow many of the same capabilities as Apache modules. For\ninstance, Nginx modules can provide proxying support, compression, rate\nlimiting, logging, rewriting, geolocation, authentication, encryption,\nstreaming, and mail functionality.\n\n## Support, Compatibility, Ecosystem, and Documentation\n\nA major point to consider is what the actual process of getting up and running\nwill be given the landscape of available help and support among other\nsoftware.\n\n#### Apache\n\nBecause Apache has been popular for so long, support for the server is fairly\nubiquitous. There is a large library of first- and third-party documentation\navailable for the core server and for task-based scenarios involving hooking\nApache up with other software.\n\nAlong with documentation, many tools and web projects include tools to\nbootstrap themselves within an Apache environment. This may be included in the\nprojects themselves, or in the packages maintained by your distribution's\npackaging team.\n\nApache, in general, will have more support from third-party projects simply\nbecause of its market share and the length of time it has been available.\nAdministrators are also somewhat more likely to have experience working with\nApache not only due to its prevalence, but also because many people start off\nin shared-hosting scenarios which almost exclusively rely on Apache due to the\n.htaccess distributed management capabilities.\n\n#### Nginx\n\nNginx is experiencing increased support as more users adopt it for its\nperformance profile, but it still has some catching up to do in some key\nareas.\n\nIn the past, it was difficult to find comprehensive English-language\ndocumentation regarding Nginx due to the fact that most of the early\ndevelopment and documentation were in Russian. As interest in the project\ngrew, the documentation has been filled out and there are now plenty of\nadministration resources on the Nginx site and through third parties.\n\nIn regards to third-party applications, support and documentation is becoming\nmore readily available, and package maintainers are beginning, in some cases,\nto give choices between auto-configuring for Apache and Nginx. Even without\nsupport, configuring Nginx to work with alternative software is usually\nstraight-forward so long as the project itself documents its requirements\n(permissions, headers, etc).\n\n## Using Apache and Nginx Together\n\nAfter going over the benefits and limitations of both Apache and Nginx, you\nmay have a better idea of which server is more suited to your needs. However,\nmany users find that it is possible to leverage each server's strengths by\nusing them together.\n\nThe conventional configuration for this partnership is to place Nginx in front\nof Apache as a reverse proxy(Nginx做反向代理). This will allow Nginx to handle all\nrequests from clients. This takes advantage of Nginx's fast processing speed\nand ability to handle large numbers of connections concurrently.\n\nFor static content, which Nginx excels at, the files will be served quickly\nand directly to the client. For dynamic content, for instance PHP files, Nginx\nwill proxy the request to Apache, which can then process the results and\nreturn the rendered page. Nginx can then pass the content back to the client.\n\nThis setup works well for many people because it allows Nginx to function as a\nsorting machine. It will handle all requests it can and pass on the ones that\nit has no native ability to serve. By cutting down on the requests the Apache\nserver is asked to handle, we can alleviate some of the blocking that occurs\nwhen an Apache process or thread is occupied.\n\nThis configuration also allows you to scale out by adding additional backend\nservers as necessary. Nginx can be configured to pass to a pool of servers\neasily, increasing this configuration's resilience to failure and performance.\n\n## Conclusion\n\nAs you can see, both Apache and Nginx are powerful, flexible, and capable.\nDeciding which server is best for you is largely a function of evaluating your\nspecific requirements and testing with the patterns that you expect to see.\n\nThere are differences between these projects that have a very real impact on\nthe raw performance, capabilities, and the implementation time necessary to\nget each solution up and running. However, these usually are the result of a\nseries of trade offs that should not be casually dismissed. In the end, there\nis no one-size-fits-all web server, so use the solution that best aligns with\nyour objectives.\n","slug":"apache-vs-nginx","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p32000b9vnzti350n30","content":"<p>原文地址：<a href=\"https://www.digitalocean.com/community/tutorials/apache-vs-nginx-\npractical-considerations\" target=\"_blank\" rel=\"external\">https://www.digitalocean.com/community/tutorials/apache-vs-nginx-\npractical-considerations</a></p>\n<blockquote>\n<p><strong>总之就是各有各的优点，最好的方式就是nginx在前面做反向代理，并顺便处理静态内容，而apache则负责处理动态内容。</strong></p>\n</blockquote>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Apache and Nginx are the two most common open source web servers in the world.<br>Together, they are responsible for serving over 50\\% of traffic on the<br>internet. Both solutions are capable of handling diverse workloads and working<br>with other software to provide a complete web stack.</p>\n<p>While Apache and Nginx share many qualities, they should not be thought of as<br>entirely interchangeable. Each excels in its own way and it is important to<br>understand the situations where you may need to reevaluate your web server of<br>choice. This article will be devoted to a discussion of how each server stacks<br>up in various areas.</p>\n<h2 id=\"General-Overview\"><a href=\"#General-Overview\" class=\"headerlink\" title=\"General Overview\"></a>General Overview</h2><p>Before we dive into the differences between Apache and Nginx, let’s take a<br>quick look at the background of these two projects and their general<br>characteristics.</p>\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>The Apache HTTP Server was created by Robert McCool in 1995 and has been<br>developed under the direction of the Apache Software Foundation since 1999.<br>Since the HTTP web server is the foundation’s original project and is by far<br>their most popular piece of software, it is often referred to simply as<br>“Apache”.</p>\n<p>The Apache web server has been the most popular server on the internet since</p>\n<ol>\n<li>Because of this popularity, Apache benefits from great documentation and<br>integrated support from other software projects.</li>\n</ol>\n<p>Apache is often chosen by administrators for its flexibility, power, and<br>widespread support. It is extensible through a dynamically loadable module<br>system and can process a large number of interpreted languages without<br>connecting out to separate software.</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>In 2002, Igor Sysoev began work on Nginx as an answer to the C10K problem,<br>which was a challenge for web servers to begin handling ten thousand<br>concurrent connections as a requirement for the modern web. The initial public<br>release was made in 2004, meeting this goal by relying on an asynchronous(异步),<br>events-driven(事件驱动) architecture.</p>\n<p>Nginx has grown in popularity since its release due to its light-weight<br>resource utilization and its ability to scale easily on minimal hardware.<br>Nginx excels at serving static content(静态内容) quickly and is designed to pass<br>dynamic requests off to other software that is better suited for those<br>purposes.</p>\n<p>Nginx is often selected by administrators for its resource efficiency and<br>responsiveness under load. Advocates welcome Nginx’s focus on core web server<br>and proxy features.</p>\n<h2 id=\"Connection-Handling-Architecturel-连接处理架构\"><a href=\"#Connection-Handling-Architecturel-连接处理架构\" class=\"headerlink\" title=\"Connection Handling Architecturel(连接处理架构)\"></a>Connection Handling Architecturel(连接处理架构)</h2><p>One big difference between Apache and Nginx is the actual way that they handle<br>connections and traffic. This provides perhaps the most significant difference<br>in the way that they respond to different traffic conditions.</p>\n<h4 id=\"Apache-1\"><a href=\"#Apache-1\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache provides a variety of multi-processing modules (Apache calls these<br>MPMs) that dictate(决定) how client requests are handled. Basically, this allows<br>administrators to swap out its connection handling architecture easily. These<br>are:</p>\n<ul>\n<li><strong>mpm_prefork</strong>: This processing module spawns(产生) processes with a single thread each to handle request(一个请求一个线程). Each child can handle a single connection at a time. As long as the number of requests is fewer than the number of processes, this MPM is very fast(请求数量比进程数量少的时候会很快). However, performance degrades quickly after the requests surpass the number of processes, so this is not a good choice in many scenarios. Each process has a significant impact on RAM consumption, so this MPM is difficult to scale effectively. This may still be a good choice though if used in conjunction with other components that are not built with threads in mind. For instance, PHP is not thread-safe, so this MPM is recommended as the only safe way of working with mod_php, the Apache module for processing these files.</li>\n<li><strong>mpm_worker</strong>: This module spawns processes that can each manage multiple threads(每个进程可以管理多个线程). Each of these threads can handle a single connection. Threads are much more efficient than processes(线程比进程更高效), which means that this MPM scales better than the prefork MPM. Since there are more threads than processes, this also means that new connections can immediately take a free thread instead of having to wait for a free process(处理新的连接只需要有新的线程而不需要等待进程释放).</li>\n<li><strong>mpm_event</strong>: This module is similar to the worker module in most situations, but is optimized to handle keep-alive connections(对持久连接进行了优化). When using the worker MPM, a connection will hold a thread regardless of whether a request is actively being made for as long as the connection is kept alive. The event MPM handles keep alive connections by setting aside dedicated(专用的) threads for handling keep alive connections and passing active requests off to other threads. This keeps the module from getting bogged down by keep-alive requests, allowing for faster execution. This was marked stable with the release of Apache 2.4. As you can see, Apache provides a flexible architecture for choosing different connection and request handling algorithms. The choices provided are mainly a function of the server’s evolution and the increasing need for concurrency as the internet landscape has changed.</li>\n</ul>\n<h4 id=\"Nginx-1\"><a href=\"#Nginx-1\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx came onto the scene after Apache, with more awareness of the concurrency<br>problems that would face sites at scale(更注重并发问题). Leveraging(利用) this<br>knowledge, Nginx was designed from the ground up to use an asynchronous, non-<br>blocking, event-driven connection handling algorithm.</p>\n<p>Nginx spawns worker processes, each of which can handle thousands of<br>connections(产生的是worker进程，每个都可以处理上千个连接). The worker processes accomplish this<br>by implementing a fast looping mechanism(快速的循环机制) that continuously checks for<br>and processes events. Decoupling(解耦) actual work from connections allows each<br>worker to concern itself with a connection only when a new event has been<br>triggered.</p>\n<p>Each of the connections handled by the worker are placed within the event loop<br>where they exist with other connections. Within the loop, events are processed<br>asynchronously, allowing work to be handled in a non-blocking manner. When the<br>connection closes, it is removed from the loop.</p>\n<p>This style of connection processing allows Nginx to scale incredibly far with<br>limited resources. Since the server is single-threaded and processes are not<br>spawned to handle each new connection, the memory and CPU usage tends to stay<br>relatively consistent, even at times of heavy load.</p>\n<h1 id=\"Static-vs-Dynamic-Content\"><a href=\"#Static-vs-Dynamic-Content\" class=\"headerlink\" title=\"Static vs Dynamic Content\"></a>Static vs Dynamic Content</h1><p>In terms of real world use-cases, one of the most common comparisons between<br>Apache and Nginx is the way in which each server handles requests for static<br>and dynamic content.</p>\n<h4 id=\"Apache-2\"><a href=\"#Apache-2\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache servers can handle static content using its conventional file-based<br>methods. The performance of these operations is mainly a function of the MPM<br>methods described above.</p>\n<p>Apache can also process dynamic content by embedding(嵌入) a processor of the<br>language in question into each of its worker instances. This allows it to<br>execute dynamic content within the web server itself without having to rely on<br>external components. These dynamic processors can be enabled through the use<br>of dynamically loadable modules.</p>\n<p>Apache’s ability to handle dynamic content internally means that configuration<br>of dynamic processing tends to be simpler. Communication does not need to be<br>coordinated with an additional piece of software and modules can easily be<br>swapped out if the content requirements change.</p>\n<h4 id=\"Nginx-2\"><a href=\"#Nginx-2\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx does not have any ability to process dynamic content<br>natively(本身无法处理动态内容). To handle PHP and other requests for dynamic content,<br>Nginx must pass to an external processor for execution and wait for the<br>rendered content to be sent back(必须使用外部的执行程序然后等待返回). The results can then be<br>relayed to the client.</p>\n<p>For administrators, this means that communication must be configured between<br>Nginx and the processor over one of the protocols Nginx knows how to speak<br>(http, FastCGI, SCGI, uWSGI, memcache). This can complicate things slightly,<br>especially when trying to anticipate the number of connections to allow, as an<br>additional connection will be used for each call to the processor.</p>\n<p>However, this method has some advantages as well. Since the dynamic<br>interpreter is not embedded in the worker process, its overhead will only be<br>present for dynamic content. Static content can be served in a straight-<br>forward manner and the interpreter will only be contacted when needed. Apache<br>can also function in this manner, but doing so removes the benefits in the<br>previous section.</p>\n<h1 id=\"Distributed-vs-Centralized-Configuration\"><a href=\"#Distributed-vs-Centralized-Configuration\" class=\"headerlink\" title=\"Distributed vs Centralized Configuration\"></a>Distributed vs Centralized Configuration</h1><p>For administrators, one of the most readily apparent differences between these<br>two pieces of software is whether directory-level configuration is permitted<br>within the content directories.</p>\n<h4 id=\"Apache-3\"><a href=\"#Apache-3\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache includes an option to allow additional configuration on a per-directory<br>basis by inspecting and interpreting directives in hidden files within the<br>content directories themselves. These files are known as .htaccess<br>files.(可以管理每个目录)</p>\n<p>Since these files reside within the content directories themselves, when<br>handling a request, Apache checks each component of the path to the requested<br>file for an .htaccess file and applies the directives found within. This<br>effectively allows decentralized configuration of the web server, which is<br>often used for implementing URL rewrites, access restrictions, authorization<br>and authentication, even caching policies.</p>\n<p>While the above examples can all be configured in the main Apache<br>configuration file,.htaccess files have some important advantages. First,<br>since these are interpreted each time they are found along a request path,<br>they are implemented immediately without reloading the server. Second, it<br>makes it possible to allow non-privileged users to control certain aspects of<br>their own web content without giving them control over the entire<br>configuration file.</p>\n<p>This provides an easy way for certain web software, like content management<br>systems, to configure their environment without providing access to the<br>central configuration file. This is also used by shared hosting providers to<br>retain control of the main configuration while giving clients control over<br>their specific directories.</p>\n<h4 id=\"Nginx-3\"><a href=\"#Nginx-3\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx does not interpret .htaccess files, nor does it provide any mechanism<br>for evaluating per-directory configuration outside of the main configuration<br>file. This may be less flexible than the Apache model, but it does have its<br>own advantages.</p>\n<p>The most notable improvement over the .htaccess system of directory-level<br>configuration is increased performance. For a typical Apache setup that may<br>allow .htaccess in any directory, the server will check for these files in<br>each of the parent directories leading up to the requested file, for each<br>request. If one or more .htaccess files are found during this search, they<br>must be read and interpreted. By not allowing directory overrides, Nginx can<br>serve requests faster by doing a single directory lookup and file read for<br>each request (assuming that the file is found in the conventional directory<br>structure).</p>\n<p>Another advantage is security related(安全). Distributing directory-level<br>configuration access also distributes the responsibility of security to<br>individual users, who may not be trusted to handle this task well. Ensuring<br>that the administrator maintains control over the entire web server can<br>prevent some security missteps that may occur when access is given to other<br>parties.</p>\n<p>Keep in mind that it is possible to turn off .htaccess interpretation in<br>Apache if these concerns resonate with you.</p>\n<h1 id=\"File-vs-URI-Based-Interpretation\"><a href=\"#File-vs-URI-Based-Interpretation\" class=\"headerlink\" title=\"File vs URI-Based Interpretation\"></a>File vs URI-Based Interpretation</h1><p>How the web server interprets requests and maps them to actual resources on<br>the system is another area where these two servers differ.</p>\n<h4 id=\"Apache-4\"><a href=\"#Apache-4\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache provides the ability to interpret a request as a physical resource on<br>the filesystem or as a URI location that may need a more abstract evaluation.<br>In general, for the former Apache uses <directory> or <files> blocks, while it<br>utilizes <location> blocks for more abstract resources.</location></files></directory></p>\n<p>Because Apache was designed from the ground up as a web server, the default is<br>usually to interpret requests as filesystem resources. It begins by taking the<br>document root and appending the portion of the request following the host and<br>port number to try to find an actual file. Basically, the filesystem hierarchy<br>is represented on the web as the available document tree.</p>\n<p>Apache provides a number of alternatives for when the request does not match<br>the underlying filesystem. For instance, an Alias directive can be used to map<br>to an alternative location. Using <location> blocks is a method of working<br>with the URI itself instead of the filesystem. There are also regular<br>expression variants which can be used to apply configuration more flexibly<br>throughout the filesystem.</location></p>\n<p>While Apache has the ability to operate on both the underlying filesystem and<br>the webspace, it leans heavily towards filesystem methods. This can be seen in<br>some of the design decisions, including the use of .htaccess files for per-<br>directory configuration. The Apache docs themselves warn against using URI-<br>based blocks to restrict access when the request mirrors the underlying<br>filesystem.</p>\n<h4 id=\"Nginx-4\"><a href=\"#Nginx-4\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx was created to be both a web server and a proxy server. Due to the<br>architecture required for these two roles, it works primarily with URIs,<br>translating to the filesystem when necessary.</p>\n<p>This can be seen in some of the ways that Nginx configuration files are<br>constructed and interpreted.Nginx does not provide a mechanism for specifying<br>configuration for a filesystem directory and instead parses the URI itself.</p>\n<p>For instance, the primary configuration blocks for Nginx are server and<br>location blocks. The server block interprets the host being requested, while<br>the location blocks are responsible for matching portions of the URI that<br>comes after the host and port. At this point, the request is being interpreted<br>as a URI, not as a location on the filesystem.</p>\n<p>For static files, all requests eventually have to be mapped to a location on<br>the filesystem. First, Nginx selects the server and location blocks that will<br>handle the request and then combines the document root with the URI, adapting<br>anything necessary according to the configuration specified.</p>\n<p>This may seem similar, but parsing requests primarily as URIs instead of<br>filesystem locations allows Nginx to more easily function in both web, mail,<br>and proxy server roles. Nginx is configured simply by laying out how to<br>respond to different request patterns. Nginx does not check the filesystem<br>until it is ready to serve the request, which explains why it does not<br>implement a form of .htaccess files.</p>\n<h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>Both Nginx and Apache are extensible through module systems, but the way that<br>they work differ significantly.</p>\n<h4 id=\"Apache-5\"><a href=\"#Apache-5\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache’s module system allows you to dynamically load or unload modules to<br>satisfy your needs during the course of running the server. The Apache core is<br>always present, while modules can be turned on or off, adding or removing<br>additional functionality and hooking into the main server.</p>\n<p>Apache uses this functionality for a large variety tasks. Due to the maturity<br>of the platform, there is an extensive library of modules available. These can<br>be used to alter some of the core functionality of the server, such as<br>mod_php, which embeds a PHP interpreter into each running worker.</p>\n<p>Modules are not limited to processing dynamic content, however. Among other<br>functions, they can be used for rewriting URLs, authenticating clients,<br>hardening the server, logging, caching, compression, proxying, rate limiting,<br>and encrypting. Dynamic modules can extend the core functionality considerably<br>without much additional work.</p>\n<h4 id=\"Nginx-5\"><a href=\"#Nginx-5\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx also implements a module system, but it is quite different from the<br>Apache system. In Nginx, modules are not dynamically loadable, so they must be<br>selected and compiled into the core software(模块居然不是动态加载的).</p>\n<p>For many users, this will make Nginx much less flexible. This is especially<br>true for users who are not comfortable maintaining their own compiled software<br>outside of their distribution’s conventional packaging system. While<br>distributions’ packages tend to include the most commonly used modules, if you<br>require a non-standard module, you will have to build the server from source<br>yourself.</p>\n<p>Nginx modules are still very useful though, and they allow you to dictate what<br>you want out of your server by only including the functionality you intend to<br>use. Some users also may consider this more secure, as arbitrary components<br>cannot be hooked into the server. However, if your server is ever put in a<br>position where this is possible, it is likely compromised already.</p>\n<p>Nginx modules allow many of the same capabilities as Apache modules. For<br>instance, Nginx modules can provide proxying support, compression, rate<br>limiting, logging, rewriting, geolocation, authentication, encryption,<br>streaming, and mail functionality.</p>\n<h2 id=\"Support-Compatibility-Ecosystem-and-Documentation\"><a href=\"#Support-Compatibility-Ecosystem-and-Documentation\" class=\"headerlink\" title=\"Support, Compatibility, Ecosystem, and Documentation\"></a>Support, Compatibility, Ecosystem, and Documentation</h2><p>A major point to consider is what the actual process of getting up and running<br>will be given the landscape of available help and support among other<br>software.</p>\n<h4 id=\"Apache-6\"><a href=\"#Apache-6\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Because Apache has been popular for so long, support for the server is fairly<br>ubiquitous. There is a large library of first- and third-party documentation<br>available for the core server and for task-based scenarios involving hooking<br>Apache up with other software.</p>\n<p>Along with documentation, many tools and web projects include tools to<br>bootstrap themselves within an Apache environment. This may be included in the<br>projects themselves, or in the packages maintained by your distribution’s<br>packaging team.</p>\n<p>Apache, in general, will have more support from third-party projects simply<br>because of its market share and the length of time it has been available.<br>Administrators are also somewhat more likely to have experience working with<br>Apache not only due to its prevalence, but also because many people start off<br>in shared-hosting scenarios which almost exclusively rely on Apache due to the<br>.htaccess distributed management capabilities.</p>\n<h4 id=\"Nginx-6\"><a href=\"#Nginx-6\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx is experiencing increased support as more users adopt it for its<br>performance profile, but it still has some catching up to do in some key<br>areas.</p>\n<p>In the past, it was difficult to find comprehensive English-language<br>documentation regarding Nginx due to the fact that most of the early<br>development and documentation were in Russian. As interest in the project<br>grew, the documentation has been filled out and there are now plenty of<br>administration resources on the Nginx site and through third parties.</p>\n<p>In regards to third-party applications, support and documentation is becoming<br>more readily available, and package maintainers are beginning, in some cases,<br>to give choices between auto-configuring for Apache and Nginx. Even without<br>support, configuring Nginx to work with alternative software is usually<br>straight-forward so long as the project itself documents its requirements<br>(permissions, headers, etc).</p>\n<h2 id=\"Using-Apache-and-Nginx-Together\"><a href=\"#Using-Apache-and-Nginx-Together\" class=\"headerlink\" title=\"Using Apache and Nginx Together\"></a>Using Apache and Nginx Together</h2><p>After going over the benefits and limitations of both Apache and Nginx, you<br>may have a better idea of which server is more suited to your needs. However,<br>many users find that it is possible to leverage each server’s strengths by<br>using them together.</p>\n<p>The conventional configuration for this partnership is to place Nginx in front<br>of Apache as a reverse proxy(Nginx做反向代理). This will allow Nginx to handle all<br>requests from clients. This takes advantage of Nginx’s fast processing speed<br>and ability to handle large numbers of connections concurrently.</p>\n<p>For static content, which Nginx excels at, the files will be served quickly<br>and directly to the client. For dynamic content, for instance PHP files, Nginx<br>will proxy the request to Apache, which can then process the results and<br>return the rendered page. Nginx can then pass the content back to the client.</p>\n<p>This setup works well for many people because it allows Nginx to function as a<br>sorting machine. It will handle all requests it can and pass on the ones that<br>it has no native ability to serve. By cutting down on the requests the Apache<br>server is asked to handle, we can alleviate some of the blocking that occurs<br>when an Apache process or thread is occupied.</p>\n<p>This configuration also allows you to scale out by adding additional backend<br>servers as necessary. Nginx can be configured to pass to a pool of servers<br>easily, increasing this configuration’s resilience to failure and performance.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As you can see, both Apache and Nginx are powerful, flexible, and capable.<br>Deciding which server is best for you is largely a function of evaluating your<br>specific requirements and testing with the patterns that you expect to see.</p>\n<p>There are differences between these projects that have a very real impact on<br>the raw performance, capabilities, and the implementation time necessary to<br>get each solution up and running. However, these usually are the result of a<br>series of trade offs that should not be casually dismissed. In the end, there<br>is no one-size-fits-all web server, so use the solution that best aligns with<br>your objectives.</p>\n","excerpt":"","more":"<p>原文地址：<a href=\"https://www.digitalocean.com/community/tutorials/apache-vs-nginx-\npractical-considerations\">https://www.digitalocean.com/community/tutorials/apache-vs-nginx-\npractical-considerations</a></p>\n<blockquote>\n<p><strong>总之就是各有各的优点，最好的方式就是nginx在前面做反向代理，并顺便处理静态内容，而apache则负责处理动态内容。</strong></p>\n</blockquote>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Apache and Nginx are the two most common open source web servers in the world.<br>Together, they are responsible for serving over 50\\% of traffic on the<br>internet. Both solutions are capable of handling diverse workloads and working<br>with other software to provide a complete web stack.</p>\n<p>While Apache and Nginx share many qualities, they should not be thought of as<br>entirely interchangeable. Each excels in its own way and it is important to<br>understand the situations where you may need to reevaluate your web server of<br>choice. This article will be devoted to a discussion of how each server stacks<br>up in various areas.</p>\n<h2 id=\"General-Overview\"><a href=\"#General-Overview\" class=\"headerlink\" title=\"General Overview\"></a>General Overview</h2><p>Before we dive into the differences between Apache and Nginx, let’s take a<br>quick look at the background of these two projects and their general<br>characteristics.</p>\n<h4 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>The Apache HTTP Server was created by Robert McCool in 1995 and has been<br>developed under the direction of the Apache Software Foundation since 1999.<br>Since the HTTP web server is the foundation’s original project and is by far<br>their most popular piece of software, it is often referred to simply as<br>“Apache”.</p>\n<p>The Apache web server has been the most popular server on the internet since</p>\n<ol>\n<li>Because of this popularity, Apache benefits from great documentation and<br>integrated support from other software projects.</li>\n</ol>\n<p>Apache is often chosen by administrators for its flexibility, power, and<br>widespread support. It is extensible through a dynamically loadable module<br>system and can process a large number of interpreted languages without<br>connecting out to separate software.</p>\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>In 2002, Igor Sysoev began work on Nginx as an answer to the C10K problem,<br>which was a challenge for web servers to begin handling ten thousand<br>concurrent connections as a requirement for the modern web. The initial public<br>release was made in 2004, meeting this goal by relying on an asynchronous(异步),<br>events-driven(事件驱动) architecture.</p>\n<p>Nginx has grown in popularity since its release due to its light-weight<br>resource utilization and its ability to scale easily on minimal hardware.<br>Nginx excels at serving static content(静态内容) quickly and is designed to pass<br>dynamic requests off to other software that is better suited for those<br>purposes.</p>\n<p>Nginx is often selected by administrators for its resource efficiency and<br>responsiveness under load. Advocates welcome Nginx’s focus on core web server<br>and proxy features.</p>\n<h2 id=\"Connection-Handling-Architecturel-连接处理架构\"><a href=\"#Connection-Handling-Architecturel-连接处理架构\" class=\"headerlink\" title=\"Connection Handling Architecturel(连接处理架构)\"></a>Connection Handling Architecturel(连接处理架构)</h2><p>One big difference between Apache and Nginx is the actual way that they handle<br>connections and traffic. This provides perhaps the most significant difference<br>in the way that they respond to different traffic conditions.</p>\n<h4 id=\"Apache-1\"><a href=\"#Apache-1\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache provides a variety of multi-processing modules (Apache calls these<br>MPMs) that dictate(决定) how client requests are handled. Basically, this allows<br>administrators to swap out its connection handling architecture easily. These<br>are:</p>\n<ul>\n<li><strong>mpm_prefork</strong>: This processing module spawns(产生) processes with a single thread each to handle request(一个请求一个线程). Each child can handle a single connection at a time. As long as the number of requests is fewer than the number of processes, this MPM is very fast(请求数量比进程数量少的时候会很快). However, performance degrades quickly after the requests surpass the number of processes, so this is not a good choice in many scenarios. Each process has a significant impact on RAM consumption, so this MPM is difficult to scale effectively. This may still be a good choice though if used in conjunction with other components that are not built with threads in mind. For instance, PHP is not thread-safe, so this MPM is recommended as the only safe way of working with mod_php, the Apache module for processing these files.</li>\n<li><strong>mpm_worker</strong>: This module spawns processes that can each manage multiple threads(每个进程可以管理多个线程). Each of these threads can handle a single connection. Threads are much more efficient than processes(线程比进程更高效), which means that this MPM scales better than the prefork MPM. Since there are more threads than processes, this also means that new connections can immediately take a free thread instead of having to wait for a free process(处理新的连接只需要有新的线程而不需要等待进程释放).</li>\n<li><strong>mpm_event</strong>: This module is similar to the worker module in most situations, but is optimized to handle keep-alive connections(对持久连接进行了优化). When using the worker MPM, a connection will hold a thread regardless of whether a request is actively being made for as long as the connection is kept alive. The event MPM handles keep alive connections by setting aside dedicated(专用的) threads for handling keep alive connections and passing active requests off to other threads. This keeps the module from getting bogged down by keep-alive requests, allowing for faster execution. This was marked stable with the release of Apache 2.4. As you can see, Apache provides a flexible architecture for choosing different connection and request handling algorithms. The choices provided are mainly a function of the server’s evolution and the increasing need for concurrency as the internet landscape has changed.</li>\n</ul>\n<h4 id=\"Nginx-1\"><a href=\"#Nginx-1\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx came onto the scene after Apache, with more awareness of the concurrency<br>problems that would face sites at scale(更注重并发问题). Leveraging(利用) this<br>knowledge, Nginx was designed from the ground up to use an asynchronous, non-<br>blocking, event-driven connection handling algorithm.</p>\n<p>Nginx spawns worker processes, each of which can handle thousands of<br>connections(产生的是worker进程，每个都可以处理上千个连接). The worker processes accomplish this<br>by implementing a fast looping mechanism(快速的循环机制) that continuously checks for<br>and processes events. Decoupling(解耦) actual work from connections allows each<br>worker to concern itself with a connection only when a new event has been<br>triggered.</p>\n<p>Each of the connections handled by the worker are placed within the event loop<br>where they exist with other connections. Within the loop, events are processed<br>asynchronously, allowing work to be handled in a non-blocking manner. When the<br>connection closes, it is removed from the loop.</p>\n<p>This style of connection processing allows Nginx to scale incredibly far with<br>limited resources. Since the server is single-threaded and processes are not<br>spawned to handle each new connection, the memory and CPU usage tends to stay<br>relatively consistent, even at times of heavy load.</p>\n<h1 id=\"Static-vs-Dynamic-Content\"><a href=\"#Static-vs-Dynamic-Content\" class=\"headerlink\" title=\"Static vs Dynamic Content\"></a>Static vs Dynamic Content</h1><p>In terms of real world use-cases, one of the most common comparisons between<br>Apache and Nginx is the way in which each server handles requests for static<br>and dynamic content.</p>\n<h4 id=\"Apache-2\"><a href=\"#Apache-2\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache servers can handle static content using its conventional file-based<br>methods. The performance of these operations is mainly a function of the MPM<br>methods described above.</p>\n<p>Apache can also process dynamic content by embedding(嵌入) a processor of the<br>language in question into each of its worker instances. This allows it to<br>execute dynamic content within the web server itself without having to rely on<br>external components. These dynamic processors can be enabled through the use<br>of dynamically loadable modules.</p>\n<p>Apache’s ability to handle dynamic content internally means that configuration<br>of dynamic processing tends to be simpler. Communication does not need to be<br>coordinated with an additional piece of software and modules can easily be<br>swapped out if the content requirements change.</p>\n<h4 id=\"Nginx-2\"><a href=\"#Nginx-2\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx does not have any ability to process dynamic content<br>natively(本身无法处理动态内容). To handle PHP and other requests for dynamic content,<br>Nginx must pass to an external processor for execution and wait for the<br>rendered content to be sent back(必须使用外部的执行程序然后等待返回). The results can then be<br>relayed to the client.</p>\n<p>For administrators, this means that communication must be configured between<br>Nginx and the processor over one of the protocols Nginx knows how to speak<br>(http, FastCGI, SCGI, uWSGI, memcache). This can complicate things slightly,<br>especially when trying to anticipate the number of connections to allow, as an<br>additional connection will be used for each call to the processor.</p>\n<p>However, this method has some advantages as well. Since the dynamic<br>interpreter is not embedded in the worker process, its overhead will only be<br>present for dynamic content. Static content can be served in a straight-<br>forward manner and the interpreter will only be contacted when needed. Apache<br>can also function in this manner, but doing so removes the benefits in the<br>previous section.</p>\n<h1 id=\"Distributed-vs-Centralized-Configuration\"><a href=\"#Distributed-vs-Centralized-Configuration\" class=\"headerlink\" title=\"Distributed vs Centralized Configuration\"></a>Distributed vs Centralized Configuration</h1><p>For administrators, one of the most readily apparent differences between these<br>two pieces of software is whether directory-level configuration is permitted<br>within the content directories.</p>\n<h4 id=\"Apache-3\"><a href=\"#Apache-3\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache includes an option to allow additional configuration on a per-directory<br>basis by inspecting and interpreting directives in hidden files within the<br>content directories themselves. These files are known as .htaccess<br>files.(可以管理每个目录)</p>\n<p>Since these files reside within the content directories themselves, when<br>handling a request, Apache checks each component of the path to the requested<br>file for an .htaccess file and applies the directives found within. This<br>effectively allows decentralized configuration of the web server, which is<br>often used for implementing URL rewrites, access restrictions, authorization<br>and authentication, even caching policies.</p>\n<p>While the above examples can all be configured in the main Apache<br>configuration file,.htaccess files have some important advantages. First,<br>since these are interpreted each time they are found along a request path,<br>they are implemented immediately without reloading the server. Second, it<br>makes it possible to allow non-privileged users to control certain aspects of<br>their own web content without giving them control over the entire<br>configuration file.</p>\n<p>This provides an easy way for certain web software, like content management<br>systems, to configure their environment without providing access to the<br>central configuration file. This is also used by shared hosting providers to<br>retain control of the main configuration while giving clients control over<br>their specific directories.</p>\n<h4 id=\"Nginx-3\"><a href=\"#Nginx-3\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx does not interpret .htaccess files, nor does it provide any mechanism<br>for evaluating per-directory configuration outside of the main configuration<br>file. This may be less flexible than the Apache model, but it does have its<br>own advantages.</p>\n<p>The most notable improvement over the .htaccess system of directory-level<br>configuration is increased performance. For a typical Apache setup that may<br>allow .htaccess in any directory, the server will check for these files in<br>each of the parent directories leading up to the requested file, for each<br>request. If one or more .htaccess files are found during this search, they<br>must be read and interpreted. By not allowing directory overrides, Nginx can<br>serve requests faster by doing a single directory lookup and file read for<br>each request (assuming that the file is found in the conventional directory<br>structure).</p>\n<p>Another advantage is security related(安全). Distributing directory-level<br>configuration access also distributes the responsibility of security to<br>individual users, who may not be trusted to handle this task well. Ensuring<br>that the administrator maintains control over the entire web server can<br>prevent some security missteps that may occur when access is given to other<br>parties.</p>\n<p>Keep in mind that it is possible to turn off .htaccess interpretation in<br>Apache if these concerns resonate with you.</p>\n<h1 id=\"File-vs-URI-Based-Interpretation\"><a href=\"#File-vs-URI-Based-Interpretation\" class=\"headerlink\" title=\"File vs URI-Based Interpretation\"></a>File vs URI-Based Interpretation</h1><p>How the web server interprets requests and maps them to actual resources on<br>the system is another area where these two servers differ.</p>\n<h4 id=\"Apache-4\"><a href=\"#Apache-4\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache provides the ability to interpret a request as a physical resource on<br>the filesystem or as a URI location that may need a more abstract evaluation.<br>In general, for the former Apache uses <Directory> or <Files> blocks, while it<br>utilizes <Location> blocks for more abstract resources.</p>\n<p>Because Apache was designed from the ground up as a web server, the default is<br>usually to interpret requests as filesystem resources. It begins by taking the<br>document root and appending the portion of the request following the host and<br>port number to try to find an actual file. Basically, the filesystem hierarchy<br>is represented on the web as the available document tree.</p>\n<p>Apache provides a number of alternatives for when the request does not match<br>the underlying filesystem. For instance, an Alias directive can be used to map<br>to an alternative location. Using <Location> blocks is a method of working<br>with the URI itself instead of the filesystem. There are also regular<br>expression variants which can be used to apply configuration more flexibly<br>throughout the filesystem.</p>\n<p>While Apache has the ability to operate on both the underlying filesystem and<br>the webspace, it leans heavily towards filesystem methods. This can be seen in<br>some of the design decisions, including the use of .htaccess files for per-<br>directory configuration. The Apache docs themselves warn against using URI-<br>based blocks to restrict access when the request mirrors the underlying<br>filesystem.</p>\n<h4 id=\"Nginx-4\"><a href=\"#Nginx-4\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx was created to be both a web server and a proxy server. Due to the<br>architecture required for these two roles, it works primarily with URIs,<br>translating to the filesystem when necessary.</p>\n<p>This can be seen in some of the ways that Nginx configuration files are<br>constructed and interpreted.Nginx does not provide a mechanism for specifying<br>configuration for a filesystem directory and instead parses the URI itself.</p>\n<p>For instance, the primary configuration blocks for Nginx are server and<br>location blocks. The server block interprets the host being requested, while<br>the location blocks are responsible for matching portions of the URI that<br>comes after the host and port. At this point, the request is being interpreted<br>as a URI, not as a location on the filesystem.</p>\n<p>For static files, all requests eventually have to be mapped to a location on<br>the filesystem. First, Nginx selects the server and location blocks that will<br>handle the request and then combines the document root with the URI, adapting<br>anything necessary according to the configuration specified.</p>\n<p>This may seem similar, but parsing requests primarily as URIs instead of<br>filesystem locations allows Nginx to more easily function in both web, mail,<br>and proxy server roles. Nginx is configured simply by laying out how to<br>respond to different request patterns. Nginx does not check the filesystem<br>until it is ready to serve the request, which explains why it does not<br>implement a form of .htaccess files.</p>\n<h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>Both Nginx and Apache are extensible through module systems, but the way that<br>they work differ significantly.</p>\n<h4 id=\"Apache-5\"><a href=\"#Apache-5\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Apache’s module system allows you to dynamically load or unload modules to<br>satisfy your needs during the course of running the server. The Apache core is<br>always present, while modules can be turned on or off, adding or removing<br>additional functionality and hooking into the main server.</p>\n<p>Apache uses this functionality for a large variety tasks. Due to the maturity<br>of the platform, there is an extensive library of modules available. These can<br>be used to alter some of the core functionality of the server, such as<br>mod_php, which embeds a PHP interpreter into each running worker.</p>\n<p>Modules are not limited to processing dynamic content, however. Among other<br>functions, they can be used for rewriting URLs, authenticating clients,<br>hardening the server, logging, caching, compression, proxying, rate limiting,<br>and encrypting. Dynamic modules can extend the core functionality considerably<br>without much additional work.</p>\n<h4 id=\"Nginx-5\"><a href=\"#Nginx-5\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx also implements a module system, but it is quite different from the<br>Apache system. In Nginx, modules are not dynamically loadable, so they must be<br>selected and compiled into the core software(模块居然不是动态加载的).</p>\n<p>For many users, this will make Nginx much less flexible. This is especially<br>true for users who are not comfortable maintaining their own compiled software<br>outside of their distribution’s conventional packaging system. While<br>distributions’ packages tend to include the most commonly used modules, if you<br>require a non-standard module, you will have to build the server from source<br>yourself.</p>\n<p>Nginx modules are still very useful though, and they allow you to dictate what<br>you want out of your server by only including the functionality you intend to<br>use. Some users also may consider this more secure, as arbitrary components<br>cannot be hooked into the server. However, if your server is ever put in a<br>position where this is possible, it is likely compromised already.</p>\n<p>Nginx modules allow many of the same capabilities as Apache modules. For<br>instance, Nginx modules can provide proxying support, compression, rate<br>limiting, logging, rewriting, geolocation, authentication, encryption,<br>streaming, and mail functionality.</p>\n<h2 id=\"Support-Compatibility-Ecosystem-and-Documentation\"><a href=\"#Support-Compatibility-Ecosystem-and-Documentation\" class=\"headerlink\" title=\"Support, Compatibility, Ecosystem, and Documentation\"></a>Support, Compatibility, Ecosystem, and Documentation</h2><p>A major point to consider is what the actual process of getting up and running<br>will be given the landscape of available help and support among other<br>software.</p>\n<h4 id=\"Apache-6\"><a href=\"#Apache-6\" class=\"headerlink\" title=\"Apache\"></a>Apache</h4><p>Because Apache has been popular for so long, support for the server is fairly<br>ubiquitous. There is a large library of first- and third-party documentation<br>available for the core server and for task-based scenarios involving hooking<br>Apache up with other software.</p>\n<p>Along with documentation, many tools and web projects include tools to<br>bootstrap themselves within an Apache environment. This may be included in the<br>projects themselves, or in the packages maintained by your distribution’s<br>packaging team.</p>\n<p>Apache, in general, will have more support from third-party projects simply<br>because of its market share and the length of time it has been available.<br>Administrators are also somewhat more likely to have experience working with<br>Apache not only due to its prevalence, but also because many people start off<br>in shared-hosting scenarios which almost exclusively rely on Apache due to the<br>.htaccess distributed management capabilities.</p>\n<h4 id=\"Nginx-6\"><a href=\"#Nginx-6\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx is experiencing increased support as more users adopt it for its<br>performance profile, but it still has some catching up to do in some key<br>areas.</p>\n<p>In the past, it was difficult to find comprehensive English-language<br>documentation regarding Nginx due to the fact that most of the early<br>development and documentation were in Russian. As interest in the project<br>grew, the documentation has been filled out and there are now plenty of<br>administration resources on the Nginx site and through third parties.</p>\n<p>In regards to third-party applications, support and documentation is becoming<br>more readily available, and package maintainers are beginning, in some cases,<br>to give choices between auto-configuring for Apache and Nginx. Even without<br>support, configuring Nginx to work with alternative software is usually<br>straight-forward so long as the project itself documents its requirements<br>(permissions, headers, etc).</p>\n<h2 id=\"Using-Apache-and-Nginx-Together\"><a href=\"#Using-Apache-and-Nginx-Together\" class=\"headerlink\" title=\"Using Apache and Nginx Together\"></a>Using Apache and Nginx Together</h2><p>After going over the benefits and limitations of both Apache and Nginx, you<br>may have a better idea of which server is more suited to your needs. However,<br>many users find that it is possible to leverage each server’s strengths by<br>using them together.</p>\n<p>The conventional configuration for this partnership is to place Nginx in front<br>of Apache as a reverse proxy(Nginx做反向代理). This will allow Nginx to handle all<br>requests from clients. This takes advantage of Nginx’s fast processing speed<br>and ability to handle large numbers of connections concurrently.</p>\n<p>For static content, which Nginx excels at, the files will be served quickly<br>and directly to the client. For dynamic content, for instance PHP files, Nginx<br>will proxy the request to Apache, which can then process the results and<br>return the rendered page. Nginx can then pass the content back to the client.</p>\n<p>This setup works well for many people because it allows Nginx to function as a<br>sorting machine. It will handle all requests it can and pass on the ones that<br>it has no native ability to serve. By cutting down on the requests the Apache<br>server is asked to handle, we can alleviate some of the blocking that occurs<br>when an Apache process or thread is occupied.</p>\n<p>This configuration also allows you to scale out by adding additional backend<br>servers as necessary. Nginx can be configured to pass to a pool of servers<br>easily, increasing this configuration’s resilience to failure and performance.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>As you can see, both Apache and Nginx are powerful, flexible, and capable.<br>Deciding which server is best for you is largely a function of evaluating your<br>specific requirements and testing with the patterns that you expect to see.</p>\n<p>There are differences between these projects that have a very real impact on<br>the raw performance, capabilities, and the implementation time necessary to<br>get each solution up and running. However, these usually are the result of a<br>series of trade offs that should not be casually dismissed. In the end, there<br>is no one-size-fits-all web server, so use the solution that best aligns with<br>your objectives.</p>\n"},{"title":"《把时间当作朋友》——别试图去管理时间","date":"2016-06-05T13:56:05.000Z","_content":"说实话，李笑来的这本《把时间当作朋友》确实绕过去绕过来，把我饶得有点晕了，但是书中的主要观点我还是非常认同的。把时间当作朋友。从来都只听过如何去管理时间，却从来没听说过要去和时间做朋友。上帝给每个人的时间都是一样的，不是说你想怎么管理就怎么管理，从小学到大学到工作，每次考试前你不都有很多的复习计划，每次假期前不都有很多的出游计划吗，但是，有多少我们真正实现过呢。很多时候计划越详细，我们反而越不会执行。为什么？因为我们不了解时间，也不了解自己。就像你想和一个人做朋友一样，你们都不互相了解，非要在一起，那也是互相折磨而已。所以，要想与时间和睦相处，首先是要了解自己，自己是一个怎么样的人，自己喜欢做什么样的事情，什么样的事情会让自己有动力去做，到底为什么而活？\n\n没有人不懒惰，没有人不爱做计划，只是那些成功的人普遍都是做了计划就立马行动的，这真的真的是我目前为止发现的最大的缺点。想太多，做得少。基本上从高中就开始意识到这个缺点了，也一直在改，在改的过程中又发现了另一个缺点，那就是只要我心里有一块石头，就不能放下它去做其他的事情了。我在外面实习都快一年了，这一年里感觉还没我大一一个暑假成长得快，我知道自己遇到了一个瓶颈，也做了很多的计划去冲破它，但就是碍于学校里数不清的杂事，一直没放心大胆地去做。最后导致两边都互相拖着，然后两边都没做好。其实专注于一件事没有什么不好，但是心中担心一件事情，就直接把那件事情做了就好呀，这有什么好犹豫的呢，有什么好纠结的呢。那件事情制约着我，我干嘛就不把他做了呢，一定要拖到最后。不过还好，毕业答辩做了充足的准备，还是顺利通过了。在昨天那个不存在的日子里进行的答辩，而且在答辩前几天我就已经开始我的全栈实践之路了。马上进入社会，希望能真的和时间做好朋友，然后和它并肩作战。\n\n## 语录\n当你把时间花在一个人身上的时候，相当于在他的身上倾注了你生命的一段，不管最终结果如何，反正，那个人、那件事都成了你生命的一部分——不管最后你是喜欢还是不喜欢。\n\n一个人遗忘痛苦的能力特别强的一个具体表现就是，这个人会很轻易地原谅自己。\n\n往往并不是有兴趣才能做好，而是做好了才有兴趣。\n\n浪费生命、虚度年华的人，有个共同的特征——他们拼命想控制自己完全不能控制的，却在自己真正能掌控的地方彻底失控。\n\n当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因为最终我们会发现，自己开始进入一种他人无法想象的状态，成为一个不需要他人鼓励的人。\n\n心智真正成熟的人在一些情况下能够做到无须亲自经历，仅凭思考就得到深刻的体会。\n\n所谓的幸运，就是当你准备好了的时候，机会来了。\n\n你比别人强一点根本没用，真正有用的是你比别人强很多很多。\n\n学东西前不用定义一定要有用——别觉得知识现在没用就拒绝去学它。\n\n人是没办法管理时间的，时间也不听从任何人的管理，它只会自顾自一如既往地流逝。\"管理时间\"只不过是人们的一厢情愿而已。\n\n这些人其实并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。\n\n本科教育之\"本\"在于培养学生的自学能力。从理论上讲，一个人本科毕业之后，应该有能力自学他所需要的任何知识。","source":"_posts/bashijiandangzuopengyou.md","raw":"---\ntitle: \"《把时间当作朋友》——别试图去管理时间\"\ndate: 2016-06-05 21:56:05\ncategories: 韦编三绝\n---\n说实话，李笑来的这本《把时间当作朋友》确实绕过去绕过来，把我饶得有点晕了，但是书中的主要观点我还是非常认同的。把时间当作朋友。从来都只听过如何去管理时间，却从来没听说过要去和时间做朋友。上帝给每个人的时间都是一样的，不是说你想怎么管理就怎么管理，从小学到大学到工作，每次考试前你不都有很多的复习计划，每次假期前不都有很多的出游计划吗，但是，有多少我们真正实现过呢。很多时候计划越详细，我们反而越不会执行。为什么？因为我们不了解时间，也不了解自己。就像你想和一个人做朋友一样，你们都不互相了解，非要在一起，那也是互相折磨而已。所以，要想与时间和睦相处，首先是要了解自己，自己是一个怎么样的人，自己喜欢做什么样的事情，什么样的事情会让自己有动力去做，到底为什么而活？\n\n没有人不懒惰，没有人不爱做计划，只是那些成功的人普遍都是做了计划就立马行动的，这真的真的是我目前为止发现的最大的缺点。想太多，做得少。基本上从高中就开始意识到这个缺点了，也一直在改，在改的过程中又发现了另一个缺点，那就是只要我心里有一块石头，就不能放下它去做其他的事情了。我在外面实习都快一年了，这一年里感觉还没我大一一个暑假成长得快，我知道自己遇到了一个瓶颈，也做了很多的计划去冲破它，但就是碍于学校里数不清的杂事，一直没放心大胆地去做。最后导致两边都互相拖着，然后两边都没做好。其实专注于一件事没有什么不好，但是心中担心一件事情，就直接把那件事情做了就好呀，这有什么好犹豫的呢，有什么好纠结的呢。那件事情制约着我，我干嘛就不把他做了呢，一定要拖到最后。不过还好，毕业答辩做了充足的准备，还是顺利通过了。在昨天那个不存在的日子里进行的答辩，而且在答辩前几天我就已经开始我的全栈实践之路了。马上进入社会，希望能真的和时间做好朋友，然后和它并肩作战。\n\n## 语录\n当你把时间花在一个人身上的时候，相当于在他的身上倾注了你生命的一段，不管最终结果如何，反正，那个人、那件事都成了你生命的一部分——不管最后你是喜欢还是不喜欢。\n\n一个人遗忘痛苦的能力特别强的一个具体表现就是，这个人会很轻易地原谅自己。\n\n往往并不是有兴趣才能做好，而是做好了才有兴趣。\n\n浪费生命、虚度年华的人，有个共同的特征——他们拼命想控制自己完全不能控制的，却在自己真正能掌控的地方彻底失控。\n\n当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因为最终我们会发现，自己开始进入一种他人无法想象的状态，成为一个不需要他人鼓励的人。\n\n心智真正成熟的人在一些情况下能够做到无须亲自经历，仅凭思考就得到深刻的体会。\n\n所谓的幸运，就是当你准备好了的时候，机会来了。\n\n你比别人强一点根本没用，真正有用的是你比别人强很多很多。\n\n学东西前不用定义一定要有用——别觉得知识现在没用就拒绝去学它。\n\n人是没办法管理时间的，时间也不听从任何人的管理，它只会自顾自一如既往地流逝。\"管理时间\"只不过是人们的一厢情愿而已。\n\n这些人其实并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。\n\n本科教育之\"本\"在于培养学生的自学能力。从理论上讲，一个人本科毕业之后，应该有能力自学他所需要的任何知识。","slug":"bashijiandangzuopengyou","published":1,"updated":"2016-06-05T14:29:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p37000e9vnzctkxq45a","content":"<p>说实话，李笑来的这本《把时间当作朋友》确实绕过去绕过来，把我饶得有点晕了，但是书中的主要观点我还是非常认同的。把时间当作朋友。从来都只听过如何去管理时间，却从来没听说过要去和时间做朋友。上帝给每个人的时间都是一样的，不是说你想怎么管理就怎么管理，从小学到大学到工作，每次考试前你不都有很多的复习计划，每次假期前不都有很多的出游计划吗，但是，有多少我们真正实现过呢。很多时候计划越详细，我们反而越不会执行。为什么？因为我们不了解时间，也不了解自己。就像你想和一个人做朋友一样，你们都不互相了解，非要在一起，那也是互相折磨而已。所以，要想与时间和睦相处，首先是要了解自己，自己是一个怎么样的人，自己喜欢做什么样的事情，什么样的事情会让自己有动力去做，到底为什么而活？</p>\n<p>没有人不懒惰，没有人不爱做计划，只是那些成功的人普遍都是做了计划就立马行动的，这真的真的是我目前为止发现的最大的缺点。想太多，做得少。基本上从高中就开始意识到这个缺点了，也一直在改，在改的过程中又发现了另一个缺点，那就是只要我心里有一块石头，就不能放下它去做其他的事情了。我在外面实习都快一年了，这一年里感觉还没我大一一个暑假成长得快，我知道自己遇到了一个瓶颈，也做了很多的计划去冲破它，但就是碍于学校里数不清的杂事，一直没放心大胆地去做。最后导致两边都互相拖着，然后两边都没做好。其实专注于一件事没有什么不好，但是心中担心一件事情，就直接把那件事情做了就好呀，这有什么好犹豫的呢，有什么好纠结的呢。那件事情制约着我，我干嘛就不把他做了呢，一定要拖到最后。不过还好，毕业答辩做了充足的准备，还是顺利通过了。在昨天那个不存在的日子里进行的答辩，而且在答辩前几天我就已经开始我的全栈实践之路了。马上进入社会，希望能真的和时间做好朋友，然后和它并肩作战。</p>\n<h2 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h2><p>当你把时间花在一个人身上的时候，相当于在他的身上倾注了你生命的一段，不管最终结果如何，反正，那个人、那件事都成了你生命的一部分——不管最后你是喜欢还是不喜欢。</p>\n<p>一个人遗忘痛苦的能力特别强的一个具体表现就是，这个人会很轻易地原谅自己。</p>\n<p>往往并不是有兴趣才能做好，而是做好了才有兴趣。</p>\n<p>浪费生命、虚度年华的人，有个共同的特征——他们拼命想控制自己完全不能控制的，却在自己真正能掌控的地方彻底失控。</p>\n<p>当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因为最终我们会发现，自己开始进入一种他人无法想象的状态，成为一个不需要他人鼓励的人。</p>\n<p>心智真正成熟的人在一些情况下能够做到无须亲自经历，仅凭思考就得到深刻的体会。</p>\n<p>所谓的幸运，就是当你准备好了的时候，机会来了。</p>\n<p>你比别人强一点根本没用，真正有用的是你比别人强很多很多。</p>\n<p>学东西前不用定义一定要有用——别觉得知识现在没用就拒绝去学它。</p>\n<p>人是没办法管理时间的，时间也不听从任何人的管理，它只会自顾自一如既往地流逝。”管理时间”只不过是人们的一厢情愿而已。</p>\n<p>这些人其实并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。</p>\n<p>本科教育之”本”在于培养学生的自学能力。从理论上讲，一个人本科毕业之后，应该有能力自学他所需要的任何知识。</p>\n","excerpt":"","more":"<p>说实话，李笑来的这本《把时间当作朋友》确实绕过去绕过来，把我饶得有点晕了，但是书中的主要观点我还是非常认同的。把时间当作朋友。从来都只听过如何去管理时间，却从来没听说过要去和时间做朋友。上帝给每个人的时间都是一样的，不是说你想怎么管理就怎么管理，从小学到大学到工作，每次考试前你不都有很多的复习计划，每次假期前不都有很多的出游计划吗，但是，有多少我们真正实现过呢。很多时候计划越详细，我们反而越不会执行。为什么？因为我们不了解时间，也不了解自己。就像你想和一个人做朋友一样，你们都不互相了解，非要在一起，那也是互相折磨而已。所以，要想与时间和睦相处，首先是要了解自己，自己是一个怎么样的人，自己喜欢做什么样的事情，什么样的事情会让自己有动力去做，到底为什么而活？</p>\n<p>没有人不懒惰，没有人不爱做计划，只是那些成功的人普遍都是做了计划就立马行动的，这真的真的是我目前为止发现的最大的缺点。想太多，做得少。基本上从高中就开始意识到这个缺点了，也一直在改，在改的过程中又发现了另一个缺点，那就是只要我心里有一块石头，就不能放下它去做其他的事情了。我在外面实习都快一年了，这一年里感觉还没我大一一个暑假成长得快，我知道自己遇到了一个瓶颈，也做了很多的计划去冲破它，但就是碍于学校里数不清的杂事，一直没放心大胆地去做。最后导致两边都互相拖着，然后两边都没做好。其实专注于一件事没有什么不好，但是心中担心一件事情，就直接把那件事情做了就好呀，这有什么好犹豫的呢，有什么好纠结的呢。那件事情制约着我，我干嘛就不把他做了呢，一定要拖到最后。不过还好，毕业答辩做了充足的准备，还是顺利通过了。在昨天那个不存在的日子里进行的答辩，而且在答辩前几天我就已经开始我的全栈实践之路了。马上进入社会，希望能真的和时间做好朋友，然后和它并肩作战。</p>\n<h2 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h2><p>当你把时间花在一个人身上的时候，相当于在他的身上倾注了你生命的一段，不管最终结果如何，反正，那个人、那件事都成了你生命的一部分——不管最后你是喜欢还是不喜欢。</p>\n<p>一个人遗忘痛苦的能力特别强的一个具体表现就是，这个人会很轻易地原谅自己。</p>\n<p>往往并不是有兴趣才能做好，而是做好了才有兴趣。</p>\n<p>浪费生命、虚度年华的人，有个共同的特征——他们拼命想控制自己完全不能控制的，却在自己真正能掌控的地方彻底失控。</p>\n<p>当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因为最终我们会发现，自己开始进入一种他人无法想象的状态，成为一个不需要他人鼓励的人。</p>\n<p>心智真正成熟的人在一些情况下能够做到无须亲自经历，仅凭思考就得到深刻的体会。</p>\n<p>所谓的幸运，就是当你准备好了的时候，机会来了。</p>\n<p>你比别人强一点根本没用，真正有用的是你比别人强很多很多。</p>\n<p>学东西前不用定义一定要有用——别觉得知识现在没用就拒绝去学它。</p>\n<p>人是没办法管理时间的，时间也不听从任何人的管理，它只会自顾自一如既往地流逝。”管理时间”只不过是人们的一厢情愿而已。</p>\n<p>这些人其实并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。</p>\n<p>本科教育之”本”在于培养学生的自学能力。从理论上讲，一个人本科毕业之后，应该有能力自学他所需要的任何知识。</p>\n"},{"title":"使用Gitosis搭建Git服务器的过程","date":"2014-09-23T14:39:35.000Z","_content":"参考文章：<http://blog.csdn.net/davidsky11/article/details/23023729>\n\n**环境：Ubuntu14.04_server(Virtualbox虚拟机里面) + windows7 其中，windows7里面已经安装好了[git for windows](http://msysgit.github.io/)，且ubuntu里已经用apt-get方式安 装了git这个软件，还有就是已经能通过ssh访问虚拟机了。**\n\n具体步骤：\n\n# Step1：安装与配置几个软件\n\n\n\n    sudo apt-get install git git-core openssh-server python-setuptools\n\n\n添加git用户\n\n\n\n    sudo groupadd git\n    sudo useradd git -g git -m\n    sudo passwd git\n\n\n全局配置，这里的name和email可以随便设置不影响，因为生成key的时候是按照当前的linux登录帐号生成的\n\n\n\n    git config --global user.name \"haofly\"\n    git config --global user.email \"haofly@server-pc\"\n\n安装gitosis，随便在哪个目录都行\n\n\n\n    git clone https://github.com/res0nat0r/gitosis.git\n    cd gitosis\n    sudo python setup.py install\n\n#  Step2：服务器的配置\n\n虽然是服务器的配置，但这里需要在主机windows上面配置一下(当然可以在同一台电脑上配置，但是为了不搞混，建议最好服务器和客户端分开)\n在客户端，即git管理员的PC上，要先安装上git软件，windows就装上git for\nwindows即可，linux上git即可，在gitbash中，生成密钥：\n\n\n\n    ssh-keygen -t rsa\n\n置于密钥保存在哪儿和密码的设置，默认即可。要记住路径，在我的PC上生成的密钥在**_C:\\\\Users\\\\haofly.ssh_**里面，该文件夹内有三个文件：\nid_rsa, id_rsa.pub, known_hosts其中id_rsa.pub就是公钥，现在要把公钥上传到git服务器上(注意：如果PC与虚拟机必须\n要有网络端口转发，那么git的端口是9418)。在gitbash输入(其中的IP地址是PC访问虚拟机里面服务的地址)\n\n\n\n    scp C:\\\\Users\\\\haofly.ssh\\\\rsa.pub git@169.254.217.173:/tmp/id_rsa.pub\n\n然后，回到服务器里：\n\n\n\n    sudo chmod a+r /tmp/id_rsa.pub\n    sudo -H -u git gitosis-init < /tmp/id_rsa.pub\n\n\n此时会提示(额，我电脑上是中文，忘了是什么了)： Initialized empty Git repository in\n/home/repo/gitosis-admin.git/ Reinitialized existing Git repository in\n/home/repo/gitosis-admin.git/ 然后再改变权限\n\n\n\n    sudo chown git:git /home/git/repositories\n    sudo chmod 755 /home/git/repositories\n    sudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update\n\n#  Step3：建立测试仓库\n\n在服务器上新建一个裸仓库\n\n\n\n    su git\n    cd\n    cd repositories\n    git init --bare test.git\n\n此时虽然新建了一个仓库，但是是个裸仓库，不能被clone下来，需要让管理员为其分配权限。 在test.git文件夹内有如下重要文件：\nHEAD文件：存放根节点的信息，Git采用这种树形结构来存储版本信息。 refs目录：存储当前版本控制目录下的各种不同引用，即各个分支树的信息，其下有hea\nds/remotes/stash/tags四个子目录，分别存储对不同的根、远程版本库、Git栈和标签的四种引用。\nlogs目录：根据不同的引用存储了日志信息。 test.git/object/pack：这里存放的就是我们上传的东西，但是被打包成了idx和pack结尾的文\n件。所以如果上传了后发现找不到，其实是在这里面的。\n\n# Step4：修改gitosis配置文件\n\n现在在管理员的PC上(就是刚刚上传公钥的那台机器上，我这里就是windows主机)，把管理的仓库clone下来，找个地方，然后在gitbash里执行(如果不\n行，试试全路径/home/git/repositories/gitosis-admin.git)：\n\n\n\n    mkdir admin\n    cd admin\n    git clone git@169.254.217.173:gitosis-admin.git\n    cd gitosis-admin\n    vim gitosis.conf\n\nclone下来会有两个东西，一个是keydir文件夹，里面存储了所有需要访问git服务器的用户的ssh公钥，比如我的keydir/haofly@HAOFLY\n_PC.pub，另一个文件就是gitosis.conf，里面配置了各个仓库的访问权限，例如：\n\n\n\n    [gitosis]\n        [group gitosis-admin]\n            writable = gitosis-admin\n            members = haofly@HAOFLY-PC\n        [group team]\n            writable = test\n            members = haofly@ubuntu  haofly@HAOFLY-PC  pitter@PITTER-PC\n\n这个配置文件很直白，有多个组，每个组的writable代表一个仓库，members表示具有读写权限的用户，用户的公钥必须在keydir文件夹内。\n然后把配置文件push到服务器上去\n\n\n\n    git add .\n    git commit -m \"add test and someusers\"\n    git push origin master\n\n#  Step5：测试\n\n空仓库是不能clone的，需要一个具有write权限的人初始化一个版本，在客户端执行：\n\n\n\n    mkdir test\n    cd test\n    git init\n    echo \"hehe\" > hello\n    git add .\n    git commit -m \"initial vesion\"\n    git remote add origin git@169.254.217.173:test.git\n    git push origin master\n\n如果push成功了，那么可以去服务器上看看，但千万不要妄图去找你库里面的文件，因为你上传的东西，git服务器会把它弄成idx和pack文件，我不大清楚git\n的原理，反正是这里面的_**/home/git/repositories/test.git/objects/pack/ **_\n\n原文中其它配置我还没试过。。。\n","source":"_posts/Gitosis-Git.md","raw":"---\ntitle: \"使用Gitosis搭建Git服务器的过程\"\ndate: 2014-09-23 22:39:35\ncategories: 编程之路\n---\n参考文章：<http://blog.csdn.net/davidsky11/article/details/23023729>\n\n**环境：Ubuntu14.04_server(Virtualbox虚拟机里面) + windows7 其中，windows7里面已经安装好了[git for windows](http://msysgit.github.io/)，且ubuntu里已经用apt-get方式安 装了git这个软件，还有就是已经能通过ssh访问虚拟机了。**\n\n具体步骤：\n\n# Step1：安装与配置几个软件\n\n\n\n    sudo apt-get install git git-core openssh-server python-setuptools\n\n\n添加git用户\n\n\n\n    sudo groupadd git\n    sudo useradd git -g git -m\n    sudo passwd git\n\n\n全局配置，这里的name和email可以随便设置不影响，因为生成key的时候是按照当前的linux登录帐号生成的\n\n\n\n    git config --global user.name \"haofly\"\n    git config --global user.email \"haofly@server-pc\"\n\n安装gitosis，随便在哪个目录都行\n\n\n\n    git clone https://github.com/res0nat0r/gitosis.git\n    cd gitosis\n    sudo python setup.py install\n\n#  Step2：服务器的配置\n\n虽然是服务器的配置，但这里需要在主机windows上面配置一下(当然可以在同一台电脑上配置，但是为了不搞混，建议最好服务器和客户端分开)\n在客户端，即git管理员的PC上，要先安装上git软件，windows就装上git for\nwindows即可，linux上git即可，在gitbash中，生成密钥：\n\n\n\n    ssh-keygen -t rsa\n\n置于密钥保存在哪儿和密码的设置，默认即可。要记住路径，在我的PC上生成的密钥在**_C:\\\\Users\\\\haofly.ssh_**里面，该文件夹内有三个文件：\nid_rsa, id_rsa.pub, known_hosts其中id_rsa.pub就是公钥，现在要把公钥上传到git服务器上(注意：如果PC与虚拟机必须\n要有网络端口转发，那么git的端口是9418)。在gitbash输入(其中的IP地址是PC访问虚拟机里面服务的地址)\n\n\n\n    scp C:\\\\Users\\\\haofly.ssh\\\\rsa.pub git@169.254.217.173:/tmp/id_rsa.pub\n\n然后，回到服务器里：\n\n\n\n    sudo chmod a+r /tmp/id_rsa.pub\n    sudo -H -u git gitosis-init < /tmp/id_rsa.pub\n\n\n此时会提示(额，我电脑上是中文，忘了是什么了)： Initialized empty Git repository in\n/home/repo/gitosis-admin.git/ Reinitialized existing Git repository in\n/home/repo/gitosis-admin.git/ 然后再改变权限\n\n\n\n    sudo chown git:git /home/git/repositories\n    sudo chmod 755 /home/git/repositories\n    sudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update\n\n#  Step3：建立测试仓库\n\n在服务器上新建一个裸仓库\n\n\n\n    su git\n    cd\n    cd repositories\n    git init --bare test.git\n\n此时虽然新建了一个仓库，但是是个裸仓库，不能被clone下来，需要让管理员为其分配权限。 在test.git文件夹内有如下重要文件：\nHEAD文件：存放根节点的信息，Git采用这种树形结构来存储版本信息。 refs目录：存储当前版本控制目录下的各种不同引用，即各个分支树的信息，其下有hea\nds/remotes/stash/tags四个子目录，分别存储对不同的根、远程版本库、Git栈和标签的四种引用。\nlogs目录：根据不同的引用存储了日志信息。 test.git/object/pack：这里存放的就是我们上传的东西，但是被打包成了idx和pack结尾的文\n件。所以如果上传了后发现找不到，其实是在这里面的。\n\n# Step4：修改gitosis配置文件\n\n现在在管理员的PC上(就是刚刚上传公钥的那台机器上，我这里就是windows主机)，把管理的仓库clone下来，找个地方，然后在gitbash里执行(如果不\n行，试试全路径/home/git/repositories/gitosis-admin.git)：\n\n\n\n    mkdir admin\n    cd admin\n    git clone git@169.254.217.173:gitosis-admin.git\n    cd gitosis-admin\n    vim gitosis.conf\n\nclone下来会有两个东西，一个是keydir文件夹，里面存储了所有需要访问git服务器的用户的ssh公钥，比如我的keydir/haofly@HAOFLY\n_PC.pub，另一个文件就是gitosis.conf，里面配置了各个仓库的访问权限，例如：\n\n\n\n    [gitosis]\n        [group gitosis-admin]\n            writable = gitosis-admin\n            members = haofly@HAOFLY-PC\n        [group team]\n            writable = test\n            members = haofly@ubuntu  haofly@HAOFLY-PC  pitter@PITTER-PC\n\n这个配置文件很直白，有多个组，每个组的writable代表一个仓库，members表示具有读写权限的用户，用户的公钥必须在keydir文件夹内。\n然后把配置文件push到服务器上去\n\n\n\n    git add .\n    git commit -m \"add test and someusers\"\n    git push origin master\n\n#  Step5：测试\n\n空仓库是不能clone的，需要一个具有write权限的人初始化一个版本，在客户端执行：\n\n\n\n    mkdir test\n    cd test\n    git init\n    echo \"hehe\" > hello\n    git add .\n    git commit -m \"initial vesion\"\n    git remote add origin git@169.254.217.173:test.git\n    git push origin master\n\n如果push成功了，那么可以去服务器上看看，但千万不要妄图去找你库里面的文件，因为你上传的东西，git服务器会把它弄成idx和pack文件，我不大清楚git\n的原理，反正是这里面的_**/home/git/repositories/test.git/objects/pack/ **_\n\n原文中其它配置我还没试过。。。\n","slug":"Gitosis-Git","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p3g000g9vnzvzow9nzb","content":"<p>参考文章：<a href=\"http://blog.csdn.net/davidsky11/article/details/23023729\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/davidsky11/article/details/23023729</a></p>\n<p><strong>环境：Ubuntu14.04_server(Virtualbox虚拟机里面) + windows7 其中，windows7里面已经安装好了<a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"external\">git for windows</a>，且ubuntu里已经用apt-get方式安 装了git这个软件，还有就是已经能通过ssh访问虚拟机了。</strong></p>\n<p>具体步骤：</p>\n<h1 id=\"Step1：安装与配置几个软件\"><a href=\"#Step1：安装与配置几个软件\" class=\"headerlink\" title=\"Step1：安装与配置几个软件\"></a>Step1：安装与配置几个软件</h1><pre><code>sudo apt-get install git git-core openssh-server python-setuptools\n</code></pre><p>添加git用户</p>\n<pre><code>sudo groupadd git\nsudo useradd git -g git -m\nsudo passwd git\n</code></pre><p>全局配置，这里的name和email可以随便设置不影响，因为生成key的时候是按照当前的linux登录帐号生成的</p>\n<pre><code>git config --global user.name &quot;haofly&quot;\ngit config --global user.email &quot;haofly@server-pc&quot;\n</code></pre><p>安装gitosis，随便在哪个目录都行</p>\n<pre><code>git clone https://github.com/res0nat0r/gitosis.git\ncd gitosis\nsudo python setup.py install\n</code></pre><h1 id=\"Step2：服务器的配置\"><a href=\"#Step2：服务器的配置\" class=\"headerlink\" title=\"Step2：服务器的配置\"></a>Step2：服务器的配置</h1><p>虽然是服务器的配置，但这里需要在主机windows上面配置一下(当然可以在同一台电脑上配置，但是为了不搞混，建议最好服务器和客户端分开)<br>在客户端，即git管理员的PC上，要先安装上git软件，windows就装上git for<br>windows即可，linux上git即可，在gitbash中，生成密钥：</p>\n<pre><code>ssh-keygen -t rsa\n</code></pre><p>置于密钥保存在哪儿和密码的设置，默认即可。要记住路径，在我的PC上生成的密钥在<strong><em>C:\\Users\\haofly.ssh</em></strong>里面，该文件夹内有三个文件：<br>id_rsa, id_rsa.pub, known_hosts其中id_rsa.pub就是公钥，现在要把公钥上传到git服务器上(注意：如果PC与虚拟机必须<br>要有网络端口转发，那么git的端口是9418)。在gitbash输入(其中的IP地址是PC访问虚拟机里面服务的地址)</p>\n<pre><code>scp C:\\\\Users\\\\haofly.ssh\\\\rsa.pub git@169.254.217.173:/tmp/id_rsa.pub\n</code></pre><p>然后，回到服务器里：</p>\n<pre><code>sudo chmod a+r /tmp/id_rsa.pub\nsudo -H -u git gitosis-init &lt; /tmp/id_rsa.pub\n</code></pre><p>此时会提示(额，我电脑上是中文，忘了是什么了)： Initialized empty Git repository in<br>/home/repo/gitosis-admin.git/ Reinitialized existing Git repository in<br>/home/repo/gitosis-admin.git/ 然后再改变权限</p>\n<pre><code>sudo chown git:git /home/git/repositories\nsudo chmod 755 /home/git/repositories\nsudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update\n</code></pre><h1 id=\"Step3：建立测试仓库\"><a href=\"#Step3：建立测试仓库\" class=\"headerlink\" title=\"Step3：建立测试仓库\"></a>Step3：建立测试仓库</h1><p>在服务器上新建一个裸仓库</p>\n<pre><code>su git\ncd\ncd repositories\ngit init --bare test.git\n</code></pre><p>此时虽然新建了一个仓库，但是是个裸仓库，不能被clone下来，需要让管理员为其分配权限。 在test.git文件夹内有如下重要文件：<br>HEAD文件：存放根节点的信息，Git采用这种树形结构来存储版本信息。 refs目录：存储当前版本控制目录下的各种不同引用，即各个分支树的信息，其下有hea<br>ds/remotes/stash/tags四个子目录，分别存储对不同的根、远程版本库、Git栈和标签的四种引用。<br>logs目录：根据不同的引用存储了日志信息。 test.git/object/pack：这里存放的就是我们上传的东西，但是被打包成了idx和pack结尾的文<br>件。所以如果上传了后发现找不到，其实是在这里面的。</p>\n<h1 id=\"Step4：修改gitosis配置文件\"><a href=\"#Step4：修改gitosis配置文件\" class=\"headerlink\" title=\"Step4：修改gitosis配置文件\"></a>Step4：修改gitosis配置文件</h1><p>现在在管理员的PC上(就是刚刚上传公钥的那台机器上，我这里就是windows主机)，把管理的仓库clone下来，找个地方，然后在gitbash里执行(如果不<br>行，试试全路径/home/git/repositories/gitosis-admin.git)：</p>\n<pre><code>mkdir admin\ncd admin\ngit clone git@169.254.217.173:gitosis-admin.git\ncd gitosis-admin\nvim gitosis.conf\n</code></pre><p>clone下来会有两个东西，一个是keydir文件夹，里面存储了所有需要访问git服务器的用户的ssh公钥，比如我的keydir/haofly@HAOFLY<br>_PC.pub，另一个文件就是gitosis.conf，里面配置了各个仓库的访问权限，例如：</p>\n<pre><code>[gitosis]\n    [group gitosis-admin]\n        writable = gitosis-admin\n        members = haofly@HAOFLY-PC\n    [group team]\n        writable = test\n        members = haofly@ubuntu  haofly@HAOFLY-PC  pitter@PITTER-PC\n</code></pre><p>这个配置文件很直白，有多个组，每个组的writable代表一个仓库，members表示具有读写权限的用户，用户的公钥必须在keydir文件夹内。<br>然后把配置文件push到服务器上去</p>\n<pre><code>git add .\ngit commit -m &quot;add test and someusers&quot;\ngit push origin master\n</code></pre><h1 id=\"Step5：测试\"><a href=\"#Step5：测试\" class=\"headerlink\" title=\"Step5：测试\"></a>Step5：测试</h1><p>空仓库是不能clone的，需要一个具有write权限的人初始化一个版本，在客户端执行：</p>\n<pre><code>mkdir test\ncd test\ngit init\necho &quot;hehe&quot; &gt; hello\ngit add .\ngit commit -m &quot;initial vesion&quot;\ngit remote add origin git@169.254.217.173:test.git\ngit push origin master\n</code></pre><p>如果push成功了，那么可以去服务器上看看，但千万不要妄图去找你库里面的文件，因为你上传的东西，git服务器会把它弄成idx和pack文件，我不大清楚git<br>的原理，反正是这里面的<em><strong>/home/git/repositories/test.git/objects/pack/ </strong></em></p>\n<p>原文中其它配置我还没试过。。。</p>\n","excerpt":"","more":"<p>参考文章：<a href=\"http://blog.csdn.net/davidsky11/article/details/23023729\">http://blog.csdn.net/davidsky11/article/details/23023729</a></p>\n<p><strong>环境：Ubuntu14.04_server(Virtualbox虚拟机里面) + windows7 其中，windows7里面已经安装好了<a href=\"http://msysgit.github.io/\">git for windows</a>，且ubuntu里已经用apt-get方式安 装了git这个软件，还有就是已经能通过ssh访问虚拟机了。</strong></p>\n<p>具体步骤：</p>\n<h1 id=\"Step1：安装与配置几个软件\"><a href=\"#Step1：安装与配置几个软件\" class=\"headerlink\" title=\"Step1：安装与配置几个软件\"></a>Step1：安装与配置几个软件</h1><pre><code>sudo apt-get install git git-core openssh-server python-setuptools\n</code></pre><p>添加git用户</p>\n<pre><code>sudo groupadd git\nsudo useradd git -g git -m\nsudo passwd git\n</code></pre><p>全局配置，这里的name和email可以随便设置不影响，因为生成key的时候是按照当前的linux登录帐号生成的</p>\n<pre><code>git config --global user.name &quot;haofly&quot;\ngit config --global user.email &quot;haofly@server-pc&quot;\n</code></pre><p>安装gitosis，随便在哪个目录都行</p>\n<pre><code>git clone https://github.com/res0nat0r/gitosis.git\ncd gitosis\nsudo python setup.py install\n</code></pre><h1 id=\"Step2：服务器的配置\"><a href=\"#Step2：服务器的配置\" class=\"headerlink\" title=\"Step2：服务器的配置\"></a>Step2：服务器的配置</h1><p>虽然是服务器的配置，但这里需要在主机windows上面配置一下(当然可以在同一台电脑上配置，但是为了不搞混，建议最好服务器和客户端分开)<br>在客户端，即git管理员的PC上，要先安装上git软件，windows就装上git for<br>windows即可，linux上git即可，在gitbash中，生成密钥：</p>\n<pre><code>ssh-keygen -t rsa\n</code></pre><p>置于密钥保存在哪儿和密码的设置，默认即可。要记住路径，在我的PC上生成的密钥在<strong><em>C:\\Users\\haofly.ssh</em></strong>里面，该文件夹内有三个文件：<br>id_rsa, id_rsa.pub, known_hosts其中id_rsa.pub就是公钥，现在要把公钥上传到git服务器上(注意：如果PC与虚拟机必须<br>要有网络端口转发，那么git的端口是9418)。在gitbash输入(其中的IP地址是PC访问虚拟机里面服务的地址)</p>\n<pre><code>scp C:\\\\Users\\\\haofly.ssh\\\\rsa.pub git@169.254.217.173:/tmp/id_rsa.pub\n</code></pre><p>然后，回到服务器里：</p>\n<pre><code>sudo chmod a+r /tmp/id_rsa.pub\nsudo -H -u git gitosis-init &lt; /tmp/id_rsa.pub\n</code></pre><p>此时会提示(额，我电脑上是中文，忘了是什么了)： Initialized empty Git repository in<br>/home/repo/gitosis-admin.git/ Reinitialized existing Git repository in<br>/home/repo/gitosis-admin.git/ 然后再改变权限</p>\n<pre><code>sudo chown git:git /home/git/repositories\nsudo chmod 755 /home/git/repositories\nsudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update\n</code></pre><h1 id=\"Step3：建立测试仓库\"><a href=\"#Step3：建立测试仓库\" class=\"headerlink\" title=\"Step3：建立测试仓库\"></a>Step3：建立测试仓库</h1><p>在服务器上新建一个裸仓库</p>\n<pre><code>su git\ncd\ncd repositories\ngit init --bare test.git\n</code></pre><p>此时虽然新建了一个仓库，但是是个裸仓库，不能被clone下来，需要让管理员为其分配权限。 在test.git文件夹内有如下重要文件：<br>HEAD文件：存放根节点的信息，Git采用这种树形结构来存储版本信息。 refs目录：存储当前版本控制目录下的各种不同引用，即各个分支树的信息，其下有hea<br>ds/remotes/stash/tags四个子目录，分别存储对不同的根、远程版本库、Git栈和标签的四种引用。<br>logs目录：根据不同的引用存储了日志信息。 test.git/object/pack：这里存放的就是我们上传的东西，但是被打包成了idx和pack结尾的文<br>件。所以如果上传了后发现找不到，其实是在这里面的。</p>\n<h1 id=\"Step4：修改gitosis配置文件\"><a href=\"#Step4：修改gitosis配置文件\" class=\"headerlink\" title=\"Step4：修改gitosis配置文件\"></a>Step4：修改gitosis配置文件</h1><p>现在在管理员的PC上(就是刚刚上传公钥的那台机器上，我这里就是windows主机)，把管理的仓库clone下来，找个地方，然后在gitbash里执行(如果不<br>行，试试全路径/home/git/repositories/gitosis-admin.git)：</p>\n<pre><code>mkdir admin\ncd admin\ngit clone git@169.254.217.173:gitosis-admin.git\ncd gitosis-admin\nvim gitosis.conf\n</code></pre><p>clone下来会有两个东西，一个是keydir文件夹，里面存储了所有需要访问git服务器的用户的ssh公钥，比如我的keydir/haofly@HAOFLY<br>_PC.pub，另一个文件就是gitosis.conf，里面配置了各个仓库的访问权限，例如：</p>\n<pre><code>[gitosis]\n    [group gitosis-admin]\n        writable = gitosis-admin\n        members = haofly@HAOFLY-PC\n    [group team]\n        writable = test\n        members = haofly@ubuntu  haofly@HAOFLY-PC  pitter@PITTER-PC\n</code></pre><p>这个配置文件很直白，有多个组，每个组的writable代表一个仓库，members表示具有读写权限的用户，用户的公钥必须在keydir文件夹内。<br>然后把配置文件push到服务器上去</p>\n<pre><code>git add .\ngit commit -m &quot;add test and someusers&quot;\ngit push origin master\n</code></pre><h1 id=\"Step5：测试\"><a href=\"#Step5：测试\" class=\"headerlink\" title=\"Step5：测试\"></a>Step5：测试</h1><p>空仓库是不能clone的，需要一个具有write权限的人初始化一个版本，在客户端执行：</p>\n<pre><code>mkdir test\ncd test\ngit init\necho &quot;hehe&quot; &gt; hello\ngit add .\ngit commit -m &quot;initial vesion&quot;\ngit remote add origin git@169.254.217.173:test.git\ngit push origin master\n</code></pre><p>如果push成功了，那么可以去服务器上看看，但千万不要妄图去找你库里面的文件，因为你上传的东西，git服务器会把它弄成idx和pack文件，我不大清楚git<br>的原理，反正是这里面的<em><strong>/home/git/repositories/test.git/objects/pack/ </strong></em></p>\n<p>原文中其它配置我还没试过。。。</p>\n"},{"title":"《编程珠玑》中的珠玑","date":"2014-11-03T04:16:45.000Z","_content":"作者：[Jon Bentley](http://en.wikipedia.org/wiki/Jon_Bentley)\n\n本书的作者通过一个一个实际生活中的例子来给引导我们对编程进行思考，虽然在实际工作中我们多半是只使用思考的结果，但本书更重要的是让我们了解到发现问题本源，并真\n正解决问题的一个思考过程。本书主要提出了一些抽象概念，目的不是像《算法导论》那样先提出抽象问题，然后进行实际的讲解与编码，而是一步一步带领我们如何更好地解决\n问题。\n\n其实本书后半部分包括续集，其质量都不高(我是这么认为的)，都是讲一些没多大用的东西。其实我从中学到最多的就是位图的使用以及实际开发过程中需要注意的一些问题。\n没想到，小小的位图对于海量数据的处理还有这么大的功效。当然了，书中所说的所有问题以及思考我都没有去真正编码过，但我觉得自己能写好80\\%的代码（当然了，感觉和\n事实肯定不一样的。）\n\n### 语录\n\n**1.对小问题的仔细分析有时可以得到明显的实际益处。**\n\n**2.明确了问题，那这场战役就成功了90\\%**\n\n**3.设计者确定其设计已经达到了完美的标准不是不能再增加任何东西，而是不能再减少任何东西。——Antoine de Saint-Exupery**\n\n**4.程序员在节省空间方面无计可施时，将自己从代码中解脱出来，退回起点并集中心力研究数据，常常能有奇效，(数据的)表示形式是程序设计的根本。——Fred Brooks**\n\n**5.计算机系统中最廉价、最快速且最可靠的元件是根本不存在的。——Gordon Bell**\n\n**6.当程序性能问题无法回避时，考虑设计层面会有助于程序员集中精力解决问题。如果仅需要较小的加速，就对效果最佳的层面做改进，因为“性价比”最高的那一个投入最小的精力就可以获得最大加速系数的那个设计层面。如果需要较大的加速，就对多个层面做改进。**\n\n**7.任何事都应尽量简单，但不宜过于简单。——爱因斯坦**\n\n**8.代码调优的最重要的原理就是尽量少用它**\n\n**9.解决现有的问题是程序员任务的一部分，另一个也许更重要的部分是做好解决未来问题的准备。本章示例了编程过程中的几个重要步骤：正确理解所遇到的问题；提炼出抽象问题；考虑尽可能多的解。**\n\n**10.如果还没想清楚，就用蛮力算法吧。——Ken Thompson**\n\n**11.代码写得越急，程序跑得越慢。——Roy Carlson**\n\n**12.如果你发现特殊情况太多，那你肯定是用错方法了。——Craig Zerouni**\n\n**13.在我所有的程序错误中，80\\%是语法错误。剩下的20\\%里，80\\%是简单的逻辑错误。在剩下的4\\%里，80\\%是指针错误。只有余下的0.8\\%才是困难的问题。——Marc Donner**\n\n**14.在系统测试阶段找出并修正错误，要比开发者自己完成这一工作多付出2倍的努力。而当系统已经交付使用之后找出并修正一个错误，要比系统测试阶段多付出9倍的努力。因此，请坚持让开发者进行单元测试吧。——Larry Bernstein**\n\n**15.新系统的每一个新用户都可能发现一类新的错误。——Brian Kernighhan**\n\n**16.对于那些快速算法，我们总是可以拿到一些速度差不多但是更容易理解的算法来替代它们。——Dougls W. Jones**\n\n**17.在一个非I/O密集型的程序中，超过一半的运行时间是花在不足4\\%的代码上的。——Don Knuth**\n\n**18.在优化一个程序之前，请先用性能监视工具找到程序的“热点”。——Mike Moron**\n\n**19.【代码规模守恒定律】当你为了加速，把一页代码变成几条简单的指令时，请不要忘了增加注释，以使源码的行数保持为一个常量。——Mike Morton**\n\n**20.纸上的工作没结束，整个工作也就还没结束。**\n\n**21.【90-90法则】前90\\%的代码占用了90\\%的预定开发时间，余下的10\\%代码又花费了90\\%的预定开发时间。——Tom Cargill**\n\n**22.正确的判断来源于经验，然而经验来源于错误的判断。——Fred Brooks**\n\n**23.如果有人基本上做出了你想要做的东西，你就没必要自己写一个新程序。就算你非写不可，也请尽可能多地利用现有的代码。——Richard Hill**\n\n**24.先让程序跑起来，再考虑怎么让程序跑得快。——Bruce Whiteside**\n","source":"_posts/bianchengzhuji.md","raw":"---\ntitle: \"《编程珠玑》中的珠玑\"\ndate: 2014-11-03 12:16:45\ncategories: 韦编三绝\n---\n作者：[Jon Bentley](http://en.wikipedia.org/wiki/Jon_Bentley)\n\n本书的作者通过一个一个实际生活中的例子来给引导我们对编程进行思考，虽然在实际工作中我们多半是只使用思考的结果，但本书更重要的是让我们了解到发现问题本源，并真\n正解决问题的一个思考过程。本书主要提出了一些抽象概念，目的不是像《算法导论》那样先提出抽象问题，然后进行实际的讲解与编码，而是一步一步带领我们如何更好地解决\n问题。\n\n其实本书后半部分包括续集，其质量都不高(我是这么认为的)，都是讲一些没多大用的东西。其实我从中学到最多的就是位图的使用以及实际开发过程中需要注意的一些问题。\n没想到，小小的位图对于海量数据的处理还有这么大的功效。当然了，书中所说的所有问题以及思考我都没有去真正编码过，但我觉得自己能写好80\\%的代码（当然了，感觉和\n事实肯定不一样的。）\n\n### 语录\n\n**1.对小问题的仔细分析有时可以得到明显的实际益处。**\n\n**2.明确了问题，那这场战役就成功了90\\%**\n\n**3.设计者确定其设计已经达到了完美的标准不是不能再增加任何东西，而是不能再减少任何东西。——Antoine de Saint-Exupery**\n\n**4.程序员在节省空间方面无计可施时，将自己从代码中解脱出来，退回起点并集中心力研究数据，常常能有奇效，(数据的)表示形式是程序设计的根本。——Fred Brooks**\n\n**5.计算机系统中最廉价、最快速且最可靠的元件是根本不存在的。——Gordon Bell**\n\n**6.当程序性能问题无法回避时，考虑设计层面会有助于程序员集中精力解决问题。如果仅需要较小的加速，就对效果最佳的层面做改进，因为“性价比”最高的那一个投入最小的精力就可以获得最大加速系数的那个设计层面。如果需要较大的加速，就对多个层面做改进。**\n\n**7.任何事都应尽量简单，但不宜过于简单。——爱因斯坦**\n\n**8.代码调优的最重要的原理就是尽量少用它**\n\n**9.解决现有的问题是程序员任务的一部分，另一个也许更重要的部分是做好解决未来问题的准备。本章示例了编程过程中的几个重要步骤：正确理解所遇到的问题；提炼出抽象问题；考虑尽可能多的解。**\n\n**10.如果还没想清楚，就用蛮力算法吧。——Ken Thompson**\n\n**11.代码写得越急，程序跑得越慢。——Roy Carlson**\n\n**12.如果你发现特殊情况太多，那你肯定是用错方法了。——Craig Zerouni**\n\n**13.在我所有的程序错误中，80\\%是语法错误。剩下的20\\%里，80\\%是简单的逻辑错误。在剩下的4\\%里，80\\%是指针错误。只有余下的0.8\\%才是困难的问题。——Marc Donner**\n\n**14.在系统测试阶段找出并修正错误，要比开发者自己完成这一工作多付出2倍的努力。而当系统已经交付使用之后找出并修正一个错误，要比系统测试阶段多付出9倍的努力。因此，请坚持让开发者进行单元测试吧。——Larry Bernstein**\n\n**15.新系统的每一个新用户都可能发现一类新的错误。——Brian Kernighhan**\n\n**16.对于那些快速算法，我们总是可以拿到一些速度差不多但是更容易理解的算法来替代它们。——Dougls W. Jones**\n\n**17.在一个非I/O密集型的程序中，超过一半的运行时间是花在不足4\\%的代码上的。——Don Knuth**\n\n**18.在优化一个程序之前，请先用性能监视工具找到程序的“热点”。——Mike Moron**\n\n**19.【代码规模守恒定律】当你为了加速，把一页代码变成几条简单的指令时，请不要忘了增加注释，以使源码的行数保持为一个常量。——Mike Morton**\n\n**20.纸上的工作没结束，整个工作也就还没结束。**\n\n**21.【90-90法则】前90\\%的代码占用了90\\%的预定开发时间，余下的10\\%代码又花费了90\\%的预定开发时间。——Tom Cargill**\n\n**22.正确的判断来源于经验，然而经验来源于错误的判断。——Fred Brooks**\n\n**23.如果有人基本上做出了你想要做的东西，你就没必要自己写一个新程序。就算你非写不可，也请尽可能多地利用现有的代码。——Richard Hill**\n\n**24.先让程序跑起来，再考虑怎么让程序跑得快。——Bruce Whiteside**\n","slug":"bianchengzhuji","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p3n000i9vnz83kyhm5t","content":"<p>作者：<a href=\"http://en.wikipedia.org/wiki/Jon_Bentley\" target=\"_blank\" rel=\"external\">Jon Bentley</a></p>\n<p>本书的作者通过一个一个实际生活中的例子来给引导我们对编程进行思考，虽然在实际工作中我们多半是只使用思考的结果，但本书更重要的是让我们了解到发现问题本源，并真<br>正解决问题的一个思考过程。本书主要提出了一些抽象概念，目的不是像《算法导论》那样先提出抽象问题，然后进行实际的讲解与编码，而是一步一步带领我们如何更好地解决<br>问题。</p>\n<p>其实本书后半部分包括续集，其质量都不高(我是这么认为的)，都是讲一些没多大用的东西。其实我从中学到最多的就是位图的使用以及实际开发过程中需要注意的一些问题。<br>没想到，小小的位图对于海量数据的处理还有这么大的功效。当然了，书中所说的所有问题以及思考我都没有去真正编码过，但我觉得自己能写好80\\%的代码（当然了，感觉和<br>事实肯定不一样的。）</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p><strong>1.对小问题的仔细分析有时可以得到明显的实际益处。</strong></p>\n<p><strong>2.明确了问题，那这场战役就成功了90\\%</strong></p>\n<p><strong>3.设计者确定其设计已经达到了完美的标准不是不能再增加任何东西，而是不能再减少任何东西。——Antoine de Saint-Exupery</strong></p>\n<p><strong>4.程序员在节省空间方面无计可施时，将自己从代码中解脱出来，退回起点并集中心力研究数据，常常能有奇效，(数据的)表示形式是程序设计的根本。——Fred Brooks</strong></p>\n<p><strong>5.计算机系统中最廉价、最快速且最可靠的元件是根本不存在的。——Gordon Bell</strong></p>\n<p><strong>6.当程序性能问题无法回避时，考虑设计层面会有助于程序员集中精力解决问题。如果仅需要较小的加速，就对效果最佳的层面做改进，因为“性价比”最高的那一个投入最小的精力就可以获得最大加速系数的那个设计层面。如果需要较大的加速，就对多个层面做改进。</strong></p>\n<p><strong>7.任何事都应尽量简单，但不宜过于简单。——爱因斯坦</strong></p>\n<p><strong>8.代码调优的最重要的原理就是尽量少用它</strong></p>\n<p><strong>9.解决现有的问题是程序员任务的一部分，另一个也许更重要的部分是做好解决未来问题的准备。本章示例了编程过程中的几个重要步骤：正确理解所遇到的问题；提炼出抽象问题；考虑尽可能多的解。</strong></p>\n<p><strong>10.如果还没想清楚，就用蛮力算法吧。——Ken Thompson</strong></p>\n<p><strong>11.代码写得越急，程序跑得越慢。——Roy Carlson</strong></p>\n<p><strong>12.如果你发现特殊情况太多，那你肯定是用错方法了。——Craig Zerouni</strong></p>\n<p><strong>13.在我所有的程序错误中，80\\%是语法错误。剩下的20\\%里，80\\%是简单的逻辑错误。在剩下的4\\%里，80\\%是指针错误。只有余下的0.8\\%才是困难的问题。——Marc Donner</strong></p>\n<p><strong>14.在系统测试阶段找出并修正错误，要比开发者自己完成这一工作多付出2倍的努力。而当系统已经交付使用之后找出并修正一个错误，要比系统测试阶段多付出9倍的努力。因此，请坚持让开发者进行单元测试吧。——Larry Bernstein</strong></p>\n<p><strong>15.新系统的每一个新用户都可能发现一类新的错误。——Brian Kernighhan</strong></p>\n<p><strong>16.对于那些快速算法，我们总是可以拿到一些速度差不多但是更容易理解的算法来替代它们。——Dougls W. Jones</strong></p>\n<p><strong>17.在一个非I/O密集型的程序中，超过一半的运行时间是花在不足4\\%的代码上的。——Don Knuth</strong></p>\n<p><strong>18.在优化一个程序之前，请先用性能监视工具找到程序的“热点”。——Mike Moron</strong></p>\n<p><strong>19.【代码规模守恒定律】当你为了加速，把一页代码变成几条简单的指令时，请不要忘了增加注释，以使源码的行数保持为一个常量。——Mike Morton</strong></p>\n<p><strong>20.纸上的工作没结束，整个工作也就还没结束。</strong></p>\n<p><strong>21.【90-90法则】前90\\%的代码占用了90\\%的预定开发时间，余下的10\\%代码又花费了90\\%的预定开发时间。——Tom Cargill</strong></p>\n<p><strong>22.正确的判断来源于经验，然而经验来源于错误的判断。——Fred Brooks</strong></p>\n<p><strong>23.如果有人基本上做出了你想要做的东西，你就没必要自己写一个新程序。就算你非写不可，也请尽可能多地利用现有的代码。——Richard Hill</strong></p>\n<p><strong>24.先让程序跑起来，再考虑怎么让程序跑得快。——Bruce Whiteside</strong></p>\n","excerpt":"","more":"<p>作者：<a href=\"http://en.wikipedia.org/wiki/Jon_Bentley\">Jon Bentley</a></p>\n<p>本书的作者通过一个一个实际生活中的例子来给引导我们对编程进行思考，虽然在实际工作中我们多半是只使用思考的结果，但本书更重要的是让我们了解到发现问题本源，并真<br>正解决问题的一个思考过程。本书主要提出了一些抽象概念，目的不是像《算法导论》那样先提出抽象问题，然后进行实际的讲解与编码，而是一步一步带领我们如何更好地解决<br>问题。</p>\n<p>其实本书后半部分包括续集，其质量都不高(我是这么认为的)，都是讲一些没多大用的东西。其实我从中学到最多的就是位图的使用以及实际开发过程中需要注意的一些问题。<br>没想到，小小的位图对于海量数据的处理还有这么大的功效。当然了，书中所说的所有问题以及思考我都没有去真正编码过，但我觉得自己能写好80\\%的代码（当然了，感觉和<br>事实肯定不一样的。）</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p><strong>1.对小问题的仔细分析有时可以得到明显的实际益处。</strong></p>\n<p><strong>2.明确了问题，那这场战役就成功了90\\%</strong></p>\n<p><strong>3.设计者确定其设计已经达到了完美的标准不是不能再增加任何东西，而是不能再减少任何东西。——Antoine de Saint-Exupery</strong></p>\n<p><strong>4.程序员在节省空间方面无计可施时，将自己从代码中解脱出来，退回起点并集中心力研究数据，常常能有奇效，(数据的)表示形式是程序设计的根本。——Fred Brooks</strong></p>\n<p><strong>5.计算机系统中最廉价、最快速且最可靠的元件是根本不存在的。——Gordon Bell</strong></p>\n<p><strong>6.当程序性能问题无法回避时，考虑设计层面会有助于程序员集中精力解决问题。如果仅需要较小的加速，就对效果最佳的层面做改进，因为“性价比”最高的那一个投入最小的精力就可以获得最大加速系数的那个设计层面。如果需要较大的加速，就对多个层面做改进。</strong></p>\n<p><strong>7.任何事都应尽量简单，但不宜过于简单。——爱因斯坦</strong></p>\n<p><strong>8.代码调优的最重要的原理就是尽量少用它</strong></p>\n<p><strong>9.解决现有的问题是程序员任务的一部分，另一个也许更重要的部分是做好解决未来问题的准备。本章示例了编程过程中的几个重要步骤：正确理解所遇到的问题；提炼出抽象问题；考虑尽可能多的解。</strong></p>\n<p><strong>10.如果还没想清楚，就用蛮力算法吧。——Ken Thompson</strong></p>\n<p><strong>11.代码写得越急，程序跑得越慢。——Roy Carlson</strong></p>\n<p><strong>12.如果你发现特殊情况太多，那你肯定是用错方法了。——Craig Zerouni</strong></p>\n<p><strong>13.在我所有的程序错误中，80\\%是语法错误。剩下的20\\%里，80\\%是简单的逻辑错误。在剩下的4\\%里，80\\%是指针错误。只有余下的0.8\\%才是困难的问题。——Marc Donner</strong></p>\n<p><strong>14.在系统测试阶段找出并修正错误，要比开发者自己完成这一工作多付出2倍的努力。而当系统已经交付使用之后找出并修正一个错误，要比系统测试阶段多付出9倍的努力。因此，请坚持让开发者进行单元测试吧。——Larry Bernstein</strong></p>\n<p><strong>15.新系统的每一个新用户都可能发现一类新的错误。——Brian Kernighhan</strong></p>\n<p><strong>16.对于那些快速算法，我们总是可以拿到一些速度差不多但是更容易理解的算法来替代它们。——Dougls W. Jones</strong></p>\n<p><strong>17.在一个非I/O密集型的程序中，超过一半的运行时间是花在不足4\\%的代码上的。——Don Knuth</strong></p>\n<p><strong>18.在优化一个程序之前，请先用性能监视工具找到程序的“热点”。——Mike Moron</strong></p>\n<p><strong>19.【代码规模守恒定律】当你为了加速，把一页代码变成几条简单的指令时，请不要忘了增加注释，以使源码的行数保持为一个常量。——Mike Morton</strong></p>\n<p><strong>20.纸上的工作没结束，整个工作也就还没结束。</strong></p>\n<p><strong>21.【90-90法则】前90\\%的代码占用了90\\%的预定开发时间，余下的10\\%代码又花费了90\\%的预定开发时间。——Tom Cargill</strong></p>\n<p><strong>22.正确的判断来源于经验，然而经验来源于错误的判断。——Fred Brooks</strong></p>\n<p><strong>23.如果有人基本上做出了你想要做的东西，你就没必要自己写一个新程序。就算你非写不可，也请尽可能多地利用现有的代码。——Richard Hill</strong></p>\n<p><strong>24.先让程序跑起来，再考虑怎么让程序跑得快。——Bruce Whiteside</strong></p>\n"},{"title":"《把生命浪费在美好的事物上》","date":"2016-04-06T14:06:28.000Z","_content":"我的kindle里面收藏了太多的书，此书就是一本我也不知道什么时候一时兴起将其收藏的，光看书名还以为是一部心灵励志类的小说，没想到竟是包含人生、哲理、财经、政治的集大成者。自然，在看本书前我对作者也是一无所知，到后面越看越觉得作者不是等闲之辈，便去维基了一下：吴晓波，就是那个《激荡三十年》和《跌宕一百年》等著作及纪录片的作者，他的《大败局》被评为‘影响中国商业界二十本书’之一。一路走来，吴晓波亲身经历了中国改革开放的几十年，并深入其中，握其精髓，无论书中哪一篇文章都让我感觉仿佛身临其中，无法自拔。\n\n其实，这部作品从形式上来说是一篇文集，“把生命浪费在美好的事物上”只是这部著作其中一篇的标题，作者从人生谈到家国，谈了几个人，仿佛谈了几千年。他不仅经历过，而且还和很多成功或曾经成功的人士聊了很多事，历史的沉浮中升华出自己的理解。其间的内涵可能也只有自己能体会。我想，一个知识分子，姑且这样称呼自己，想要在浮躁的社会中，必然得有自己的一片精深田地，可以入世，但不能抛弃一个知识分子的道德、心境、理想。\n\n当然，另一方面，有人读书的目的就是当前对自己有没有用。客观地说，书的前面一份主要讲一些鸡汤，中间以及后面的部分才是全书的内涵所在，从叙事中领悟不同的人生。\n\n看完这本书，我也忍不住想去看作者其他几本书，光从书名上就感觉是我目前思想境界还未能企及的，所以暂时，放下，等我继续，沉淀。\n\n最后关于“把生命浪费在美好的事物上”这几个字，我一直很喜欢。中考的时候，阅读理解，大意是“珍惜那些浪费的时光”，两个主题其实如出一辙。生命中总有好多的事，我们很喜欢，但是这些事可能无法给我们带来直接的价值，所以很多人尽量选择回避自己所喜欢的，而不得不接受自己不喜欢的。我一直不希望成为这样的人，因为这样子活着，真的好累。在这个浮躁的社会，每晚拿出kindle，摆上一杯清水，就这样，静静地看，这一刻你会发现，你的灵魂终于跟上了你的身体。\n\n### 语录\n其实，人生如草，活的就是“从容”两字。\n\n这一生中，你遇见怎样的人，然后有机会成为那样的人。\n\n我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了砂砾，但若放手出来，空掌仍能握铁。\n\n你看，我们对这个世界还是这么好\n\n你看，我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了沙砾，但若放手出来，空掌仍能握铁。还是邱兵同学说得好：“我只知道，我心澎湃如昨。”\n\n自由是世俗的，它不在空中，不在别处，它就在地上。作为一个读书人，你能否自由地支配时间，你能否自由地选择和放弃职业，你能否自由地在四月去京都看樱花，你能否自由地与富可敌国的人平等对视，你能否自由地抵制任何利益集团的诱惑，这一切并不仅仅是心态或勇敢的问题，而是一种现实能力。\n\n在这个世界上，不是每个国家、每个时代、每个家庭的年轻人都有权利去追求自己所喜欢的未来。所以，如果你侥幸可以，请千万不要错过。\n\n每一件与众不同的绝世好东西，其实都是以无比寂寞的勤奋为前提的，要么是血，要么是汗，要么是大把大把的曼妙青春好时光。\n\n金钱让人丧失的，无非是他原本就没有真正拥有的；而金钱让人拥有的，却是人并非与生俱有的从容和沉重。金钱会让深刻的人更深刻，让浅薄的人更浅薄。金钱可以改变人的一生，同样，人也可以改变金钱的颜色。 把金钱当对手和敌人的人，将一生为金钱而烦恼；而把金钱当朋友的人，将获得金钱给予的欢乐和平和。成为金钱的奴隶，或将金钱视为奴隶的人，都无法与金钱平视对坐。\n\n花开在眼前/已经开了很多很多遍/每次我总是泪流满面/像一个不解风情的少年\n\n一箪食，一瓢饮，在陋巷，人不堪其忧，回也不改其乐。贤哉，回也！\n\n\n\n\n\n\n","source":"_posts/bashengminglangfeizaimeihaodeshiwushang.md","raw":"---\ntitle: \"《把生命浪费在美好的事物上》\"\ndate: 2016-04-06 22:06:28\ncategories: 韦编三绝\n---\n我的kindle里面收藏了太多的书，此书就是一本我也不知道什么时候一时兴起将其收藏的，光看书名还以为是一部心灵励志类的小说，没想到竟是包含人生、哲理、财经、政治的集大成者。自然，在看本书前我对作者也是一无所知，到后面越看越觉得作者不是等闲之辈，便去维基了一下：吴晓波，就是那个《激荡三十年》和《跌宕一百年》等著作及纪录片的作者，他的《大败局》被评为‘影响中国商业界二十本书’之一。一路走来，吴晓波亲身经历了中国改革开放的几十年，并深入其中，握其精髓，无论书中哪一篇文章都让我感觉仿佛身临其中，无法自拔。\n\n其实，这部作品从形式上来说是一篇文集，“把生命浪费在美好的事物上”只是这部著作其中一篇的标题，作者从人生谈到家国，谈了几个人，仿佛谈了几千年。他不仅经历过，而且还和很多成功或曾经成功的人士聊了很多事，历史的沉浮中升华出自己的理解。其间的内涵可能也只有自己能体会。我想，一个知识分子，姑且这样称呼自己，想要在浮躁的社会中，必然得有自己的一片精深田地，可以入世，但不能抛弃一个知识分子的道德、心境、理想。\n\n当然，另一方面，有人读书的目的就是当前对自己有没有用。客观地说，书的前面一份主要讲一些鸡汤，中间以及后面的部分才是全书的内涵所在，从叙事中领悟不同的人生。\n\n看完这本书，我也忍不住想去看作者其他几本书，光从书名上就感觉是我目前思想境界还未能企及的，所以暂时，放下，等我继续，沉淀。\n\n最后关于“把生命浪费在美好的事物上”这几个字，我一直很喜欢。中考的时候，阅读理解，大意是“珍惜那些浪费的时光”，两个主题其实如出一辙。生命中总有好多的事，我们很喜欢，但是这些事可能无法给我们带来直接的价值，所以很多人尽量选择回避自己所喜欢的，而不得不接受自己不喜欢的。我一直不希望成为这样的人，因为这样子活着，真的好累。在这个浮躁的社会，每晚拿出kindle，摆上一杯清水，就这样，静静地看，这一刻你会发现，你的灵魂终于跟上了你的身体。\n\n### 语录\n其实，人生如草，活的就是“从容”两字。\n\n这一生中，你遇见怎样的人，然后有机会成为那样的人。\n\n我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了砂砾，但若放手出来，空掌仍能握铁。\n\n你看，我们对这个世界还是这么好\n\n你看，我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了沙砾，但若放手出来，空掌仍能握铁。还是邱兵同学说得好：“我只知道，我心澎湃如昨。”\n\n自由是世俗的，它不在空中，不在别处，它就在地上。作为一个读书人，你能否自由地支配时间，你能否自由地选择和放弃职业，你能否自由地在四月去京都看樱花，你能否自由地与富可敌国的人平等对视，你能否自由地抵制任何利益集团的诱惑，这一切并不仅仅是心态或勇敢的问题，而是一种现实能力。\n\n在这个世界上，不是每个国家、每个时代、每个家庭的年轻人都有权利去追求自己所喜欢的未来。所以，如果你侥幸可以，请千万不要错过。\n\n每一件与众不同的绝世好东西，其实都是以无比寂寞的勤奋为前提的，要么是血，要么是汗，要么是大把大把的曼妙青春好时光。\n\n金钱让人丧失的，无非是他原本就没有真正拥有的；而金钱让人拥有的，却是人并非与生俱有的从容和沉重。金钱会让深刻的人更深刻，让浅薄的人更浅薄。金钱可以改变人的一生，同样，人也可以改变金钱的颜色。 把金钱当对手和敌人的人，将一生为金钱而烦恼；而把金钱当朋友的人，将获得金钱给予的欢乐和平和。成为金钱的奴隶，或将金钱视为奴隶的人，都无法与金钱平视对坐。\n\n花开在眼前/已经开了很多很多遍/每次我总是泪流满面/像一个不解风情的少年\n\n一箪食，一瓢饮，在陋巷，人不堪其忧，回也不改其乐。贤哉，回也！\n\n\n\n\n\n\n","slug":"bashengminglangfeizaimeihaodeshiwushang","published":1,"updated":"2016-04-06T14:22:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p3r000k9vnz6q0sh0x7","content":"<p>我的kindle里面收藏了太多的书，此书就是一本我也不知道什么时候一时兴起将其收藏的，光看书名还以为是一部心灵励志类的小说，没想到竟是包含人生、哲理、财经、政治的集大成者。自然，在看本书前我对作者也是一无所知，到后面越看越觉得作者不是等闲之辈，便去维基了一下：吴晓波，就是那个《激荡三十年》和《跌宕一百年》等著作及纪录片的作者，他的《大败局》被评为‘影响中国商业界二十本书’之一。一路走来，吴晓波亲身经历了中国改革开放的几十年，并深入其中，握其精髓，无论书中哪一篇文章都让我感觉仿佛身临其中，无法自拔。</p>\n<p>其实，这部作品从形式上来说是一篇文集，“把生命浪费在美好的事物上”只是这部著作其中一篇的标题，作者从人生谈到家国，谈了几个人，仿佛谈了几千年。他不仅经历过，而且还和很多成功或曾经成功的人士聊了很多事，历史的沉浮中升华出自己的理解。其间的内涵可能也只有自己能体会。我想，一个知识分子，姑且这样称呼自己，想要在浮躁的社会中，必然得有自己的一片精深田地，可以入世，但不能抛弃一个知识分子的道德、心境、理想。</p>\n<p>当然，另一方面，有人读书的目的就是当前对自己有没有用。客观地说，书的前面一份主要讲一些鸡汤，中间以及后面的部分才是全书的内涵所在，从叙事中领悟不同的人生。</p>\n<p>看完这本书，我也忍不住想去看作者其他几本书，光从书名上就感觉是我目前思想境界还未能企及的，所以暂时，放下，等我继续，沉淀。</p>\n<p>最后关于“把生命浪费在美好的事物上”这几个字，我一直很喜欢。中考的时候，阅读理解，大意是“珍惜那些浪费的时光”，两个主题其实如出一辙。生命中总有好多的事，我们很喜欢，但是这些事可能无法给我们带来直接的价值，所以很多人尽量选择回避自己所喜欢的，而不得不接受自己不喜欢的。我一直不希望成为这样的人，因为这样子活着，真的好累。在这个浮躁的社会，每晚拿出kindle，摆上一杯清水，就这样，静静地看，这一刻你会发现，你的灵魂终于跟上了你的身体。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p>其实，人生如草，活的就是“从容”两字。</p>\n<p>这一生中，你遇见怎样的人，然后有机会成为那样的人。</p>\n<p>我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了砂砾，但若放手出来，空掌仍能握铁。</p>\n<p>你看，我们对这个世界还是这么好</p>\n<p>你看，我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了沙砾，但若放手出来，空掌仍能握铁。还是邱兵同学说得好：“我只知道，我心澎湃如昨。”</p>\n<p>自由是世俗的，它不在空中，不在别处，它就在地上。作为一个读书人，你能否自由地支配时间，你能否自由地选择和放弃职业，你能否自由地在四月去京都看樱花，你能否自由地与富可敌国的人平等对视，你能否自由地抵制任何利益集团的诱惑，这一切并不仅仅是心态或勇敢的问题，而是一种现实能力。</p>\n<p>在这个世界上，不是每个国家、每个时代、每个家庭的年轻人都有权利去追求自己所喜欢的未来。所以，如果你侥幸可以，请千万不要错过。</p>\n<p>每一件与众不同的绝世好东西，其实都是以无比寂寞的勤奋为前提的，要么是血，要么是汗，要么是大把大把的曼妙青春好时光。</p>\n<p>金钱让人丧失的，无非是他原本就没有真正拥有的；而金钱让人拥有的，却是人并非与生俱有的从容和沉重。金钱会让深刻的人更深刻，让浅薄的人更浅薄。金钱可以改变人的一生，同样，人也可以改变金钱的颜色。 把金钱当对手和敌人的人，将一生为金钱而烦恼；而把金钱当朋友的人，将获得金钱给予的欢乐和平和。成为金钱的奴隶，或将金钱视为奴隶的人，都无法与金钱平视对坐。</p>\n<p>花开在眼前/已经开了很多很多遍/每次我总是泪流满面/像一个不解风情的少年</p>\n<p>一箪食，一瓢饮，在陋巷，人不堪其忧，回也不改其乐。贤哉，回也！</p>\n","excerpt":"","more":"<p>我的kindle里面收藏了太多的书，此书就是一本我也不知道什么时候一时兴起将其收藏的，光看书名还以为是一部心灵励志类的小说，没想到竟是包含人生、哲理、财经、政治的集大成者。自然，在看本书前我对作者也是一无所知，到后面越看越觉得作者不是等闲之辈，便去维基了一下：吴晓波，就是那个《激荡三十年》和《跌宕一百年》等著作及纪录片的作者，他的《大败局》被评为‘影响中国商业界二十本书’之一。一路走来，吴晓波亲身经历了中国改革开放的几十年，并深入其中，握其精髓，无论书中哪一篇文章都让我感觉仿佛身临其中，无法自拔。</p>\n<p>其实，这部作品从形式上来说是一篇文集，“把生命浪费在美好的事物上”只是这部著作其中一篇的标题，作者从人生谈到家国，谈了几个人，仿佛谈了几千年。他不仅经历过，而且还和很多成功或曾经成功的人士聊了很多事，历史的沉浮中升华出自己的理解。其间的内涵可能也只有自己能体会。我想，一个知识分子，姑且这样称呼自己，想要在浮躁的社会中，必然得有自己的一片精深田地，可以入世，但不能抛弃一个知识分子的道德、心境、理想。</p>\n<p>当然，另一方面，有人读书的目的就是当前对自己有没有用。客观地说，书的前面一份主要讲一些鸡汤，中间以及后面的部分才是全书的内涵所在，从叙事中领悟不同的人生。</p>\n<p>看完这本书，我也忍不住想去看作者其他几本书，光从书名上就感觉是我目前思想境界还未能企及的，所以暂时，放下，等我继续，沉淀。</p>\n<p>最后关于“把生命浪费在美好的事物上”这几个字，我一直很喜欢。中考的时候，阅读理解，大意是“珍惜那些浪费的时光”，两个主题其实如出一辙。生命中总有好多的事，我们很喜欢，但是这些事可能无法给我们带来直接的价值，所以很多人尽量选择回避自己所喜欢的，而不得不接受自己不喜欢的。我一直不希望成为这样的人，因为这样子活着，真的好累。在这个浮躁的社会，每晚拿出kindle，摆上一杯清水，就这样，静静地看，这一刻你会发现，你的灵魂终于跟上了你的身体。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p>其实，人生如草，活的就是“从容”两字。</p>\n<p>这一生中，你遇见怎样的人，然后有机会成为那样的人。</p>\n<p>我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了砂砾，但若放手出来，空掌仍能握铁。</p>\n<p>你看，我们对这个世界还是这么好</p>\n<p>你看，我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了沙砾，但若放手出来，空掌仍能握铁。还是邱兵同学说得好：“我只知道，我心澎湃如昨。”</p>\n<p>自由是世俗的，它不在空中，不在别处，它就在地上。作为一个读书人，你能否自由地支配时间，你能否自由地选择和放弃职业，你能否自由地在四月去京都看樱花，你能否自由地与富可敌国的人平等对视，你能否自由地抵制任何利益集团的诱惑，这一切并不仅仅是心态或勇敢的问题，而是一种现实能力。</p>\n<p>在这个世界上，不是每个国家、每个时代、每个家庭的年轻人都有权利去追求自己所喜欢的未来。所以，如果你侥幸可以，请千万不要错过。</p>\n<p>每一件与众不同的绝世好东西，其实都是以无比寂寞的勤奋为前提的，要么是血，要么是汗，要么是大把大把的曼妙青春好时光。</p>\n<p>金钱让人丧失的，无非是他原本就没有真正拥有的；而金钱让人拥有的，却是人并非与生俱有的从容和沉重。金钱会让深刻的人更深刻，让浅薄的人更浅薄。金钱可以改变人的一生，同样，人也可以改变金钱的颜色。 把金钱当对手和敌人的人，将一生为金钱而烦恼；而把金钱当朋友的人，将获得金钱给予的欢乐和平和。成为金钱的奴隶，或将金钱视为奴隶的人，都无法与金钱平视对坐。</p>\n<p>花开在眼前/已经开了很多很多遍/每次我总是泪流满面/像一个不解风情的少年</p>\n<p>一箪食，一瓢饮，在陋巷，人不堪其忧，回也不改其乐。贤哉，回也！</p>\n"},{"title":"暴力破解Linux密码程序","date":"2014-02-07T06:08:22.000Z","_content":"封面图片俩字Pixabay  \n\n上面一篇文章[C语言生成linux加密密文](http://haofly.net/crypt/ \"Link:\nhttp://haofly.net/crypt/\" )介绍了linux的密码是如何生成的，这里就写一个程序来实现如何暴力破解它。当然，这个程序的前提是你能够\n拿到对方的root权限并查看到/etc/shadow里面的内容，linux当然不会让你那么轻易地拿到的。所以这里只是出于兴趣破解一下本机上的密码而已。代码如\n下：\n\n> #define _GNU_SOURCE  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <unistd.h>  \n#include <string.h>\n\n> char letter[37] = “abcdefghijklmnopqrstuvwxyz0123456789″; //\n存放所有可能的字符，不包含特殊字符以及大小写  \nchar result[10]; // 存放最终结果，假设不超过十个字符  \nint minlen = 1; // 密码的最小长度  \nint maxlen = 10; // 密码的最大长度  \n// 这是通过/etc/shadow所获取的加密后的文本  \nchar *encrypted = “$6$jMzjGK//$0QVw8FM87jd3yF0wvzgXPPe1l3FOfrIA7LhGPIVCbum9es5\n/tQsGMJqmaQ78IY.Hv4h6UWnvTs4cLntrPMSfM/”;  \nchar *salt = “$6$jMzjGK//$”; // 由上面的文本所得到的值，crypt函数的第二个参数  \n// 递归尝试  \nvoid try_next(int index, int length)  \n\\{  \nint i;  \nif(index == length)  \nreturn ; // 递归结束条件  \nfor(i = 0; i< 36; i++) // 把当前位置的所有情况试完  \n\\{  \nresult[index] = letter[i]; // 给当前位置赋值  \nmemset(result + index +1, letter[0], length – index -1); //\nindex之后，length之前的字符都用character[0]即a来代替  \nif(i != 0) // i=0的情况已经判断过了  \n\\{  \nprintf(“尝试：\\%s\\\\n”, result);  \nif(! strcmp(encrypted, crypt(result, salt)))  \n\\{  \nprintf(“发现密码：\\%s\\\\n”, result);  \nexit (0);  \n\\}  \n\\}  \ntry_next(index + 1, length); // 递归替换下一个位置的字符，直到找到密码或者index==length为止  \n\\}  \n\\}\n\n>\n\n> void try(int length, int begin, int end)  \n\\{  \nint i;  \nfor(i = begin; i<= end; i++)  \n\\{  \nresult[0] = letter[i]; // 这一步只确定第一个字符  \nmemset(result + 1, letter[0], length-1); //\n第一个字符后面length前面的字符就用character[0]即a来代替  \nprintf(“尝试：\\%s\\\\n”, result);  \nif(!strcmp(encrypted, crypt(result, salt))) // 如果这时候就能够匹配那么直接推出  \n\\{  \nprintf(“发现密码：\\%s\\\\n”, result);  \nexit (0);  \n\\}  \ntry_next(1, length); // 递归尝试第一个字符之后的字符  \n\\}  \n\\}\n\n>\n\n> int main()  \n\\{  \nint len;  \nfor(len = minlen; len <= maxlen; len++)\\{  \nprintf(“\\\\n正在尝试长度为\\%d的密码\\\\n”, len);  \nmemset(result, 0, 10); // 初始化result数组为全0,这里并不是指字符0  \ntry(len, 0, 36);  \n\\}  \nreturn 0;  \n\\}\n\n第一次尝试暴力破解，虽然没有用多线程，但还是能明显感觉到其效率之低。以后得学学其他的方法\n","source":"_posts/brute-force-linux-password.md","raw":"---\ntitle: \"暴力破解linux密码程序\"\ndate: 2014-02-07 14:08:22\ncategories: 编程之路\n---\n封面图片俩字Pixabay  \n\n上面一篇文章[C语言生成linux加密密文](http://haofly.net/crypt/ \"Link:\nhttp://haofly.net/crypt/\" )介绍了linux的密码是如何生成的，这里就写一个程序来实现如何暴力破解它。当然，这个程序的前提是你能够\n拿到对方的root权限并查看到/etc/shadow里面的内容，linux当然不会让你那么轻易地拿到的。所以这里只是出于兴趣破解一下本机上的密码而已。代码如\n下：\n\n> #define _GNU_SOURCE  \n#include <stdio.h>  \n#include <stdlib.h>  \n#include <unistd.h>  \n#include <string.h>\n\n> char letter[37] = “abcdefghijklmnopqrstuvwxyz0123456789″; //\n存放所有可能的字符，不包含特殊字符以及大小写  \nchar result[10]; // 存放最终结果，假设不超过十个字符  \nint minlen = 1; // 密码的最小长度  \nint maxlen = 10; // 密码的最大长度  \n// 这是通过/etc/shadow所获取的加密后的文本  \nchar *encrypted = “$6$jMzjGK//$0QVw8FM87jd3yF0wvzgXPPe1l3FOfrIA7LhGPIVCbum9es5\n/tQsGMJqmaQ78IY.Hv4h6UWnvTs4cLntrPMSfM/”;  \nchar *salt = “$6$jMzjGK//$”; // 由上面的文本所得到的值，crypt函数的第二个参数  \n// 递归尝试  \nvoid try_next(int index, int length)  \n\\{  \nint i;  \nif(index == length)  \nreturn ; // 递归结束条件  \nfor(i = 0; i< 36; i++) // 把当前位置的所有情况试完  \n\\{  \nresult[index] = letter[i]; // 给当前位置赋值  \nmemset(result + index +1, letter[0], length – index -1); //\nindex之后，length之前的字符都用character[0]即a来代替  \nif(i != 0) // i=0的情况已经判断过了  \n\\{  \nprintf(“尝试：\\%s\\\\n”, result);  \nif(! strcmp(encrypted, crypt(result, salt)))  \n\\{  \nprintf(“发现密码：\\%s\\\\n”, result);  \nexit (0);  \n\\}  \n\\}  \ntry_next(index + 1, length); // 递归替换下一个位置的字符，直到找到密码或者index==length为止  \n\\}  \n\\}\n\n>\n\n> void try(int length, int begin, int end)  \n\\{  \nint i;  \nfor(i = begin; i<= end; i++)  \n\\{  \nresult[0] = letter[i]; // 这一步只确定第一个字符  \nmemset(result + 1, letter[0], length-1); //\n第一个字符后面length前面的字符就用character[0]即a来代替  \nprintf(“尝试：\\%s\\\\n”, result);  \nif(!strcmp(encrypted, crypt(result, salt))) // 如果这时候就能够匹配那么直接推出  \n\\{  \nprintf(“发现密码：\\%s\\\\n”, result);  \nexit (0);  \n\\}  \ntry_next(1, length); // 递归尝试第一个字符之后的字符  \n\\}  \n\\}\n\n>\n\n> int main()  \n\\{  \nint len;  \nfor(len = minlen; len <= maxlen; len++)\\{  \nprintf(“\\\\n正在尝试长度为\\%d的密码\\\\n”, len);  \nmemset(result, 0, 10); // 初始化result数组为全0,这里并不是指字符0  \ntry(len, 0, 36);  \n\\}  \nreturn 0;  \n\\}\n\n第一次尝试暴力破解，虽然没有用多线程，但还是能明显感觉到其效率之低。以后得学学其他的方法\n","slug":"brute-force-linux-password","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p40000n9vnznkagoi1h","content":"<p>封面图片俩字Pixabay  </p>\n<p>上面一篇文章<a href=\"http://haofly.net/crypt/\" title=\"Link:\nhttp://haofly.net/crypt/\">C语言生成linux加密密文</a>介绍了linux的密码是如何生成的，这里就写一个程序来实现如何暴力破解它。当然，这个程序的前提是你能够<br>拿到对方的root权限并查看到/etc/shadow里面的内容，linux当然不会让你那么轻易地拿到的。所以这里只是出于兴趣破解一下本机上的密码而已。代码如<br>下：</p>\n<blockquote>\n<p>#define _GNU_SOURCE  </p>\n<p>#include <stdio.h>  </stdio.h></p>\n<p>#include <stdlib.h>  </stdlib.h></p>\n<p>#include <unistd.h>  </unistd.h></p>\n<p>#include <string.h></string.h></p>\n<p>char letter[37] = “abcdefghijklmnopqrstuvwxyz0123456789″; //<br>存放所有可能的字符，不包含特殊字符以及大小写<br>char result[10]; // 存放最终结果，假设不超过十个字符<br>int minlen = 1; // 密码的最小长度<br>int maxlen = 10; // 密码的最大长度<br>// 这是通过/etc/shadow所获取的加密后的文本<br>char <em>encrypted = “$6$jMzjGK//$0QVw8FM87jd3yF0wvzgXPPe1l3FOfrIA7LhGPIVCbum9es5<br>/tQsGMJqmaQ78IY.Hv4h6UWnvTs4cLntrPMSfM/”;<br>char </em>salt = “$6$jMzjGK//$”; // 由上面的文本所得到的值，crypt函数的第二个参数<br>// 递归尝试<br>void try_next(int index, int length)<br>{<br>int i;<br>if(index == length)<br>return ; // 递归结束条件<br>for(i = 0; i&lt; 36; i++) // 把当前位置的所有情况试完<br>{<br>result[index] = letter[i]; // 给当前位置赋值<br>memset(result + index +1, letter[0], length – index -1); //<br>index之后，length之前的字符都用character[0]即a来代替<br>if(i != 0) // i=0的情况已经判断过了<br>{<br>printf(“尝试：\\%s\\n”, result);<br>if(! strcmp(encrypted, crypt(result, salt)))<br>{<br>printf(“发现密码：\\%s\\n”, result);<br>exit (0);<br>}<br>}<br>try_next(index + 1, length); // 递归替换下一个位置的字符，直到找到密码或者index==length为止<br>}<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>void try(int length, int begin, int end)<br>{<br>int i;<br>for(i = begin; i&lt;= end; i++)<br>{<br>result[0] = letter[i]; // 这一步只确定第一个字符<br>memset(result + 1, letter[0], length-1); //<br>第一个字符后面length前面的字符就用character[0]即a来代替<br>printf(“尝试：\\%s\\n”, result);<br>if(!strcmp(encrypted, crypt(result, salt))) // 如果这时候就能够匹配那么直接推出<br>{<br>printf(“发现密码：\\%s\\n”, result);<br>exit (0);<br>}<br>try_next(1, length); // 递归尝试第一个字符之后的字符<br>}<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>int main()<br>{<br>int len;<br>for(len = minlen; len &lt;= maxlen; len++){<br>printf(“\\n正在尝试长度为\\%d的密码\\n”, len);<br>memset(result, 0, 10); // 初始化result数组为全0,这里并不是指字符0<br>try(len, 0, 36);<br>}<br>return 0;<br>}</p>\n</blockquote>\n<p>第一次尝试暴力破解，虽然没有用多线程，但还是能明显感觉到其效率之低。以后得学学其他的方法</p>\n","excerpt":"","more":"<p>封面图片俩字Pixabay  </p>\n<p>上面一篇文章<a href=\"http://haofly.net/crypt/\" title=\"Link:\nhttp://haofly.net/crypt/\">C语言生成linux加密密文</a>介绍了linux的密码是如何生成的，这里就写一个程序来实现如何暴力破解它。当然，这个程序的前提是你能够<br>拿到对方的root权限并查看到/etc/shadow里面的内容，linux当然不会让你那么轻易地拿到的。所以这里只是出于兴趣破解一下本机上的密码而已。代码如<br>下：</p>\n<blockquote>\n<p>#define _GNU_SOURCE  </p>\n<p>#include <stdio.h>  </p>\n<p>#include <stdlib.h>  </p>\n<p>#include <unistd.h>  </p>\n<p>#include <string.h></p>\n<p>char letter[37] = “abcdefghijklmnopqrstuvwxyz0123456789″; //<br>存放所有可能的字符，不包含特殊字符以及大小写<br>char result[10]; // 存放最终结果，假设不超过十个字符<br>int minlen = 1; // 密码的最小长度<br>int maxlen = 10; // 密码的最大长度<br>// 这是通过/etc/shadow所获取的加密后的文本<br>char <em>encrypted = “$6$jMzjGK//$0QVw8FM87jd3yF0wvzgXPPe1l3FOfrIA7LhGPIVCbum9es5<br>/tQsGMJqmaQ78IY.Hv4h6UWnvTs4cLntrPMSfM/”;<br>char </em>salt = “$6$jMzjGK//$”; // 由上面的文本所得到的值，crypt函数的第二个参数<br>// 递归尝试<br>void try_next(int index, int length)<br>{<br>int i;<br>if(index == length)<br>return ; // 递归结束条件<br>for(i = 0; i&lt; 36; i++) // 把当前位置的所有情况试完<br>{<br>result[index] = letter[i]; // 给当前位置赋值<br>memset(result + index +1, letter[0], length – index -1); //<br>index之后，length之前的字符都用character[0]即a来代替<br>if(i != 0) // i=0的情况已经判断过了<br>{<br>printf(“尝试：\\%s\\n”, result);<br>if(! strcmp(encrypted, crypt(result, salt)))<br>{<br>printf(“发现密码：\\%s\\n”, result);<br>exit (0);<br>}<br>}<br>try_next(index + 1, length); // 递归替换下一个位置的字符，直到找到密码或者index==length为止<br>}<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>void try(int length, int begin, int end)<br>{<br>int i;<br>for(i = begin; i&lt;= end; i++)<br>{<br>result[0] = letter[i]; // 这一步只确定第一个字符<br>memset(result + 1, letter[0], length-1); //<br>第一个字符后面length前面的字符就用character[0]即a来代替<br>printf(“尝试：\\%s\\n”, result);<br>if(!strcmp(encrypted, crypt(result, salt))) // 如果这时候就能够匹配那么直接推出<br>{<br>printf(“发现密码：\\%s\\n”, result);<br>exit (0);<br>}<br>try_next(1, length); // 递归尝试第一个字符之后的字符<br>}<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>int main()<br>{<br>int len;<br>for(len = minlen; len &lt;= maxlen; len++){<br>printf(“\\n正在尝试长度为\\%d的密码\\n”, len);<br>memset(result, 0, 10); // 初始化result数组为全0,这里并不是指字符0<br>try(len, 0, 36);<br>}<br>return 0;<br>}</p>\n</blockquote>\n<p>第一次尝试暴力破解，虽然没有用多线程，但还是能明显感觉到其效率之低。以后得学学其他的方法</p>\n"},{"title":"《看见》读后感","date":"2014-05-14T11:03:47.000Z","_content":"[《看见》——柴静](http://www.amazon.cn/\\%E7\\%9C\\%8B\\%E8\\%A7\\%81-\\%E6\\%9F\\%B4\\%E9\\%9D\\%99/dp/B00AH\n6OXP0/ref=sr_1_1?ie=UTF8&qid=1400049076&sr=8-1&keywords=\\%E7\\%9C\\%8B\\%E8\\%A7\\%81)\n\n说实话，这本书居然是我初恋送给我的。不过早已经分手了，她现在在和一个警官学院的男生谈恋爱，挺好的。  \n柴静的这本书不仅仅记述了自己的成长历程，还表达了一个新闻工作者应该有的操守，更谱写了对生命的赞歌。我觉得每一个新闻工作者都应该看一看这本书，当然，普通人也可\n以看看，体会下社会不同层面的人的生活，以此来审视自己。  \n我是一个经常刷微博的人，特别是微博打击大V之前，那时候的新浪微博，有很多很多批评社会、揭露社会阴暗面的言论，当然，其中不乏谣言，不过很多事情，网民都宁愿相信\n，为什么呢？这很清楚，国内最权威的新闻应该是CCAV了，可是他们几十年如一日地对ZF歌功颂德，同时还不忘夸张地形容下外国人是生活在怎样的水深火热的情况。相比\n新闻联播，我更愿意看我们重庆的“天天630”，虽然重庆人也经常骂他“大事不敢播，小事起倮倮”，但是至少他更加真实，更加接地气。而CCAV却只会敷衍谄媚，即使\n偶尔报道下基层的文章，也是漏洞多多，完全不能让人联想到摆拍的嫌疑。现在很多新闻工作者对某些事情不敢采访，采访了也不敢播，当然，这或许并不是他们的错，毕竟体制\n在这儿，一时半会儿也改不了。但是希望你们能尽量的摸着自己的良心来工作。  \n\n《看见》一书，主要是写了柴静的职业生涯的几件自己映像比较深刻的事，让我体会到了很多人的平凡与伟大。说的更实际点，就是伟大总是蕴涵于平凡之中。如果一个人一辈子\n都能甘于平凡而绝不平庸，那这个人绝对是一个成功、伟大之人。每个人的生活都不可能完全平顺，每个人都会在生命的特定时候遇到难以避免的挫折，“加入生活欺骗了你”，\n不要悲伤，不要愤慨，漫漫人生路，没有过不去的坎，伤心的时候不妨去外面走走，没有抽不完的烟，悲伤总会过去。  \n“宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯。”这是我特别喜欢的一句话，我深有体会。很多\n人说我没脾气，呵呵，真的是没脾气吗，我的宽容不是天性也不是道德，而是我对事物的认识，我只是觉得在很多事情上发脾气没有用。当然我也还是一个“愤青”，对事物认识\n不全面，缺乏对客观事物的正确把握。  \n最后，每个人都有追求幸福的权利，希望作者能够成就自己，我也能够找到自己的幸福。\n\n### 语录\n\n**_如果那么容易的话，还要这么漫长的人生干什么呢 _**  \n**_我就生活在这里，没有完美新世界，没有需要等待的未来，没有要向外界索求的理解，也不需要跟谁比较才能判断自己，要做的就是此时，就在此地，就是此身 _**  \n**_失败不是悲剧，放弃才是 _**  \n**_宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯 _**  \n**_有的笑容背后是咬紧牙关的灵魂 _**  \n**_保持对不同论述的警惕，才能保持自己的独立性。探寻就是要不断相信、不断怀疑、不断幻灭、不断摧毁、不断重建，为的只是避免成为偏见的附庸。或者说，煽动各种偏见的互殴，从而取得平衡，这是我所理解的“探寻” _**  \n**_天空一无所有，为何给我安慰——海子 _**  \n**_人是一样的，对幸福的愿望一样，对自身完整的需要一样，只是她生在这儿，这么活着，我来到那儿，那么活着，都是偶然。万物流变，千百万年，谁都是一小粒，嵌在世界的秩序当中，采访是什么？采访是生命间的往来，认识自己越深，认识他人越深，反之亦然 _**  \n**_生和死，苦难和苍老，都蕴涵在每一个人的体内，总有一天我们会与之相逢。我们终将浑然难分，像水溶于水中。_**\n\n\n(封面图片来自Pixabay)\n","source":"_posts/chaijing-look.md","raw":"---\ntitle: \"《看见》读后感\"\ndate: 2014-05-14 19:03:47\ncategories: 韦编三绝\n---\n[《看见》——柴静](http://www.amazon.cn/\\%E7\\%9C\\%8B\\%E8\\%A7\\%81-\\%E6\\%9F\\%B4\\%E9\\%9D\\%99/dp/B00AH\n6OXP0/ref=sr_1_1?ie=UTF8&qid=1400049076&sr=8-1&keywords=\\%E7\\%9C\\%8B\\%E8\\%A7\\%81)\n\n说实话，这本书居然是我初恋送给我的。不过早已经分手了，她现在在和一个警官学院的男生谈恋爱，挺好的。  \n柴静的这本书不仅仅记述了自己的成长历程，还表达了一个新闻工作者应该有的操守，更谱写了对生命的赞歌。我觉得每一个新闻工作者都应该看一看这本书，当然，普通人也可\n以看看，体会下社会不同层面的人的生活，以此来审视自己。  \n我是一个经常刷微博的人，特别是微博打击大V之前，那时候的新浪微博，有很多很多批评社会、揭露社会阴暗面的言论，当然，其中不乏谣言，不过很多事情，网民都宁愿相信\n，为什么呢？这很清楚，国内最权威的新闻应该是CCAV了，可是他们几十年如一日地对ZF歌功颂德，同时还不忘夸张地形容下外国人是生活在怎样的水深火热的情况。相比\n新闻联播，我更愿意看我们重庆的“天天630”，虽然重庆人也经常骂他“大事不敢播，小事起倮倮”，但是至少他更加真实，更加接地气。而CCAV却只会敷衍谄媚，即使\n偶尔报道下基层的文章，也是漏洞多多，完全不能让人联想到摆拍的嫌疑。现在很多新闻工作者对某些事情不敢采访，采访了也不敢播，当然，这或许并不是他们的错，毕竟体制\n在这儿，一时半会儿也改不了。但是希望你们能尽量的摸着自己的良心来工作。  \n\n《看见》一书，主要是写了柴静的职业生涯的几件自己映像比较深刻的事，让我体会到了很多人的平凡与伟大。说的更实际点，就是伟大总是蕴涵于平凡之中。如果一个人一辈子\n都能甘于平凡而绝不平庸，那这个人绝对是一个成功、伟大之人。每个人的生活都不可能完全平顺，每个人都会在生命的特定时候遇到难以避免的挫折，“加入生活欺骗了你”，\n不要悲伤，不要愤慨，漫漫人生路，没有过不去的坎，伤心的时候不妨去外面走走，没有抽不完的烟，悲伤总会过去。  \n“宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯。”这是我特别喜欢的一句话，我深有体会。很多\n人说我没脾气，呵呵，真的是没脾气吗，我的宽容不是天性也不是道德，而是我对事物的认识，我只是觉得在很多事情上发脾气没有用。当然我也还是一个“愤青”，对事物认识\n不全面，缺乏对客观事物的正确把握。  \n最后，每个人都有追求幸福的权利，希望作者能够成就自己，我也能够找到自己的幸福。\n\n### 语录\n\n**_如果那么容易的话，还要这么漫长的人生干什么呢 _**  \n**_我就生活在这里，没有完美新世界，没有需要等待的未来，没有要向外界索求的理解，也不需要跟谁比较才能判断自己，要做的就是此时，就在此地，就是此身 _**  \n**_失败不是悲剧，放弃才是 _**  \n**_宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯 _**  \n**_有的笑容背后是咬紧牙关的灵魂 _**  \n**_保持对不同论述的警惕，才能保持自己的独立性。探寻就是要不断相信、不断怀疑、不断幻灭、不断摧毁、不断重建，为的只是避免成为偏见的附庸。或者说，煽动各种偏见的互殴，从而取得平衡，这是我所理解的“探寻” _**  \n**_天空一无所有，为何给我安慰——海子 _**  \n**_人是一样的，对幸福的愿望一样，对自身完整的需要一样，只是她生在这儿，这么活着，我来到那儿，那么活着，都是偶然。万物流变，千百万年，谁都是一小粒，嵌在世界的秩序当中，采访是什么？采访是生命间的往来，认识自己越深，认识他人越深，反之亦然 _**  \n**_生和死，苦难和苍老，都蕴涵在每一个人的体内，总有一天我们会与之相逢。我们终将浑然难分，像水溶于水中。_**\n\n\n(封面图片来自Pixabay)\n","slug":"chaijing-look","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p45000p9vnz5dusksxs","content":"<p><a href=\"http://www.amazon.cn/\\%E7\\%9C\\%8B\\%E8\\%A7\\%81-\\%E6\\%9F\\%B4\\%E9\\%9D\\%99/dp/B00AH\n6OXP0/ref=sr_1_1?ie=UTF8&amp;qid=1400049076&amp;sr=8-1&amp;keywords=\\%E7\\%9C\\%8B\\%E8\\%A7\\%81\" target=\"_blank\" rel=\"external\">《看见》——柴静</a></p>\n<p>说实话，这本书居然是我初恋送给我的。不过早已经分手了，她现在在和一个警官学院的男生谈恋爱，挺好的。<br>柴静的这本书不仅仅记述了自己的成长历程，还表达了一个新闻工作者应该有的操守，更谱写了对生命的赞歌。我觉得每一个新闻工作者都应该看一看这本书，当然，普通人也可<br>以看看，体会下社会不同层面的人的生活，以此来审视自己。<br>我是一个经常刷微博的人，特别是微博打击大V之前，那时候的新浪微博，有很多很多批评社会、揭露社会阴暗面的言论，当然，其中不乏谣言，不过很多事情，网民都宁愿相信<br>，为什么呢？这很清楚，国内最权威的新闻应该是CCAV了，可是他们几十年如一日地对ZF歌功颂德，同时还不忘夸张地形容下外国人是生活在怎样的水深火热的情况。相比<br>新闻联播，我更愿意看我们重庆的“天天630”，虽然重庆人也经常骂他“大事不敢播，小事起倮倮”，但是至少他更加真实，更加接地气。而CCAV却只会敷衍谄媚，即使<br>偶尔报道下基层的文章，也是漏洞多多，完全不能让人联想到摆拍的嫌疑。现在很多新闻工作者对某些事情不敢采访，采访了也不敢播，当然，这或许并不是他们的错，毕竟体制<br>在这儿，一时半会儿也改不了。但是希望你们能尽量的摸着自己的良心来工作。  </p>\n<p>《看见》一书，主要是写了柴静的职业生涯的几件自己映像比较深刻的事，让我体会到了很多人的平凡与伟大。说的更实际点，就是伟大总是蕴涵于平凡之中。如果一个人一辈子<br>都能甘于平凡而绝不平庸，那这个人绝对是一个成功、伟大之人。每个人的生活都不可能完全平顺，每个人都会在生命的特定时候遇到难以避免的挫折，“加入生活欺骗了你”，<br>不要悲伤，不要愤慨，漫漫人生路，没有过不去的坎，伤心的时候不妨去外面走走，没有抽不完的烟，悲伤总会过去。<br>“宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯。”这是我特别喜欢的一句话，我深有体会。很多<br>人说我没脾气，呵呵，真的是没脾气吗，我的宽容不是天性也不是道德，而是我对事物的认识，我只是觉得在很多事情上发脾气没有用。当然我也还是一个“愤青”，对事物认识<br>不全面，缺乏对客观事物的正确把握。<br>最后，每个人都有追求幸福的权利，希望作者能够成就自己，我也能够找到自己的幸福。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p><strong><em>如果那么容易的话，还要这么漫长的人生干什么呢 </em></strong><br><strong><em>我就生活在这里，没有完美新世界，没有需要等待的未来，没有要向外界索求的理解，也不需要跟谁比较才能判断自己，要做的就是此时，就在此地，就是此身 </em></strong><br><strong><em>失败不是悲剧，放弃才是 </em></strong><br><strong><em>宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯 </em></strong><br><strong><em>有的笑容背后是咬紧牙关的灵魂 </em></strong><br><strong><em>保持对不同论述的警惕，才能保持自己的独立性。探寻就是要不断相信、不断怀疑、不断幻灭、不断摧毁、不断重建，为的只是避免成为偏见的附庸。或者说，煽动各种偏见的互殴，从而取得平衡，这是我所理解的“探寻” </em></strong><br><strong><em>天空一无所有，为何给我安慰——海子 </em></strong><br><strong><em>人是一样的，对幸福的愿望一样，对自身完整的需要一样，只是她生在这儿，这么活着，我来到那儿，那么活着，都是偶然。万物流变，千百万年，谁都是一小粒，嵌在世界的秩序当中，采访是什么？采访是生命间的往来，认识自己越深，认识他人越深，反之亦然 </em></strong><br><strong><em>生和死，苦难和苍老，都蕴涵在每一个人的体内，总有一天我们会与之相逢。我们终将浑然难分，像水溶于水中。</em></strong></p>\n<p>(封面图片来自Pixabay)</p>\n","excerpt":"","more":"<p><a href=\"http://www.amazon.cn/\\%E7\\%9C\\%8B\\%E8\\%A7\\%81-\\%E6\\%9F\\%B4\\%E9\\%9D\\%99/dp/B00AH\n6OXP0/ref=sr_1_1?ie=UTF8&amp;qid=1400049076&amp;sr=8-1&amp;keywords=\\%E7\\%9C\\%8B\\%E8\\%A7\\%81\">《看见》——柴静</a></p>\n<p>说实话，这本书居然是我初恋送给我的。不过早已经分手了，她现在在和一个警官学院的男生谈恋爱，挺好的。<br>柴静的这本书不仅仅记述了自己的成长历程，还表达了一个新闻工作者应该有的操守，更谱写了对生命的赞歌。我觉得每一个新闻工作者都应该看一看这本书，当然，普通人也可<br>以看看，体会下社会不同层面的人的生活，以此来审视自己。<br>我是一个经常刷微博的人，特别是微博打击大V之前，那时候的新浪微博，有很多很多批评社会、揭露社会阴暗面的言论，当然，其中不乏谣言，不过很多事情，网民都宁愿相信<br>，为什么呢？这很清楚，国内最权威的新闻应该是CCAV了，可是他们几十年如一日地对ZF歌功颂德，同时还不忘夸张地形容下外国人是生活在怎样的水深火热的情况。相比<br>新闻联播，我更愿意看我们重庆的“天天630”，虽然重庆人也经常骂他“大事不敢播，小事起倮倮”，但是至少他更加真实，更加接地气。而CCAV却只会敷衍谄媚，即使<br>偶尔报道下基层的文章，也是漏洞多多，完全不能让人联想到摆拍的嫌疑。现在很多新闻工作者对某些事情不敢采访，采访了也不敢播，当然，这或许并不是他们的错，毕竟体制<br>在这儿，一时半会儿也改不了。但是希望你们能尽量的摸着自己的良心来工作。  </p>\n<p>《看见》一书，主要是写了柴静的职业生涯的几件自己映像比较深刻的事，让我体会到了很多人的平凡与伟大。说的更实际点，就是伟大总是蕴涵于平凡之中。如果一个人一辈子<br>都能甘于平凡而绝不平庸，那这个人绝对是一个成功、伟大之人。每个人的生活都不可能完全平顺，每个人都会在生命的特定时候遇到难以避免的挫折，“加入生活欺骗了你”，<br>不要悲伤，不要愤慨，漫漫人生路，没有过不去的坎，伤心的时候不妨去外面走走，没有抽不完的烟，悲伤总会过去。<br>“宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯。”这是我特别喜欢的一句话，我深有体会。很多<br>人说我没脾气，呵呵，真的是没脾气吗，我的宽容不是天性也不是道德，而是我对事物的认识，我只是觉得在很多事情上发脾气没有用。当然我也还是一个“愤青”，对事物认识<br>不全面，缺乏对客观事物的正确把握。<br>最后，每个人都有追求幸福的权利，希望作者能够成就自己，我也能够找到自己的幸福。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p><strong><em>如果那么容易的话，还要这么漫长的人生干什么呢 </em></strong><br><strong><em>我就生活在这里，没有完美新世界，没有需要等待的未来，没有要向外界索求的理解，也不需要跟谁比较才能判断自己，要做的就是此时，就在此地，就是此身 </em></strong><br><strong><em>失败不是悲剧，放弃才是 </em></strong><br><strong><em>宽容不是道德，而是认识。唯有深刻地认识事物，才能对人和世界的复杂性有了解和体谅，才有不轻易责难和赞美的思维习惯 </em></strong><br><strong><em>有的笑容背后是咬紧牙关的灵魂 </em></strong><br><strong><em>保持对不同论述的警惕，才能保持自己的独立性。探寻就是要不断相信、不断怀疑、不断幻灭、不断摧毁、不断重建，为的只是避免成为偏见的附庸。或者说，煽动各种偏见的互殴，从而取得平衡，这是我所理解的“探寻” </em></strong><br><strong><em>天空一无所有，为何给我安慰——海子 </em></strong><br><strong><em>人是一样的，对幸福的愿望一样，对自身完整的需要一样，只是她生在这儿，这么活着，我来到那儿，那么活着，都是偶然。万物流变，千百万年，谁都是一小粒，嵌在世界的秩序当中，采访是什么？采访是生命间的往来，认识自己越深，认识他人越深，反之亦然 </em></strong><br><strong><em>生和死，苦难和苍老，都蕴涵在每一个人的体内，总有一天我们会与之相逢。我们终将浑然难分，像水溶于水中。</em></strong></p>\n<p>(封面图片来自Pixabay)</p>\n"},{"title":"博客再次改版","date":"2015-12-02T04:46:10.000Z","_content":"经过长达5个月的艰辛历程(实际的编程时间少之又少)，终于自己打造出了一个静态博客。虽然没有wordpress那么方便，虽然没有预期中那么漂亮，虽然还有很多功\n能还没有完善，但是这是我第一次用自己的技术为自己做了一个“会用”的东西。\n\n开博两年多了，从Github的octopress到wordpress再到自己搭建静态博客，写了总共一百多篇文章，由于本次改版采用的是大重构，所以我是一篇文章\n一篇文章的迁移过来的，只是格式有些还没改动，不过大体能成型了。目前博客有我很喜欢的几大特点：\n\n1.静态化，直接使用nginx实现html文件的静态访问\n\n2.ajax异步提交评论，评论不会立即出发更新html的接口，而是后台审核后才能更新\n\n3.SEO自己做，这个还有很多学习的地方\n\n4.每篇文章对应一张大图，其实是自己爱上摄影后才选择的这个主题，因为这样不仅让我在每篇文章编写时用心，还能用心拍照片(当然，实在没照片的时候就使用的Pixe\nbay的免费可商用的图片)\n\n5.采用我最喜欢的Python语言进行编写(Djanago框架)\n\n\n\n总之，这几个月很少更新博客，原因是公司的事情太多，自己没有合理利用好时间，所以导致这种这个局面。其实，最近几个月的实习，自己还是有很多感悟的，以后会陆续写成\n文章发表出来的。也不知道有没有人看，反正，开心就好咯。\n","source":"_posts/blog-revision.md","raw":"---\ntitle: \"博客再次改版\"\ndate: 2015-12-02 12:46:10\ncategories: 编程之路\n---\n经过长达5个月的艰辛历程(实际的编程时间少之又少)，终于自己打造出了一个静态博客。虽然没有wordpress那么方便，虽然没有预期中那么漂亮，虽然还有很多功\n能还没有完善，但是这是我第一次用自己的技术为自己做了一个“会用”的东西。\n\n开博两年多了，从Github的octopress到wordpress再到自己搭建静态博客，写了总共一百多篇文章，由于本次改版采用的是大重构，所以我是一篇文章\n一篇文章的迁移过来的，只是格式有些还没改动，不过大体能成型了。目前博客有我很喜欢的几大特点：\n\n1.静态化，直接使用nginx实现html文件的静态访问\n\n2.ajax异步提交评论，评论不会立即出发更新html的接口，而是后台审核后才能更新\n\n3.SEO自己做，这个还有很多学习的地方\n\n4.每篇文章对应一张大图，其实是自己爱上摄影后才选择的这个主题，因为这样不仅让我在每篇文章编写时用心，还能用心拍照片(当然，实在没照片的时候就使用的Pixe\nbay的免费可商用的图片)\n\n5.采用我最喜欢的Python语言进行编写(Djanago框架)\n\n\n\n总之，这几个月很少更新博客，原因是公司的事情太多，自己没有合理利用好时间，所以导致这种这个局面。其实，最近几个月的实习，自己还是有很多感悟的，以后会陆续写成\n文章发表出来的。也不知道有没有人看，反正，开心就好咯。\n","slug":"blog-revision","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p48000s9vnzmrymk45b","content":"<p>经过长达5个月的艰辛历程(实际的编程时间少之又少)，终于自己打造出了一个静态博客。虽然没有wordpress那么方便，虽然没有预期中那么漂亮，虽然还有很多功<br>能还没有完善，但是这是我第一次用自己的技术为自己做了一个“会用”的东西。</p>\n<p>开博两年多了，从Github的octopress到wordpress再到自己搭建静态博客，写了总共一百多篇文章，由于本次改版采用的是大重构，所以我是一篇文章<br>一篇文章的迁移过来的，只是格式有些还没改动，不过大体能成型了。目前博客有我很喜欢的几大特点：</p>\n<p>1.静态化，直接使用nginx实现html文件的静态访问</p>\n<p>2.ajax异步提交评论，评论不会立即出发更新html的接口，而是后台审核后才能更新</p>\n<p>3.SEO自己做，这个还有很多学习的地方</p>\n<p>4.每篇文章对应一张大图，其实是自己爱上摄影后才选择的这个主题，因为这样不仅让我在每篇文章编写时用心，还能用心拍照片(当然，实在没照片的时候就使用的Pixe<br>bay的免费可商用的图片)</p>\n<p>5.采用我最喜欢的Python语言进行编写(Djanago框架)</p>\n<p>总之，这几个月很少更新博客，原因是公司的事情太多，自己没有合理利用好时间，所以导致这种这个局面。其实，最近几个月的实习，自己还是有很多感悟的，以后会陆续写成<br>文章发表出来的。也不知道有没有人看，反正，开心就好咯。</p>\n","excerpt":"","more":"<p>经过长达5个月的艰辛历程(实际的编程时间少之又少)，终于自己打造出了一个静态博客。虽然没有wordpress那么方便，虽然没有预期中那么漂亮，虽然还有很多功<br>能还没有完善，但是这是我第一次用自己的技术为自己做了一个“会用”的东西。</p>\n<p>开博两年多了，从Github的octopress到wordpress再到自己搭建静态博客，写了总共一百多篇文章，由于本次改版采用的是大重构，所以我是一篇文章<br>一篇文章的迁移过来的，只是格式有些还没改动，不过大体能成型了。目前博客有我很喜欢的几大特点：</p>\n<p>1.静态化，直接使用nginx实现html文件的静态访问</p>\n<p>2.ajax异步提交评论，评论不会立即出发更新html的接口，而是后台审核后才能更新</p>\n<p>3.SEO自己做，这个还有很多学习的地方</p>\n<p>4.每篇文章对应一张大图，其实是自己爱上摄影后才选择的这个主题，因为这样不仅让我在每篇文章编写时用心，还能用心拍照片(当然，实在没照片的时候就使用的Pixe<br>bay的免费可商用的图片)</p>\n<p>5.采用我最喜欢的Python语言进行编写(Djanago框架)</p>\n<p>总之，这几个月很少更新博客，原因是公司的事情太多，自己没有合理利用好时间，所以导致这种这个局面。其实，最近几个月的实习，自己还是有很多感悟的，以后会陆续写成<br>文章发表出来的。也不知道有没有人看，反正，开心就好咯。</p>\n"},{"title":"《C和指针》——C语言补漏(函数篇)","date":"2014-05-14T11:06:28.000Z","_content":"1.strcpy：复制字符串  \nchar * strcpy(char _dst, char const _src);  \n如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。strcpy无法解决这个问题，因为它无法判断目标字符数组的长度  \n2.strncpy：复制指定长度的字符串，比strcpy安全  \nchar _strncpy(char _dst, char const _src, size_t len);  \n3.其它的和上面两口子类似的有：  \n剪切：char _strcat(char _dst, char const _src);  \nchar _strncat(char _dst, char const _stc, size_t len);  \n比较：int strcmp(char const _s1, char const _s2);  \nint strncmp(char const _s1, char const _s2, size_t len);  \n4.strchr/strrchr/strpbrk/strstr/strspn/strcspn：字符串查找  \nchar _strchr(char const _str, int ch);第二个参数其实是字符  \nchar _strrchr(char const _str, int ch);这是查找字符最后一次出现的位置  \nchar _strpbrk(char const _str, char const\n_group);这是在查找str中第一个匹配group中任何一个字符的字符位置  \nchar _strstr(char const _s1, char const\n_s2);在s1中查找整个s2第一次出现的起始位置，并返回一个指向该位置的指针  \nsize_t strspn(char const _str, char const _group);对字符计数  \nsize_t strcspn(char const _str, char const _group);  \n<!–more–>  \n5.上面这些都只能处理字符串，下面的可以处理任意的字节序列：  \nvoid _memcpy(void _dst, void const _src, size_t length);  \nvoid _memmove(void _dst, void const _src, size_t length);  \nvoid _memcmp(void const _a, void const _b, size_t length);  \nvoid _memchr(void const _a, int ch, size_t length);  \nvoid _memset(void _a, int ch, size_t length);  \n6.动态内存分配：  \nvoid _malloc(size_t size);动态内存分配  \nvoid free(void _pointer);内存释放  \n如果操作系统无法向malloc提供更多的内存，malloc就返回一个NULL指针  \nvoid _calloc(size_t num_elements, size_t\nelement_size);与malloc的区别是能够在返回指向内存的指针之前把它初始化为零，参数表示所需元素的数量和每个元素的字节数  \nvoid realloc(void _ptr, size_t new_size);用于新修改一个原先已经分配的内存块的大小  \n7.ungetc：撤销字符I/O  \nint ungetc( int character, FILE * stream );  \n把一个先前读入的字符返回到流中，这样它可以在以后被重新读入  \n8.fflush：迫使一个输出流的缓冲区内的数据进行物理写入，不管它是否已经写满  \nint fflush( FILE _stream );  \n9.文件指针的定位i：  \nlong ftell( FILE _stream );返回流的当前位置，即下一个读取或写入将要开始的位置距离文件起始位置的偏移量  \nint fseek( FILE _stream, long offset, int from);在一个流中定位。  \nvoid rewind( FILE * stream );将读/写指针设置回指定流的起始位置  \nint fgetpos( FILE _stream, fpos_t _position );在这个位置存储文件的当前位置  \nint fsetpos( FILE _stream, fpos_t const _position );把文件位置设置为存储在这个位置的值  \n10.改变缓冲方式：  \nvoid setbuf( FILE _stream, char _buf\n);设置了另一个数组，用于对流进行缓冲，为一个流自行指定缓冲区可以防止I/O函数库为它动态分配一个缓冲区  \nint setvbuf( FILE _stream, char _buf, int mode, size_t size );参数中mode用于指定缓冲的类型  \n11.临时文件：  \nFILE _tmpfile(void);会创建一个文件，当文件被关闭或程序终止时这个文件便自动删除  \nchar _tmpnam(char _name);临时文件的名字  \n12.删除文件：  \nint remove(char const _filename);删除文件  \nint rename(char const _oldname, char const _newname);文件重命名  \n13.随机数<stdlib.h>  \nint rand(void);  \nvoid srand(unsigned int seed);  \n上面两句会产生伪随机数，如果实现真正的随即需要再加一句：  \nsrand( (unsigned int)time( 0 ) );  \n14.字符串与数值的相互转换：  \nint atoi(char const _string);转换为十进制  \nlong int atol(char const _string);转换为十进制  \nlong int strtol(char const _string, char * **_*__unused, int base);可指定基数  \nunsigned long int strtoul( char const _string, char * ****_*__unused, int\nbase);可指定基数  \ndouble atof(char const _string);转换为float  \ndouble strtod(char const *string, char ****_*_**_*****unused);转换为double  \n15.执行系统命令(stdlib.h)：  \nvoid system( char const _command );可以执行cmd的命令  \n16.排序和查找：  \nvoid qsort(void _base, size_t n_elements, size_t el_size, int (_compare)(void\nconst _, void const\n_));第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数是一个比较函数  \nvoid _bsearch(void const _key, void const _base, size_t n_elements, size_t\nel_size, int (_compare)(void const _, void const _));在一个已经排好序的数组中用二分法查找一个特定的元素  \n\n封面图片来自Pixebay\n","source":"_posts/C-and-pointer_1.md","raw":"---\ntitle: \"《C和指针》——C语言补漏(函数篇)\"\ndate: 2014-05-14 19:06:28\ncategories: 韦编三绝\n---\n1.strcpy：复制字符串  \nchar * strcpy(char _dst, char const _src);  \n如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。strcpy无法解决这个问题，因为它无法判断目标字符数组的长度  \n2.strncpy：复制指定长度的字符串，比strcpy安全  \nchar _strncpy(char _dst, char const _src, size_t len);  \n3.其它的和上面两口子类似的有：  \n剪切：char _strcat(char _dst, char const _src);  \nchar _strncat(char _dst, char const _stc, size_t len);  \n比较：int strcmp(char const _s1, char const _s2);  \nint strncmp(char const _s1, char const _s2, size_t len);  \n4.strchr/strrchr/strpbrk/strstr/strspn/strcspn：字符串查找  \nchar _strchr(char const _str, int ch);第二个参数其实是字符  \nchar _strrchr(char const _str, int ch);这是查找字符最后一次出现的位置  \nchar _strpbrk(char const _str, char const\n_group);这是在查找str中第一个匹配group中任何一个字符的字符位置  \nchar _strstr(char const _s1, char const\n_s2);在s1中查找整个s2第一次出现的起始位置，并返回一个指向该位置的指针  \nsize_t strspn(char const _str, char const _group);对字符计数  \nsize_t strcspn(char const _str, char const _group);  \n<!–more–>  \n5.上面这些都只能处理字符串，下面的可以处理任意的字节序列：  \nvoid _memcpy(void _dst, void const _src, size_t length);  \nvoid _memmove(void _dst, void const _src, size_t length);  \nvoid _memcmp(void const _a, void const _b, size_t length);  \nvoid _memchr(void const _a, int ch, size_t length);  \nvoid _memset(void _a, int ch, size_t length);  \n6.动态内存分配：  \nvoid _malloc(size_t size);动态内存分配  \nvoid free(void _pointer);内存释放  \n如果操作系统无法向malloc提供更多的内存，malloc就返回一个NULL指针  \nvoid _calloc(size_t num_elements, size_t\nelement_size);与malloc的区别是能够在返回指向内存的指针之前把它初始化为零，参数表示所需元素的数量和每个元素的字节数  \nvoid realloc(void _ptr, size_t new_size);用于新修改一个原先已经分配的内存块的大小  \n7.ungetc：撤销字符I/O  \nint ungetc( int character, FILE * stream );  \n把一个先前读入的字符返回到流中，这样它可以在以后被重新读入  \n8.fflush：迫使一个输出流的缓冲区内的数据进行物理写入，不管它是否已经写满  \nint fflush( FILE _stream );  \n9.文件指针的定位i：  \nlong ftell( FILE _stream );返回流的当前位置，即下一个读取或写入将要开始的位置距离文件起始位置的偏移量  \nint fseek( FILE _stream, long offset, int from);在一个流中定位。  \nvoid rewind( FILE * stream );将读/写指针设置回指定流的起始位置  \nint fgetpos( FILE _stream, fpos_t _position );在这个位置存储文件的当前位置  \nint fsetpos( FILE _stream, fpos_t const _position );把文件位置设置为存储在这个位置的值  \n10.改变缓冲方式：  \nvoid setbuf( FILE _stream, char _buf\n);设置了另一个数组，用于对流进行缓冲，为一个流自行指定缓冲区可以防止I/O函数库为它动态分配一个缓冲区  \nint setvbuf( FILE _stream, char _buf, int mode, size_t size );参数中mode用于指定缓冲的类型  \n11.临时文件：  \nFILE _tmpfile(void);会创建一个文件，当文件被关闭或程序终止时这个文件便自动删除  \nchar _tmpnam(char _name);临时文件的名字  \n12.删除文件：  \nint remove(char const _filename);删除文件  \nint rename(char const _oldname, char const _newname);文件重命名  \n13.随机数<stdlib.h>  \nint rand(void);  \nvoid srand(unsigned int seed);  \n上面两句会产生伪随机数，如果实现真正的随即需要再加一句：  \nsrand( (unsigned int)time( 0 ) );  \n14.字符串与数值的相互转换：  \nint atoi(char const _string);转换为十进制  \nlong int atol(char const _string);转换为十进制  \nlong int strtol(char const _string, char * **_*__unused, int base);可指定基数  \nunsigned long int strtoul( char const _string, char * ****_*__unused, int\nbase);可指定基数  \ndouble atof(char const _string);转换为float  \ndouble strtod(char const *string, char ****_*_**_*****unused);转换为double  \n15.执行系统命令(stdlib.h)：  \nvoid system( char const _command );可以执行cmd的命令  \n16.排序和查找：  \nvoid qsort(void _base, size_t n_elements, size_t el_size, int (_compare)(void\nconst _, void const\n_));第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数是一个比较函数  \nvoid _bsearch(void const _key, void const _base, size_t n_elements, size_t\nel_size, int (_compare)(void const _, void const _));在一个已经排好序的数组中用二分法查找一个特定的元素  \n\n封面图片来自Pixebay\n","slug":"C-and-pointer_1","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p4j000u9vnzmj0vvie9","content":"<p>1.strcpy：复制字符串<br>char <em> strcpy(char _dst, char const _src);<br>如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。strcpy无法解决这个问题，因为它无法判断目标字符数组的长度<br>2.strncpy：复制指定长度的字符串，比strcpy安全<br>char _strncpy(char _dst, char const _src, size_t len);<br>3.其它的和上面两口子类似的有：<br>剪切：char _strcat(char _dst, char const _src);<br>char _strncat(char _dst, char const _stc, size_t len);<br>比较：int strcmp(char const _s1, char const _s2);<br>int strncmp(char const _s1, char const _s2, size_t len);<br>4.strchr/strrchr/strpbrk/strstr/strspn/strcspn：字符串查找<br>char _strchr(char const _str, int ch);第二个参数其实是字符<br>char _strrchr(char const _str, int ch);这是查找字符最后一次出现的位置<br>char _strpbrk(char const _str, char const<br>_group);这是在查找str中第一个匹配group中任何一个字符的字符位置<br>char _strstr(char const _s1, char const<br>_s2);在s1中查找整个s2第一次出现的起始位置，并返回一个指向该位置的指针<br>size_t strspn(char const _str, char const _group);对字符计数<br>size_t strcspn(char const _str, char const _group);<br>&lt;!–more–&gt;<br>5.上面这些都只能处理字符串，下面的可以处理任意的字节序列：<br>void _memcpy(void _dst, void const _src, size_t length);<br>void _memmove(void _dst, void const _src, size_t length);<br>void _memcmp(void const _a, void const _b, size_t length);<br>void _memchr(void const _a, int ch, size_t length);<br>void _memset(void _a, int ch, size_t length);<br>6.动态内存分配：<br>void _malloc(size_t size);动态内存分配<br>void free(void _pointer);内存释放<br>如果操作系统无法向malloc提供更多的内存，malloc就返回一个NULL指针<br>void _calloc(size_t num_elements, size_t<br>element_size);与malloc的区别是能够在返回指向内存的指针之前把它初始化为零，参数表示所需元素的数量和每个元素的字节数<br>void realloc(void _ptr, size_t new_size);用于新修改一个原先已经分配的内存块的大小<br>7.ungetc：撤销字符I/O<br>int ungetc( int character, FILE </em> stream );<br>把一个先前读入的字符返回到流中，这样它可以在以后被重新读入<br>8.fflush：迫使一个输出流的缓冲区内的数据进行物理写入，不管它是否已经写满<br>int fflush( FILE _stream );<br>9.文件指针的定位i：<br>long ftell( FILE _stream );返回流的当前位置，即下一个读取或写入将要开始的位置距离文件起始位置的偏移量<br>int fseek( FILE _stream, long offset, int from);在一个流中定位。<br>void rewind( FILE <em> stream );将读/写指针设置回指定流的起始位置<br>int fgetpos( FILE _stream, fpos_t _position );在这个位置存储文件的当前位置<br>int fsetpos( FILE _stream, fpos_t const _position );把文件位置设置为存储在这个位置的值<br>10.改变缓冲方式：<br>void setbuf( FILE _stream, char _buf<br>);设置了另一个数组，用于对流进行缓冲，为一个流自行指定缓冲区可以防止I/O函数库为它动态分配一个缓冲区<br>int setvbuf( FILE _stream, char _buf, int mode, size_t size );参数中mode用于指定缓冲的类型<br>11.临时文件：<br>FILE _tmpfile(void);会创建一个文件，当文件被关闭或程序终止时这个文件便自动删除<br>char _tmpnam(char _name);临时文件的名字<br>12.删除文件：<br>int remove(char const _filename);删除文件<br>int rename(char const _oldname, char const _newname);文件重命名<br>13.随机数<stdlib.h><br>int rand(void);<br>void srand(unsigned int seed);<br>上面两句会产生伪随机数，如果实现真正的随即需要再加一句：<br>srand( (unsigned int)time( 0 ) );<br>14.字符串与数值的相互转换：<br>int atoi(char const _string);转换为十进制<br>long int atol(char const _string);转换为十进制<br>long int strtol(char const _string, char </stdlib.h></em> <strong>_<em>__unused, int base);可指定基数<br>unsigned long int strtoul( char const _string, char </em> **</strong>_<em>__unused, int<br>base);可指定基数<br>double atof(char const _string);转换为float<br>double strtod(char const </em>string, char <strong><em>*_</em>_</strong>_<strong>*</strong>unused);转换为double<br>15.执行系统命令(stdlib.h)：<br>void system( char const _command );可以执行cmd的命令<br>16.排序和查找：<br>void qsort(void _base, size_t n_elements, size_t el_size, int (<em>compare)(void<br>const </em>, void const<br>_));第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数是一个比较函数<br>void _bsearch(void const _key, void const _base, size_t n_elements, size_t<br>el_size, int (<em>compare)(void const </em>, void const _));在一个已经排好序的数组中用二分法查找一个特定的元素  </p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>1.strcpy：复制字符串<br>char <em> strcpy(char _dst, char const _src);<br>如果字符串比数组长，多余的字符仍被复制，它们将覆盖原先存储于数组后面的内存空间的值。strcpy无法解决这个问题，因为它无法判断目标字符数组的长度<br>2.strncpy：复制指定长度的字符串，比strcpy安全<br>char _strncpy(char _dst, char const _src, size_t len);<br>3.其它的和上面两口子类似的有：<br>剪切：char _strcat(char _dst, char const _src);<br>char _strncat(char _dst, char const _stc, size_t len);<br>比较：int strcmp(char const _s1, char const _s2);<br>int strncmp(char const _s1, char const _s2, size_t len);<br>4.strchr/strrchr/strpbrk/strstr/strspn/strcspn：字符串查找<br>char _strchr(char const _str, int ch);第二个参数其实是字符<br>char _strrchr(char const _str, int ch);这是查找字符最后一次出现的位置<br>char _strpbrk(char const _str, char const<br>_group);这是在查找str中第一个匹配group中任何一个字符的字符位置<br>char _strstr(char const _s1, char const<br>_s2);在s1中查找整个s2第一次出现的起始位置，并返回一个指向该位置的指针<br>size_t strspn(char const _str, char const _group);对字符计数<br>size_t strcspn(char const _str, char const _group);<br>&lt;!–more–&gt;<br>5.上面这些都只能处理字符串，下面的可以处理任意的字节序列：<br>void _memcpy(void _dst, void const _src, size_t length);<br>void _memmove(void _dst, void const _src, size_t length);<br>void _memcmp(void const _a, void const _b, size_t length);<br>void _memchr(void const _a, int ch, size_t length);<br>void _memset(void _a, int ch, size_t length);<br>6.动态内存分配：<br>void _malloc(size_t size);动态内存分配<br>void free(void _pointer);内存释放<br>如果操作系统无法向malloc提供更多的内存，malloc就返回一个NULL指针<br>void _calloc(size_t num_elements, size_t<br>element_size);与malloc的区别是能够在返回指向内存的指针之前把它初始化为零，参数表示所需元素的数量和每个元素的字节数<br>void realloc(void _ptr, size_t new_size);用于新修改一个原先已经分配的内存块的大小<br>7.ungetc：撤销字符I/O<br>int ungetc( int character, FILE </em> stream );<br>把一个先前读入的字符返回到流中，这样它可以在以后被重新读入<br>8.fflush：迫使一个输出流的缓冲区内的数据进行物理写入，不管它是否已经写满<br>int fflush( FILE _stream );<br>9.文件指针的定位i：<br>long ftell( FILE _stream );返回流的当前位置，即下一个读取或写入将要开始的位置距离文件起始位置的偏移量<br>int fseek( FILE _stream, long offset, int from);在一个流中定位。<br>void rewind( FILE <em> stream );将读/写指针设置回指定流的起始位置<br>int fgetpos( FILE _stream, fpos_t _position );在这个位置存储文件的当前位置<br>int fsetpos( FILE _stream, fpos_t const _position );把文件位置设置为存储在这个位置的值<br>10.改变缓冲方式：<br>void setbuf( FILE _stream, char _buf<br>);设置了另一个数组，用于对流进行缓冲，为一个流自行指定缓冲区可以防止I/O函数库为它动态分配一个缓冲区<br>int setvbuf( FILE _stream, char _buf, int mode, size_t size );参数中mode用于指定缓冲的类型<br>11.临时文件：<br>FILE _tmpfile(void);会创建一个文件，当文件被关闭或程序终止时这个文件便自动删除<br>char _tmpnam(char _name);临时文件的名字<br>12.删除文件：<br>int remove(char const _filename);删除文件<br>int rename(char const _oldname, char const _newname);文件重命名<br>13.随机数<stdlib.h><br>int rand(void);<br>void srand(unsigned int seed);<br>上面两句会产生伪随机数，如果实现真正的随即需要再加一句：<br>srand( (unsigned int)time( 0 ) );<br>14.字符串与数值的相互转换：<br>int atoi(char const _string);转换为十进制<br>long int atol(char const _string);转换为十进制<br>long int strtol(char const _string, char </em> <strong>_<em>__unused, int base);可指定基数<br>unsigned long int strtoul( char const _string, char </em> **</strong>_<em>__unused, int<br>base);可指定基数<br>double atof(char const _string);转换为float<br>double strtod(char const </em>string, char <strong><em>*_</em>_</strong>_<strong>*</strong>unused);转换为double<br>15.执行系统命令(stdlib.h)：<br>void system( char const _command );可以执行cmd的命令<br>16.排序和查找：<br>void qsort(void _base, size_t n_elements, size_t el_size, int (<em>compare)(void<br>const </em>, void const<br>_));第一个参数指向需要排序的数组，第二个参数指定数组中元素的数目，第三个参数指定每个元素的长度，第四个参数是一个比较函数<br>void _bsearch(void const _key, void const _base, size_t n_elements, size_t<br>el_size, int (<em>compare)(void const </em>, void const _));在一个已经排好序的数组中用二分法查找一个特定的元素  </p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"纪念忙碌的四月","date":"2014-05-12T10:27:18.000Z","_content":"总算把这学期最忙的一段时期度过了。前一阵子的事情真的太多了，而且几乎都是不可推辞的，妈的。  \n\n其实这学期从最开始打算不考研开始我的事情就多起来了，以前一直都想考研，所以就没怎么找事情做，感觉自己这样没事干做做自己喜欢的事情多好的，但现在却有了不考研，\n毕业就找工作的想法，那我就不得不给自己找一些事情做了。  \n\n跟着两个导师学习不同的东西，其实光这一点就很累了，一个模式识别，天天都在看论文，一个是信息安全，要逆向一个软件也不是那么容易的。最烦的事是突然来一个班级网页\n设计的比赛，偏偏又是叫的每一个班的科创委员来负责。我郁闷啊，这个肯定不能推脱。我们班上能做出来网站的也只有那一个人而已，但偏偏她也很忙，所以也就草草地做了个\n出来。然后更郁闷的事情出来了，居然以倒数第二的成绩进了决赛，而且决赛偏偏又是周五晚上，正好我们那晚又聚餐，艹。反正聚餐，所有人都不想推迟了，决赛如果弃权又不\n好得，所以硬着头皮做了PPT，还准备了一下下，最后在比赛的时候我们得了三等奖(进决赛的都有奖，哈哈，我们的分数还是倒数第一)。不过也没关系嘛，这种东西本来就\n是给我们自己看的，网站以黑色为主题，这才狂拽炫酷嘛，你们懂什么。\n\n就要分班了，昨晚我们全班去大金鹰下的农家乐晚了一晚上。虽然我也没玩到什么，喝完酒就上床了，但是重要的是能和这样一群朋友待上两年，真好，真的很好。我们班的大多\n数选择计算机科学与技术专业的应该都还能分到一个班上，而我这种选信安的人就只有远离大家啦，没什么，我永远不会忘记大家的。\n\n这是第十一周周末，在十四周之前应该没多少事情做了，哈哈，终于可以放松一下下了。\n\n(封面图片来自Pixabay)\n","source":"_posts/busy-april.md","raw":"---\ntitle: \"纪念忙碌的四月\"\ndate: 2014-05-12 18:27:18\ncategories: 边走边想\n---\n总算把这学期最忙的一段时期度过了。前一阵子的事情真的太多了，而且几乎都是不可推辞的，妈的。  \n\n其实这学期从最开始打算不考研开始我的事情就多起来了，以前一直都想考研，所以就没怎么找事情做，感觉自己这样没事干做做自己喜欢的事情多好的，但现在却有了不考研，\n毕业就找工作的想法，那我就不得不给自己找一些事情做了。  \n\n跟着两个导师学习不同的东西，其实光这一点就很累了，一个模式识别，天天都在看论文，一个是信息安全，要逆向一个软件也不是那么容易的。最烦的事是突然来一个班级网页\n设计的比赛，偏偏又是叫的每一个班的科创委员来负责。我郁闷啊，这个肯定不能推脱。我们班上能做出来网站的也只有那一个人而已，但偏偏她也很忙，所以也就草草地做了个\n出来。然后更郁闷的事情出来了，居然以倒数第二的成绩进了决赛，而且决赛偏偏又是周五晚上，正好我们那晚又聚餐，艹。反正聚餐，所有人都不想推迟了，决赛如果弃权又不\n好得，所以硬着头皮做了PPT，还准备了一下下，最后在比赛的时候我们得了三等奖(进决赛的都有奖，哈哈，我们的分数还是倒数第一)。不过也没关系嘛，这种东西本来就\n是给我们自己看的，网站以黑色为主题，这才狂拽炫酷嘛，你们懂什么。\n\n就要分班了，昨晚我们全班去大金鹰下的农家乐晚了一晚上。虽然我也没玩到什么，喝完酒就上床了，但是重要的是能和这样一群朋友待上两年，真好，真的很好。我们班的大多\n数选择计算机科学与技术专业的应该都还能分到一个班上，而我这种选信安的人就只有远离大家啦，没什么，我永远不会忘记大家的。\n\n这是第十一周周末，在十四周之前应该没多少事情做了，哈哈，终于可以放松一下下了。\n\n(封面图片来自Pixabay)\n","slug":"busy-april","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p4n000x9vnzmsq04j3o","content":"<p>总算把这学期最忙的一段时期度过了。前一阵子的事情真的太多了，而且几乎都是不可推辞的，妈的。  </p>\n<p>其实这学期从最开始打算不考研开始我的事情就多起来了，以前一直都想考研，所以就没怎么找事情做，感觉自己这样没事干做做自己喜欢的事情多好的，但现在却有了不考研，<br>毕业就找工作的想法，那我就不得不给自己找一些事情做了。  </p>\n<p>跟着两个导师学习不同的东西，其实光这一点就很累了，一个模式识别，天天都在看论文，一个是信息安全，要逆向一个软件也不是那么容易的。最烦的事是突然来一个班级网页<br>设计的比赛，偏偏又是叫的每一个班的科创委员来负责。我郁闷啊，这个肯定不能推脱。我们班上能做出来网站的也只有那一个人而已，但偏偏她也很忙，所以也就草草地做了个<br>出来。然后更郁闷的事情出来了，居然以倒数第二的成绩进了决赛，而且决赛偏偏又是周五晚上，正好我们那晚又聚餐，艹。反正聚餐，所有人都不想推迟了，决赛如果弃权又不<br>好得，所以硬着头皮做了PPT，还准备了一下下，最后在比赛的时候我们得了三等奖(进决赛的都有奖，哈哈，我们的分数还是倒数第一)。不过也没关系嘛，这种东西本来就<br>是给我们自己看的，网站以黑色为主题，这才狂拽炫酷嘛，你们懂什么。</p>\n<p>就要分班了，昨晚我们全班去大金鹰下的农家乐晚了一晚上。虽然我也没玩到什么，喝完酒就上床了，但是重要的是能和这样一群朋友待上两年，真好，真的很好。我们班的大多<br>数选择计算机科学与技术专业的应该都还能分到一个班上，而我这种选信安的人就只有远离大家啦，没什么，我永远不会忘记大家的。</p>\n<p>这是第十一周周末，在十四周之前应该没多少事情做了，哈哈，终于可以放松一下下了。</p>\n<p>(封面图片来自Pixabay)</p>\n","excerpt":"","more":"<p>总算把这学期最忙的一段时期度过了。前一阵子的事情真的太多了，而且几乎都是不可推辞的，妈的。  </p>\n<p>其实这学期从最开始打算不考研开始我的事情就多起来了，以前一直都想考研，所以就没怎么找事情做，感觉自己这样没事干做做自己喜欢的事情多好的，但现在却有了不考研，<br>毕业就找工作的想法，那我就不得不给自己找一些事情做了。  </p>\n<p>跟着两个导师学习不同的东西，其实光这一点就很累了，一个模式识别，天天都在看论文，一个是信息安全，要逆向一个软件也不是那么容易的。最烦的事是突然来一个班级网页<br>设计的比赛，偏偏又是叫的每一个班的科创委员来负责。我郁闷啊，这个肯定不能推脱。我们班上能做出来网站的也只有那一个人而已，但偏偏她也很忙，所以也就草草地做了个<br>出来。然后更郁闷的事情出来了，居然以倒数第二的成绩进了决赛，而且决赛偏偏又是周五晚上，正好我们那晚又聚餐，艹。反正聚餐，所有人都不想推迟了，决赛如果弃权又不<br>好得，所以硬着头皮做了PPT，还准备了一下下，最后在比赛的时候我们得了三等奖(进决赛的都有奖，哈哈，我们的分数还是倒数第一)。不过也没关系嘛，这种东西本来就<br>是给我们自己看的，网站以黑色为主题，这才狂拽炫酷嘛，你们懂什么。</p>\n<p>就要分班了，昨晚我们全班去大金鹰下的农家乐晚了一晚上。虽然我也没玩到什么，喝完酒就上床了，但是重要的是能和这样一群朋友待上两年，真好，真的很好。我们班的大多<br>数选择计算机科学与技术专业的应该都还能分到一个班上，而我这种选信安的人就只有远离大家啦，没什么，我永远不会忘记大家的。</p>\n<p>这是第十一周周末，在十四周之前应该没多少事情做了，哈哈，终于可以放松一下下了。</p>\n<p>(封面图片来自Pixabay)</p>\n"},{"title":"[读者]我始终相信努力奋斗的意义","date":"2014-01-21T14:38:13.000Z","_content":"作者：卢思浩 一\n\n从北京回家的动车上，偶然听到邻座的小姑娘边哭边打电话给家人，她说：“妈，对不起，本来说好了赚钱了才回家的……”她蜷坐在座位上，极力压制着自己的哭声，“但是我\n尽力了，妈，我不后悔。”\n\n联想起之前看到的一篇文章，有人说他始终不相信努力奋斗的意义。然而努力奋斗的意义，真的只是为了赚钱，或者为了社会所认可的成功吗？\n\n我突然想起我日夜颠倒的那个死党，M。\n\n有一天周末晚上，他发来自己的封面设计，还没等我给出评价，他又说：“不行，我还得再改改。”其实我觉得已经很好了，可是他总是不满意。第二天中午他把改好的设计给我\n看了看，然后语音另一边的他突然叹了口气。\n\n“你说，我们这样日夜颠倒，这么忙碌，到底是为了什么呢？”他问我。\n\n那时我想起一句，便对他说：“归根结底，我们之所以漂泊异地辛苦奋斗，是因为我们愿意。我们这么努力，不过是为了给自己一个交代。”\n\n就像那个跟我萍水相逢的姑娘打动我的那句话：“但是我尽力了，妈，我不后悔。”\n\n不知道为什么最近出现了很多文章说不相信努力的意义。然而这对于我来说似乎从来不是一个问题，努力从来不等于成功，而成功也从来不是终极目标。那些终极的梦想，其实是\n很难以实现的。但在你追逐梦想的时候，你会找到一个更好的自己，一个沉默、努力、充实、安静的你自己，你会因为自己所做的事情而觉得充实。\n\n二\n\n我始终相信努力奋斗的意义，因为那是本质问题。我朋友曾经问我：“如果有一天你发现梦想始终没有实现，你会不会觉得很可怕。”\n\n我对他说：“没什么好可怕的。”\n\n他看着我说：“即使那些努力都没有回报？”\n\n我觉得**_努力就是努力的回报，付出就是付出的回报_**，写作就是写作的回报，画画就是画画的回报，唱歌就是唱歌的回报，一如我的死党所说，虽然每次觉得很累，但\n当他看到自己的作品的时候，心里的兴奋和激动没有任何一样别的东西能够代替的了。\n\n如果你的努力能让自己做自己喜欢的事情，那为什么要放弃努力呢？如果人能够做自己喜欢的事情，谁说这样不是一种回报呢？\n\n我相信，任何人，不管他是个大人物还是小人物，只要做自己喜欢做的事情，他一定是开心的。只要为了自己想要做的事情努力，那一定会感到充实。相反，如果你的努力是为了\n你不想要的东西，那你自然而然地会感到憋屈和不开心，进而怀疑努力的意义。\n\n如果你的努力不是为了自己喜欢的，自己想要的，那么请停下来问问自己是不是太急躁了。\n\n三\n\n曾经在山区里看到过天真无邪的孩子们念书的情境，正如那些文章里所说，这些孩子也许将来只能接过父母的活，在山区里继续着他艰苦的人生。然而他们却比很多比他们家境好\n的人快乐许多，因为对于他们来说，念书就是念书的回报。\n\n一个在北京飘着的哥们曾跟我说，他也许这辈子也无法“逆袭”，也许那些高富帅们不需要怎么付出也能做出更好的成绩，但他还是决定继续漂泊，做一个奋斗的屌丝，他觉得这\n样子值得，失败了也不会后悔，也算是给自己一个交代。\n\n你说登山的人为什么要登山？是因为山在那里，是因为他们无法言说那难以满足的渴望。\n\n为什么明知道梦想很难实现还是要去追逐？因为那是我们的渴望，因为我们不甘心，因为我们想要自己的生活能够多姿多彩，因为我们想要给自己一个交代，因为我们想要在我们\n老去之后可以对孙辈说，你爷爷我曾经为了梦想义无反顾地努力过。\n\n诚然，也许奋斗了一辈子的屌丝也只是个屌丝，也许咸鱼翻身了也还不过是一个翻了面的咸鱼，但至少他们有做梦的自尊，而不是丢下一句努力无用心安理得地生活下去。\n\n你不应该担心你的生活即将结束，而应担心你的生活从未开始。\n\n其实我在追逐梦想的时候，早就意识到那些梦想很有可能不会实现，可是我还是决定去追逐。失败没有什么可怕的，**_可怕的是从来没有努力过还怡然自得地安慰自己_**\n，连一点点的懊悔都被麻木所掩盖下去。\n\n不能怕，没什么比自己背叛自己更可怕。\n\n四\n\n九把刀在书里说过：“**_有些梦想，纵使永远也没办法实现，纵使光是连说出来都很奢侈。但如果没有说出来温暖自己一下，就无法获得前进的动力。_**”\n\n人为什么要背负感情？是因为只有在人们面对这些痛楚之后，才能变得强大，才能在面对那些无能为力的自然规律的时候，更好地安慰他人。\n\n人为什么要背负梦想？是因为梦想这东西，即使你脆弱得随时会倒下，也没有人能夺走他。即使你真的是一条咸鱼，也没人能夺走你做梦的自由。\n\n所有的辉煌和伟大，一定伴随着挫折和跌倒，所有的辉煌背后都是一座座苦逼的高墙。谁没有一个不安稳的青春？没有一件事情可以一下子把你打垮，也不会有一件事情可以让你\n一步登天，慢慢走，慢慢看，生命是一个慢慢累积的过程。\n\n有一个环卫工人，工作了几十年终于退休了，很多人觉得他活的很卑微，然而每天早起的他待人总是很温和，微笑示人，我觉得虽然他也许没能赚很多钱，但是他同样是伟大的。\n\n活得充实比获得成功更重要，而这正是努力的意义。\n\n五\n\n我常说，你是一个什么样的人，就会听到什么样的歌，看到什么样的文，写出什么样的字，遇到什么样的人。你能听到治愈的歌，看到温暖的文，写着倔强的文，遇到正好的人，\n你会相信那些温暖、信念、坚持这样子看起来老掉牙的字眼，是因为你就是这样子的人。\n\n你相信梦想，梦想自然会相信你。千真万确。\n\n然而感情和梦想都是冷暖自知的事儿，你想要跟别人描述吧，还真不一定能描述的好，说不定你的一番苦闷在别人眼里显得莫明其妙。喜欢人家的是你又不是别人，别人再怎么出\n谋划策，最后决策的不还是你；你的梦想是你自己的又不是别人的，可能在你眼里看来意义重大，在他们眼里无聊的根本不值一提。\n\n在很大的一部分时间里，你能依靠的只有你自己。所以，管他的呢，管别人怎么看，做自己想做的，努力到坚持不下去为止。\n\n也许你想要的未来在他们眼里不值一提，也许你一直在跌倒然后告诉自己要爬起来，也许你已经很努力了可还是有人不满意，也许你的理想离你的距离从来没有拉近过，但请你继\n续向前走，因为别人看不到你背后的努力和付出，你却始终看得见自己。\n\n——摘自《读者》2014年第3期\n","source":"_posts/believing-the-meaning-of-hard-work.md","raw":"---\ntitle: \"[读者]我始终相信努力奋斗的意义\"\ndate: 2014-01-21 22:38:13\ncategories: 韦编三绝\n---\n作者：卢思浩 一\n\n从北京回家的动车上，偶然听到邻座的小姑娘边哭边打电话给家人，她说：“妈，对不起，本来说好了赚钱了才回家的……”她蜷坐在座位上，极力压制着自己的哭声，“但是我\n尽力了，妈，我不后悔。”\n\n联想起之前看到的一篇文章，有人说他始终不相信努力奋斗的意义。然而努力奋斗的意义，真的只是为了赚钱，或者为了社会所认可的成功吗？\n\n我突然想起我日夜颠倒的那个死党，M。\n\n有一天周末晚上，他发来自己的封面设计，还没等我给出评价，他又说：“不行，我还得再改改。”其实我觉得已经很好了，可是他总是不满意。第二天中午他把改好的设计给我\n看了看，然后语音另一边的他突然叹了口气。\n\n“你说，我们这样日夜颠倒，这么忙碌，到底是为了什么呢？”他问我。\n\n那时我想起一句，便对他说：“归根结底，我们之所以漂泊异地辛苦奋斗，是因为我们愿意。我们这么努力，不过是为了给自己一个交代。”\n\n就像那个跟我萍水相逢的姑娘打动我的那句话：“但是我尽力了，妈，我不后悔。”\n\n不知道为什么最近出现了很多文章说不相信努力的意义。然而这对于我来说似乎从来不是一个问题，努力从来不等于成功，而成功也从来不是终极目标。那些终极的梦想，其实是\n很难以实现的。但在你追逐梦想的时候，你会找到一个更好的自己，一个沉默、努力、充实、安静的你自己，你会因为自己所做的事情而觉得充实。\n\n二\n\n我始终相信努力奋斗的意义，因为那是本质问题。我朋友曾经问我：“如果有一天你发现梦想始终没有实现，你会不会觉得很可怕。”\n\n我对他说：“没什么好可怕的。”\n\n他看着我说：“即使那些努力都没有回报？”\n\n我觉得**_努力就是努力的回报，付出就是付出的回报_**，写作就是写作的回报，画画就是画画的回报，唱歌就是唱歌的回报，一如我的死党所说，虽然每次觉得很累，但\n当他看到自己的作品的时候，心里的兴奋和激动没有任何一样别的东西能够代替的了。\n\n如果你的努力能让自己做自己喜欢的事情，那为什么要放弃努力呢？如果人能够做自己喜欢的事情，谁说这样不是一种回报呢？\n\n我相信，任何人，不管他是个大人物还是小人物，只要做自己喜欢做的事情，他一定是开心的。只要为了自己想要做的事情努力，那一定会感到充实。相反，如果你的努力是为了\n你不想要的东西，那你自然而然地会感到憋屈和不开心，进而怀疑努力的意义。\n\n如果你的努力不是为了自己喜欢的，自己想要的，那么请停下来问问自己是不是太急躁了。\n\n三\n\n曾经在山区里看到过天真无邪的孩子们念书的情境，正如那些文章里所说，这些孩子也许将来只能接过父母的活，在山区里继续着他艰苦的人生。然而他们却比很多比他们家境好\n的人快乐许多，因为对于他们来说，念书就是念书的回报。\n\n一个在北京飘着的哥们曾跟我说，他也许这辈子也无法“逆袭”，也许那些高富帅们不需要怎么付出也能做出更好的成绩，但他还是决定继续漂泊，做一个奋斗的屌丝，他觉得这\n样子值得，失败了也不会后悔，也算是给自己一个交代。\n\n你说登山的人为什么要登山？是因为山在那里，是因为他们无法言说那难以满足的渴望。\n\n为什么明知道梦想很难实现还是要去追逐？因为那是我们的渴望，因为我们不甘心，因为我们想要自己的生活能够多姿多彩，因为我们想要给自己一个交代，因为我们想要在我们\n老去之后可以对孙辈说，你爷爷我曾经为了梦想义无反顾地努力过。\n\n诚然，也许奋斗了一辈子的屌丝也只是个屌丝，也许咸鱼翻身了也还不过是一个翻了面的咸鱼，但至少他们有做梦的自尊，而不是丢下一句努力无用心安理得地生活下去。\n\n你不应该担心你的生活即将结束，而应担心你的生活从未开始。\n\n其实我在追逐梦想的时候，早就意识到那些梦想很有可能不会实现，可是我还是决定去追逐。失败没有什么可怕的，**_可怕的是从来没有努力过还怡然自得地安慰自己_**\n，连一点点的懊悔都被麻木所掩盖下去。\n\n不能怕，没什么比自己背叛自己更可怕。\n\n四\n\n九把刀在书里说过：“**_有些梦想，纵使永远也没办法实现，纵使光是连说出来都很奢侈。但如果没有说出来温暖自己一下，就无法获得前进的动力。_**”\n\n人为什么要背负感情？是因为只有在人们面对这些痛楚之后，才能变得强大，才能在面对那些无能为力的自然规律的时候，更好地安慰他人。\n\n人为什么要背负梦想？是因为梦想这东西，即使你脆弱得随时会倒下，也没有人能夺走他。即使你真的是一条咸鱼，也没人能夺走你做梦的自由。\n\n所有的辉煌和伟大，一定伴随着挫折和跌倒，所有的辉煌背后都是一座座苦逼的高墙。谁没有一个不安稳的青春？没有一件事情可以一下子把你打垮，也不会有一件事情可以让你\n一步登天，慢慢走，慢慢看，生命是一个慢慢累积的过程。\n\n有一个环卫工人，工作了几十年终于退休了，很多人觉得他活的很卑微，然而每天早起的他待人总是很温和，微笑示人，我觉得虽然他也许没能赚很多钱，但是他同样是伟大的。\n\n活得充实比获得成功更重要，而这正是努力的意义。\n\n五\n\n我常说，你是一个什么样的人，就会听到什么样的歌，看到什么样的文，写出什么样的字，遇到什么样的人。你能听到治愈的歌，看到温暖的文，写着倔强的文，遇到正好的人，\n你会相信那些温暖、信念、坚持这样子看起来老掉牙的字眼，是因为你就是这样子的人。\n\n你相信梦想，梦想自然会相信你。千真万确。\n\n然而感情和梦想都是冷暖自知的事儿，你想要跟别人描述吧，还真不一定能描述的好，说不定你的一番苦闷在别人眼里显得莫明其妙。喜欢人家的是你又不是别人，别人再怎么出\n谋划策，最后决策的不还是你；你的梦想是你自己的又不是别人的，可能在你眼里看来意义重大，在他们眼里无聊的根本不值一提。\n\n在很大的一部分时间里，你能依靠的只有你自己。所以，管他的呢，管别人怎么看，做自己想做的，努力到坚持不下去为止。\n\n也许你想要的未来在他们眼里不值一提，也许你一直在跌倒然后告诉自己要爬起来，也许你已经很努力了可还是有人不满意，也许你的理想离你的距离从来没有拉近过，但请你继\n续向前走，因为别人看不到你背后的努力和付出，你却始终看得见自己。\n\n——摘自《读者》2014年第3期\n","slug":"believing-the-meaning-of-hard-work","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p4r000z9vnz9lun5sp2","content":"<p>作者：卢思浩 一</p>\n<p>从北京回家的动车上，偶然听到邻座的小姑娘边哭边打电话给家人，她说：“妈，对不起，本来说好了赚钱了才回家的……”她蜷坐在座位上，极力压制着自己的哭声，“但是我<br>尽力了，妈，我不后悔。”</p>\n<p>联想起之前看到的一篇文章，有人说他始终不相信努力奋斗的意义。然而努力奋斗的意义，真的只是为了赚钱，或者为了社会所认可的成功吗？</p>\n<p>我突然想起我日夜颠倒的那个死党，M。</p>\n<p>有一天周末晚上，他发来自己的封面设计，还没等我给出评价，他又说：“不行，我还得再改改。”其实我觉得已经很好了，可是他总是不满意。第二天中午他把改好的设计给我<br>看了看，然后语音另一边的他突然叹了口气。</p>\n<p>“你说，我们这样日夜颠倒，这么忙碌，到底是为了什么呢？”他问我。</p>\n<p>那时我想起一句，便对他说：“归根结底，我们之所以漂泊异地辛苦奋斗，是因为我们愿意。我们这么努力，不过是为了给自己一个交代。”</p>\n<p>就像那个跟我萍水相逢的姑娘打动我的那句话：“但是我尽力了，妈，我不后悔。”</p>\n<p>不知道为什么最近出现了很多文章说不相信努力的意义。然而这对于我来说似乎从来不是一个问题，努力从来不等于成功，而成功也从来不是终极目标。那些终极的梦想，其实是<br>很难以实现的。但在你追逐梦想的时候，你会找到一个更好的自己，一个沉默、努力、充实、安静的你自己，你会因为自己所做的事情而觉得充实。</p>\n<p>二</p>\n<p>我始终相信努力奋斗的意义，因为那是本质问题。我朋友曾经问我：“如果有一天你发现梦想始终没有实现，你会不会觉得很可怕。”</p>\n<p>我对他说：“没什么好可怕的。”</p>\n<p>他看着我说：“即使那些努力都没有回报？”</p>\n<p>我觉得<strong><em>努力就是努力的回报，付出就是付出的回报</em></strong>，写作就是写作的回报，画画就是画画的回报，唱歌就是唱歌的回报，一如我的死党所说，虽然每次觉得很累，但<br>当他看到自己的作品的时候，心里的兴奋和激动没有任何一样别的东西能够代替的了。</p>\n<p>如果你的努力能让自己做自己喜欢的事情，那为什么要放弃努力呢？如果人能够做自己喜欢的事情，谁说这样不是一种回报呢？</p>\n<p>我相信，任何人，不管他是个大人物还是小人物，只要做自己喜欢做的事情，他一定是开心的。只要为了自己想要做的事情努力，那一定会感到充实。相反，如果你的努力是为了<br>你不想要的东西，那你自然而然地会感到憋屈和不开心，进而怀疑努力的意义。</p>\n<p>如果你的努力不是为了自己喜欢的，自己想要的，那么请停下来问问自己是不是太急躁了。</p>\n<p>三</p>\n<p>曾经在山区里看到过天真无邪的孩子们念书的情境，正如那些文章里所说，这些孩子也许将来只能接过父母的活，在山区里继续着他艰苦的人生。然而他们却比很多比他们家境好<br>的人快乐许多，因为对于他们来说，念书就是念书的回报。</p>\n<p>一个在北京飘着的哥们曾跟我说，他也许这辈子也无法“逆袭”，也许那些高富帅们不需要怎么付出也能做出更好的成绩，但他还是决定继续漂泊，做一个奋斗的屌丝，他觉得这<br>样子值得，失败了也不会后悔，也算是给自己一个交代。</p>\n<p>你说登山的人为什么要登山？是因为山在那里，是因为他们无法言说那难以满足的渴望。</p>\n<p>为什么明知道梦想很难实现还是要去追逐？因为那是我们的渴望，因为我们不甘心，因为我们想要自己的生活能够多姿多彩，因为我们想要给自己一个交代，因为我们想要在我们<br>老去之后可以对孙辈说，你爷爷我曾经为了梦想义无反顾地努力过。</p>\n<p>诚然，也许奋斗了一辈子的屌丝也只是个屌丝，也许咸鱼翻身了也还不过是一个翻了面的咸鱼，但至少他们有做梦的自尊，而不是丢下一句努力无用心安理得地生活下去。</p>\n<p>你不应该担心你的生活即将结束，而应担心你的生活从未开始。</p>\n<p>其实我在追逐梦想的时候，早就意识到那些梦想很有可能不会实现，可是我还是决定去追逐。失败没有什么可怕的，<strong><em>可怕的是从来没有努力过还怡然自得地安慰自己</em></strong><br>，连一点点的懊悔都被麻木所掩盖下去。</p>\n<p>不能怕，没什么比自己背叛自己更可怕。</p>\n<p>四</p>\n<p>九把刀在书里说过：“<strong><em>有些梦想，纵使永远也没办法实现，纵使光是连说出来都很奢侈。但如果没有说出来温暖自己一下，就无法获得前进的动力。</em></strong>”</p>\n<p>人为什么要背负感情？是因为只有在人们面对这些痛楚之后，才能变得强大，才能在面对那些无能为力的自然规律的时候，更好地安慰他人。</p>\n<p>人为什么要背负梦想？是因为梦想这东西，即使你脆弱得随时会倒下，也没有人能夺走他。即使你真的是一条咸鱼，也没人能夺走你做梦的自由。</p>\n<p>所有的辉煌和伟大，一定伴随着挫折和跌倒，所有的辉煌背后都是一座座苦逼的高墙。谁没有一个不安稳的青春？没有一件事情可以一下子把你打垮，也不会有一件事情可以让你<br>一步登天，慢慢走，慢慢看，生命是一个慢慢累积的过程。</p>\n<p>有一个环卫工人，工作了几十年终于退休了，很多人觉得他活的很卑微，然而每天早起的他待人总是很温和，微笑示人，我觉得虽然他也许没能赚很多钱，但是他同样是伟大的。</p>\n<p>活得充实比获得成功更重要，而这正是努力的意义。</p>\n<p>五</p>\n<p>我常说，你是一个什么样的人，就会听到什么样的歌，看到什么样的文，写出什么样的字，遇到什么样的人。你能听到治愈的歌，看到温暖的文，写着倔强的文，遇到正好的人，<br>你会相信那些温暖、信念、坚持这样子看起来老掉牙的字眼，是因为你就是这样子的人。</p>\n<p>你相信梦想，梦想自然会相信你。千真万确。</p>\n<p>然而感情和梦想都是冷暖自知的事儿，你想要跟别人描述吧，还真不一定能描述的好，说不定你的一番苦闷在别人眼里显得莫明其妙。喜欢人家的是你又不是别人，别人再怎么出<br>谋划策，最后决策的不还是你；你的梦想是你自己的又不是别人的，可能在你眼里看来意义重大，在他们眼里无聊的根本不值一提。</p>\n<p>在很大的一部分时间里，你能依靠的只有你自己。所以，管他的呢，管别人怎么看，做自己想做的，努力到坚持不下去为止。</p>\n<p>也许你想要的未来在他们眼里不值一提，也许你一直在跌倒然后告诉自己要爬起来，也许你已经很努力了可还是有人不满意，也许你的理想离你的距离从来没有拉近过，但请你继<br>续向前走，因为别人看不到你背后的努力和付出，你却始终看得见自己。</p>\n<p>——摘自《读者》2014年第3期</p>\n","excerpt":"","more":"<p>作者：卢思浩 一</p>\n<p>从北京回家的动车上，偶然听到邻座的小姑娘边哭边打电话给家人，她说：“妈，对不起，本来说好了赚钱了才回家的……”她蜷坐在座位上，极力压制着自己的哭声，“但是我<br>尽力了，妈，我不后悔。”</p>\n<p>联想起之前看到的一篇文章，有人说他始终不相信努力奋斗的意义。然而努力奋斗的意义，真的只是为了赚钱，或者为了社会所认可的成功吗？</p>\n<p>我突然想起我日夜颠倒的那个死党，M。</p>\n<p>有一天周末晚上，他发来自己的封面设计，还没等我给出评价，他又说：“不行，我还得再改改。”其实我觉得已经很好了，可是他总是不满意。第二天中午他把改好的设计给我<br>看了看，然后语音另一边的他突然叹了口气。</p>\n<p>“你说，我们这样日夜颠倒，这么忙碌，到底是为了什么呢？”他问我。</p>\n<p>那时我想起一句，便对他说：“归根结底，我们之所以漂泊异地辛苦奋斗，是因为我们愿意。我们这么努力，不过是为了给自己一个交代。”</p>\n<p>就像那个跟我萍水相逢的姑娘打动我的那句话：“但是我尽力了，妈，我不后悔。”</p>\n<p>不知道为什么最近出现了很多文章说不相信努力的意义。然而这对于我来说似乎从来不是一个问题，努力从来不等于成功，而成功也从来不是终极目标。那些终极的梦想，其实是<br>很难以实现的。但在你追逐梦想的时候，你会找到一个更好的自己，一个沉默、努力、充实、安静的你自己，你会因为自己所做的事情而觉得充实。</p>\n<p>二</p>\n<p>我始终相信努力奋斗的意义，因为那是本质问题。我朋友曾经问我：“如果有一天你发现梦想始终没有实现，你会不会觉得很可怕。”</p>\n<p>我对他说：“没什么好可怕的。”</p>\n<p>他看着我说：“即使那些努力都没有回报？”</p>\n<p>我觉得<strong><em>努力就是努力的回报，付出就是付出的回报</em></strong>，写作就是写作的回报，画画就是画画的回报，唱歌就是唱歌的回报，一如我的死党所说，虽然每次觉得很累，但<br>当他看到自己的作品的时候，心里的兴奋和激动没有任何一样别的东西能够代替的了。</p>\n<p>如果你的努力能让自己做自己喜欢的事情，那为什么要放弃努力呢？如果人能够做自己喜欢的事情，谁说这样不是一种回报呢？</p>\n<p>我相信，任何人，不管他是个大人物还是小人物，只要做自己喜欢做的事情，他一定是开心的。只要为了自己想要做的事情努力，那一定会感到充实。相反，如果你的努力是为了<br>你不想要的东西，那你自然而然地会感到憋屈和不开心，进而怀疑努力的意义。</p>\n<p>如果你的努力不是为了自己喜欢的，自己想要的，那么请停下来问问自己是不是太急躁了。</p>\n<p>三</p>\n<p>曾经在山区里看到过天真无邪的孩子们念书的情境，正如那些文章里所说，这些孩子也许将来只能接过父母的活，在山区里继续着他艰苦的人生。然而他们却比很多比他们家境好<br>的人快乐许多，因为对于他们来说，念书就是念书的回报。</p>\n<p>一个在北京飘着的哥们曾跟我说，他也许这辈子也无法“逆袭”，也许那些高富帅们不需要怎么付出也能做出更好的成绩，但他还是决定继续漂泊，做一个奋斗的屌丝，他觉得这<br>样子值得，失败了也不会后悔，也算是给自己一个交代。</p>\n<p>你说登山的人为什么要登山？是因为山在那里，是因为他们无法言说那难以满足的渴望。</p>\n<p>为什么明知道梦想很难实现还是要去追逐？因为那是我们的渴望，因为我们不甘心，因为我们想要自己的生活能够多姿多彩，因为我们想要给自己一个交代，因为我们想要在我们<br>老去之后可以对孙辈说，你爷爷我曾经为了梦想义无反顾地努力过。</p>\n<p>诚然，也许奋斗了一辈子的屌丝也只是个屌丝，也许咸鱼翻身了也还不过是一个翻了面的咸鱼，但至少他们有做梦的自尊，而不是丢下一句努力无用心安理得地生活下去。</p>\n<p>你不应该担心你的生活即将结束，而应担心你的生活从未开始。</p>\n<p>其实我在追逐梦想的时候，早就意识到那些梦想很有可能不会实现，可是我还是决定去追逐。失败没有什么可怕的，<strong><em>可怕的是从来没有努力过还怡然自得地安慰自己</em></strong><br>，连一点点的懊悔都被麻木所掩盖下去。</p>\n<p>不能怕，没什么比自己背叛自己更可怕。</p>\n<p>四</p>\n<p>九把刀在书里说过：“<strong><em>有些梦想，纵使永远也没办法实现，纵使光是连说出来都很奢侈。但如果没有说出来温暖自己一下，就无法获得前进的动力。</em></strong>”</p>\n<p>人为什么要背负感情？是因为只有在人们面对这些痛楚之后，才能变得强大，才能在面对那些无能为力的自然规律的时候，更好地安慰他人。</p>\n<p>人为什么要背负梦想？是因为梦想这东西，即使你脆弱得随时会倒下，也没有人能夺走他。即使你真的是一条咸鱼，也没人能夺走你做梦的自由。</p>\n<p>所有的辉煌和伟大，一定伴随着挫折和跌倒，所有的辉煌背后都是一座座苦逼的高墙。谁没有一个不安稳的青春？没有一件事情可以一下子把你打垮，也不会有一件事情可以让你<br>一步登天，慢慢走，慢慢看，生命是一个慢慢累积的过程。</p>\n<p>有一个环卫工人，工作了几十年终于退休了，很多人觉得他活的很卑微，然而每天早起的他待人总是很温和，微笑示人，我觉得虽然他也许没能赚很多钱，但是他同样是伟大的。</p>\n<p>活得充实比获得成功更重要，而这正是努力的意义。</p>\n<p>五</p>\n<p>我常说，你是一个什么样的人，就会听到什么样的歌，看到什么样的文，写出什么样的字，遇到什么样的人。你能听到治愈的歌，看到温暖的文，写着倔强的文，遇到正好的人，<br>你会相信那些温暖、信念、坚持这样子看起来老掉牙的字眼，是因为你就是这样子的人。</p>\n<p>你相信梦想，梦想自然会相信你。千真万确。</p>\n<p>然而感情和梦想都是冷暖自知的事儿，你想要跟别人描述吧，还真不一定能描述的好，说不定你的一番苦闷在别人眼里显得莫明其妙。喜欢人家的是你又不是别人，别人再怎么出<br>谋划策，最后决策的不还是你；你的梦想是你自己的又不是别人的，可能在你眼里看来意义重大，在他们眼里无聊的根本不值一提。</p>\n<p>在很大的一部分时间里，你能依靠的只有你自己。所以，管他的呢，管别人怎么看，做自己想做的，努力到坚持不下去为止。</p>\n<p>也许你想要的未来在他们眼里不值一提，也许你一直在跌倒然后告诉自己要爬起来，也许你已经很努力了可还是有人不满意，也许你的理想离你的距离从来没有拉近过，但请你继<br>续向前走，因为别人看不到你背后的努力和付出，你却始终看得见自己。</p>\n<p>——摘自《读者》2014年第3期</p>\n"},{"title":"故乡，我可能真的回不来了","date":"2016-02-17T13:49:29.000Z","_content":"今年情人节，和女朋友相约去最近的一个县城玩儿，但其中发生了各种不愉快，不过还好女朋友现在越来越像我了，遇到事情不会抱怨太久。又要离开家乡了，仔细想想这个寒假的种种经历，我想，可能，我再也回不来家乡了。\n\n这里的回不来，不是指不回来，而是，我已经完全不适合在家乡生存了。我从大学一进城就发现，家乡的生存成本比城里高出了不知道多少倍，父母却总是不信。在家乡人眼里，城市依然是一个吃顿饭就会不小心花上几百上千的地方。然而，他们所不知道的是，农村因为信息的阻塞和大家生活水平的相对提高，物价可能比城市更高，至少在我眼里是这样的。城里有团购软件，你可以选择离你最近的地方，然后点你最想吃的餐，这些你都可以通过一个手机APP找到，并且全都明码标价，绝对不会作出宰客这种事情。如果你对商家提供的服务有一点点的不满意，你随时可以给一个差评或者直接向APP投诉，不出24小时基本上你的诉求都能得到回应。\n\n我嫂子前几天去银行改手机号码，结果银行服务人员脾气太差，她直接被吓回来了，我就跟她说下次带我一起去，她一发脾气，我立马举报，如果举报不行，那就找12315投诉。同样，我另一个在城里待过几年的嫂子，想要将城里暂时用不到的宽带转移到家里来却被各种拖延，当时眼看对方要发脾气，立马说了一句，“你再不搞好我就投诉你”，对方立马焉了，我多么想看看服务员当时的面部表情。家乡的人由于信息闭塞与教育落后，真的受了太多的“欺负”，他们不知道还有这么多的合法渠道来维护自己的合理的权益，导致这里的不良商家像上帝一样对待顾客，不过这里，商家才是上帝。同样关于维权的，前几年，我家的电压一直不稳定，电力局一直说要解决，但是一直不见行动，当时的我十分气愤，给市长信箱写了邮件，第二天，一伙人赶来我家检查，最后还要我签字确认。不是我这人较真，我只是觉得，我付出了金钱，就应该享受这些服务，而且在我付钱的时候他们也都承诺过要给予这些服务的。包括12315这样的组织，我们虽然没有直接交钱，但是我们的税收里肯定包含了这些的，所以有问题不能解决，那我就找12315。\n\n情人节去邻县看电影，整个县城两个电影院，我们去的中心那个，另一个在城边上，几乎没人会去那里。可是，居然有电影院不能网上团购选座，把我弄郁闷了。于是我们就自己走去购买，12点买到了下午2点的票，而且是最后几个位置，当然是第一排的边上了，2点去看电影的时候电影院简直人满为患，据说现在买到的都到晚上八点后的了。看电影的时候我惊奇地发现，屏幕咋那么小，而且屏幕边缘那些褶皱是什么鬼。总之，体验超级不好，还不能给差评。邻县的交通也是乱得无法形容，基本上是人和车都在抢道，没办法，人让了就过不了马路，车让了也过不了马路，政府也没办法，人流量大的地方正好车流量也大，设个红绿灯还不如不设呢。中午吃饭，这里居然有三顾冒菜，但是，价钱呢，怎么没标识，想着也没有团购吧。这里的出租车据说跑城内都很有可能不打表的，不过在这里我一般不坐出租车，毕竟公交车只要1元，虽然我不知道司机哪儿有那么多急刹车要踩。\n\n这里的人际关系之复杂，与城里简直是天壤之别。简单地说，在大城市，有能力就可以，而在小地方，有关系，没能力你也可以。在这里无论做什么，你都得先想想，对方可能是你的某个亲戚或者某个亲戚的亲戚。比如去年，我一个大姨被一酒驾人员擦到了，由于年岁已高，当时就倒地不起，那人居然肇事逃逸了。之后家人居然叫我们不急打110。我是完全无法理解的。直到我大姨被送到医院，那人始终未出面，而那些大人们却一直在联系认识肇事人的亲戚过来。最后我们中有年轻人报了警，但是警察来的时候，那亲戚也来了，然后，就叫警察回去了，当时看得我是目瞪口呆的。最后，这件事也在一顿饭中不了了之了。对于肇事逃逸那个人，我只想说，幸亏你身在这儿，不然早就进监狱了。\n\n再来说说家乡的酒桌文化和面子文化。为什么有人要把劝酒视为一种传统文化而世代相传呢，连七八岁的小孩都觉得，不喝酒怎么行，不喝酒怎么在社会上走。有些人劝起酒来，给我这种不喝酒的人的感受就是，不把你灌醉就是我照顾不周，而你不喝酒的话，那更严重，那就是不给我面子。面对这种人，我就有多远滚多远吧。我说我不能喝酒，我说我高血压，结果还非要我喝，你连我的命都不要，还奢求我给你什么面子，再说，我不想喝你偏要我喝，这到底是谁不给谁面子。当然，家乡的送礼文化我倒觉得没什么，一般也就送一些奶、火炮什么的，一般是你送给我多少，下次我就还给你多少，这个虽然也是有点麻烦，但是毕竟不会劳民伤财嘛。当然，请一定要记住，千万不要少给或者不给，不然的话，背地里一定会到处说的，你永远也不知道在家乡，一张嘴的传播速度与互联网的传播能力速度哪个更快。\n\n我知道，家乡生我养我，我或许不该说得这么过分，但是现在，我真的越来越不懂家乡了。\n","source":"_posts/bye-myhome.md","raw":"---\ntitle: \"故乡，我可能真的回不来了\"\ndate: 2016-02-17 21:49:29\ncategories: 边走边想\n---\n今年情人节，和女朋友相约去最近的一个县城玩儿，但其中发生了各种不愉快，不过还好女朋友现在越来越像我了，遇到事情不会抱怨太久。又要离开家乡了，仔细想想这个寒假的种种经历，我想，可能，我再也回不来家乡了。\n\n这里的回不来，不是指不回来，而是，我已经完全不适合在家乡生存了。我从大学一进城就发现，家乡的生存成本比城里高出了不知道多少倍，父母却总是不信。在家乡人眼里，城市依然是一个吃顿饭就会不小心花上几百上千的地方。然而，他们所不知道的是，农村因为信息的阻塞和大家生活水平的相对提高，物价可能比城市更高，至少在我眼里是这样的。城里有团购软件，你可以选择离你最近的地方，然后点你最想吃的餐，这些你都可以通过一个手机APP找到，并且全都明码标价，绝对不会作出宰客这种事情。如果你对商家提供的服务有一点点的不满意，你随时可以给一个差评或者直接向APP投诉，不出24小时基本上你的诉求都能得到回应。\n\n我嫂子前几天去银行改手机号码，结果银行服务人员脾气太差，她直接被吓回来了，我就跟她说下次带我一起去，她一发脾气，我立马举报，如果举报不行，那就找12315投诉。同样，我另一个在城里待过几年的嫂子，想要将城里暂时用不到的宽带转移到家里来却被各种拖延，当时眼看对方要发脾气，立马说了一句，“你再不搞好我就投诉你”，对方立马焉了，我多么想看看服务员当时的面部表情。家乡的人由于信息闭塞与教育落后，真的受了太多的“欺负”，他们不知道还有这么多的合法渠道来维护自己的合理的权益，导致这里的不良商家像上帝一样对待顾客，不过这里，商家才是上帝。同样关于维权的，前几年，我家的电压一直不稳定，电力局一直说要解决，但是一直不见行动，当时的我十分气愤，给市长信箱写了邮件，第二天，一伙人赶来我家检查，最后还要我签字确认。不是我这人较真，我只是觉得，我付出了金钱，就应该享受这些服务，而且在我付钱的时候他们也都承诺过要给予这些服务的。包括12315这样的组织，我们虽然没有直接交钱，但是我们的税收里肯定包含了这些的，所以有问题不能解决，那我就找12315。\n\n情人节去邻县看电影，整个县城两个电影院，我们去的中心那个，另一个在城边上，几乎没人会去那里。可是，居然有电影院不能网上团购选座，把我弄郁闷了。于是我们就自己走去购买，12点买到了下午2点的票，而且是最后几个位置，当然是第一排的边上了，2点去看电影的时候电影院简直人满为患，据说现在买到的都到晚上八点后的了。看电影的时候我惊奇地发现，屏幕咋那么小，而且屏幕边缘那些褶皱是什么鬼。总之，体验超级不好，还不能给差评。邻县的交通也是乱得无法形容，基本上是人和车都在抢道，没办法，人让了就过不了马路，车让了也过不了马路，政府也没办法，人流量大的地方正好车流量也大，设个红绿灯还不如不设呢。中午吃饭，这里居然有三顾冒菜，但是，价钱呢，怎么没标识，想着也没有团购吧。这里的出租车据说跑城内都很有可能不打表的，不过在这里我一般不坐出租车，毕竟公交车只要1元，虽然我不知道司机哪儿有那么多急刹车要踩。\n\n这里的人际关系之复杂，与城里简直是天壤之别。简单地说，在大城市，有能力就可以，而在小地方，有关系，没能力你也可以。在这里无论做什么，你都得先想想，对方可能是你的某个亲戚或者某个亲戚的亲戚。比如去年，我一个大姨被一酒驾人员擦到了，由于年岁已高，当时就倒地不起，那人居然肇事逃逸了。之后家人居然叫我们不急打110。我是完全无法理解的。直到我大姨被送到医院，那人始终未出面，而那些大人们却一直在联系认识肇事人的亲戚过来。最后我们中有年轻人报了警，但是警察来的时候，那亲戚也来了，然后，就叫警察回去了，当时看得我是目瞪口呆的。最后，这件事也在一顿饭中不了了之了。对于肇事逃逸那个人，我只想说，幸亏你身在这儿，不然早就进监狱了。\n\n再来说说家乡的酒桌文化和面子文化。为什么有人要把劝酒视为一种传统文化而世代相传呢，连七八岁的小孩都觉得，不喝酒怎么行，不喝酒怎么在社会上走。有些人劝起酒来，给我这种不喝酒的人的感受就是，不把你灌醉就是我照顾不周，而你不喝酒的话，那更严重，那就是不给我面子。面对这种人，我就有多远滚多远吧。我说我不能喝酒，我说我高血压，结果还非要我喝，你连我的命都不要，还奢求我给你什么面子，再说，我不想喝你偏要我喝，这到底是谁不给谁面子。当然，家乡的送礼文化我倒觉得没什么，一般也就送一些奶、火炮什么的，一般是你送给我多少，下次我就还给你多少，这个虽然也是有点麻烦，但是毕竟不会劳民伤财嘛。当然，请一定要记住，千万不要少给或者不给，不然的话，背地里一定会到处说的，你永远也不知道在家乡，一张嘴的传播速度与互联网的传播能力速度哪个更快。\n\n我知道，家乡生我养我，我或许不该说得这么过分，但是现在，我真的越来越不懂家乡了。\n","slug":"bye-myhome","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p4y00129vnz82jvcvjl","content":"<p>今年情人节，和女朋友相约去最近的一个县城玩儿，但其中发生了各种不愉快，不过还好女朋友现在越来越像我了，遇到事情不会抱怨太久。又要离开家乡了，仔细想想这个寒假的种种经历，我想，可能，我再也回不来家乡了。</p>\n<p>这里的回不来，不是指不回来，而是，我已经完全不适合在家乡生存了。我从大学一进城就发现，家乡的生存成本比城里高出了不知道多少倍，父母却总是不信。在家乡人眼里，城市依然是一个吃顿饭就会不小心花上几百上千的地方。然而，他们所不知道的是，农村因为信息的阻塞和大家生活水平的相对提高，物价可能比城市更高，至少在我眼里是这样的。城里有团购软件，你可以选择离你最近的地方，然后点你最想吃的餐，这些你都可以通过一个手机APP找到，并且全都明码标价，绝对不会作出宰客这种事情。如果你对商家提供的服务有一点点的不满意，你随时可以给一个差评或者直接向APP投诉，不出24小时基本上你的诉求都能得到回应。</p>\n<p>我嫂子前几天去银行改手机号码，结果银行服务人员脾气太差，她直接被吓回来了，我就跟她说下次带我一起去，她一发脾气，我立马举报，如果举报不行，那就找12315投诉。同样，我另一个在城里待过几年的嫂子，想要将城里暂时用不到的宽带转移到家里来却被各种拖延，当时眼看对方要发脾气，立马说了一句，“你再不搞好我就投诉你”，对方立马焉了，我多么想看看服务员当时的面部表情。家乡的人由于信息闭塞与教育落后，真的受了太多的“欺负”，他们不知道还有这么多的合法渠道来维护自己的合理的权益，导致这里的不良商家像上帝一样对待顾客，不过这里，商家才是上帝。同样关于维权的，前几年，我家的电压一直不稳定，电力局一直说要解决，但是一直不见行动，当时的我十分气愤，给市长信箱写了邮件，第二天，一伙人赶来我家检查，最后还要我签字确认。不是我这人较真，我只是觉得，我付出了金钱，就应该享受这些服务，而且在我付钱的时候他们也都承诺过要给予这些服务的。包括12315这样的组织，我们虽然没有直接交钱，但是我们的税收里肯定包含了这些的，所以有问题不能解决，那我就找12315。</p>\n<p>情人节去邻县看电影，整个县城两个电影院，我们去的中心那个，另一个在城边上，几乎没人会去那里。可是，居然有电影院不能网上团购选座，把我弄郁闷了。于是我们就自己走去购买，12点买到了下午2点的票，而且是最后几个位置，当然是第一排的边上了，2点去看电影的时候电影院简直人满为患，据说现在买到的都到晚上八点后的了。看电影的时候我惊奇地发现，屏幕咋那么小，而且屏幕边缘那些褶皱是什么鬼。总之，体验超级不好，还不能给差评。邻县的交通也是乱得无法形容，基本上是人和车都在抢道，没办法，人让了就过不了马路，车让了也过不了马路，政府也没办法，人流量大的地方正好车流量也大，设个红绿灯还不如不设呢。中午吃饭，这里居然有三顾冒菜，但是，价钱呢，怎么没标识，想着也没有团购吧。这里的出租车据说跑城内都很有可能不打表的，不过在这里我一般不坐出租车，毕竟公交车只要1元，虽然我不知道司机哪儿有那么多急刹车要踩。</p>\n<p>这里的人际关系之复杂，与城里简直是天壤之别。简单地说，在大城市，有能力就可以，而在小地方，有关系，没能力你也可以。在这里无论做什么，你都得先想想，对方可能是你的某个亲戚或者某个亲戚的亲戚。比如去年，我一个大姨被一酒驾人员擦到了，由于年岁已高，当时就倒地不起，那人居然肇事逃逸了。之后家人居然叫我们不急打110。我是完全无法理解的。直到我大姨被送到医院，那人始终未出面，而那些大人们却一直在联系认识肇事人的亲戚过来。最后我们中有年轻人报了警，但是警察来的时候，那亲戚也来了，然后，就叫警察回去了，当时看得我是目瞪口呆的。最后，这件事也在一顿饭中不了了之了。对于肇事逃逸那个人，我只想说，幸亏你身在这儿，不然早就进监狱了。</p>\n<p>再来说说家乡的酒桌文化和面子文化。为什么有人要把劝酒视为一种传统文化而世代相传呢，连七八岁的小孩都觉得，不喝酒怎么行，不喝酒怎么在社会上走。有些人劝起酒来，给我这种不喝酒的人的感受就是，不把你灌醉就是我照顾不周，而你不喝酒的话，那更严重，那就是不给我面子。面对这种人，我就有多远滚多远吧。我说我不能喝酒，我说我高血压，结果还非要我喝，你连我的命都不要，还奢求我给你什么面子，再说，我不想喝你偏要我喝，这到底是谁不给谁面子。当然，家乡的送礼文化我倒觉得没什么，一般也就送一些奶、火炮什么的，一般是你送给我多少，下次我就还给你多少，这个虽然也是有点麻烦，但是毕竟不会劳民伤财嘛。当然，请一定要记住，千万不要少给或者不给，不然的话，背地里一定会到处说的，你永远也不知道在家乡，一张嘴的传播速度与互联网的传播能力速度哪个更快。</p>\n<p>我知道，家乡生我养我，我或许不该说得这么过分，但是现在，我真的越来越不懂家乡了。</p>\n","excerpt":"","more":"<p>今年情人节，和女朋友相约去最近的一个县城玩儿，但其中发生了各种不愉快，不过还好女朋友现在越来越像我了，遇到事情不会抱怨太久。又要离开家乡了，仔细想想这个寒假的种种经历，我想，可能，我再也回不来家乡了。</p>\n<p>这里的回不来，不是指不回来，而是，我已经完全不适合在家乡生存了。我从大学一进城就发现，家乡的生存成本比城里高出了不知道多少倍，父母却总是不信。在家乡人眼里，城市依然是一个吃顿饭就会不小心花上几百上千的地方。然而，他们所不知道的是，农村因为信息的阻塞和大家生活水平的相对提高，物价可能比城市更高，至少在我眼里是这样的。城里有团购软件，你可以选择离你最近的地方，然后点你最想吃的餐，这些你都可以通过一个手机APP找到，并且全都明码标价，绝对不会作出宰客这种事情。如果你对商家提供的服务有一点点的不满意，你随时可以给一个差评或者直接向APP投诉，不出24小时基本上你的诉求都能得到回应。</p>\n<p>我嫂子前几天去银行改手机号码，结果银行服务人员脾气太差，她直接被吓回来了，我就跟她说下次带我一起去，她一发脾气，我立马举报，如果举报不行，那就找12315投诉。同样，我另一个在城里待过几年的嫂子，想要将城里暂时用不到的宽带转移到家里来却被各种拖延，当时眼看对方要发脾气，立马说了一句，“你再不搞好我就投诉你”，对方立马焉了，我多么想看看服务员当时的面部表情。家乡的人由于信息闭塞与教育落后，真的受了太多的“欺负”，他们不知道还有这么多的合法渠道来维护自己的合理的权益，导致这里的不良商家像上帝一样对待顾客，不过这里，商家才是上帝。同样关于维权的，前几年，我家的电压一直不稳定，电力局一直说要解决，但是一直不见行动，当时的我十分气愤，给市长信箱写了邮件，第二天，一伙人赶来我家检查，最后还要我签字确认。不是我这人较真，我只是觉得，我付出了金钱，就应该享受这些服务，而且在我付钱的时候他们也都承诺过要给予这些服务的。包括12315这样的组织，我们虽然没有直接交钱，但是我们的税收里肯定包含了这些的，所以有问题不能解决，那我就找12315。</p>\n<p>情人节去邻县看电影，整个县城两个电影院，我们去的中心那个，另一个在城边上，几乎没人会去那里。可是，居然有电影院不能网上团购选座，把我弄郁闷了。于是我们就自己走去购买，12点买到了下午2点的票，而且是最后几个位置，当然是第一排的边上了，2点去看电影的时候电影院简直人满为患，据说现在买到的都到晚上八点后的了。看电影的时候我惊奇地发现，屏幕咋那么小，而且屏幕边缘那些褶皱是什么鬼。总之，体验超级不好，还不能给差评。邻县的交通也是乱得无法形容，基本上是人和车都在抢道，没办法，人让了就过不了马路，车让了也过不了马路，政府也没办法，人流量大的地方正好车流量也大，设个红绿灯还不如不设呢。中午吃饭，这里居然有三顾冒菜，但是，价钱呢，怎么没标识，想着也没有团购吧。这里的出租车据说跑城内都很有可能不打表的，不过在这里我一般不坐出租车，毕竟公交车只要1元，虽然我不知道司机哪儿有那么多急刹车要踩。</p>\n<p>这里的人际关系之复杂，与城里简直是天壤之别。简单地说，在大城市，有能力就可以，而在小地方，有关系，没能力你也可以。在这里无论做什么，你都得先想想，对方可能是你的某个亲戚或者某个亲戚的亲戚。比如去年，我一个大姨被一酒驾人员擦到了，由于年岁已高，当时就倒地不起，那人居然肇事逃逸了。之后家人居然叫我们不急打110。我是完全无法理解的。直到我大姨被送到医院，那人始终未出面，而那些大人们却一直在联系认识肇事人的亲戚过来。最后我们中有年轻人报了警，但是警察来的时候，那亲戚也来了，然后，就叫警察回去了，当时看得我是目瞪口呆的。最后，这件事也在一顿饭中不了了之了。对于肇事逃逸那个人，我只想说，幸亏你身在这儿，不然早就进监狱了。</p>\n<p>再来说说家乡的酒桌文化和面子文化。为什么有人要把劝酒视为一种传统文化而世代相传呢，连七八岁的小孩都觉得，不喝酒怎么行，不喝酒怎么在社会上走。有些人劝起酒来，给我这种不喝酒的人的感受就是，不把你灌醉就是我照顾不周，而你不喝酒的话，那更严重，那就是不给我面子。面对这种人，我就有多远滚多远吧。我说我不能喝酒，我说我高血压，结果还非要我喝，你连我的命都不要，还奢求我给你什么面子，再说，我不想喝你偏要我喝，这到底是谁不给谁面子。当然，家乡的送礼文化我倒觉得没什么，一般也就送一些奶、火炮什么的，一般是你送给我多少，下次我就还给你多少，这个虽然也是有点麻烦，但是毕竟不会劳民伤财嘛。当然，请一定要记住，千万不要少给或者不给，不然的话，背地里一定会到处说的，你永远也不知道在家乡，一张嘴的传播速度与互联网的传播能力速度哪个更快。</p>\n<p>我知道，家乡生我养我，我或许不该说得这么过分，但是现在，我真的越来越不懂家乡了。</p>\n"},{"title":"各种数据库的应用场景","date":"2015-12-06T23:48:21.000Z","_content":"  * # **Redis**\n\n统计：比如行为指标、点击量统计、访问量统计、排行榜、最新或最高的N个数据等  \n缓存：会话缓存，页面缓存，全局变量缓存  \n队列：队列服务  \n过期：需要设置过期时间的数据\n\n  * # **MongoDB**\n\n\n文本：日志、文章等\n\n  *   \n","source":"_posts/database-application-scenarios.md","raw":"---\ntitle: \"各种数据库的应用场景\"\ndate: 2015-12-07 07:48:21\ncategories: 编程之路\n---\n  * # **Redis**\n\n统计：比如行为指标、点击量统计、访问量统计、排行榜、最新或最高的N个数据等  \n缓存：会话缓存，页面缓存，全局变量缓存  \n队列：队列服务  \n过期：需要设置过期时间的数据\n\n  * # **MongoDB**\n\n\n文本：日志、文章等\n\n  *   \n","slug":"database-application-scenarios","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5000149vnz9as8mqks","content":"<ul>\n<li><h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a><strong>Redis</strong></h1></li>\n</ul>\n<p>统计：比如行为指标、点击量统计、访问量统计、排行榜、最新或最高的N个数据等<br>缓存：会话缓存，页面缓存，全局变量缓存<br>队列：队列服务<br>过期：需要设置过期时间的数据</p>\n<ul>\n<li><h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a><strong>MongoDB</strong></h1></li>\n</ul>\n<p>文本：日志、文章等</p>\n<ul>\n<li></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a><strong>Redis</strong></h1></li>\n</ul>\n<p>统计：比如行为指标、点击量统计、访问量统计、排行榜、最新或最高的N个数据等<br>缓存：会话缓存，页面缓存，全局变量缓存<br>队列：队列服务<br>过期：需要设置过期时间的数据</p>\n<ul>\n<li><h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a><strong>MongoDB</strong></h1></li>\n</ul>\n<p>文本：日志、文章等</p>\n<ul>\n<li></li>\n</ul>\n"},{"title":"《一个程序员的奋斗史》——在现实与杯具中生存，在逆境与梦想中成长","date":"2014-09-14T15:32:40.000Z","_content":"作者：[莫雨](http://blog.csdn.net/norains)\n\n这本书与其说是一本小说，不如说是作者自己奋斗历程的回忆录，书的全名叫：那些年啊，那些事——一个程序员的奋斗史》。\n\n这本书和《[程序员法则](http://haofly.net/startfly/)》一样，是我计算机之路的启蒙之书，没有他们，或许我不会走上计算机这条路，因\n为有了他们，我才能走得更加积极，更加踏实。这本书和《程序员法则》不一样，其主人公段伏枥并不是什么天才，而是大四毕业了都还只是对计算机入门的一个毕业生，并且毕\n业的时候并没有找到什么工作，而是远走他乡，来到繁华的深圳。在经历了几个小公司，遇见了几个坑爹的老板，学习了大量的技术后最终磨练成了一个真正意义上的高手。\n\n其实有时候我也想要有这样的人生，所以有时候会想快点离开学校，真正去社会闯荡。现在的我，社交不行，技术不行，每天都很努力的学习，但还是感觉进步不大，或许真正去\n企业实习才能学到我想要的东西。我知道社会上一定有很多很多的困难挫折，从小的教育告诉我，在学校不好好学习，在学校是绝对混不走的，哪怕我现在都还在坚信着自己能够\n承担那些苦，但，没人相信。进入大三的我，虽然对未来也有一定的迷茫和恐惧，但我还是会选择一步一步地踏踏实实的走下去，保持现有的信心。是坨屎，总会臭的！\n\n在这里，有必要提出作者在书中所提到的关于程序员的一些观点。首先，程序员必须不断学习，这既是不幸的又是万幸的，我很喜欢这个行业，永远都有学不完的东西，有时候感\n觉自己脑袋里的东西不够用了，那就学呗，学习的资源和方法都多种多样。而且现在的我也坚信，我已经有了不低于段伏枥的学习能力，能够在短时间内学习一项新的技术。其次\n，程序员不像其它的行业一样，不用担心徒弟超过师傅，在什么都不会的时候，我们要虚心求教，在会了的时候，我们更要将学到的主动传授给不懂的人，就因为此，我才经常在\nQQ群里回答一些初学者的问题，并在回答的时候教会他们以后要怎样判断错误的位置以及如何自己处理错误，不过我不大逛贴吧和其它论坛的，因为我感觉里面高手都挺多，我\n也就没有发挥的地方了，呵呵。\n\n最后，请所有程序员都能热爱这个行业，还记得当初向世界说的那句“**我要做程序员**”吗？\n\n语录\n\n**是坨屎总会臭的**\n\n**作为一个程序员，其实是不幸的，同时也是幸运的：不幸在于，在这个行业中，一定要保持积极不倦的学习态度，不能倦怠，否则就会不适应技术的发展要求；幸运的是，做这行能够接触很多新鲜的东西，不会有别的行业一成不变的死气沉沉。更为有意思的是，经验在这行业中绝对不能生搬硬套，比如以前写DOS程序，限于内存的大小，编程的建议是在一个函数中尽可能一个变量复用；而到处理器和内存飞速发展的现在，却编程哪里用到变量才声明，并且最好给予不同用途的变量于不同的名称，这是因为一两个变量的大小相对于如今的内存容量已经是微乎其微，现在更看重的是代码的可读性。**\n\n**其实对于程序员来说，绝对不能拘于形式。最重要的是明确自己的目标，需要达到什么样的目的，至于使用什么手段，这不是所关心的。**\n\n**对于技术书籍，看了还有希望，不看就只剩下绝望。很多初学者开始看技术书籍的态度是不正确的，拿起一本书，翻几下，发现不懂，便放下了，心里想着等以后能看懂了再看。其实这是一个伪命题，如果都懂了，那还看这书干什么？其实陶潜所说的“好读书，不求甚解”是非常有道理的。对于一个初学者来说，当让开始一个从来没接触过的东西时，他绝对是一片茫然，无从下手，甚至于借助搜索引擎也不知道该用什么关键字；而如果以前有看过相关的书籍资料，虽然自己根本就没记住任何内容，但至少知道在哪里看过，这时候只要按照印象去搜寻，绝对比盲目搜索更为有效。**\n\n**程序员是不幸的，因为只要还继续待在这行业，那么就必须一直在学习，永无止境；程序员又是幸福的，因为这行业永远不会有尽头，永远不会有学完东西的时候，只要不停下前进的不发，那么就不会担心被取代。**\n\n**为什么俗话说一个成功的男人背后一定有一个女人？因为事业上有困难，有兄弟帮忙，一起度过难关；但如果心里不爽，需要找一个人倾诉，那绝对只能找一个女人，至少她不会一边听一边想打瞌睡。**\n\n**对于一个人的感情来说，最可怕的并不是遇不到合适的而你，而是不知道遇上了合适的人。而这一切都因为这人不知道自己需要什么，既然不知道自己需要什么，那么一份美好姻缘摆在面前自然也是视而不见了。**\n\n**以前不知道回来能干什么，而现在依然还是不知道，在自己生长的家乡居然不知道如何生存下去，真是个残酷的笑话。**\n","source":"_posts/chengxuyuandefendoushi.md","raw":"---\ntitle: \"《一个程序员的奋斗史》——在现实与杯具中生存，在逆境与梦想中成长\"\ndate: 2014-09-14 23:32:40\ncategories: 韦编三绝\n---\n作者：[莫雨](http://blog.csdn.net/norains)\n\n这本书与其说是一本小说，不如说是作者自己奋斗历程的回忆录，书的全名叫：那些年啊，那些事——一个程序员的奋斗史》。\n\n这本书和《[程序员法则](http://haofly.net/startfly/)》一样，是我计算机之路的启蒙之书，没有他们，或许我不会走上计算机这条路，因\n为有了他们，我才能走得更加积极，更加踏实。这本书和《程序员法则》不一样，其主人公段伏枥并不是什么天才，而是大四毕业了都还只是对计算机入门的一个毕业生，并且毕\n业的时候并没有找到什么工作，而是远走他乡，来到繁华的深圳。在经历了几个小公司，遇见了几个坑爹的老板，学习了大量的技术后最终磨练成了一个真正意义上的高手。\n\n其实有时候我也想要有这样的人生，所以有时候会想快点离开学校，真正去社会闯荡。现在的我，社交不行，技术不行，每天都很努力的学习，但还是感觉进步不大，或许真正去\n企业实习才能学到我想要的东西。我知道社会上一定有很多很多的困难挫折，从小的教育告诉我，在学校不好好学习，在学校是绝对混不走的，哪怕我现在都还在坚信着自己能够\n承担那些苦，但，没人相信。进入大三的我，虽然对未来也有一定的迷茫和恐惧，但我还是会选择一步一步地踏踏实实的走下去，保持现有的信心。是坨屎，总会臭的！\n\n在这里，有必要提出作者在书中所提到的关于程序员的一些观点。首先，程序员必须不断学习，这既是不幸的又是万幸的，我很喜欢这个行业，永远都有学不完的东西，有时候感\n觉自己脑袋里的东西不够用了，那就学呗，学习的资源和方法都多种多样。而且现在的我也坚信，我已经有了不低于段伏枥的学习能力，能够在短时间内学习一项新的技术。其次\n，程序员不像其它的行业一样，不用担心徒弟超过师傅，在什么都不会的时候，我们要虚心求教，在会了的时候，我们更要将学到的主动传授给不懂的人，就因为此，我才经常在\nQQ群里回答一些初学者的问题，并在回答的时候教会他们以后要怎样判断错误的位置以及如何自己处理错误，不过我不大逛贴吧和其它论坛的，因为我感觉里面高手都挺多，我\n也就没有发挥的地方了，呵呵。\n\n最后，请所有程序员都能热爱这个行业，还记得当初向世界说的那句“**我要做程序员**”吗？\n\n语录\n\n**是坨屎总会臭的**\n\n**作为一个程序员，其实是不幸的，同时也是幸运的：不幸在于，在这个行业中，一定要保持积极不倦的学习态度，不能倦怠，否则就会不适应技术的发展要求；幸运的是，做这行能够接触很多新鲜的东西，不会有别的行业一成不变的死气沉沉。更为有意思的是，经验在这行业中绝对不能生搬硬套，比如以前写DOS程序，限于内存的大小，编程的建议是在一个函数中尽可能一个变量复用；而到处理器和内存飞速发展的现在，却编程哪里用到变量才声明，并且最好给予不同用途的变量于不同的名称，这是因为一两个变量的大小相对于如今的内存容量已经是微乎其微，现在更看重的是代码的可读性。**\n\n**其实对于程序员来说，绝对不能拘于形式。最重要的是明确自己的目标，需要达到什么样的目的，至于使用什么手段，这不是所关心的。**\n\n**对于技术书籍，看了还有希望，不看就只剩下绝望。很多初学者开始看技术书籍的态度是不正确的，拿起一本书，翻几下，发现不懂，便放下了，心里想着等以后能看懂了再看。其实这是一个伪命题，如果都懂了，那还看这书干什么？其实陶潜所说的“好读书，不求甚解”是非常有道理的。对于一个初学者来说，当让开始一个从来没接触过的东西时，他绝对是一片茫然，无从下手，甚至于借助搜索引擎也不知道该用什么关键字；而如果以前有看过相关的书籍资料，虽然自己根本就没记住任何内容，但至少知道在哪里看过，这时候只要按照印象去搜寻，绝对比盲目搜索更为有效。**\n\n**程序员是不幸的，因为只要还继续待在这行业，那么就必须一直在学习，永无止境；程序员又是幸福的，因为这行业永远不会有尽头，永远不会有学完东西的时候，只要不停下前进的不发，那么就不会担心被取代。**\n\n**为什么俗话说一个成功的男人背后一定有一个女人？因为事业上有困难，有兄弟帮忙，一起度过难关；但如果心里不爽，需要找一个人倾诉，那绝对只能找一个女人，至少她不会一边听一边想打瞌睡。**\n\n**对于一个人的感情来说，最可怕的并不是遇不到合适的而你，而是不知道遇上了合适的人。而这一切都因为这人不知道自己需要什么，既然不知道自己需要什么，那么一份美好姻缘摆在面前自然也是视而不见了。**\n\n**以前不知道回来能干什么，而现在依然还是不知道，在自己生长的家乡居然不知道如何生存下去，真是个残酷的笑话。**\n","slug":"chengxuyuandefendoushi","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5500169vnzv6en7qom","content":"<p>作者：<a href=\"http://blog.csdn.net/norains\" target=\"_blank\" rel=\"external\">莫雨</a></p>\n<p>这本书与其说是一本小说，不如说是作者自己奋斗历程的回忆录，书的全名叫：那些年啊，那些事——一个程序员的奋斗史》。</p>\n<p>这本书和《<a href=\"http://haofly.net/startfly/\">程序员法则</a>》一样，是我计算机之路的启蒙之书，没有他们，或许我不会走上计算机这条路，因<br>为有了他们，我才能走得更加积极，更加踏实。这本书和《程序员法则》不一样，其主人公段伏枥并不是什么天才，而是大四毕业了都还只是对计算机入门的一个毕业生，并且毕<br>业的时候并没有找到什么工作，而是远走他乡，来到繁华的深圳。在经历了几个小公司，遇见了几个坑爹的老板，学习了大量的技术后最终磨练成了一个真正意义上的高手。</p>\n<p>其实有时候我也想要有这样的人生，所以有时候会想快点离开学校，真正去社会闯荡。现在的我，社交不行，技术不行，每天都很努力的学习，但还是感觉进步不大，或许真正去<br>企业实习才能学到我想要的东西。我知道社会上一定有很多很多的困难挫折，从小的教育告诉我，在学校不好好学习，在学校是绝对混不走的，哪怕我现在都还在坚信着自己能够<br>承担那些苦，但，没人相信。进入大三的我，虽然对未来也有一定的迷茫和恐惧，但我还是会选择一步一步地踏踏实实的走下去，保持现有的信心。是坨屎，总会臭的！</p>\n<p>在这里，有必要提出作者在书中所提到的关于程序员的一些观点。首先，程序员必须不断学习，这既是不幸的又是万幸的，我很喜欢这个行业，永远都有学不完的东西，有时候感<br>觉自己脑袋里的东西不够用了，那就学呗，学习的资源和方法都多种多样。而且现在的我也坚信，我已经有了不低于段伏枥的学习能力，能够在短时间内学习一项新的技术。其次<br>，程序员不像其它的行业一样，不用担心徒弟超过师傅，在什么都不会的时候，我们要虚心求教，在会了的时候，我们更要将学到的主动传授给不懂的人，就因为此，我才经常在<br>QQ群里回答一些初学者的问题，并在回答的时候教会他们以后要怎样判断错误的位置以及如何自己处理错误，不过我不大逛贴吧和其它论坛的，因为我感觉里面高手都挺多，我<br>也就没有发挥的地方了，呵呵。</p>\n<p>最后，请所有程序员都能热爱这个行业，还记得当初向世界说的那句“<strong>我要做程序员</strong>”吗？</p>\n<p>语录</p>\n<p><strong>是坨屎总会臭的</strong></p>\n<p><strong>作为一个程序员，其实是不幸的，同时也是幸运的：不幸在于，在这个行业中，一定要保持积极不倦的学习态度，不能倦怠，否则就会不适应技术的发展要求；幸运的是，做这行能够接触很多新鲜的东西，不会有别的行业一成不变的死气沉沉。更为有意思的是，经验在这行业中绝对不能生搬硬套，比如以前写DOS程序，限于内存的大小，编程的建议是在一个函数中尽可能一个变量复用；而到处理器和内存飞速发展的现在，却编程哪里用到变量才声明，并且最好给予不同用途的变量于不同的名称，这是因为一两个变量的大小相对于如今的内存容量已经是微乎其微，现在更看重的是代码的可读性。</strong></p>\n<p><strong>其实对于程序员来说，绝对不能拘于形式。最重要的是明确自己的目标，需要达到什么样的目的，至于使用什么手段，这不是所关心的。</strong></p>\n<p><strong>对于技术书籍，看了还有希望，不看就只剩下绝望。很多初学者开始看技术书籍的态度是不正确的，拿起一本书，翻几下，发现不懂，便放下了，心里想着等以后能看懂了再看。其实这是一个伪命题，如果都懂了，那还看这书干什么？其实陶潜所说的“好读书，不求甚解”是非常有道理的。对于一个初学者来说，当让开始一个从来没接触过的东西时，他绝对是一片茫然，无从下手，甚至于借助搜索引擎也不知道该用什么关键字；而如果以前有看过相关的书籍资料，虽然自己根本就没记住任何内容，但至少知道在哪里看过，这时候只要按照印象去搜寻，绝对比盲目搜索更为有效。</strong></p>\n<p><strong>程序员是不幸的，因为只要还继续待在这行业，那么就必须一直在学习，永无止境；程序员又是幸福的，因为这行业永远不会有尽头，永远不会有学完东西的时候，只要不停下前进的不发，那么就不会担心被取代。</strong></p>\n<p><strong>为什么俗话说一个成功的男人背后一定有一个女人？因为事业上有困难，有兄弟帮忙，一起度过难关；但如果心里不爽，需要找一个人倾诉，那绝对只能找一个女人，至少她不会一边听一边想打瞌睡。</strong></p>\n<p><strong>对于一个人的感情来说，最可怕的并不是遇不到合适的而你，而是不知道遇上了合适的人。而这一切都因为这人不知道自己需要什么，既然不知道自己需要什么，那么一份美好姻缘摆在面前自然也是视而不见了。</strong></p>\n<p><strong>以前不知道回来能干什么，而现在依然还是不知道，在自己生长的家乡居然不知道如何生存下去，真是个残酷的笑话。</strong></p>\n","excerpt":"","more":"<p>作者：<a href=\"http://blog.csdn.net/norains\">莫雨</a></p>\n<p>这本书与其说是一本小说，不如说是作者自己奋斗历程的回忆录，书的全名叫：那些年啊，那些事——一个程序员的奋斗史》。</p>\n<p>这本书和《<a href=\"http://haofly.net/startfly/\">程序员法则</a>》一样，是我计算机之路的启蒙之书，没有他们，或许我不会走上计算机这条路，因<br>为有了他们，我才能走得更加积极，更加踏实。这本书和《程序员法则》不一样，其主人公段伏枥并不是什么天才，而是大四毕业了都还只是对计算机入门的一个毕业生，并且毕<br>业的时候并没有找到什么工作，而是远走他乡，来到繁华的深圳。在经历了几个小公司，遇见了几个坑爹的老板，学习了大量的技术后最终磨练成了一个真正意义上的高手。</p>\n<p>其实有时候我也想要有这样的人生，所以有时候会想快点离开学校，真正去社会闯荡。现在的我，社交不行，技术不行，每天都很努力的学习，但还是感觉进步不大，或许真正去<br>企业实习才能学到我想要的东西。我知道社会上一定有很多很多的困难挫折，从小的教育告诉我，在学校不好好学习，在学校是绝对混不走的，哪怕我现在都还在坚信着自己能够<br>承担那些苦，但，没人相信。进入大三的我，虽然对未来也有一定的迷茫和恐惧，但我还是会选择一步一步地踏踏实实的走下去，保持现有的信心。是坨屎，总会臭的！</p>\n<p>在这里，有必要提出作者在书中所提到的关于程序员的一些观点。首先，程序员必须不断学习，这既是不幸的又是万幸的，我很喜欢这个行业，永远都有学不完的东西，有时候感<br>觉自己脑袋里的东西不够用了，那就学呗，学习的资源和方法都多种多样。而且现在的我也坚信，我已经有了不低于段伏枥的学习能力，能够在短时间内学习一项新的技术。其次<br>，程序员不像其它的行业一样，不用担心徒弟超过师傅，在什么都不会的时候，我们要虚心求教，在会了的时候，我们更要将学到的主动传授给不懂的人，就因为此，我才经常在<br>QQ群里回答一些初学者的问题，并在回答的时候教会他们以后要怎样判断错误的位置以及如何自己处理错误，不过我不大逛贴吧和其它论坛的，因为我感觉里面高手都挺多，我<br>也就没有发挥的地方了，呵呵。</p>\n<p>最后，请所有程序员都能热爱这个行业，还记得当初向世界说的那句“<strong>我要做程序员</strong>”吗？</p>\n<p>语录</p>\n<p><strong>是坨屎总会臭的</strong></p>\n<p><strong>作为一个程序员，其实是不幸的，同时也是幸运的：不幸在于，在这个行业中，一定要保持积极不倦的学习态度，不能倦怠，否则就会不适应技术的发展要求；幸运的是，做这行能够接触很多新鲜的东西，不会有别的行业一成不变的死气沉沉。更为有意思的是，经验在这行业中绝对不能生搬硬套，比如以前写DOS程序，限于内存的大小，编程的建议是在一个函数中尽可能一个变量复用；而到处理器和内存飞速发展的现在，却编程哪里用到变量才声明，并且最好给予不同用途的变量于不同的名称，这是因为一两个变量的大小相对于如今的内存容量已经是微乎其微，现在更看重的是代码的可读性。</strong></p>\n<p><strong>其实对于程序员来说，绝对不能拘于形式。最重要的是明确自己的目标，需要达到什么样的目的，至于使用什么手段，这不是所关心的。</strong></p>\n<p><strong>对于技术书籍，看了还有希望，不看就只剩下绝望。很多初学者开始看技术书籍的态度是不正确的，拿起一本书，翻几下，发现不懂，便放下了，心里想着等以后能看懂了再看。其实这是一个伪命题，如果都懂了，那还看这书干什么？其实陶潜所说的“好读书，不求甚解”是非常有道理的。对于一个初学者来说，当让开始一个从来没接触过的东西时，他绝对是一片茫然，无从下手，甚至于借助搜索引擎也不知道该用什么关键字；而如果以前有看过相关的书籍资料，虽然自己根本就没记住任何内容，但至少知道在哪里看过，这时候只要按照印象去搜寻，绝对比盲目搜索更为有效。</strong></p>\n<p><strong>程序员是不幸的，因为只要还继续待在这行业，那么就必须一直在学习，永无止境；程序员又是幸福的，因为这行业永远不会有尽头，永远不会有学完东西的时候，只要不停下前进的不发，那么就不会担心被取代。</strong></p>\n<p><strong>为什么俗话说一个成功的男人背后一定有一个女人？因为事业上有困难，有兄弟帮忙，一起度过难关；但如果心里不爽，需要找一个人倾诉，那绝对只能找一个女人，至少她不会一边听一边想打瞌睡。</strong></p>\n<p><strong>对于一个人的感情来说，最可怕的并不是遇不到合适的而你，而是不知道遇上了合适的人。而这一切都因为这人不知道自己需要什么，既然不知道自己需要什么，那么一份美好姻缘摆在面前自然也是视而不见了。</strong></p>\n<p><strong>以前不知道回来能干什么，而现在依然还是不知道，在自己生长的家乡居然不知道如何生存下去，真是个残酷的笑话。</strong></p>\n"},{"title":"《程序员健康指南》——以编程的方式去维护健康","date":"2015-05-09T02:56:43.000Z","_content":"其实最先写这篇读后感我是拒绝的，因为关于健康的书看多了，感觉都差不多，但当我回过头来翻看的时候，发现这本书有很多的观点都是需要深深体会的。\n\n作者Joe Kutner本就是一位运动员和健身教练出身的程序员，所以对程序员的健康问题有深入的了解，也在这方面进行了大量的实践和研究，最后以程序员的思维来写\n作这本书。所以在图灵教育上，这本书也是挺火的。\n\n## 饮食\n\n书中引用马克吐温的话：“保持身体健康的唯一办法，就是吃点你不想吃的，喝点你不想喝的，以及做点你不愿做的事情。”\n\n相信很多人都和我一样，小时候很多东西不愿意吃就坚决不吃，挑食，只吃自己爱吃的，由于我父母在教育方式上存在一些瑕疵，只要我说不想吃的，基本上一次过后就再也不会\n做那些菜了，以致现在全家人的口味都差不多了，而且菜的种类都比较少。长大后偶尔会吃到以前讨厌的菜，虽然仍然有点儿难以下咽，但都知道了，那些东西吃了确实对自己身\n体比较好，然后妈妈就会问：你不是不喜欢吃这个吗，怎么现在要吃了。始终，父母是爱我们的，只是，在饮食上，前20年我们几乎不能自己做主，之后的生活一定要注意，我\n也喜欢尝尝不同的东西。\n\n能让我们有饱腹感又不会产生多余能量的食物：蛋白质、全谷类食品\n\n## 运动\n\n我的运动比较单调，我喜欢散步，喜欢慢跑，基本上每周会跑三四次，所以现在在运动上我到没有什么了，只是可能动作上有一些不符合规范，长期以往，对身体可能会造成伤害\n，所以需要研究一下这个。\n\n## 硬件\n\n办公桌、健身器材，我应该马上就能过上自己想要的生活(独立、经济自由)，所以马上我就得为这些东西考虑了。\n\n关于眼睛的保护，对于每天面对几个小时电脑的程序员来说，隐形眼睛完全不合适，防辐射眼睛，可能会有作用，购买没有过度炫光的显示器和减少显示屏色温(减少蓝色光)。\n\n通过我上个月一下减10斤的经验，只有持之以恒，饮食规律，就是最好的减肥方式。\n","source":"_posts/chengxuyuanjiankangzhinan.md","raw":"---\ntitle: \"《程序员健康指南》——以编程的方式去维护健康\"\ndate: 2015-05-09 10:56:43\ncategories: 韦编三绝\n---\n其实最先写这篇读后感我是拒绝的，因为关于健康的书看多了，感觉都差不多，但当我回过头来翻看的时候，发现这本书有很多的观点都是需要深深体会的。\n\n作者Joe Kutner本就是一位运动员和健身教练出身的程序员，所以对程序员的健康问题有深入的了解，也在这方面进行了大量的实践和研究，最后以程序员的思维来写\n作这本书。所以在图灵教育上，这本书也是挺火的。\n\n## 饮食\n\n书中引用马克吐温的话：“保持身体健康的唯一办法，就是吃点你不想吃的，喝点你不想喝的，以及做点你不愿做的事情。”\n\n相信很多人都和我一样，小时候很多东西不愿意吃就坚决不吃，挑食，只吃自己爱吃的，由于我父母在教育方式上存在一些瑕疵，只要我说不想吃的，基本上一次过后就再也不会\n做那些菜了，以致现在全家人的口味都差不多了，而且菜的种类都比较少。长大后偶尔会吃到以前讨厌的菜，虽然仍然有点儿难以下咽，但都知道了，那些东西吃了确实对自己身\n体比较好，然后妈妈就会问：你不是不喜欢吃这个吗，怎么现在要吃了。始终，父母是爱我们的，只是，在饮食上，前20年我们几乎不能自己做主，之后的生活一定要注意，我\n也喜欢尝尝不同的东西。\n\n能让我们有饱腹感又不会产生多余能量的食物：蛋白质、全谷类食品\n\n## 运动\n\n我的运动比较单调，我喜欢散步，喜欢慢跑，基本上每周会跑三四次，所以现在在运动上我到没有什么了，只是可能动作上有一些不符合规范，长期以往，对身体可能会造成伤害\n，所以需要研究一下这个。\n\n## 硬件\n\n办公桌、健身器材，我应该马上就能过上自己想要的生活(独立、经济自由)，所以马上我就得为这些东西考虑了。\n\n关于眼睛的保护，对于每天面对几个小时电脑的程序员来说，隐形眼睛完全不合适，防辐射眼睛，可能会有作用，购买没有过度炫光的显示器和减少显示屏色温(减少蓝色光)。\n\n通过我上个月一下减10斤的经验，只有持之以恒，饮食规律，就是最好的减肥方式。\n","slug":"chengxuyuanjiankangzhinan","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5a00189vnzkz5mtm9u","content":"<p>其实最先写这篇读后感我是拒绝的，因为关于健康的书看多了，感觉都差不多，但当我回过头来翻看的时候，发现这本书有很多的观点都是需要深深体会的。</p>\n<p>作者Joe Kutner本就是一位运动员和健身教练出身的程序员，所以对程序员的健康问题有深入的了解，也在这方面进行了大量的实践和研究，最后以程序员的思维来写<br>作这本书。所以在图灵教育上，这本书也是挺火的。</p>\n<h2 id=\"饮食\"><a href=\"#饮食\" class=\"headerlink\" title=\"饮食\"></a>饮食</h2><p>书中引用马克吐温的话：“保持身体健康的唯一办法，就是吃点你不想吃的，喝点你不想喝的，以及做点你不愿做的事情。”</p>\n<p>相信很多人都和我一样，小时候很多东西不愿意吃就坚决不吃，挑食，只吃自己爱吃的，由于我父母在教育方式上存在一些瑕疵，只要我说不想吃的，基本上一次过后就再也不会<br>做那些菜了，以致现在全家人的口味都差不多了，而且菜的种类都比较少。长大后偶尔会吃到以前讨厌的菜，虽然仍然有点儿难以下咽，但都知道了，那些东西吃了确实对自己身<br>体比较好，然后妈妈就会问：你不是不喜欢吃这个吗，怎么现在要吃了。始终，父母是爱我们的，只是，在饮食上，前20年我们几乎不能自己做主，之后的生活一定要注意，我<br>也喜欢尝尝不同的东西。</p>\n<p>能让我们有饱腹感又不会产生多余能量的食物：蛋白质、全谷类食品</p>\n<h2 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h2><p>我的运动比较单调，我喜欢散步，喜欢慢跑，基本上每周会跑三四次，所以现在在运动上我到没有什么了，只是可能动作上有一些不符合规范，长期以往，对身体可能会造成伤害<br>，所以需要研究一下这个。</p>\n<h2 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h2><p>办公桌、健身器材，我应该马上就能过上自己想要的生活(独立、经济自由)，所以马上我就得为这些东西考虑了。</p>\n<p>关于眼睛的保护，对于每天面对几个小时电脑的程序员来说，隐形眼睛完全不合适，防辐射眼睛，可能会有作用，购买没有过度炫光的显示器和减少显示屏色温(减少蓝色光)。</p>\n<p>通过我上个月一下减10斤的经验，只有持之以恒，饮食规律，就是最好的减肥方式。</p>\n","excerpt":"","more":"<p>其实最先写这篇读后感我是拒绝的，因为关于健康的书看多了，感觉都差不多，但当我回过头来翻看的时候，发现这本书有很多的观点都是需要深深体会的。</p>\n<p>作者Joe Kutner本就是一位运动员和健身教练出身的程序员，所以对程序员的健康问题有深入的了解，也在这方面进行了大量的实践和研究，最后以程序员的思维来写<br>作这本书。所以在图灵教育上，这本书也是挺火的。</p>\n<h2 id=\"饮食\"><a href=\"#饮食\" class=\"headerlink\" title=\"饮食\"></a>饮食</h2><p>书中引用马克吐温的话：“保持身体健康的唯一办法，就是吃点你不想吃的，喝点你不想喝的，以及做点你不愿做的事情。”</p>\n<p>相信很多人都和我一样，小时候很多东西不愿意吃就坚决不吃，挑食，只吃自己爱吃的，由于我父母在教育方式上存在一些瑕疵，只要我说不想吃的，基本上一次过后就再也不会<br>做那些菜了，以致现在全家人的口味都差不多了，而且菜的种类都比较少。长大后偶尔会吃到以前讨厌的菜，虽然仍然有点儿难以下咽，但都知道了，那些东西吃了确实对自己身<br>体比较好，然后妈妈就会问：你不是不喜欢吃这个吗，怎么现在要吃了。始终，父母是爱我们的，只是，在饮食上，前20年我们几乎不能自己做主，之后的生活一定要注意，我<br>也喜欢尝尝不同的东西。</p>\n<p>能让我们有饱腹感又不会产生多余能量的食物：蛋白质、全谷类食品</p>\n<h2 id=\"运动\"><a href=\"#运动\" class=\"headerlink\" title=\"运动\"></a>运动</h2><p>我的运动比较单调，我喜欢散步，喜欢慢跑，基本上每周会跑三四次，所以现在在运动上我到没有什么了，只是可能动作上有一些不符合规范，长期以往，对身体可能会造成伤害<br>，所以需要研究一下这个。</p>\n<h2 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h2><p>办公桌、健身器材，我应该马上就能过上自己想要的生活(独立、经济自由)，所以马上我就得为这些东西考虑了。</p>\n<p>关于眼睛的保护，对于每天面对几个小时电脑的程序员来说，隐形眼睛完全不合适，防辐射眼睛，可能会有作用，购买没有过度炫光的显示器和减少显示屏色温(减少蓝色光)。</p>\n<p>通过我上个月一下减10斤的经验，只有持之以恒，饮食规律，就是最好的减肥方式。</p>\n"},{"title":"关于填志愿","date":"2013-06-22T08:02:47.000Z","_content":"啊，好像要快要知道成绩了，紧张吗 放松  \n上次年级集中上一位学长总结了大学的四种活法：\n\n学习：考研，出国\n\n技术：实验室，各种比赛\n\n实践：各种社团，团队，兼职\n\n迷茫：游戏，电影，愚爱\n\n确实，这些都是你以后必须面对的选择，而且有可能不知不觉就走上了某一条路。其实，我都还在迷茫的阶段，所以也只能讲一些我自己在填志愿的时候的一些愚见。\n\n我把所有的专业分为了技术和非技术两个方向。\n\n技术篇：\n\n技术方向主要包括：工学（建筑，机械，工程，材料，电气，电子，通信，计算机），农学，医学\n\n很多人说在大学重要的是人际关系，上大学只是为了拿个毕业证，大学毕业几乎都找不到对口的工作，而且学技术的一抓一大把，根本就找不到工作。切，脏话我就不说了，他后\n面两句话我还是承认的，以下就由我的计算机来举例子吧。\n\n首先说刚才那种话的人他专业知识一定不好，我研究过很多技术牛人，很多都是大一大二就可以看得出来了，比如我们计院真正想学计算机的人不足40\\%（开学典礼上院长说的\n是好像60\\%都是调配过来的，当然，这在我们学校算是特色了，谁让我们计算机在重邮排第二呢，不过我们重邮的计算机在全国还是拍在前面三四十名吧）我敢说我们院50\\%\n的人没有自学的想法和行动，我甚至敢说10\\%的人在大四毕业的时候专业技术还赶不上现在的我（额。。。当然，我现只是学到点皮毛，比我强的人多了去了）应该说大学里面\n的学习光靠老师讲那点儿你毕业也别想找个好工作，更别说老师的教育能力还是参差不齐的，而且大学的老师根本没有义务来单独帮助你，除非你主动去找他。其次，很多被迫来\n计算机的人完全不想走这条路，也可以，要么转专业（劝大家别这么想，100个人里进大学时想转专业的之后真正转了的不会有10个人）要么就去提高自己其它方面能力，也\n就是非技术能力，课堂上的东西拉着走进行了，一定要找各种机会和途径来提高自己其它能力，交际能力，口才什么的，这些在今后会非常非常有用的，有时候比专业知识还有用\n。选择了自己的路就不要犹豫，要勇敢地走下去，要知道大学里更多的人是根本找不到自己的路。你也可以完全学技术，如果真的成为了高手，还需要去辛苦地维护人际关系拼命\n地把脸皮脸厚吗？不用，到时候是公司追着要你，哪怕你是个哑巴。不是每个岗位都一定要能说会道的。当然要想成为高手绝不是一天两天的事情，而且绝不是轻轻松松就能成功\n的。我认识一个学长，大二的，每天学习到一两点，现在大三大四能达到他那水平的人绝对没有多少。\n\n建筑，医学什么的现在应该都是很热门的吧！去年这个时候家人都叫我要么学建筑里的工程造价要么学医学里的临床医学，呵呵！当然，至于热门和非热门，由于我是个感情用事\n的人，所以并不会去在意这些，而只是根据自己的兴趣。总之，学技术一定要学到真材实料。\n\n非技术篇：\n\n非技术方向主要包括：哲学，经济学，法学，教育学，文学（艺术，音乐，美术，传媒，外语），历史学，理学（数学，物理，化学，天文，地理，生物），军事学，管理学（工\n商，会计，企业）\n\n如果你认为学技术出路窄，工作累，工资低，像书呆子，那么，恭喜你，你的想法很对，很符合社会的潮流，相信你也能在这一块儿做得很出色的。（额，非技术的东西，好像就\n只有管理学和文学是正常人学的，其它的，呵呵。。。）\n\n有许多同学在刚进大学的时候都去尝试过竞选学生会、各种社团的干事与干部。事后，有许多同学都发出了这样的感慨：不公平，做什么都要凭关系。没办法，学校尚且如此，社\n会又怎样呢？社会上对权术、关系、金钱玩得更彻底，不学会这些凭什么在社会上立足，权利，关系，钞票总得要有一样。\n\n既然选择非技术，那就不要去工科的大学，比如重庆邮电大学（这样说了我们学校的妹子又少了）去工科大学不会为你的人脉和能力增加多少筹码的，因为这类大学的人极少数会\n成为精英，而且在这样的环境里锻炼不到你，就去非工科的大许多吧，去那里，以后你的朋友就遍布天下，而且都是管理什么的，到时候到哪里都会有人来帮你顺水推舟。\n\n额。。。由于我学的是计算机专业，所以对于这块儿感受不深，大家一定要去虚心请教呀，呵呵。。\n\n选学校：\n\n学校，呵呵，或许专业每个学校都有高有低，但其实学校才是大人最在意的，额。。。好吧，既然是大人在意的，你就别管大人的愿望了（当然，大人们看问题的角度不一样，肯\n定还是有参考价值的，别一味地拒绝）\n\n所谓的名校（额，我这文章不是给600分以上的人看的哈，所以别去想了）顺便纠正一下211，985的认识，确实，他们会在很多方面获得国家的支持，但又怎样呢？其实\n现在有很多学校的教学质量都或多或少地超过了这种院校，只不过国家的规定好像是不会再增加这类学校的名额了。再次，你们有木有发现有些省市的211，985很少，有的\n却很多呢？其实吧，有些只有一所211，985的院校或许只是国家给他们省面子而扶持了一下，其教学质量或许根本不高，当然，从另一方面来讲，那所学校多半都是本省最\n好的学校，也就是说至少是那一个省最重视的学校了。\n\n总之，我个人认为选专业比选学校重要。引用一段话“每年高考出分的时候，哭一批笑一批，惨淡一批灿烂一批，那些难过的人以为自己下了地狱，那批高兴的人也以为自己真的\n到了天堂。只有上过大学的才知道，再SB的大学一样可以努力,再NB的大学也充斥着堕落。谁也别哭闹，四年后的风骚，谁的天下，都别说得太早。阴差阳错也许比如愿以偿\n更让人成长。”\n\n其次，对于走得远还是就在本地，这个就不好说了，因人而异，可以去问问过来人的体会。我先说说，其实，最初我的想法是想去外省的，走得越远越好，像龚卫那样，但家长那\n个固执呀，懒得和他们争了（当时也最反对我读计算机，到最后的决定是我选专业，他们选学校）其实他们也不完全是担心我，确实如他们所说，在重庆读大学无论我学得怎样，\n找工作都比在外面好找点。也不想在外面读了四年连当地的口音都学不会，最后还回来重庆，一个同龄的熟人都认求不到，当然考研回来还是不错的，至少研究生的很多工作可以\n帮助你迅速地在本地认识很多人（但，或许这些人永远不可能像同学那样和你密切了）。至于别人的感受去问问@龚卫 （要说点积极的哈）\n\n还有，很多人说有些大学通宵不断网，不上早晚自习，食堂好吃，消费低，额，其实这都是人家的调侃，这些就不用考虑了（当然，或许是因为我在重邮12个平方的寝室住过，\n7：10的早自习都山谷go，我肯定很乐观的）还有就是重庆热，MLGB，好吧，重庆确实热，还ＴＭ没什么空调，但其实吧，我们是来学习的，不是来享受的，孩子们，先\n苦后甜呀。\n\n以下是李开复的建议：\n\n1\\\\. 不要只看学校不看专业，进了名校但是学一个你痛恨的专业是不值得的\n\n2\\\\. 花一些时间咨询你可能有兴趣的专业，如果比较确定，可以把这些专业填在前面\n\n3\\\\. 在报考大学专业时，千万不要选择自己一定不会感谢兴趣的专业。就算你不知道自己对什么有兴趣，你至少应该知道自己对什么没有兴趣吧？如果你不确定，做一些简单\n的咨询，就会很清晰了。\n\n4\\\\. 选择一些相对广阔、选择度较大的系，因为知识面广的专业在今后使你会有更多的职业选择，例如：计算机系、化学系、中文系等等。\n\n5\\\\. 对于领域相对比较狭窄的科系，除非你非常确定这就是你的志向，否则千万不要浪费四年的光阴去学习。\n\n6\\\\. 如果有些学校看起来差不多，把那些可以让学生转系的学校填在最前面，这样万一你发现了新的兴趣，入学后还有机会转系。还有些学校允许一个学院里面的学生在大二\n后挑选读任何一个学院里的系，这种学校也应该优先考虑。\n\n7\\\\. 把不随便调剂学生志愿专业的学校填在较前面，尽量避免填那些随便调剂学生志愿专业的学校。\n\n顺便把我填的志愿贴上（注：虽然这确实是当年我填的志愿，不过纯属娱乐哈，其实吧，我也挺后悔的，应该把清华填在第一的，不然就不会先被重邮录取了，唉）\n\n\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_0.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_1.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_2.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_3.jpg)  \n","source":"_posts/college-entrance-examination-will-deciding.md","raw":"---\ntitle: \"关于填志愿\"\ndate: 2013-06-22 16:02:47\ncategories: 边走边想\n---\n啊，好像要快要知道成绩了，紧张吗 放松  \n上次年级集中上一位学长总结了大学的四种活法：\n\n学习：考研，出国\n\n技术：实验室，各种比赛\n\n实践：各种社团，团队，兼职\n\n迷茫：游戏，电影，愚爱\n\n确实，这些都是你以后必须面对的选择，而且有可能不知不觉就走上了某一条路。其实，我都还在迷茫的阶段，所以也只能讲一些我自己在填志愿的时候的一些愚见。\n\n我把所有的专业分为了技术和非技术两个方向。\n\n技术篇：\n\n技术方向主要包括：工学（建筑，机械，工程，材料，电气，电子，通信，计算机），农学，医学\n\n很多人说在大学重要的是人际关系，上大学只是为了拿个毕业证，大学毕业几乎都找不到对口的工作，而且学技术的一抓一大把，根本就找不到工作。切，脏话我就不说了，他后\n面两句话我还是承认的，以下就由我的计算机来举例子吧。\n\n首先说刚才那种话的人他专业知识一定不好，我研究过很多技术牛人，很多都是大一大二就可以看得出来了，比如我们计院真正想学计算机的人不足40\\%（开学典礼上院长说的\n是好像60\\%都是调配过来的，当然，这在我们学校算是特色了，谁让我们计算机在重邮排第二呢，不过我们重邮的计算机在全国还是拍在前面三四十名吧）我敢说我们院50\\%\n的人没有自学的想法和行动，我甚至敢说10\\%的人在大四毕业的时候专业技术还赶不上现在的我（额。。。当然，我现只是学到点皮毛，比我强的人多了去了）应该说大学里面\n的学习光靠老师讲那点儿你毕业也别想找个好工作，更别说老师的教育能力还是参差不齐的，而且大学的老师根本没有义务来单独帮助你，除非你主动去找他。其次，很多被迫来\n计算机的人完全不想走这条路，也可以，要么转专业（劝大家别这么想，100个人里进大学时想转专业的之后真正转了的不会有10个人）要么就去提高自己其它方面能力，也\n就是非技术能力，课堂上的东西拉着走进行了，一定要找各种机会和途径来提高自己其它能力，交际能力，口才什么的，这些在今后会非常非常有用的，有时候比专业知识还有用\n。选择了自己的路就不要犹豫，要勇敢地走下去，要知道大学里更多的人是根本找不到自己的路。你也可以完全学技术，如果真的成为了高手，还需要去辛苦地维护人际关系拼命\n地把脸皮脸厚吗？不用，到时候是公司追着要你，哪怕你是个哑巴。不是每个岗位都一定要能说会道的。当然要想成为高手绝不是一天两天的事情，而且绝不是轻轻松松就能成功\n的。我认识一个学长，大二的，每天学习到一两点，现在大三大四能达到他那水平的人绝对没有多少。\n\n建筑，医学什么的现在应该都是很热门的吧！去年这个时候家人都叫我要么学建筑里的工程造价要么学医学里的临床医学，呵呵！当然，至于热门和非热门，由于我是个感情用事\n的人，所以并不会去在意这些，而只是根据自己的兴趣。总之，学技术一定要学到真材实料。\n\n非技术篇：\n\n非技术方向主要包括：哲学，经济学，法学，教育学，文学（艺术，音乐，美术，传媒，外语），历史学，理学（数学，物理，化学，天文，地理，生物），军事学，管理学（工\n商，会计，企业）\n\n如果你认为学技术出路窄，工作累，工资低，像书呆子，那么，恭喜你，你的想法很对，很符合社会的潮流，相信你也能在这一块儿做得很出色的。（额，非技术的东西，好像就\n只有管理学和文学是正常人学的，其它的，呵呵。。。）\n\n有许多同学在刚进大学的时候都去尝试过竞选学生会、各种社团的干事与干部。事后，有许多同学都发出了这样的感慨：不公平，做什么都要凭关系。没办法，学校尚且如此，社\n会又怎样呢？社会上对权术、关系、金钱玩得更彻底，不学会这些凭什么在社会上立足，权利，关系，钞票总得要有一样。\n\n既然选择非技术，那就不要去工科的大学，比如重庆邮电大学（这样说了我们学校的妹子又少了）去工科大学不会为你的人脉和能力增加多少筹码的，因为这类大学的人极少数会\n成为精英，而且在这样的环境里锻炼不到你，就去非工科的大许多吧，去那里，以后你的朋友就遍布天下，而且都是管理什么的，到时候到哪里都会有人来帮你顺水推舟。\n\n额。。。由于我学的是计算机专业，所以对于这块儿感受不深，大家一定要去虚心请教呀，呵呵。。\n\n选学校：\n\n学校，呵呵，或许专业每个学校都有高有低，但其实学校才是大人最在意的，额。。。好吧，既然是大人在意的，你就别管大人的愿望了（当然，大人们看问题的角度不一样，肯\n定还是有参考价值的，别一味地拒绝）\n\n所谓的名校（额，我这文章不是给600分以上的人看的哈，所以别去想了）顺便纠正一下211，985的认识，确实，他们会在很多方面获得国家的支持，但又怎样呢？其实\n现在有很多学校的教学质量都或多或少地超过了这种院校，只不过国家的规定好像是不会再增加这类学校的名额了。再次，你们有木有发现有些省市的211，985很少，有的\n却很多呢？其实吧，有些只有一所211，985的院校或许只是国家给他们省面子而扶持了一下，其教学质量或许根本不高，当然，从另一方面来讲，那所学校多半都是本省最\n好的学校，也就是说至少是那一个省最重视的学校了。\n\n总之，我个人认为选专业比选学校重要。引用一段话“每年高考出分的时候，哭一批笑一批，惨淡一批灿烂一批，那些难过的人以为自己下了地狱，那批高兴的人也以为自己真的\n到了天堂。只有上过大学的才知道，再SB的大学一样可以努力,再NB的大学也充斥着堕落。谁也别哭闹，四年后的风骚，谁的天下，都别说得太早。阴差阳错也许比如愿以偿\n更让人成长。”\n\n其次，对于走得远还是就在本地，这个就不好说了，因人而异，可以去问问过来人的体会。我先说说，其实，最初我的想法是想去外省的，走得越远越好，像龚卫那样，但家长那\n个固执呀，懒得和他们争了（当时也最反对我读计算机，到最后的决定是我选专业，他们选学校）其实他们也不完全是担心我，确实如他们所说，在重庆读大学无论我学得怎样，\n找工作都比在外面好找点。也不想在外面读了四年连当地的口音都学不会，最后还回来重庆，一个同龄的熟人都认求不到，当然考研回来还是不错的，至少研究生的很多工作可以\n帮助你迅速地在本地认识很多人（但，或许这些人永远不可能像同学那样和你密切了）。至于别人的感受去问问@龚卫 （要说点积极的哈）\n\n还有，很多人说有些大学通宵不断网，不上早晚自习，食堂好吃，消费低，额，其实这都是人家的调侃，这些就不用考虑了（当然，或许是因为我在重邮12个平方的寝室住过，\n7：10的早自习都山谷go，我肯定很乐观的）还有就是重庆热，MLGB，好吧，重庆确实热，还ＴＭ没什么空调，但其实吧，我们是来学习的，不是来享受的，孩子们，先\n苦后甜呀。\n\n以下是李开复的建议：\n\n1\\\\. 不要只看学校不看专业，进了名校但是学一个你痛恨的专业是不值得的\n\n2\\\\. 花一些时间咨询你可能有兴趣的专业，如果比较确定，可以把这些专业填在前面\n\n3\\\\. 在报考大学专业时，千万不要选择自己一定不会感谢兴趣的专业。就算你不知道自己对什么有兴趣，你至少应该知道自己对什么没有兴趣吧？如果你不确定，做一些简单\n的咨询，就会很清晰了。\n\n4\\\\. 选择一些相对广阔、选择度较大的系，因为知识面广的专业在今后使你会有更多的职业选择，例如：计算机系、化学系、中文系等等。\n\n5\\\\. 对于领域相对比较狭窄的科系，除非你非常确定这就是你的志向，否则千万不要浪费四年的光阴去学习。\n\n6\\\\. 如果有些学校看起来差不多，把那些可以让学生转系的学校填在最前面，这样万一你发现了新的兴趣，入学后还有机会转系。还有些学校允许一个学院里面的学生在大二\n后挑选读任何一个学院里的系，这种学校也应该优先考虑。\n\n7\\\\. 把不随便调剂学生志愿专业的学校填在较前面，尽量避免填那些随便调剂学生志愿专业的学校。\n\n顺便把我填的志愿贴上（注：虽然这确实是当年我填的志愿，不过纯属娱乐哈，其实吧，我也挺后悔的，应该把清华填在第一的，不然就不会先被重邮录取了，唉）\n\n\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_0.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_1.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_2.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_3.jpg)  \n","slug":"college-entrance-examination-will-deciding","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5h001a9vnzawczvnsg","content":"<p>啊，好像要快要知道成绩了，紧张吗 放松<br>上次年级集中上一位学长总结了大学的四种活法：</p>\n<p>学习：考研，出国</p>\n<p>技术：实验室，各种比赛</p>\n<p>实践：各种社团，团队，兼职</p>\n<p>迷茫：游戏，电影，愚爱</p>\n<p>确实，这些都是你以后必须面对的选择，而且有可能不知不觉就走上了某一条路。其实，我都还在迷茫的阶段，所以也只能讲一些我自己在填志愿的时候的一些愚见。</p>\n<p>我把所有的专业分为了技术和非技术两个方向。</p>\n<p>技术篇：</p>\n<p>技术方向主要包括：工学（建筑，机械，工程，材料，电气，电子，通信，计算机），农学，医学</p>\n<p>很多人说在大学重要的是人际关系，上大学只是为了拿个毕业证，大学毕业几乎都找不到对口的工作，而且学技术的一抓一大把，根本就找不到工作。切，脏话我就不说了，他后<br>面两句话我还是承认的，以下就由我的计算机来举例子吧。</p>\n<p>首先说刚才那种话的人他专业知识一定不好，我研究过很多技术牛人，很多都是大一大二就可以看得出来了，比如我们计院真正想学计算机的人不足40\\%（开学典礼上院长说的<br>是好像60\\%都是调配过来的，当然，这在我们学校算是特色了，谁让我们计算机在重邮排第二呢，不过我们重邮的计算机在全国还是拍在前面三四十名吧）我敢说我们院50\\%<br>的人没有自学的想法和行动，我甚至敢说10\\%的人在大四毕业的时候专业技术还赶不上现在的我（额。。。当然，我现只是学到点皮毛，比我强的人多了去了）应该说大学里面<br>的学习光靠老师讲那点儿你毕业也别想找个好工作，更别说老师的教育能力还是参差不齐的，而且大学的老师根本没有义务来单独帮助你，除非你主动去找他。其次，很多被迫来<br>计算机的人完全不想走这条路，也可以，要么转专业（劝大家别这么想，100个人里进大学时想转专业的之后真正转了的不会有10个人）要么就去提高自己其它方面能力，也<br>就是非技术能力，课堂上的东西拉着走进行了，一定要找各种机会和途径来提高自己其它能力，交际能力，口才什么的，这些在今后会非常非常有用的，有时候比专业知识还有用<br>。选择了自己的路就不要犹豫，要勇敢地走下去，要知道大学里更多的人是根本找不到自己的路。你也可以完全学技术，如果真的成为了高手，还需要去辛苦地维护人际关系拼命<br>地把脸皮脸厚吗？不用，到时候是公司追着要你，哪怕你是个哑巴。不是每个岗位都一定要能说会道的。当然要想成为高手绝不是一天两天的事情，而且绝不是轻轻松松就能成功<br>的。我认识一个学长，大二的，每天学习到一两点，现在大三大四能达到他那水平的人绝对没有多少。</p>\n<p>建筑，医学什么的现在应该都是很热门的吧！去年这个时候家人都叫我要么学建筑里的工程造价要么学医学里的临床医学，呵呵！当然，至于热门和非热门，由于我是个感情用事<br>的人，所以并不会去在意这些，而只是根据自己的兴趣。总之，学技术一定要学到真材实料。</p>\n<p>非技术篇：</p>\n<p>非技术方向主要包括：哲学，经济学，法学，教育学，文学（艺术，音乐，美术，传媒，外语），历史学，理学（数学，物理，化学，天文，地理，生物），军事学，管理学（工<br>商，会计，企业）</p>\n<p>如果你认为学技术出路窄，工作累，工资低，像书呆子，那么，恭喜你，你的想法很对，很符合社会的潮流，相信你也能在这一块儿做得很出色的。（额，非技术的东西，好像就<br>只有管理学和文学是正常人学的，其它的，呵呵。。。）</p>\n<p>有许多同学在刚进大学的时候都去尝试过竞选学生会、各种社团的干事与干部。事后，有许多同学都发出了这样的感慨：不公平，做什么都要凭关系。没办法，学校尚且如此，社<br>会又怎样呢？社会上对权术、关系、金钱玩得更彻底，不学会这些凭什么在社会上立足，权利，关系，钞票总得要有一样。</p>\n<p>既然选择非技术，那就不要去工科的大学，比如重庆邮电大学（这样说了我们学校的妹子又少了）去工科大学不会为你的人脉和能力增加多少筹码的，因为这类大学的人极少数会<br>成为精英，而且在这样的环境里锻炼不到你，就去非工科的大许多吧，去那里，以后你的朋友就遍布天下，而且都是管理什么的，到时候到哪里都会有人来帮你顺水推舟。</p>\n<p>额。。。由于我学的是计算机专业，所以对于这块儿感受不深，大家一定要去虚心请教呀，呵呵。。</p>\n<p>选学校：</p>\n<p>学校，呵呵，或许专业每个学校都有高有低，但其实学校才是大人最在意的，额。。。好吧，既然是大人在意的，你就别管大人的愿望了（当然，大人们看问题的角度不一样，肯<br>定还是有参考价值的，别一味地拒绝）</p>\n<p>所谓的名校（额，我这文章不是给600分以上的人看的哈，所以别去想了）顺便纠正一下211，985的认识，确实，他们会在很多方面获得国家的支持，但又怎样呢？其实<br>现在有很多学校的教学质量都或多或少地超过了这种院校，只不过国家的规定好像是不会再增加这类学校的名额了。再次，你们有木有发现有些省市的211，985很少，有的<br>却很多呢？其实吧，有些只有一所211，985的院校或许只是国家给他们省面子而扶持了一下，其教学质量或许根本不高，当然，从另一方面来讲，那所学校多半都是本省最<br>好的学校，也就是说至少是那一个省最重视的学校了。</p>\n<p>总之，我个人认为选专业比选学校重要。引用一段话“每年高考出分的时候，哭一批笑一批，惨淡一批灿烂一批，那些难过的人以为自己下了地狱，那批高兴的人也以为自己真的<br>到了天堂。只有上过大学的才知道，再SB的大学一样可以努力,再NB的大学也充斥着堕落。谁也别哭闹，四年后的风骚，谁的天下，都别说得太早。阴差阳错也许比如愿以偿<br>更让人成长。”</p>\n<p>其次，对于走得远还是就在本地，这个就不好说了，因人而异，可以去问问过来人的体会。我先说说，其实，最初我的想法是想去外省的，走得越远越好，像龚卫那样，但家长那<br>个固执呀，懒得和他们争了（当时也最反对我读计算机，到最后的决定是我选专业，他们选学校）其实他们也不完全是担心我，确实如他们所说，在重庆读大学无论我学得怎样，<br>找工作都比在外面好找点。也不想在外面读了四年连当地的口音都学不会，最后还回来重庆，一个同龄的熟人都认求不到，当然考研回来还是不错的，至少研究生的很多工作可以<br>帮助你迅速地在本地认识很多人（但，或许这些人永远不可能像同学那样和你密切了）。至于别人的感受去问问@龚卫 （要说点积极的哈）</p>\n<p>还有，很多人说有些大学通宵不断网，不上早晚自习，食堂好吃，消费低，额，其实这都是人家的调侃，这些就不用考虑了（当然，或许是因为我在重邮12个平方的寝室住过，<br>7：10的早自习都山谷go，我肯定很乐观的）还有就是重庆热，MLGB，好吧，重庆确实热，还ＴＭ没什么空调，但其实吧，我们是来学习的，不是来享受的，孩子们，先<br>苦后甜呀。</p>\n<p>以下是李开复的建议：</p>\n<p>1\\. 不要只看学校不看专业，进了名校但是学一个你痛恨的专业是不值得的</p>\n<p>2\\. 花一些时间咨询你可能有兴趣的专业，如果比较确定，可以把这些专业填在前面</p>\n<p>3\\. 在报考大学专业时，千万不要选择自己一定不会感谢兴趣的专业。就算你不知道自己对什么有兴趣，你至少应该知道自己对什么没有兴趣吧？如果你不确定，做一些简单<br>的咨询，就会很清晰了。</p>\n<p>4\\. 选择一些相对广阔、选择度较大的系，因为知识面广的专业在今后使你会有更多的职业选择，例如：计算机系、化学系、中文系等等。</p>\n<p>5\\. 对于领域相对比较狭窄的科系，除非你非常确定这就是你的志向，否则千万不要浪费四年的光阴去学习。</p>\n<p>6\\. 如果有些学校看起来差不多，把那些可以让学生转系的学校填在最前面，这样万一你发现了新的兴趣，入学后还有机会转系。还有些学校允许一个学院里面的学生在大二<br>后挑选读任何一个学院里的系，这种学校也应该优先考虑。</p>\n<p>7\\. 把不随便调剂学生志愿专业的学校填在较前面，尽量避免填那些随便调剂学生志愿专业的学校。</p>\n<p>顺便把我填的志愿贴上（注：虽然这确实是当年我填的志愿，不过纯属娱乐哈，其实吧，我也挺后悔的，应该把清华填在第一的，不然就不会先被重邮录取了，唉）</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_0.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_1.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_2.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_3.jpg\" alt=\"\">  </p>\n","excerpt":"","more":"<p>啊，好像要快要知道成绩了，紧张吗 放松<br>上次年级集中上一位学长总结了大学的四种活法：</p>\n<p>学习：考研，出国</p>\n<p>技术：实验室，各种比赛</p>\n<p>实践：各种社团，团队，兼职</p>\n<p>迷茫：游戏，电影，愚爱</p>\n<p>确实，这些都是你以后必须面对的选择，而且有可能不知不觉就走上了某一条路。其实，我都还在迷茫的阶段，所以也只能讲一些我自己在填志愿的时候的一些愚见。</p>\n<p>我把所有的专业分为了技术和非技术两个方向。</p>\n<p>技术篇：</p>\n<p>技术方向主要包括：工学（建筑，机械，工程，材料，电气，电子，通信，计算机），农学，医学</p>\n<p>很多人说在大学重要的是人际关系，上大学只是为了拿个毕业证，大学毕业几乎都找不到对口的工作，而且学技术的一抓一大把，根本就找不到工作。切，脏话我就不说了，他后<br>面两句话我还是承认的，以下就由我的计算机来举例子吧。</p>\n<p>首先说刚才那种话的人他专业知识一定不好，我研究过很多技术牛人，很多都是大一大二就可以看得出来了，比如我们计院真正想学计算机的人不足40\\%（开学典礼上院长说的<br>是好像60\\%都是调配过来的，当然，这在我们学校算是特色了，谁让我们计算机在重邮排第二呢，不过我们重邮的计算机在全国还是拍在前面三四十名吧）我敢说我们院50\\%<br>的人没有自学的想法和行动，我甚至敢说10\\%的人在大四毕业的时候专业技术还赶不上现在的我（额。。。当然，我现只是学到点皮毛，比我强的人多了去了）应该说大学里面<br>的学习光靠老师讲那点儿你毕业也别想找个好工作，更别说老师的教育能力还是参差不齐的，而且大学的老师根本没有义务来单独帮助你，除非你主动去找他。其次，很多被迫来<br>计算机的人完全不想走这条路，也可以，要么转专业（劝大家别这么想，100个人里进大学时想转专业的之后真正转了的不会有10个人）要么就去提高自己其它方面能力，也<br>就是非技术能力，课堂上的东西拉着走进行了，一定要找各种机会和途径来提高自己其它能力，交际能力，口才什么的，这些在今后会非常非常有用的，有时候比专业知识还有用<br>。选择了自己的路就不要犹豫，要勇敢地走下去，要知道大学里更多的人是根本找不到自己的路。你也可以完全学技术，如果真的成为了高手，还需要去辛苦地维护人际关系拼命<br>地把脸皮脸厚吗？不用，到时候是公司追着要你，哪怕你是个哑巴。不是每个岗位都一定要能说会道的。当然要想成为高手绝不是一天两天的事情，而且绝不是轻轻松松就能成功<br>的。我认识一个学长，大二的，每天学习到一两点，现在大三大四能达到他那水平的人绝对没有多少。</p>\n<p>建筑，医学什么的现在应该都是很热门的吧！去年这个时候家人都叫我要么学建筑里的工程造价要么学医学里的临床医学，呵呵！当然，至于热门和非热门，由于我是个感情用事<br>的人，所以并不会去在意这些，而只是根据自己的兴趣。总之，学技术一定要学到真材实料。</p>\n<p>非技术篇：</p>\n<p>非技术方向主要包括：哲学，经济学，法学，教育学，文学（艺术，音乐，美术，传媒，外语），历史学，理学（数学，物理，化学，天文，地理，生物），军事学，管理学（工<br>商，会计，企业）</p>\n<p>如果你认为学技术出路窄，工作累，工资低，像书呆子，那么，恭喜你，你的想法很对，很符合社会的潮流，相信你也能在这一块儿做得很出色的。（额，非技术的东西，好像就<br>只有管理学和文学是正常人学的，其它的，呵呵。。。）</p>\n<p>有许多同学在刚进大学的时候都去尝试过竞选学生会、各种社团的干事与干部。事后，有许多同学都发出了这样的感慨：不公平，做什么都要凭关系。没办法，学校尚且如此，社<br>会又怎样呢？社会上对权术、关系、金钱玩得更彻底，不学会这些凭什么在社会上立足，权利，关系，钞票总得要有一样。</p>\n<p>既然选择非技术，那就不要去工科的大学，比如重庆邮电大学（这样说了我们学校的妹子又少了）去工科大学不会为你的人脉和能力增加多少筹码的，因为这类大学的人极少数会<br>成为精英，而且在这样的环境里锻炼不到你，就去非工科的大许多吧，去那里，以后你的朋友就遍布天下，而且都是管理什么的，到时候到哪里都会有人来帮你顺水推舟。</p>\n<p>额。。。由于我学的是计算机专业，所以对于这块儿感受不深，大家一定要去虚心请教呀，呵呵。。</p>\n<p>选学校：</p>\n<p>学校，呵呵，或许专业每个学校都有高有低，但其实学校才是大人最在意的，额。。。好吧，既然是大人在意的，你就别管大人的愿望了（当然，大人们看问题的角度不一样，肯<br>定还是有参考价值的，别一味地拒绝）</p>\n<p>所谓的名校（额，我这文章不是给600分以上的人看的哈，所以别去想了）顺便纠正一下211，985的认识，确实，他们会在很多方面获得国家的支持，但又怎样呢？其实<br>现在有很多学校的教学质量都或多或少地超过了这种院校，只不过国家的规定好像是不会再增加这类学校的名额了。再次，你们有木有发现有些省市的211，985很少，有的<br>却很多呢？其实吧，有些只有一所211，985的院校或许只是国家给他们省面子而扶持了一下，其教学质量或许根本不高，当然，从另一方面来讲，那所学校多半都是本省最<br>好的学校，也就是说至少是那一个省最重视的学校了。</p>\n<p>总之，我个人认为选专业比选学校重要。引用一段话“每年高考出分的时候，哭一批笑一批，惨淡一批灿烂一批，那些难过的人以为自己下了地狱，那批高兴的人也以为自己真的<br>到了天堂。只有上过大学的才知道，再SB的大学一样可以努力,再NB的大学也充斥着堕落。谁也别哭闹，四年后的风骚，谁的天下，都别说得太早。阴差阳错也许比如愿以偿<br>更让人成长。”</p>\n<p>其次，对于走得远还是就在本地，这个就不好说了，因人而异，可以去问问过来人的体会。我先说说，其实，最初我的想法是想去外省的，走得越远越好，像龚卫那样，但家长那<br>个固执呀，懒得和他们争了（当时也最反对我读计算机，到最后的决定是我选专业，他们选学校）其实他们也不完全是担心我，确实如他们所说，在重庆读大学无论我学得怎样，<br>找工作都比在外面好找点。也不想在外面读了四年连当地的口音都学不会，最后还回来重庆，一个同龄的熟人都认求不到，当然考研回来还是不错的，至少研究生的很多工作可以<br>帮助你迅速地在本地认识很多人（但，或许这些人永远不可能像同学那样和你密切了）。至于别人的感受去问问@龚卫 （要说点积极的哈）</p>\n<p>还有，很多人说有些大学通宵不断网，不上早晚自习，食堂好吃，消费低，额，其实这都是人家的调侃，这些就不用考虑了（当然，或许是因为我在重邮12个平方的寝室住过，<br>7：10的早自习都山谷go，我肯定很乐观的）还有就是重庆热，MLGB，好吧，重庆确实热，还ＴＭ没什么空调，但其实吧，我们是来学习的，不是来享受的，孩子们，先<br>苦后甜呀。</p>\n<p>以下是李开复的建议：</p>\n<p>1\\. 不要只看学校不看专业，进了名校但是学一个你痛恨的专业是不值得的</p>\n<p>2\\. 花一些时间咨询你可能有兴趣的专业，如果比较确定，可以把这些专业填在前面</p>\n<p>3\\. 在报考大学专业时，千万不要选择自己一定不会感谢兴趣的专业。就算你不知道自己对什么有兴趣，你至少应该知道自己对什么没有兴趣吧？如果你不确定，做一些简单<br>的咨询，就会很清晰了。</p>\n<p>4\\. 选择一些相对广阔、选择度较大的系，因为知识面广的专业在今后使你会有更多的职业选择，例如：计算机系、化学系、中文系等等。</p>\n<p>5\\. 对于领域相对比较狭窄的科系，除非你非常确定这就是你的志向，否则千万不要浪费四年的光阴去学习。</p>\n<p>6\\. 如果有些学校看起来差不多，把那些可以让学生转系的学校填在最前面，这样万一你发现了新的兴趣，入学后还有机会转系。还有些学校允许一个学院里面的学生在大二<br>后挑选读任何一个学院里的系，这种学校也应该优先考虑。</p>\n<p>7\\. 把不随便调剂学生志愿专业的学校填在较前面，尽量避免填那些随便调剂学生志愿专业的学校。</p>\n<p>顺便把我填的志愿贴上（注：虽然这确实是当年我填的志愿，不过纯属娱乐哈，其实吧，我也挺后悔的，应该把清华填在第一的，不然就不会先被重邮录取了，唉）</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_0.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_1.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_2.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/college-entrance-examination-will-\ndeciding_3.jpg\" alt=\"\">  </p>\n"},{"title":"《重新认识你自己》——我还不懂哲学","date":"2015-04-26T06:22:37.000Z","_content":"这本书是我最好的一个朋友给我推荐的，在我们眼里他一直是哲学家。\n\n之前以为，像这种书名顶多就会像某些心灵鸡汤一样，叫我们该怎么做，不该怎么做。但刚看到第一章“没有任何向导”的时候，我就震惊了，当时就意识到，这绝对是一本不可\n多得的好书。绝对只有到达某种境界的人才能看懂。当完全拜读完此书后我真的懵了，我不知道该怎么形容他了，好多好多，我根本看不懂，不是像看技术书籍那种看不懂，而是\n你一想书中蕴涵的哲理的时候你就感觉头脑发热，完全是一种“懵”的状态。\n\n此书原名叫“Freedom From the Known”，当时看到这种翻译也是想了很久，后来发现，结合书中的内容，确实，翻译为“重新认识你自己”或许能更让\n人理解。它一步一步地让你从你的世界观中挣脱，获得自由，获得新生。对于我这样一个还在象牙塔里的少年郎来说，连世界都没有观过，哪儿来的世界观呢。我知道的还太少，\n我的人生经历还太少，所以我认为，这本书我还不适合看。\n\n人生有三种境界，看山是山，看山不是山，看山还是山。我肯定还属于第一种。\n\n再看王国维的人生三境界：  \n昨夜西风凋碧树。独上高楼，望尽天涯路。  \n衣带渐宽终不悔，为伊消得人憔悴。  \n众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。  \n这样看来，我还是在第一境界里游走。\n\n总之，等等吧，等我有足够阅历了再回头看这本书，到那时，肯定会有不一样的理解。那时的我肯定是一个不一样的我。当然，我首先得认识我自己，当然不是一点一点累积与自\n己有关的知识，去学习那些能够让我更深刻认识自己的工具。\n\n#### 语录：\n\n_多少世纪以来，我们被我们的老师、尊长、书本和圣人用汤匙喂大。我们总是说：“请告诉我，那高原、深山及大地的背后是什么？”我们总是满足于他人的描绘，这表示我们\n其实是活在别人的言论中，活得既肤浅又空虚，因此我们充其量只是“二手货”人类。我们活在别人口中的世界，不是受制于自己的个性和倾向，便是受制于外在的情况和环境，\n因此我们只是环境的产物，我们不再新鲜，我们从没有为自己发现过什么东西，我们的心中没有什么东西是原创的、清新的和明澈的。_\n\n_认识自己便是智慧的开端_\n\n_如果你说你要慢慢地学习认识自己，一点一滴地累积，这表示你并不在认识目前的你，你只是在累积有关自己的知识罢了。_\n\n_你必须由衷地想去了解一件事物，才会付出全部的心力去觉察它。_\n\n_所谓“活在当下”，就是在刹那间领会其中的美及喜悦，而不是眷恋它所带来的快感。_\n\n_凡是不断追逐快感的心，无可避免终将面对它的阴影及痛苦。_\n\n_该为恐惧负责的就是念头，道理就是这么简单呐，你不妨亲自观察一下。当你正在专心应付某种危机时，你并没有恐惧，等到念头一起，恐惧才由心生。_\n\n_你一旦认清自己就是恐惧，和恐惧无二无别，自然会停止所有的斗争，然后恐惧就会完全止息下来。_\n\n_只有停止比较，才能使自性呈现，能够活在自性中，才能有真正的平安。_\n\n_自由乃是一种心智状态，它不是从某种东西挣脱的自由，而是一种自由的意识，一种可以怀疑和追问一切的自由，它强烈、活跃而富有生气，因此能清除各式各样的依赖、奴役\n、臣服及逆来顺受的阴影。_\n\n_随心所欲而不逾矩_\n\n_如果你只裴阳你的孩子适应社会，那就是在训练他们如何斗争，那么他们就会被社会摘个。如果你真的爱你的孩子，怎么还会鼓励他们加入这场人间的苦战？_\n\n_真正好好看过日出、日落或湖面月色的人寥寥无几_\n\n_观念永远属于过去，而行动却属于现在，生活也是属于现在的。_\n\n_念头跑来跑去并不是问题，让自己觉察每个念头的动向，才是关键所在。_\n","source":"_posts/chongxinrenshiniziji.md","raw":"---\ntitle: \"《重新认识你自己》——我还不懂哲学\"\ndate: 2015-04-26 14:22:37\ncategories: 韦编三绝\n---\n这本书是我最好的一个朋友给我推荐的，在我们眼里他一直是哲学家。\n\n之前以为，像这种书名顶多就会像某些心灵鸡汤一样，叫我们该怎么做，不该怎么做。但刚看到第一章“没有任何向导”的时候，我就震惊了，当时就意识到，这绝对是一本不可\n多得的好书。绝对只有到达某种境界的人才能看懂。当完全拜读完此书后我真的懵了，我不知道该怎么形容他了，好多好多，我根本看不懂，不是像看技术书籍那种看不懂，而是\n你一想书中蕴涵的哲理的时候你就感觉头脑发热，完全是一种“懵”的状态。\n\n此书原名叫“Freedom From the Known”，当时看到这种翻译也是想了很久，后来发现，结合书中的内容，确实，翻译为“重新认识你自己”或许能更让\n人理解。它一步一步地让你从你的世界观中挣脱，获得自由，获得新生。对于我这样一个还在象牙塔里的少年郎来说，连世界都没有观过，哪儿来的世界观呢。我知道的还太少，\n我的人生经历还太少，所以我认为，这本书我还不适合看。\n\n人生有三种境界，看山是山，看山不是山，看山还是山。我肯定还属于第一种。\n\n再看王国维的人生三境界：  \n昨夜西风凋碧树。独上高楼，望尽天涯路。  \n衣带渐宽终不悔，为伊消得人憔悴。  \n众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。  \n这样看来，我还是在第一境界里游走。\n\n总之，等等吧，等我有足够阅历了再回头看这本书，到那时，肯定会有不一样的理解。那时的我肯定是一个不一样的我。当然，我首先得认识我自己，当然不是一点一点累积与自\n己有关的知识，去学习那些能够让我更深刻认识自己的工具。\n\n#### 语录：\n\n_多少世纪以来，我们被我们的老师、尊长、书本和圣人用汤匙喂大。我们总是说：“请告诉我，那高原、深山及大地的背后是什么？”我们总是满足于他人的描绘，这表示我们\n其实是活在别人的言论中，活得既肤浅又空虚，因此我们充其量只是“二手货”人类。我们活在别人口中的世界，不是受制于自己的个性和倾向，便是受制于外在的情况和环境，\n因此我们只是环境的产物，我们不再新鲜，我们从没有为自己发现过什么东西，我们的心中没有什么东西是原创的、清新的和明澈的。_\n\n_认识自己便是智慧的开端_\n\n_如果你说你要慢慢地学习认识自己，一点一滴地累积，这表示你并不在认识目前的你，你只是在累积有关自己的知识罢了。_\n\n_你必须由衷地想去了解一件事物，才会付出全部的心力去觉察它。_\n\n_所谓“活在当下”，就是在刹那间领会其中的美及喜悦，而不是眷恋它所带来的快感。_\n\n_凡是不断追逐快感的心，无可避免终将面对它的阴影及痛苦。_\n\n_该为恐惧负责的就是念头，道理就是这么简单呐，你不妨亲自观察一下。当你正在专心应付某种危机时，你并没有恐惧，等到念头一起，恐惧才由心生。_\n\n_你一旦认清自己就是恐惧，和恐惧无二无别，自然会停止所有的斗争，然后恐惧就会完全止息下来。_\n\n_只有停止比较，才能使自性呈现，能够活在自性中，才能有真正的平安。_\n\n_自由乃是一种心智状态，它不是从某种东西挣脱的自由，而是一种自由的意识，一种可以怀疑和追问一切的自由，它强烈、活跃而富有生气，因此能清除各式各样的依赖、奴役\n、臣服及逆来顺受的阴影。_\n\n_随心所欲而不逾矩_\n\n_如果你只裴阳你的孩子适应社会，那就是在训练他们如何斗争，那么他们就会被社会摘个。如果你真的爱你的孩子，怎么还会鼓励他们加入这场人间的苦战？_\n\n_真正好好看过日出、日落或湖面月色的人寥寥无几_\n\n_观念永远属于过去，而行动却属于现在，生活也是属于现在的。_\n\n_念头跑来跑去并不是问题，让自己觉察每个念头的动向，才是关键所在。_\n","slug":"chongxinrenshiniziji","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5k001c9vnzi6tya7u4","content":"<p>这本书是我最好的一个朋友给我推荐的，在我们眼里他一直是哲学家。</p>\n<p>之前以为，像这种书名顶多就会像某些心灵鸡汤一样，叫我们该怎么做，不该怎么做。但刚看到第一章“没有任何向导”的时候，我就震惊了，当时就意识到，这绝对是一本不可<br>多得的好书。绝对只有到达某种境界的人才能看懂。当完全拜读完此书后我真的懵了，我不知道该怎么形容他了，好多好多，我根本看不懂，不是像看技术书籍那种看不懂，而是<br>你一想书中蕴涵的哲理的时候你就感觉头脑发热，完全是一种“懵”的状态。</p>\n<p>此书原名叫“Freedom From the Known”，当时看到这种翻译也是想了很久，后来发现，结合书中的内容，确实，翻译为“重新认识你自己”或许能更让<br>人理解。它一步一步地让你从你的世界观中挣脱，获得自由，获得新生。对于我这样一个还在象牙塔里的少年郎来说，连世界都没有观过，哪儿来的世界观呢。我知道的还太少，<br>我的人生经历还太少，所以我认为，这本书我还不适合看。</p>\n<p>人生有三种境界，看山是山，看山不是山，看山还是山。我肯定还属于第一种。</p>\n<p>再看王国维的人生三境界：<br>昨夜西风凋碧树。独上高楼，望尽天涯路。<br>衣带渐宽终不悔，为伊消得人憔悴。<br>众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。<br>这样看来，我还是在第一境界里游走。</p>\n<p>总之，等等吧，等我有足够阅历了再回头看这本书，到那时，肯定会有不一样的理解。那时的我肯定是一个不一样的我。当然，我首先得认识我自己，当然不是一点一点累积与自<br>己有关的知识，去学习那些能够让我更深刻认识自己的工具。</p>\n<h4 id=\"语录：\"><a href=\"#语录：\" class=\"headerlink\" title=\"语录：\"></a>语录：</h4><p><em>多少世纪以来，我们被我们的老师、尊长、书本和圣人用汤匙喂大。我们总是说：“请告诉我，那高原、深山及大地的背后是什么？”我们总是满足于他人的描绘，这表示我们<br>其实是活在别人的言论中，活得既肤浅又空虚，因此我们充其量只是“二手货”人类。我们活在别人口中的世界，不是受制于自己的个性和倾向，便是受制于外在的情况和环境，<br>因此我们只是环境的产物，我们不再新鲜，我们从没有为自己发现过什么东西，我们的心中没有什么东西是原创的、清新的和明澈的。</em></p>\n<p><em>认识自己便是智慧的开端</em></p>\n<p><em>如果你说你要慢慢地学习认识自己，一点一滴地累积，这表示你并不在认识目前的你，你只是在累积有关自己的知识罢了。</em></p>\n<p><em>你必须由衷地想去了解一件事物，才会付出全部的心力去觉察它。</em></p>\n<p><em>所谓“活在当下”，就是在刹那间领会其中的美及喜悦，而不是眷恋它所带来的快感。</em></p>\n<p><em>凡是不断追逐快感的心，无可避免终将面对它的阴影及痛苦。</em></p>\n<p><em>该为恐惧负责的就是念头，道理就是这么简单呐，你不妨亲自观察一下。当你正在专心应付某种危机时，你并没有恐惧，等到念头一起，恐惧才由心生。</em></p>\n<p><em>你一旦认清自己就是恐惧，和恐惧无二无别，自然会停止所有的斗争，然后恐惧就会完全止息下来。</em></p>\n<p><em>只有停止比较，才能使自性呈现，能够活在自性中，才能有真正的平安。</em></p>\n<p><em>自由乃是一种心智状态，它不是从某种东西挣脱的自由，而是一种自由的意识，一种可以怀疑和追问一切的自由，它强烈、活跃而富有生气，因此能清除各式各样的依赖、奴役<br>、臣服及逆来顺受的阴影。</em></p>\n<p><em>随心所欲而不逾矩</em></p>\n<p><em>如果你只裴阳你的孩子适应社会，那就是在训练他们如何斗争，那么他们就会被社会摘个。如果你真的爱你的孩子，怎么还会鼓励他们加入这场人间的苦战？</em></p>\n<p><em>真正好好看过日出、日落或湖面月色的人寥寥无几</em></p>\n<p><em>观念永远属于过去，而行动却属于现在，生活也是属于现在的。</em></p>\n<p><em>念头跑来跑去并不是问题，让自己觉察每个念头的动向，才是关键所在。</em></p>\n","excerpt":"","more":"<p>这本书是我最好的一个朋友给我推荐的，在我们眼里他一直是哲学家。</p>\n<p>之前以为，像这种书名顶多就会像某些心灵鸡汤一样，叫我们该怎么做，不该怎么做。但刚看到第一章“没有任何向导”的时候，我就震惊了，当时就意识到，这绝对是一本不可<br>多得的好书。绝对只有到达某种境界的人才能看懂。当完全拜读完此书后我真的懵了，我不知道该怎么形容他了，好多好多，我根本看不懂，不是像看技术书籍那种看不懂，而是<br>你一想书中蕴涵的哲理的时候你就感觉头脑发热，完全是一种“懵”的状态。</p>\n<p>此书原名叫“Freedom From the Known”，当时看到这种翻译也是想了很久，后来发现，结合书中的内容，确实，翻译为“重新认识你自己”或许能更让<br>人理解。它一步一步地让你从你的世界观中挣脱，获得自由，获得新生。对于我这样一个还在象牙塔里的少年郎来说，连世界都没有观过，哪儿来的世界观呢。我知道的还太少，<br>我的人生经历还太少，所以我认为，这本书我还不适合看。</p>\n<p>人生有三种境界，看山是山，看山不是山，看山还是山。我肯定还属于第一种。</p>\n<p>再看王国维的人生三境界：<br>昨夜西风凋碧树。独上高楼，望尽天涯路。<br>衣带渐宽终不悔，为伊消得人憔悴。<br>众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。<br>这样看来，我还是在第一境界里游走。</p>\n<p>总之，等等吧，等我有足够阅历了再回头看这本书，到那时，肯定会有不一样的理解。那时的我肯定是一个不一样的我。当然，我首先得认识我自己，当然不是一点一点累积与自<br>己有关的知识，去学习那些能够让我更深刻认识自己的工具。</p>\n<h4 id=\"语录：\"><a href=\"#语录：\" class=\"headerlink\" title=\"语录：\"></a>语录：</h4><p><em>多少世纪以来，我们被我们的老师、尊长、书本和圣人用汤匙喂大。我们总是说：“请告诉我，那高原、深山及大地的背后是什么？”我们总是满足于他人的描绘，这表示我们<br>其实是活在别人的言论中，活得既肤浅又空虚，因此我们充其量只是“二手货”人类。我们活在别人口中的世界，不是受制于自己的个性和倾向，便是受制于外在的情况和环境，<br>因此我们只是环境的产物，我们不再新鲜，我们从没有为自己发现过什么东西，我们的心中没有什么东西是原创的、清新的和明澈的。</em></p>\n<p><em>认识自己便是智慧的开端</em></p>\n<p><em>如果你说你要慢慢地学习认识自己，一点一滴地累积，这表示你并不在认识目前的你，你只是在累积有关自己的知识罢了。</em></p>\n<p><em>你必须由衷地想去了解一件事物，才会付出全部的心力去觉察它。</em></p>\n<p><em>所谓“活在当下”，就是在刹那间领会其中的美及喜悦，而不是眷恋它所带来的快感。</em></p>\n<p><em>凡是不断追逐快感的心，无可避免终将面对它的阴影及痛苦。</em></p>\n<p><em>该为恐惧负责的就是念头，道理就是这么简单呐，你不妨亲自观察一下。当你正在专心应付某种危机时，你并没有恐惧，等到念头一起，恐惧才由心生。</em></p>\n<p><em>你一旦认清自己就是恐惧，和恐惧无二无别，自然会停止所有的斗争，然后恐惧就会完全止息下来。</em></p>\n<p><em>只有停止比较，才能使自性呈现，能够活在自性中，才能有真正的平安。</em></p>\n<p><em>自由乃是一种心智状态，它不是从某种东西挣脱的自由，而是一种自由的意识，一种可以怀疑和追问一切的自由，它强烈、活跃而富有生气，因此能清除各式各样的依赖、奴役<br>、臣服及逆来顺受的阴影。</em></p>\n<p><em>随心所欲而不逾矩</em></p>\n<p><em>如果你只裴阳你的孩子适应社会，那就是在训练他们如何斗争，那么他们就会被社会摘个。如果你真的爱你的孩子，怎么还会鼓励他们加入这场人间的苦战？</em></p>\n<p><em>真正好好看过日出、日落或湖面月色的人寥寥无几</em></p>\n<p><em>观念永远属于过去，而行动却属于现在，生活也是属于现在的。</em></p>\n<p><em>念头跑来跑去并不是问题，让自己觉察每个念头的动向，才是关键所在。</em></p>\n"},{"title":"《编程珠玑》——各章理解","date":"2014-11-03T04:17:09.000Z","_content":"# 《编程珠玑》\n\n## 第一部分 基础\n\n### 第1章 开篇\n\n问题抽象描述：对10^7个正整数进行排序，只能使用1MB左右的内存空间\n\n解决方案：使用位图，每个比特位代表一个整数，如果出现该整数则将该位置为1.\n\n应用：该方法适合输入数据限制在相对较小的范围内；数据没有重复；而且对于每条记录而言，除了单一的整数外，没有任何其他关联数据。位图的数据结构，描述了一个有限定\n义域内的稠密集合。\n\n### 第2章 啊哈！算法\n\n问题抽象描述：A.找出一个不在40亿个随机排列的32位整数的顺序文件中的数，仅有几百字节的内存\nB.将一个n元一维向量向左选装i个位置，仅有数十个额外字节的存储空间，在正比于n的时间内完成向量的旋转 C.找出一个英语字典所有变位词集合。(pots,\nptos, stop这种变位词)\n\n解决方法：A.二分搜索：采用已知包含至少一个缺失元素的一系列整数作为范围，并使用包含所有这些整数在内的文件表示这个范围。通过统计中间点之上和之下的元素来探测\n范围；或者上面或者下面的范围具有至多全部范围的一般元素。由于整个范围中有一个缺失元素，因此我们所需的那一半范围中必须也包含缺失的元素。 B.其中以前在很多地\n方都看到过这个方法，从ab开始，首先对a求逆得到c，然后对b求逆得到d，最后整体求逆，就得到ba了，然后各段的逆又可以在内部再次求逆，以此递归。\nC.标识字典中的每一个词，使得在相同变位词类中的单词具有相同的标识。\n\n### 第3章 数据决定程序结构\n\n对数据结构所带来的方便进行了一些简述，这些在当今高级语言中都有所体现。\n\n### 第4章 编写正确的程序\n\n本章通过一些证明方法来证明了一个算法的正确性，由于我已经在《算法导论》里面饱受了数学的折磨了，这张直接跳过了，完全看不懂。\n\n本章还介绍了一种用于检验程序正确性的方法，断言(assertion)或者叫不变式(invariant)。由于输入、程序变量和输出之间的关系勾勒出了程序的“状\n态”，断言使得程序猿可以准确阐述这些关系。\n\n### 第5章 编程小事\n\n本章写了一些测试的方法，不过都是手动进行测试。毋庸置疑，测试在编程中绝不是小事，特别是大型项目的开发，作者以小见大，说明了测试对于系统的稳定性和优化所带来的\n重大影响。\n\n## 第二部分 性能\n\n### 第6章 程序性能分析\n\n从设计层面将程序性分为了几个方面：问题定义、系统结构、算法和数据结构、代码调优、系统软件、硬件。也有一个简单的分析方法就是看算法的复杂度，用O来表示那种。\n\n### 第7章 粗略估算\n\n本章使用生活中大量的例子来描述如何进行粗略估算，最近正好在看《蝎子网络》，发现我的数学功底越来越差，实际生活中有大量的使用估算的地方，比如，验证一些生活常识\n、验证一些新闻的正确性等。日常生活中的速算。\n\n粗略估算的一些基本技巧：快速检验、经验法则(72法则)。还有一些估算定律：Little定律(队列中物体的平均数量为进入速率与平均停留时间的乘积。)\n\n### 第8章 算法设计的技术\n\n本章主要讲述了分治算法，这一算法我曾在算法导论上看过。\n\n本章还介绍了几个重要的算法设计技术：保存状态，避免重复计算；将信息预处理至数据结构中；分治算法；扫描算法；累计；下界。\n\n### 第9章 代码调优\n\n本章介绍了优化代码的一些简单的思想和方法。例如将最常见类型的空闲记录缓存在一个链表中。然后，就可以通过对该链表的快速访问来处理常见的请求，而不必调用通用的内\n存分配程序。恰当使用函数、宏和内联代码。\n\n”代码调优的最重要的原理就是尽量少用它.“\n\n### 第十章 节省空间\n\nUnix操作系统发明者(Dennis Ritchie和Ken Thompson)在论文中说道：“在系统及其软件方面，总是存在着相当严重的空间约束。如果同时对\n合理的效率和强大的能力提出要求，那么空间约束不仅具有经济上的意义，还会使设计更优雅一些。”\n\n其实节省空间在所有地方都可以看到，比如在最初定义一个整数位数的时候，我一直使用的是int，但是如果要节约空间就使用其他的一些分配方法。\n\nhash(散列表)特别适合某些稀疏场合。\n\n如果一定要消耗时间来节省空间，在有些变量的计算上选择不存储，重新计算的方法更有效。在给变量分配内存时就使用动态分配。\n\n## 第三部分 应用\n\n### 第11章 排序\n\n作者通过自己对快速排序的几种方法的改进超越了库函数。就像其他任何强大的工具一样，我们经常会在不该使用排序的时候使用排序，而在应该使用排序的时候却不使用排序。\n\n### 第12章 取样问题\n\n研究的一个问题就是输出随机数，虽然很多语言都提供了类似的随机函数，但是感觉目前大多数语言，特别是传统语言的随机几乎都无法做到真随机，必须自己在假随机上进行修\n改。\n\n法；实现一种解决方案；回顾。\n\n### 第13章：搜索\n\n线性结构；二分搜索数。并提到了库的作用，C++标准模库提供了一个实现起来很容易，并且维护和扩展也比较简单的通用解决方案。当遇到涉及数据结构的问题时，我们的第\n一反应应该是寻求解决问题的通用工具。当然，有些时候针对特定的问题，使用专用的算法可能会大大提高运行速度。我们还要使用代码调优方法，比如将递归函数重写为迭代版\n本可以使链表的速度提升为原来的3倍，对大多数结构来说，引入哨兵可以获得清晰、简单的代码，并缩短运行时间。\n\n### 第14章：堆\n\n堆其实也是一种二叉树，但其有两个不同的性质：一是顺序性，任何结点的值都小于或等于其子结点的值。第二个性质就是形状，不是完整的三角形，右下角可以缺一点。\n\n### 第15章：字符串\n\n通过单词、短语和文本几个方面来处理字符串\n\n# 《编程珠玑》(续)\n\n## 第一部分 编程技术\n\n## 第1章 性能监视工具\n\n通过一些常用的代码性能监视工具，如行计数性能监视、过程时间性能监视等可以查看到一个程序里面各条语句的执行情况，以查找代码中执行最慢的地方，因为“一个程序中不\n到4\\%的语句通常占用了一半以上的运行时间”。我们最应该优化的就是这个地方。\n\n### 第2章 关联数组\n\n貌似本书很多章都是使用的Awk来讲解，但是Awk中的关联数组，我感觉就很像其他脚本语言中的字典，十分方便，但awk对字符串的处理可能更加方便，不过我是不喜欢\n其编码风格的。\n\n### 第3章 程序猿的忏悔\n\n再次提到调试脚手架的重要性，这一点上，Awk语言确实能起到很大的帮助，“Awk是一种构造算法原型的很好的语言，其内联数组使你模拟许多常用的数组结构，它的字段\n、隐式循环、模式-动作对等设计极大地简化了输入输出过程，隐式的变量声明和初始化也使得程序更加简洁。”。正如Fred\nBrooks认为“一个软件产品中应该有一半的代码都是脚手架”。\n\n### 第4章 自描述数据\n\n作者是使用的文档生成器来描述，其实本章所说的自描述数据在某种意义上类似于其他语言的一种模版，比如留下\\%s等占位符，让其他变量来填充。\n\n## 第二部分 实用技巧\n\n### 第5章 劈开戈尔迪之结\n\n背景：在古希腊神话中，能解开戈尔迪之结者就可以当亚细亚之王，几百年后亚历山大大帝来了。他没有重蹈覆辙，而是拔出剑来，将结直接劈开，随即征服了亚洲。从那时起，\n“劈开戈尔迪之结”意味着为复杂问题找出聪明的解法。\n\n我们在寻找解决问题的方法的需要考虑如下几个问题：什么是用户真正的需求(用户要求可预测性甚于要求速度)；考虑成本与收益的平衡；别把问题弄得太复杂也别太简单；用\n正确的方法使用正确的工具；对员工的奖赏。。。\n\n简单的方法谁都想要，但并不是每个人都能找得到，我们还应该考虑时间成本，别花过多时间去思考简单的方法，没准一个你目前觉得复杂的方法可以很快完成项目。\n\n### 第6章 计算机科学箴言集\n\n居然把一些计算机的箴言单独列为一章，我也是醉了。\n\n### 第7章 粗略估算\n\n在原书已经有了几乎一样的内容...\n\n### 第8章 人员备忘录\n\n大神，这是你自己的日记吗？\n\n## 第三部分 人性化I/O\n\n### 第9章 小语言\n\n作者以Pic为例子讲解了一种小的语言是如何运行起来的，相信看过编译原理的同学都能理解。\n\n### 第10章 文档设计\n\n原以为是要教我们关于PRD这样的文档的写法，不过只是教了我们一些写Word文档的基本的规则，不过我觉得一个有基本审美观的人无论怎么写也不会写得很差的。\n\n### 第11章 图形化输出\n\n合理使用图形工具。\n\n### 第12章 对调查的研究\n\n也是借调查这一事件来强调模版的好处。\n\n## 第四部分 算法\n\n### 第13章 绝妙的取样\n\n好吧，就是随机数的一些个问题。\n\n### 第14章 编写数值计算程序\n\n牛顿迭代，这个我倒是完全理解。本章学到重要的一点就是“在特殊的上下文环境中针对特殊目的设计的代码比通用的程序更有效”。\n\n### 第15章 选择\n\n使用分治算法来进行选择，太聪明了。\n","source":"_posts/bianchengzhuji-understand.md","raw":"---\ntitle: \"《编程珠玑》——各章理解\"\ndate: 2014-11-03 12:17:09\ncategories: 韦编三绝\n---\n# 《编程珠玑》\n\n## 第一部分 基础\n\n### 第1章 开篇\n\n问题抽象描述：对10^7个正整数进行排序，只能使用1MB左右的内存空间\n\n解决方案：使用位图，每个比特位代表一个整数，如果出现该整数则将该位置为1.\n\n应用：该方法适合输入数据限制在相对较小的范围内；数据没有重复；而且对于每条记录而言，除了单一的整数外，没有任何其他关联数据。位图的数据结构，描述了一个有限定\n义域内的稠密集合。\n\n### 第2章 啊哈！算法\n\n问题抽象描述：A.找出一个不在40亿个随机排列的32位整数的顺序文件中的数，仅有几百字节的内存\nB.将一个n元一维向量向左选装i个位置，仅有数十个额外字节的存储空间，在正比于n的时间内完成向量的旋转 C.找出一个英语字典所有变位词集合。(pots,\nptos, stop这种变位词)\n\n解决方法：A.二分搜索：采用已知包含至少一个缺失元素的一系列整数作为范围，并使用包含所有这些整数在内的文件表示这个范围。通过统计中间点之上和之下的元素来探测\n范围；或者上面或者下面的范围具有至多全部范围的一般元素。由于整个范围中有一个缺失元素，因此我们所需的那一半范围中必须也包含缺失的元素。 B.其中以前在很多地\n方都看到过这个方法，从ab开始，首先对a求逆得到c，然后对b求逆得到d，最后整体求逆，就得到ba了，然后各段的逆又可以在内部再次求逆，以此递归。\nC.标识字典中的每一个词，使得在相同变位词类中的单词具有相同的标识。\n\n### 第3章 数据决定程序结构\n\n对数据结构所带来的方便进行了一些简述，这些在当今高级语言中都有所体现。\n\n### 第4章 编写正确的程序\n\n本章通过一些证明方法来证明了一个算法的正确性，由于我已经在《算法导论》里面饱受了数学的折磨了，这张直接跳过了，完全看不懂。\n\n本章还介绍了一种用于检验程序正确性的方法，断言(assertion)或者叫不变式(invariant)。由于输入、程序变量和输出之间的关系勾勒出了程序的“状\n态”，断言使得程序猿可以准确阐述这些关系。\n\n### 第5章 编程小事\n\n本章写了一些测试的方法，不过都是手动进行测试。毋庸置疑，测试在编程中绝不是小事，特别是大型项目的开发，作者以小见大，说明了测试对于系统的稳定性和优化所带来的\n重大影响。\n\n## 第二部分 性能\n\n### 第6章 程序性能分析\n\n从设计层面将程序性分为了几个方面：问题定义、系统结构、算法和数据结构、代码调优、系统软件、硬件。也有一个简单的分析方法就是看算法的复杂度，用O来表示那种。\n\n### 第7章 粗略估算\n\n本章使用生活中大量的例子来描述如何进行粗略估算，最近正好在看《蝎子网络》，发现我的数学功底越来越差，实际生活中有大量的使用估算的地方，比如，验证一些生活常识\n、验证一些新闻的正确性等。日常生活中的速算。\n\n粗略估算的一些基本技巧：快速检验、经验法则(72法则)。还有一些估算定律：Little定律(队列中物体的平均数量为进入速率与平均停留时间的乘积。)\n\n### 第8章 算法设计的技术\n\n本章主要讲述了分治算法，这一算法我曾在算法导论上看过。\n\n本章还介绍了几个重要的算法设计技术：保存状态，避免重复计算；将信息预处理至数据结构中；分治算法；扫描算法；累计；下界。\n\n### 第9章 代码调优\n\n本章介绍了优化代码的一些简单的思想和方法。例如将最常见类型的空闲记录缓存在一个链表中。然后，就可以通过对该链表的快速访问来处理常见的请求，而不必调用通用的内\n存分配程序。恰当使用函数、宏和内联代码。\n\n”代码调优的最重要的原理就是尽量少用它.“\n\n### 第十章 节省空间\n\nUnix操作系统发明者(Dennis Ritchie和Ken Thompson)在论文中说道：“在系统及其软件方面，总是存在着相当严重的空间约束。如果同时对\n合理的效率和强大的能力提出要求，那么空间约束不仅具有经济上的意义，还会使设计更优雅一些。”\n\n其实节省空间在所有地方都可以看到，比如在最初定义一个整数位数的时候，我一直使用的是int，但是如果要节约空间就使用其他的一些分配方法。\n\nhash(散列表)特别适合某些稀疏场合。\n\n如果一定要消耗时间来节省空间，在有些变量的计算上选择不存储，重新计算的方法更有效。在给变量分配内存时就使用动态分配。\n\n## 第三部分 应用\n\n### 第11章 排序\n\n作者通过自己对快速排序的几种方法的改进超越了库函数。就像其他任何强大的工具一样，我们经常会在不该使用排序的时候使用排序，而在应该使用排序的时候却不使用排序。\n\n### 第12章 取样问题\n\n研究的一个问题就是输出随机数，虽然很多语言都提供了类似的随机函数，但是感觉目前大多数语言，特别是传统语言的随机几乎都无法做到真随机，必须自己在假随机上进行修\n改。\n\n法；实现一种解决方案；回顾。\n\n### 第13章：搜索\n\n线性结构；二分搜索数。并提到了库的作用，C++标准模库提供了一个实现起来很容易，并且维护和扩展也比较简单的通用解决方案。当遇到涉及数据结构的问题时，我们的第\n一反应应该是寻求解决问题的通用工具。当然，有些时候针对特定的问题，使用专用的算法可能会大大提高运行速度。我们还要使用代码调优方法，比如将递归函数重写为迭代版\n本可以使链表的速度提升为原来的3倍，对大多数结构来说，引入哨兵可以获得清晰、简单的代码，并缩短运行时间。\n\n### 第14章：堆\n\n堆其实也是一种二叉树，但其有两个不同的性质：一是顺序性，任何结点的值都小于或等于其子结点的值。第二个性质就是形状，不是完整的三角形，右下角可以缺一点。\n\n### 第15章：字符串\n\n通过单词、短语和文本几个方面来处理字符串\n\n# 《编程珠玑》(续)\n\n## 第一部分 编程技术\n\n## 第1章 性能监视工具\n\n通过一些常用的代码性能监视工具，如行计数性能监视、过程时间性能监视等可以查看到一个程序里面各条语句的执行情况，以查找代码中执行最慢的地方，因为“一个程序中不\n到4\\%的语句通常占用了一半以上的运行时间”。我们最应该优化的就是这个地方。\n\n### 第2章 关联数组\n\n貌似本书很多章都是使用的Awk来讲解，但是Awk中的关联数组，我感觉就很像其他脚本语言中的字典，十分方便，但awk对字符串的处理可能更加方便，不过我是不喜欢\n其编码风格的。\n\n### 第3章 程序猿的忏悔\n\n再次提到调试脚手架的重要性，这一点上，Awk语言确实能起到很大的帮助，“Awk是一种构造算法原型的很好的语言，其内联数组使你模拟许多常用的数组结构，它的字段\n、隐式循环、模式-动作对等设计极大地简化了输入输出过程，隐式的变量声明和初始化也使得程序更加简洁。”。正如Fred\nBrooks认为“一个软件产品中应该有一半的代码都是脚手架”。\n\n### 第4章 自描述数据\n\n作者是使用的文档生成器来描述，其实本章所说的自描述数据在某种意义上类似于其他语言的一种模版，比如留下\\%s等占位符，让其他变量来填充。\n\n## 第二部分 实用技巧\n\n### 第5章 劈开戈尔迪之结\n\n背景：在古希腊神话中，能解开戈尔迪之结者就可以当亚细亚之王，几百年后亚历山大大帝来了。他没有重蹈覆辙，而是拔出剑来，将结直接劈开，随即征服了亚洲。从那时起，\n“劈开戈尔迪之结”意味着为复杂问题找出聪明的解法。\n\n我们在寻找解决问题的方法的需要考虑如下几个问题：什么是用户真正的需求(用户要求可预测性甚于要求速度)；考虑成本与收益的平衡；别把问题弄得太复杂也别太简单；用\n正确的方法使用正确的工具；对员工的奖赏。。。\n\n简单的方法谁都想要，但并不是每个人都能找得到，我们还应该考虑时间成本，别花过多时间去思考简单的方法，没准一个你目前觉得复杂的方法可以很快完成项目。\n\n### 第6章 计算机科学箴言集\n\n居然把一些计算机的箴言单独列为一章，我也是醉了。\n\n### 第7章 粗略估算\n\n在原书已经有了几乎一样的内容...\n\n### 第8章 人员备忘录\n\n大神，这是你自己的日记吗？\n\n## 第三部分 人性化I/O\n\n### 第9章 小语言\n\n作者以Pic为例子讲解了一种小的语言是如何运行起来的，相信看过编译原理的同学都能理解。\n\n### 第10章 文档设计\n\n原以为是要教我们关于PRD这样的文档的写法，不过只是教了我们一些写Word文档的基本的规则，不过我觉得一个有基本审美观的人无论怎么写也不会写得很差的。\n\n### 第11章 图形化输出\n\n合理使用图形工具。\n\n### 第12章 对调查的研究\n\n也是借调查这一事件来强调模版的好处。\n\n## 第四部分 算法\n\n### 第13章 绝妙的取样\n\n好吧，就是随机数的一些个问题。\n\n### 第14章 编写数值计算程序\n\n牛顿迭代，这个我倒是完全理解。本章学到重要的一点就是“在特殊的上下文环境中针对特殊目的设计的代码比通用的程序更有效”。\n\n### 第15章 选择\n\n使用分治算法来进行选择，太聪明了。\n","slug":"bianchengzhuji-understand","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5n001e9vnz0x8xo1z3","content":"<h1 id=\"《编程珠玑》\"><a href=\"#《编程珠玑》\" class=\"headerlink\" title=\"《编程珠玑》\"></a>《编程珠玑》</h1><h2 id=\"第一部分-基础\"><a href=\"#第一部分-基础\" class=\"headerlink\" title=\"第一部分 基础\"></a>第一部分 基础</h2><h3 id=\"第1章-开篇\"><a href=\"#第1章-开篇\" class=\"headerlink\" title=\"第1章 开篇\"></a>第1章 开篇</h3><p>问题抽象描述：对10^7个正整数进行排序，只能使用1MB左右的内存空间</p>\n<p>解决方案：使用位图，每个比特位代表一个整数，如果出现该整数则将该位置为1.</p>\n<p>应用：该方法适合输入数据限制在相对较小的范围内；数据没有重复；而且对于每条记录而言，除了单一的整数外，没有任何其他关联数据。位图的数据结构，描述了一个有限定<br>义域内的稠密集合。</p>\n<h3 id=\"第2章-啊哈！算法\"><a href=\"#第2章-啊哈！算法\" class=\"headerlink\" title=\"第2章 啊哈！算法\"></a>第2章 啊哈！算法</h3><p>问题抽象描述：A.找出一个不在40亿个随机排列的32位整数的顺序文件中的数，仅有几百字节的内存<br>B.将一个n元一维向量向左选装i个位置，仅有数十个额外字节的存储空间，在正比于n的时间内完成向量的旋转 C.找出一个英语字典所有变位词集合。(pots,<br>ptos, stop这种变位词)</p>\n<p>解决方法：A.二分搜索：采用已知包含至少一个缺失元素的一系列整数作为范围，并使用包含所有这些整数在内的文件表示这个范围。通过统计中间点之上和之下的元素来探测<br>范围；或者上面或者下面的范围具有至多全部范围的一般元素。由于整个范围中有一个缺失元素，因此我们所需的那一半范围中必须也包含缺失的元素。 B.其中以前在很多地<br>方都看到过这个方法，从ab开始，首先对a求逆得到c，然后对b求逆得到d，最后整体求逆，就得到ba了，然后各段的逆又可以在内部再次求逆，以此递归。<br>C.标识字典中的每一个词，使得在相同变位词类中的单词具有相同的标识。</p>\n<h3 id=\"第3章-数据决定程序结构\"><a href=\"#第3章-数据决定程序结构\" class=\"headerlink\" title=\"第3章 数据决定程序结构\"></a>第3章 数据决定程序结构</h3><p>对数据结构所带来的方便进行了一些简述，这些在当今高级语言中都有所体现。</p>\n<h3 id=\"第4章-编写正确的程序\"><a href=\"#第4章-编写正确的程序\" class=\"headerlink\" title=\"第4章 编写正确的程序\"></a>第4章 编写正确的程序</h3><p>本章通过一些证明方法来证明了一个算法的正确性，由于我已经在《算法导论》里面饱受了数学的折磨了，这张直接跳过了，完全看不懂。</p>\n<p>本章还介绍了一种用于检验程序正确性的方法，断言(assertion)或者叫不变式(invariant)。由于输入、程序变量和输出之间的关系勾勒出了程序的“状<br>态”，断言使得程序猿可以准确阐述这些关系。</p>\n<h3 id=\"第5章-编程小事\"><a href=\"#第5章-编程小事\" class=\"headerlink\" title=\"第5章 编程小事\"></a>第5章 编程小事</h3><p>本章写了一些测试的方法，不过都是手动进行测试。毋庸置疑，测试在编程中绝不是小事，特别是大型项目的开发，作者以小见大，说明了测试对于系统的稳定性和优化所带来的<br>重大影响。</p>\n<h2 id=\"第二部分-性能\"><a href=\"#第二部分-性能\" class=\"headerlink\" title=\"第二部分 性能\"></a>第二部分 性能</h2><h3 id=\"第6章-程序性能分析\"><a href=\"#第6章-程序性能分析\" class=\"headerlink\" title=\"第6章 程序性能分析\"></a>第6章 程序性能分析</h3><p>从设计层面将程序性分为了几个方面：问题定义、系统结构、算法和数据结构、代码调优、系统软件、硬件。也有一个简单的分析方法就是看算法的复杂度，用O来表示那种。</p>\n<h3 id=\"第7章-粗略估算\"><a href=\"#第7章-粗略估算\" class=\"headerlink\" title=\"第7章 粗略估算\"></a>第7章 粗略估算</h3><p>本章使用生活中大量的例子来描述如何进行粗略估算，最近正好在看《蝎子网络》，发现我的数学功底越来越差，实际生活中有大量的使用估算的地方，比如，验证一些生活常识<br>、验证一些新闻的正确性等。日常生活中的速算。</p>\n<p>粗略估算的一些基本技巧：快速检验、经验法则(72法则)。还有一些估算定律：Little定律(队列中物体的平均数量为进入速率与平均停留时间的乘积。)</p>\n<h3 id=\"第8章-算法设计的技术\"><a href=\"#第8章-算法设计的技术\" class=\"headerlink\" title=\"第8章 算法设计的技术\"></a>第8章 算法设计的技术</h3><p>本章主要讲述了分治算法，这一算法我曾在算法导论上看过。</p>\n<p>本章还介绍了几个重要的算法设计技术：保存状态，避免重复计算；将信息预处理至数据结构中；分治算法；扫描算法；累计；下界。</p>\n<h3 id=\"第9章-代码调优\"><a href=\"#第9章-代码调优\" class=\"headerlink\" title=\"第9章 代码调优\"></a>第9章 代码调优</h3><p>本章介绍了优化代码的一些简单的思想和方法。例如将最常见类型的空闲记录缓存在一个链表中。然后，就可以通过对该链表的快速访问来处理常见的请求，而不必调用通用的内<br>存分配程序。恰当使用函数、宏和内联代码。</p>\n<p>”代码调优的最重要的原理就是尽量少用它.“</p>\n<h3 id=\"第十章-节省空间\"><a href=\"#第十章-节省空间\" class=\"headerlink\" title=\"第十章 节省空间\"></a>第十章 节省空间</h3><p>Unix操作系统发明者(Dennis Ritchie和Ken Thompson)在论文中说道：“在系统及其软件方面，总是存在着相当严重的空间约束。如果同时对<br>合理的效率和强大的能力提出要求，那么空间约束不仅具有经济上的意义，还会使设计更优雅一些。”</p>\n<p>其实节省空间在所有地方都可以看到，比如在最初定义一个整数位数的时候，我一直使用的是int，但是如果要节约空间就使用其他的一些分配方法。</p>\n<p>hash(散列表)特别适合某些稀疏场合。</p>\n<p>如果一定要消耗时间来节省空间，在有些变量的计算上选择不存储，重新计算的方法更有效。在给变量分配内存时就使用动态分配。</p>\n<h2 id=\"第三部分-应用\"><a href=\"#第三部分-应用\" class=\"headerlink\" title=\"第三部分 应用\"></a>第三部分 应用</h2><h3 id=\"第11章-排序\"><a href=\"#第11章-排序\" class=\"headerlink\" title=\"第11章 排序\"></a>第11章 排序</h3><p>作者通过自己对快速排序的几种方法的改进超越了库函数。就像其他任何强大的工具一样，我们经常会在不该使用排序的时候使用排序，而在应该使用排序的时候却不使用排序。</p>\n<h3 id=\"第12章-取样问题\"><a href=\"#第12章-取样问题\" class=\"headerlink\" title=\"第12章 取样问题\"></a>第12章 取样问题</h3><p>研究的一个问题就是输出随机数，虽然很多语言都提供了类似的随机函数，但是感觉目前大多数语言，特别是传统语言的随机几乎都无法做到真随机，必须自己在假随机上进行修<br>改。</p>\n<p>法；实现一种解决方案；回顾。</p>\n<h3 id=\"第13章：搜索\"><a href=\"#第13章：搜索\" class=\"headerlink\" title=\"第13章：搜索\"></a>第13章：搜索</h3><p>线性结构；二分搜索数。并提到了库的作用，C++标准模库提供了一个实现起来很容易，并且维护和扩展也比较简单的通用解决方案。当遇到涉及数据结构的问题时，我们的第<br>一反应应该是寻求解决问题的通用工具。当然，有些时候针对特定的问题，使用专用的算法可能会大大提高运行速度。我们还要使用代码调优方法，比如将递归函数重写为迭代版<br>本可以使链表的速度提升为原来的3倍，对大多数结构来说，引入哨兵可以获得清晰、简单的代码，并缩短运行时间。</p>\n<h3 id=\"第14章：堆\"><a href=\"#第14章：堆\" class=\"headerlink\" title=\"第14章：堆\"></a>第14章：堆</h3><p>堆其实也是一种二叉树，但其有两个不同的性质：一是顺序性，任何结点的值都小于或等于其子结点的值。第二个性质就是形状，不是完整的三角形，右下角可以缺一点。</p>\n<h3 id=\"第15章：字符串\"><a href=\"#第15章：字符串\" class=\"headerlink\" title=\"第15章：字符串\"></a>第15章：字符串</h3><p>通过单词、短语和文本几个方面来处理字符串</p>\n<h1 id=\"《编程珠玑》-续\"><a href=\"#《编程珠玑》-续\" class=\"headerlink\" title=\"《编程珠玑》(续)\"></a>《编程珠玑》(续)</h1><h2 id=\"第一部分-编程技术\"><a href=\"#第一部分-编程技术\" class=\"headerlink\" title=\"第一部分 编程技术\"></a>第一部分 编程技术</h2><h2 id=\"第1章-性能监视工具\"><a href=\"#第1章-性能监视工具\" class=\"headerlink\" title=\"第1章 性能监视工具\"></a>第1章 性能监视工具</h2><p>通过一些常用的代码性能监视工具，如行计数性能监视、过程时间性能监视等可以查看到一个程序里面各条语句的执行情况，以查找代码中执行最慢的地方，因为“一个程序中不<br>到4\\%的语句通常占用了一半以上的运行时间”。我们最应该优化的就是这个地方。</p>\n<h3 id=\"第2章-关联数组\"><a href=\"#第2章-关联数组\" class=\"headerlink\" title=\"第2章 关联数组\"></a>第2章 关联数组</h3><p>貌似本书很多章都是使用的Awk来讲解，但是Awk中的关联数组，我感觉就很像其他脚本语言中的字典，十分方便，但awk对字符串的处理可能更加方便，不过我是不喜欢<br>其编码风格的。</p>\n<h3 id=\"第3章-程序猿的忏悔\"><a href=\"#第3章-程序猿的忏悔\" class=\"headerlink\" title=\"第3章 程序猿的忏悔\"></a>第3章 程序猿的忏悔</h3><p>再次提到调试脚手架的重要性，这一点上，Awk语言确实能起到很大的帮助，“Awk是一种构造算法原型的很好的语言，其内联数组使你模拟许多常用的数组结构，它的字段<br>、隐式循环、模式-动作对等设计极大地简化了输入输出过程，隐式的变量声明和初始化也使得程序更加简洁。”。正如Fred<br>Brooks认为“一个软件产品中应该有一半的代码都是脚手架”。</p>\n<h3 id=\"第4章-自描述数据\"><a href=\"#第4章-自描述数据\" class=\"headerlink\" title=\"第4章 自描述数据\"></a>第4章 自描述数据</h3><p>作者是使用的文档生成器来描述，其实本章所说的自描述数据在某种意义上类似于其他语言的一种模版，比如留下\\%s等占位符，让其他变量来填充。</p>\n<h2 id=\"第二部分-实用技巧\"><a href=\"#第二部分-实用技巧\" class=\"headerlink\" title=\"第二部分 实用技巧\"></a>第二部分 实用技巧</h2><h3 id=\"第5章-劈开戈尔迪之结\"><a href=\"#第5章-劈开戈尔迪之结\" class=\"headerlink\" title=\"第5章 劈开戈尔迪之结\"></a>第5章 劈开戈尔迪之结</h3><p>背景：在古希腊神话中，能解开戈尔迪之结者就可以当亚细亚之王，几百年后亚历山大大帝来了。他没有重蹈覆辙，而是拔出剑来，将结直接劈开，随即征服了亚洲。从那时起，<br>“劈开戈尔迪之结”意味着为复杂问题找出聪明的解法。</p>\n<p>我们在寻找解决问题的方法的需要考虑如下几个问题：什么是用户真正的需求(用户要求可预测性甚于要求速度)；考虑成本与收益的平衡；别把问题弄得太复杂也别太简单；用<br>正确的方法使用正确的工具；对员工的奖赏。。。</p>\n<p>简单的方法谁都想要，但并不是每个人都能找得到，我们还应该考虑时间成本，别花过多时间去思考简单的方法，没准一个你目前觉得复杂的方法可以很快完成项目。</p>\n<h3 id=\"第6章-计算机科学箴言集\"><a href=\"#第6章-计算机科学箴言集\" class=\"headerlink\" title=\"第6章 计算机科学箴言集\"></a>第6章 计算机科学箴言集</h3><p>居然把一些计算机的箴言单独列为一章，我也是醉了。</p>\n<h3 id=\"第7章-粗略估算-1\"><a href=\"#第7章-粗略估算-1\" class=\"headerlink\" title=\"第7章 粗略估算\"></a>第7章 粗略估算</h3><p>在原书已经有了几乎一样的内容…</p>\n<h3 id=\"第8章-人员备忘录\"><a href=\"#第8章-人员备忘录\" class=\"headerlink\" title=\"第8章 人员备忘录\"></a>第8章 人员备忘录</h3><p>大神，这是你自己的日记吗？</p>\n<h2 id=\"第三部分-人性化I-O\"><a href=\"#第三部分-人性化I-O\" class=\"headerlink\" title=\"第三部分 人性化I/O\"></a>第三部分 人性化I/O</h2><h3 id=\"第9章-小语言\"><a href=\"#第9章-小语言\" class=\"headerlink\" title=\"第9章 小语言\"></a>第9章 小语言</h3><p>作者以Pic为例子讲解了一种小的语言是如何运行起来的，相信看过编译原理的同学都能理解。</p>\n<h3 id=\"第10章-文档设计\"><a href=\"#第10章-文档设计\" class=\"headerlink\" title=\"第10章 文档设计\"></a>第10章 文档设计</h3><p>原以为是要教我们关于PRD这样的文档的写法，不过只是教了我们一些写Word文档的基本的规则，不过我觉得一个有基本审美观的人无论怎么写也不会写得很差的。</p>\n<h3 id=\"第11章-图形化输出\"><a href=\"#第11章-图形化输出\" class=\"headerlink\" title=\"第11章 图形化输出\"></a>第11章 图形化输出</h3><p>合理使用图形工具。</p>\n<h3 id=\"第12章-对调查的研究\"><a href=\"#第12章-对调查的研究\" class=\"headerlink\" title=\"第12章 对调查的研究\"></a>第12章 对调查的研究</h3><p>也是借调查这一事件来强调模版的好处。</p>\n<h2 id=\"第四部分-算法\"><a href=\"#第四部分-算法\" class=\"headerlink\" title=\"第四部分 算法\"></a>第四部分 算法</h2><h3 id=\"第13章-绝妙的取样\"><a href=\"#第13章-绝妙的取样\" class=\"headerlink\" title=\"第13章 绝妙的取样\"></a>第13章 绝妙的取样</h3><p>好吧，就是随机数的一些个问题。</p>\n<h3 id=\"第14章-编写数值计算程序\"><a href=\"#第14章-编写数值计算程序\" class=\"headerlink\" title=\"第14章 编写数值计算程序\"></a>第14章 编写数值计算程序</h3><p>牛顿迭代，这个我倒是完全理解。本章学到重要的一点就是“在特殊的上下文环境中针对特殊目的设计的代码比通用的程序更有效”。</p>\n<h3 id=\"第15章-选择\"><a href=\"#第15章-选择\" class=\"headerlink\" title=\"第15章 选择\"></a>第15章 选择</h3><p>使用分治算法来进行选择，太聪明了。</p>\n","excerpt":"","more":"<h1 id=\"《编程珠玑》\"><a href=\"#《编程珠玑》\" class=\"headerlink\" title=\"《编程珠玑》\"></a>《编程珠玑》</h1><h2 id=\"第一部分-基础\"><a href=\"#第一部分-基础\" class=\"headerlink\" title=\"第一部分 基础\"></a>第一部分 基础</h2><h3 id=\"第1章-开篇\"><a href=\"#第1章-开篇\" class=\"headerlink\" title=\"第1章 开篇\"></a>第1章 开篇</h3><p>问题抽象描述：对10^7个正整数进行排序，只能使用1MB左右的内存空间</p>\n<p>解决方案：使用位图，每个比特位代表一个整数，如果出现该整数则将该位置为1.</p>\n<p>应用：该方法适合输入数据限制在相对较小的范围内；数据没有重复；而且对于每条记录而言，除了单一的整数外，没有任何其他关联数据。位图的数据结构，描述了一个有限定<br>义域内的稠密集合。</p>\n<h3 id=\"第2章-啊哈！算法\"><a href=\"#第2章-啊哈！算法\" class=\"headerlink\" title=\"第2章 啊哈！算法\"></a>第2章 啊哈！算法</h3><p>问题抽象描述：A.找出一个不在40亿个随机排列的32位整数的顺序文件中的数，仅有几百字节的内存<br>B.将一个n元一维向量向左选装i个位置，仅有数十个额外字节的存储空间，在正比于n的时间内完成向量的旋转 C.找出一个英语字典所有变位词集合。(pots,<br>ptos, stop这种变位词)</p>\n<p>解决方法：A.二分搜索：采用已知包含至少一个缺失元素的一系列整数作为范围，并使用包含所有这些整数在内的文件表示这个范围。通过统计中间点之上和之下的元素来探测<br>范围；或者上面或者下面的范围具有至多全部范围的一般元素。由于整个范围中有一个缺失元素，因此我们所需的那一半范围中必须也包含缺失的元素。 B.其中以前在很多地<br>方都看到过这个方法，从ab开始，首先对a求逆得到c，然后对b求逆得到d，最后整体求逆，就得到ba了，然后各段的逆又可以在内部再次求逆，以此递归。<br>C.标识字典中的每一个词，使得在相同变位词类中的单词具有相同的标识。</p>\n<h3 id=\"第3章-数据决定程序结构\"><a href=\"#第3章-数据决定程序结构\" class=\"headerlink\" title=\"第3章 数据决定程序结构\"></a>第3章 数据决定程序结构</h3><p>对数据结构所带来的方便进行了一些简述，这些在当今高级语言中都有所体现。</p>\n<h3 id=\"第4章-编写正确的程序\"><a href=\"#第4章-编写正确的程序\" class=\"headerlink\" title=\"第4章 编写正确的程序\"></a>第4章 编写正确的程序</h3><p>本章通过一些证明方法来证明了一个算法的正确性，由于我已经在《算法导论》里面饱受了数学的折磨了，这张直接跳过了，完全看不懂。</p>\n<p>本章还介绍了一种用于检验程序正确性的方法，断言(assertion)或者叫不变式(invariant)。由于输入、程序变量和输出之间的关系勾勒出了程序的“状<br>态”，断言使得程序猿可以准确阐述这些关系。</p>\n<h3 id=\"第5章-编程小事\"><a href=\"#第5章-编程小事\" class=\"headerlink\" title=\"第5章 编程小事\"></a>第5章 编程小事</h3><p>本章写了一些测试的方法，不过都是手动进行测试。毋庸置疑，测试在编程中绝不是小事，特别是大型项目的开发，作者以小见大，说明了测试对于系统的稳定性和优化所带来的<br>重大影响。</p>\n<h2 id=\"第二部分-性能\"><a href=\"#第二部分-性能\" class=\"headerlink\" title=\"第二部分 性能\"></a>第二部分 性能</h2><h3 id=\"第6章-程序性能分析\"><a href=\"#第6章-程序性能分析\" class=\"headerlink\" title=\"第6章 程序性能分析\"></a>第6章 程序性能分析</h3><p>从设计层面将程序性分为了几个方面：问题定义、系统结构、算法和数据结构、代码调优、系统软件、硬件。也有一个简单的分析方法就是看算法的复杂度，用O来表示那种。</p>\n<h3 id=\"第7章-粗略估算\"><a href=\"#第7章-粗略估算\" class=\"headerlink\" title=\"第7章 粗略估算\"></a>第7章 粗略估算</h3><p>本章使用生活中大量的例子来描述如何进行粗略估算，最近正好在看《蝎子网络》，发现我的数学功底越来越差，实际生活中有大量的使用估算的地方，比如，验证一些生活常识<br>、验证一些新闻的正确性等。日常生活中的速算。</p>\n<p>粗略估算的一些基本技巧：快速检验、经验法则(72法则)。还有一些估算定律：Little定律(队列中物体的平均数量为进入速率与平均停留时间的乘积。)</p>\n<h3 id=\"第8章-算法设计的技术\"><a href=\"#第8章-算法设计的技术\" class=\"headerlink\" title=\"第8章 算法设计的技术\"></a>第8章 算法设计的技术</h3><p>本章主要讲述了分治算法，这一算法我曾在算法导论上看过。</p>\n<p>本章还介绍了几个重要的算法设计技术：保存状态，避免重复计算；将信息预处理至数据结构中；分治算法；扫描算法；累计；下界。</p>\n<h3 id=\"第9章-代码调优\"><a href=\"#第9章-代码调优\" class=\"headerlink\" title=\"第9章 代码调优\"></a>第9章 代码调优</h3><p>本章介绍了优化代码的一些简单的思想和方法。例如将最常见类型的空闲记录缓存在一个链表中。然后，就可以通过对该链表的快速访问来处理常见的请求，而不必调用通用的内<br>存分配程序。恰当使用函数、宏和内联代码。</p>\n<p>”代码调优的最重要的原理就是尽量少用它.“</p>\n<h3 id=\"第十章-节省空间\"><a href=\"#第十章-节省空间\" class=\"headerlink\" title=\"第十章 节省空间\"></a>第十章 节省空间</h3><p>Unix操作系统发明者(Dennis Ritchie和Ken Thompson)在论文中说道：“在系统及其软件方面，总是存在着相当严重的空间约束。如果同时对<br>合理的效率和强大的能力提出要求，那么空间约束不仅具有经济上的意义，还会使设计更优雅一些。”</p>\n<p>其实节省空间在所有地方都可以看到，比如在最初定义一个整数位数的时候，我一直使用的是int，但是如果要节约空间就使用其他的一些分配方法。</p>\n<p>hash(散列表)特别适合某些稀疏场合。</p>\n<p>如果一定要消耗时间来节省空间，在有些变量的计算上选择不存储，重新计算的方法更有效。在给变量分配内存时就使用动态分配。</p>\n<h2 id=\"第三部分-应用\"><a href=\"#第三部分-应用\" class=\"headerlink\" title=\"第三部分 应用\"></a>第三部分 应用</h2><h3 id=\"第11章-排序\"><a href=\"#第11章-排序\" class=\"headerlink\" title=\"第11章 排序\"></a>第11章 排序</h3><p>作者通过自己对快速排序的几种方法的改进超越了库函数。就像其他任何强大的工具一样，我们经常会在不该使用排序的时候使用排序，而在应该使用排序的时候却不使用排序。</p>\n<h3 id=\"第12章-取样问题\"><a href=\"#第12章-取样问题\" class=\"headerlink\" title=\"第12章 取样问题\"></a>第12章 取样问题</h3><p>研究的一个问题就是输出随机数，虽然很多语言都提供了类似的随机函数，但是感觉目前大多数语言，特别是传统语言的随机几乎都无法做到真随机，必须自己在假随机上进行修<br>改。</p>\n<p>法；实现一种解决方案；回顾。</p>\n<h3 id=\"第13章：搜索\"><a href=\"#第13章：搜索\" class=\"headerlink\" title=\"第13章：搜索\"></a>第13章：搜索</h3><p>线性结构；二分搜索数。并提到了库的作用，C++标准模库提供了一个实现起来很容易，并且维护和扩展也比较简单的通用解决方案。当遇到涉及数据结构的问题时，我们的第<br>一反应应该是寻求解决问题的通用工具。当然，有些时候针对特定的问题，使用专用的算法可能会大大提高运行速度。我们还要使用代码调优方法，比如将递归函数重写为迭代版<br>本可以使链表的速度提升为原来的3倍，对大多数结构来说，引入哨兵可以获得清晰、简单的代码，并缩短运行时间。</p>\n<h3 id=\"第14章：堆\"><a href=\"#第14章：堆\" class=\"headerlink\" title=\"第14章：堆\"></a>第14章：堆</h3><p>堆其实也是一种二叉树，但其有两个不同的性质：一是顺序性，任何结点的值都小于或等于其子结点的值。第二个性质就是形状，不是完整的三角形，右下角可以缺一点。</p>\n<h3 id=\"第15章：字符串\"><a href=\"#第15章：字符串\" class=\"headerlink\" title=\"第15章：字符串\"></a>第15章：字符串</h3><p>通过单词、短语和文本几个方面来处理字符串</p>\n<h1 id=\"《编程珠玑》-续\"><a href=\"#《编程珠玑》-续\" class=\"headerlink\" title=\"《编程珠玑》(续)\"></a>《编程珠玑》(续)</h1><h2 id=\"第一部分-编程技术\"><a href=\"#第一部分-编程技术\" class=\"headerlink\" title=\"第一部分 编程技术\"></a>第一部分 编程技术</h2><h2 id=\"第1章-性能监视工具\"><a href=\"#第1章-性能监视工具\" class=\"headerlink\" title=\"第1章 性能监视工具\"></a>第1章 性能监视工具</h2><p>通过一些常用的代码性能监视工具，如行计数性能监视、过程时间性能监视等可以查看到一个程序里面各条语句的执行情况，以查找代码中执行最慢的地方，因为“一个程序中不<br>到4\\%的语句通常占用了一半以上的运行时间”。我们最应该优化的就是这个地方。</p>\n<h3 id=\"第2章-关联数组\"><a href=\"#第2章-关联数组\" class=\"headerlink\" title=\"第2章 关联数组\"></a>第2章 关联数组</h3><p>貌似本书很多章都是使用的Awk来讲解，但是Awk中的关联数组，我感觉就很像其他脚本语言中的字典，十分方便，但awk对字符串的处理可能更加方便，不过我是不喜欢<br>其编码风格的。</p>\n<h3 id=\"第3章-程序猿的忏悔\"><a href=\"#第3章-程序猿的忏悔\" class=\"headerlink\" title=\"第3章 程序猿的忏悔\"></a>第3章 程序猿的忏悔</h3><p>再次提到调试脚手架的重要性，这一点上，Awk语言确实能起到很大的帮助，“Awk是一种构造算法原型的很好的语言，其内联数组使你模拟许多常用的数组结构，它的字段<br>、隐式循环、模式-动作对等设计极大地简化了输入输出过程，隐式的变量声明和初始化也使得程序更加简洁。”。正如Fred<br>Brooks认为“一个软件产品中应该有一半的代码都是脚手架”。</p>\n<h3 id=\"第4章-自描述数据\"><a href=\"#第4章-自描述数据\" class=\"headerlink\" title=\"第4章 自描述数据\"></a>第4章 自描述数据</h3><p>作者是使用的文档生成器来描述，其实本章所说的自描述数据在某种意义上类似于其他语言的一种模版，比如留下\\%s等占位符，让其他变量来填充。</p>\n<h2 id=\"第二部分-实用技巧\"><a href=\"#第二部分-实用技巧\" class=\"headerlink\" title=\"第二部分 实用技巧\"></a>第二部分 实用技巧</h2><h3 id=\"第5章-劈开戈尔迪之结\"><a href=\"#第5章-劈开戈尔迪之结\" class=\"headerlink\" title=\"第5章 劈开戈尔迪之结\"></a>第5章 劈开戈尔迪之结</h3><p>背景：在古希腊神话中，能解开戈尔迪之结者就可以当亚细亚之王，几百年后亚历山大大帝来了。他没有重蹈覆辙，而是拔出剑来，将结直接劈开，随即征服了亚洲。从那时起，<br>“劈开戈尔迪之结”意味着为复杂问题找出聪明的解法。</p>\n<p>我们在寻找解决问题的方法的需要考虑如下几个问题：什么是用户真正的需求(用户要求可预测性甚于要求速度)；考虑成本与收益的平衡；别把问题弄得太复杂也别太简单；用<br>正确的方法使用正确的工具；对员工的奖赏。。。</p>\n<p>简单的方法谁都想要，但并不是每个人都能找得到，我们还应该考虑时间成本，别花过多时间去思考简单的方法，没准一个你目前觉得复杂的方法可以很快完成项目。</p>\n<h3 id=\"第6章-计算机科学箴言集\"><a href=\"#第6章-计算机科学箴言集\" class=\"headerlink\" title=\"第6章 计算机科学箴言集\"></a>第6章 计算机科学箴言集</h3><p>居然把一些计算机的箴言单独列为一章，我也是醉了。</p>\n<h3 id=\"第7章-粗略估算-1\"><a href=\"#第7章-粗略估算-1\" class=\"headerlink\" title=\"第7章 粗略估算\"></a>第7章 粗略估算</h3><p>在原书已经有了几乎一样的内容…</p>\n<h3 id=\"第8章-人员备忘录\"><a href=\"#第8章-人员备忘录\" class=\"headerlink\" title=\"第8章 人员备忘录\"></a>第8章 人员备忘录</h3><p>大神，这是你自己的日记吗？</p>\n<h2 id=\"第三部分-人性化I-O\"><a href=\"#第三部分-人性化I-O\" class=\"headerlink\" title=\"第三部分 人性化I/O\"></a>第三部分 人性化I/O</h2><h3 id=\"第9章-小语言\"><a href=\"#第9章-小语言\" class=\"headerlink\" title=\"第9章 小语言\"></a>第9章 小语言</h3><p>作者以Pic为例子讲解了一种小的语言是如何运行起来的，相信看过编译原理的同学都能理解。</p>\n<h3 id=\"第10章-文档设计\"><a href=\"#第10章-文档设计\" class=\"headerlink\" title=\"第10章 文档设计\"></a>第10章 文档设计</h3><p>原以为是要教我们关于PRD这样的文档的写法，不过只是教了我们一些写Word文档的基本的规则，不过我觉得一个有基本审美观的人无论怎么写也不会写得很差的。</p>\n<h3 id=\"第11章-图形化输出\"><a href=\"#第11章-图形化输出\" class=\"headerlink\" title=\"第11章 图形化输出\"></a>第11章 图形化输出</h3><p>合理使用图形工具。</p>\n<h3 id=\"第12章-对调查的研究\"><a href=\"#第12章-对调查的研究\" class=\"headerlink\" title=\"第12章 对调查的研究\"></a>第12章 对调查的研究</h3><p>也是借调查这一事件来强调模版的好处。</p>\n<h2 id=\"第四部分-算法\"><a href=\"#第四部分-算法\" class=\"headerlink\" title=\"第四部分 算法\"></a>第四部分 算法</h2><h3 id=\"第13章-绝妙的取样\"><a href=\"#第13章-绝妙的取样\" class=\"headerlink\" title=\"第13章 绝妙的取样\"></a>第13章 绝妙的取样</h3><p>好吧，就是随机数的一些个问题。</p>\n<h3 id=\"第14章-编写数值计算程序\"><a href=\"#第14章-编写数值计算程序\" class=\"headerlink\" title=\"第14章 编写数值计算程序\"></a>第14章 编写数值计算程序</h3><p>牛顿迭代，这个我倒是完全理解。本章学到重要的一点就是“在特殊的上下文环境中针对特殊目的设计的代码比通用的程序更有效”。</p>\n<h3 id=\"第15章-选择\"><a href=\"#第15章-选择\" class=\"headerlink\" title=\"第15章 选择\"></a>第15章 选择</h3><p>使用分治算法来进行选择，太聪明了。</p>\n"},{"title":"MySQL之MyISAM与InnoDB两大存储引擎的对比及选择","date":"2014-11-03T08:17:30.000Z","_content":"参考：<http://www.oschina.net/question/17_4248>\n\nMySQL在5.5X开始，默认的存储引擎改为了InnoDB\nPlugin引擎，而我正是在5.5开始使用MySQL的，对两个引擎的区别还不甚了解，所以特别查阅了大量的资料，整理如下：\n\n# 有何区别：\n\n最简单的，一条语句即可看到：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/compare-of-MyISAM-and-InnoDB.png)  \n更具体的看下面：\n\n## Innodb\n\n  * 索引聚集表，存储结构采用BTREE\n  * 数据存储是有顺序的，默认以主键排序，主键就是数据本身，所以对于insert比较多的情况，最好建一个自增主键，以方便保持其顺序性\n\n## MyISAM\n\n# 如何选择\n\n我认为两个引擎没有孰优孰劣之分，具体怎么选择完全看业务需要。\n\nInnoDB适合： 1.数据量巨大时，提高CPU效率，这一点上其他引擎都比不上InnoDB 2.使用事务 3.可靠性好、性能高 4.更新查询都相当频繁\n5.表锁定几率较大 6.大量的主键查询 7.并发量大的update语句 8.高压力、高并发\n\nMyISAM适合： 1.磁盘空间较小 2.大量count计算(MyISAM用一个值来记录，而InnoDB每次都扫描全表) 3.插入不频繁，查询频繁\n4.不使用实务 5.大量的insert语句\n","source":"_posts/compare-of-MyISAM-and-InnoDB.md","raw":"---\ntitle: \"MySQL之MyISAM与InnoDB两大存储引擎的对比及选择\"\ndate: 2014-11-03 16:17:30\ncategories: 编程之路\n---\n参考：<http://www.oschina.net/question/17_4248>\n\nMySQL在5.5X开始，默认的存储引擎改为了InnoDB\nPlugin引擎，而我正是在5.5开始使用MySQL的，对两个引擎的区别还不甚了解，所以特别查阅了大量的资料，整理如下：\n\n# 有何区别：\n\n最简单的，一条语句即可看到：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/compare-of-MyISAM-and-InnoDB.png)  \n更具体的看下面：\n\n## Innodb\n\n  * 索引聚集表，存储结构采用BTREE\n  * 数据存储是有顺序的，默认以主键排序，主键就是数据本身，所以对于insert比较多的情况，最好建一个自增主键，以方便保持其顺序性\n\n## MyISAM\n\n# 如何选择\n\n我认为两个引擎没有孰优孰劣之分，具体怎么选择完全看业务需要。\n\nInnoDB适合： 1.数据量巨大时，提高CPU效率，这一点上其他引擎都比不上InnoDB 2.使用事务 3.可靠性好、性能高 4.更新查询都相当频繁\n5.表锁定几率较大 6.大量的主键查询 7.并发量大的update语句 8.高压力、高并发\n\nMyISAM适合： 1.磁盘空间较小 2.大量count计算(MyISAM用一个值来记录，而InnoDB每次都扫描全表) 3.插入不频繁，查询频繁\n4.不使用实务 5.大量的insert语句\n","slug":"compare-of-MyISAM-and-InnoDB","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p5x001g9vnzirwwkikf","content":"<p>参考：<a href=\"http://www.oschina.net/question/17_4248\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/17_4248</a></p>\n<p>MySQL在5.5X开始，默认的存储引擎改为了InnoDB<br>Plugin引擎，而我正是在5.5开始使用MySQL的，对两个引擎的区别还不甚了解，所以特别查阅了大量的资料，整理如下：</p>\n<h1 id=\"有何区别：\"><a href=\"#有何区别：\" class=\"headerlink\" title=\"有何区别：\"></a>有何区别：</h1><p>最简单的，一条语句即可看到：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/compare-of-MyISAM-and-InnoDB.png\" alt=\"\"><br>更具体的看下面：</p>\n<h2 id=\"Innodb\"><a href=\"#Innodb\" class=\"headerlink\" title=\"Innodb\"></a>Innodb</h2><ul>\n<li>索引聚集表，存储结构采用BTREE</li>\n<li>数据存储是有顺序的，默认以主键排序，主键就是数据本身，所以对于insert比较多的情况，最好建一个自增主键，以方便保持其顺序性</li>\n</ul>\n<h2 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h2><h1 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h1><p>我认为两个引擎没有孰优孰劣之分，具体怎么选择完全看业务需要。</p>\n<p>InnoDB适合： 1.数据量巨大时，提高CPU效率，这一点上其他引擎都比不上InnoDB 2.使用事务 3.可靠性好、性能高 4.更新查询都相当频繁<br>5.表锁定几率较大 6.大量的主键查询 7.并发量大的update语句 8.高压力、高并发</p>\n<p>MyISAM适合： 1.磁盘空间较小 2.大量count计算(MyISAM用一个值来记录，而InnoDB每次都扫描全表) 3.插入不频繁，查询频繁<br>4.不使用实务 5.大量的insert语句</p>\n","excerpt":"","more":"<p>参考：<a href=\"http://www.oschina.net/question/17_4248\">http://www.oschina.net/question/17_4248</a></p>\n<p>MySQL在5.5X开始，默认的存储引擎改为了InnoDB<br>Plugin引擎，而我正是在5.5开始使用MySQL的，对两个引擎的区别还不甚了解，所以特别查阅了大量的资料，整理如下：</p>\n<h1 id=\"有何区别：\"><a href=\"#有何区别：\" class=\"headerlink\" title=\"有何区别：\"></a>有何区别：</h1><p>最简单的，一条语句即可看到：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/compare-of-MyISAM-and-InnoDB.png\" alt=\"\"><br>更具体的看下面：</p>\n<h2 id=\"Innodb\"><a href=\"#Innodb\" class=\"headerlink\" title=\"Innodb\"></a>Innodb</h2><ul>\n<li>索引聚集表，存储结构采用BTREE</li>\n<li>数据存储是有顺序的，默认以主键排序，主键就是数据本身，所以对于insert比较多的情况，最好建一个自增主键，以方便保持其顺序性</li>\n</ul>\n<h2 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h2><h1 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h1><p>我认为两个引擎没有孰优孰劣之分，具体怎么选择完全看业务需要。</p>\n<p>InnoDB适合： 1.数据量巨大时，提高CPU效率，这一点上其他引擎都比不上InnoDB 2.使用事务 3.可靠性好、性能高 4.更新查询都相当频繁<br>5.表锁定几率较大 6.大量的主键查询 7.并发量大的update语句 8.高压力、高并发</p>\n<p>MyISAM适合： 1.磁盘空间较小 2.大量count计算(MyISAM用一个值来记录，而InnoDB每次都扫描全表) 3.插入不频繁，查询频繁<br>4.不使用实务 5.大量的insert语句</p>\n"},{"title":"《程序员法则》——起飞","date":"2014-07-20T14:56:41.000Z","_content":"正如小说第一部分标题“起飞”一样，这部小说也是我走向计算机这条路不可或缺的一个影响因素，在高中时候就看过了，一直到大学，中间大概看了三四次吧，每次看都让我热\n血沸腾。记得最近一次是在看雪上，一位大神提到的，也是表达它对他有多大的影响。我很少看小说，这是最激励我的一部了，或许没有它，我也不会走上程序员这条道路，没有\n它，或许现在我也不会对程序员这一职业有着不一般的感情。\n\n“程序员“和”码农“不一样，虽然这两个称呼都是我们IT人士对自己的一种调侃的说法，但我觉得这两个称呼还是有些许区别的。码农更像是农民工一样，日复一日重复的垒\n着代码，而程序员这是一个更好听的称呼，所有和程序有关的东西都是程序员的杰作。手机、电脑、飞机、卫星，一切和现代科技有关的东西都和程序有关，没有程序就没有程序\n员，没有程序员就没有程序。\n\n不得不说，《程序员法则》的作者确实有一些专业功底，这部小说不仅表达了题目所说的“程序员法则”，让我们这些对计算机，对黑客技术有着一腔热血的人向着正确的方向发\n展，同时也让我们对未来感到憧憬、热血澎湃。我也曾期望着我有许毅一样的头脑，像许毅一样有那么多的机遇，在这个庞大的世界里，我不会有主角光环，但我知道我能做自己\n人生的主角，所以这条路，我会继续走。\n\n这部小说唯一的遗憾就是只更新到八十几章，在06年就停止更新了，我不知道为什么，网络上的说法不一，作者庄庄也未曾对此做过任何说明。不过，或许这也从另一方面给了\n我启示，踏上计算机这条路没有捷径，也没有终点，一直走下去，总有一天会找到属于我自己的结局。\n\n语录\n\n###### **无私奉献不是天方夜谭，有时候，我们也可以做到**  \n**编程中我们会遇到多少挫折？表放弃，沙漠尽头必是绿洲**  \n非优秀的程序员常常把空间和时间消耗殆尽，优秀的程序员则总是有足够的空间和时间去完成编程任务，而且配合近乎完美  \n我们应该重视团队的精神，一个人作用再大，也不过时一碗水中比较大的一粒水珠而已  \n一个函数始终无法调试通过，是暂时放着还是坚持把他调试出来，我认为使你的心理状态比较好，放的下就放下，否则还是老老实实把他想出来  \n用程序创造激情，激情汇聚友谊  \n你的一个程序有时正常有时不正常，而你已经完全遵循变成的规则，为什么？事实上我认为相信只要遵循别人所说就能得到想当然的结果的人其实是个傻瓜  \niF(BOOL学习==FALSE) BOOL 落后=TRUE；不断的学习，我们才能不断的前进  \n按照你心里最真实的想法去做决定，即使是错的，也不会后悔  \n退一步开阔天空，这是一种应有的心境  \n如果你喜欢底层开发，千万不要面前自己去搞VC，找到你最真实的想法，程序员最不能忍受的就是万精油  \n最累的时候，家人是你最好的归宿  \n这句话不是很文雅，彻底鄙视那些害怕别人超越自己而拒绝回答别人问题的程序员  \n如果调试一个程序让你很苦恼，千万不要放弃，成功永远在拐角之后，除非你走到拐角，否则你永远不知道你离他多远，所以，请记住，坚持不懈，知道成功  \n就算我们站在群山之巅，也别忘记雄鹰依旧能从我们头顶飞过，骄傲是比用JAVA进行底层开发更可笑的东西  \n调试完一个动态链接函数，固然值得兴奋，但真正的成功远还在无数个函数之后  \n程序是我的声明，但我相信爱她甚过爱我的生命  \n信念和目标，必须永远洋溢在程序员内心  \n一个100行的代码调试都可能会让程序员遇到很多挫折，所以，面对挫折，我们永远不能低头  \n没有情调，不懂浪漫，也许这是程序员的一面，但拥有朴实无华的爱是他们的另一面  \n编程是一种单调的生活，因此程序员比普通人需要更多的关怀，更多的友情  \n程序不是年轻的专利，但是，他属于年轻  \n作为一个真正的程序员，首先应该尊重编程，热爱你所写下的程序，他是你的伙伴，而不是工具  \n程序员可以让步，却不可以退缩，可以羞涩，却不可以软弱，总之，程序员必须是勇敢的\n\n######  \n\n###### 封面图片来自Pixebay\n","source":"_posts/chengxuyuanfaze.md","raw":"---\ntitle: \"《程序员法则》——起飞\"\ndate: 2014-07-20 22:56:41\ncategories: 韦编三绝\n---\n正如小说第一部分标题“起飞”一样，这部小说也是我走向计算机这条路不可或缺的一个影响因素，在高中时候就看过了，一直到大学，中间大概看了三四次吧，每次看都让我热\n血沸腾。记得最近一次是在看雪上，一位大神提到的，也是表达它对他有多大的影响。我很少看小说，这是最激励我的一部了，或许没有它，我也不会走上程序员这条道路，没有\n它，或许现在我也不会对程序员这一职业有着不一般的感情。\n\n“程序员“和”码农“不一样，虽然这两个称呼都是我们IT人士对自己的一种调侃的说法，但我觉得这两个称呼还是有些许区别的。码农更像是农民工一样，日复一日重复的垒\n着代码，而程序员这是一个更好听的称呼，所有和程序有关的东西都是程序员的杰作。手机、电脑、飞机、卫星，一切和现代科技有关的东西都和程序有关，没有程序就没有程序\n员，没有程序员就没有程序。\n\n不得不说，《程序员法则》的作者确实有一些专业功底，这部小说不仅表达了题目所说的“程序员法则”，让我们这些对计算机，对黑客技术有着一腔热血的人向着正确的方向发\n展，同时也让我们对未来感到憧憬、热血澎湃。我也曾期望着我有许毅一样的头脑，像许毅一样有那么多的机遇，在这个庞大的世界里，我不会有主角光环，但我知道我能做自己\n人生的主角，所以这条路，我会继续走。\n\n这部小说唯一的遗憾就是只更新到八十几章，在06年就停止更新了，我不知道为什么，网络上的说法不一，作者庄庄也未曾对此做过任何说明。不过，或许这也从另一方面给了\n我启示，踏上计算机这条路没有捷径，也没有终点，一直走下去，总有一天会找到属于我自己的结局。\n\n语录\n\n###### **无私奉献不是天方夜谭，有时候，我们也可以做到**  \n**编程中我们会遇到多少挫折？表放弃，沙漠尽头必是绿洲**  \n非优秀的程序员常常把空间和时间消耗殆尽，优秀的程序员则总是有足够的空间和时间去完成编程任务，而且配合近乎完美  \n我们应该重视团队的精神，一个人作用再大，也不过时一碗水中比较大的一粒水珠而已  \n一个函数始终无法调试通过，是暂时放着还是坚持把他调试出来，我认为使你的心理状态比较好，放的下就放下，否则还是老老实实把他想出来  \n用程序创造激情，激情汇聚友谊  \n你的一个程序有时正常有时不正常，而你已经完全遵循变成的规则，为什么？事实上我认为相信只要遵循别人所说就能得到想当然的结果的人其实是个傻瓜  \niF(BOOL学习==FALSE) BOOL 落后=TRUE；不断的学习，我们才能不断的前进  \n按照你心里最真实的想法去做决定，即使是错的，也不会后悔  \n退一步开阔天空，这是一种应有的心境  \n如果你喜欢底层开发，千万不要面前自己去搞VC，找到你最真实的想法，程序员最不能忍受的就是万精油  \n最累的时候，家人是你最好的归宿  \n这句话不是很文雅，彻底鄙视那些害怕别人超越自己而拒绝回答别人问题的程序员  \n如果调试一个程序让你很苦恼，千万不要放弃，成功永远在拐角之后，除非你走到拐角，否则你永远不知道你离他多远，所以，请记住，坚持不懈，知道成功  \n就算我们站在群山之巅，也别忘记雄鹰依旧能从我们头顶飞过，骄傲是比用JAVA进行底层开发更可笑的东西  \n调试完一个动态链接函数，固然值得兴奋，但真正的成功远还在无数个函数之后  \n程序是我的声明，但我相信爱她甚过爱我的生命  \n信念和目标，必须永远洋溢在程序员内心  \n一个100行的代码调试都可能会让程序员遇到很多挫折，所以，面对挫折，我们永远不能低头  \n没有情调，不懂浪漫，也许这是程序员的一面，但拥有朴实无华的爱是他们的另一面  \n编程是一种单调的生活，因此程序员比普通人需要更多的关怀，更多的友情  \n程序不是年轻的专利，但是，他属于年轻  \n作为一个真正的程序员，首先应该尊重编程，热爱你所写下的程序，他是你的伙伴，而不是工具  \n程序员可以让步，却不可以退缩，可以羞涩，却不可以软弱，总之，程序员必须是勇敢的\n\n######  \n\n###### 封面图片来自Pixebay\n","slug":"chengxuyuanfaze","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p64001i9vnzz86m0kcm","content":"<p>正如小说第一部分标题“起飞”一样，这部小说也是我走向计算机这条路不可或缺的一个影响因素，在高中时候就看过了，一直到大学，中间大概看了三四次吧，每次看都让我热<br>血沸腾。记得最近一次是在看雪上，一位大神提到的，也是表达它对他有多大的影响。我很少看小说，这是最激励我的一部了，或许没有它，我也不会走上程序员这条道路，没有<br>它，或许现在我也不会对程序员这一职业有着不一般的感情。</p>\n<p>“程序员“和”码农“不一样，虽然这两个称呼都是我们IT人士对自己的一种调侃的说法，但我觉得这两个称呼还是有些许区别的。码农更像是农民工一样，日复一日重复的垒<br>着代码，而程序员这是一个更好听的称呼，所有和程序有关的东西都是程序员的杰作。手机、电脑、飞机、卫星，一切和现代科技有关的东西都和程序有关，没有程序就没有程序<br>员，没有程序员就没有程序。</p>\n<p>不得不说，《程序员法则》的作者确实有一些专业功底，这部小说不仅表达了题目所说的“程序员法则”，让我们这些对计算机，对黑客技术有着一腔热血的人向着正确的方向发<br>展，同时也让我们对未来感到憧憬、热血澎湃。我也曾期望着我有许毅一样的头脑，像许毅一样有那么多的机遇，在这个庞大的世界里，我不会有主角光环，但我知道我能做自己<br>人生的主角，所以这条路，我会继续走。</p>\n<p>这部小说唯一的遗憾就是只更新到八十几章，在06年就停止更新了，我不知道为什么，网络上的说法不一，作者庄庄也未曾对此做过任何说明。不过，或许这也从另一方面给了<br>我启示，踏上计算机这条路没有捷径，也没有终点，一直走下去，总有一天会找到属于我自己的结局。</p>\n<p>语录</p>\n<h6 id=\"无私奉献不是天方夜谭，有时候，我们也可以做到\"><a href=\"#无私奉献不是天方夜谭，有时候，我们也可以做到\" class=\"headerlink\" title=\"无私奉献不是天方夜谭，有时候，我们也可以做到\"></a><strong>无私奉献不是天方夜谭，有时候，我们也可以做到</strong></h6><p><strong>编程中我们会遇到多少挫折？表放弃，沙漠尽头必是绿洲</strong><br>非优秀的程序员常常把空间和时间消耗殆尽，优秀的程序员则总是有足够的空间和时间去完成编程任务，而且配合近乎完美<br>我们应该重视团队的精神，一个人作用再大，也不过时一碗水中比较大的一粒水珠而已<br>一个函数始终无法调试通过，是暂时放着还是坚持把他调试出来，我认为使你的心理状态比较好，放的下就放下，否则还是老老实实把他想出来<br>用程序创造激情，激情汇聚友谊<br>你的一个程序有时正常有时不正常，而你已经完全遵循变成的规则，为什么？事实上我认为相信只要遵循别人所说就能得到想当然的结果的人其实是个傻瓜<br>iF(BOOL学习==FALSE) BOOL 落后=TRUE；不断的学习，我们才能不断的前进<br>按照你心里最真实的想法去做决定，即使是错的，也不会后悔<br>退一步开阔天空，这是一种应有的心境<br>如果你喜欢底层开发，千万不要面前自己去搞VC，找到你最真实的想法，程序员最不能忍受的就是万精油<br>最累的时候，家人是你最好的归宿<br>这句话不是很文雅，彻底鄙视那些害怕别人超越自己而拒绝回答别人问题的程序员<br>如果调试一个程序让你很苦恼，千万不要放弃，成功永远在拐角之后，除非你走到拐角，否则你永远不知道你离他多远，所以，请记住，坚持不懈，知道成功<br>就算我们站在群山之巅，也别忘记雄鹰依旧能从我们头顶飞过，骄傲是比用JAVA进行底层开发更可笑的东西<br>调试完一个动态链接函数，固然值得兴奋，但真正的成功远还在无数个函数之后<br>程序是我的声明，但我相信爱她甚过爱我的生命<br>信念和目标，必须永远洋溢在程序员内心<br>一个100行的代码调试都可能会让程序员遇到很多挫折，所以，面对挫折，我们永远不能低头<br>没有情调，不懂浪漫，也许这是程序员的一面，但拥有朴实无华的爱是他们的另一面<br>编程是一种单调的生活，因此程序员比普通人需要更多的关怀，更多的友情<br>程序不是年轻的专利，但是，他属于年轻<br>作为一个真正的程序员，首先应该尊重编程，热爱你所写下的程序，他是你的伙伴，而不是工具<br>程序员可以让步，却不可以退缩，可以羞涩，却不可以软弱，总之，程序员必须是勇敢的</p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h6><h6 id=\"封面图片来自Pixebay\"><a href=\"#封面图片来自Pixebay\" class=\"headerlink\" title=\"封面图片来自Pixebay\"></a>封面图片来自Pixebay</h6>","excerpt":"","more":"<p>正如小说第一部分标题“起飞”一样，这部小说也是我走向计算机这条路不可或缺的一个影响因素，在高中时候就看过了，一直到大学，中间大概看了三四次吧，每次看都让我热<br>血沸腾。记得最近一次是在看雪上，一位大神提到的，也是表达它对他有多大的影响。我很少看小说，这是最激励我的一部了，或许没有它，我也不会走上程序员这条道路，没有<br>它，或许现在我也不会对程序员这一职业有着不一般的感情。</p>\n<p>“程序员“和”码农“不一样，虽然这两个称呼都是我们IT人士对自己的一种调侃的说法，但我觉得这两个称呼还是有些许区别的。码农更像是农民工一样，日复一日重复的垒<br>着代码，而程序员这是一个更好听的称呼，所有和程序有关的东西都是程序员的杰作。手机、电脑、飞机、卫星，一切和现代科技有关的东西都和程序有关，没有程序就没有程序<br>员，没有程序员就没有程序。</p>\n<p>不得不说，《程序员法则》的作者确实有一些专业功底，这部小说不仅表达了题目所说的“程序员法则”，让我们这些对计算机，对黑客技术有着一腔热血的人向着正确的方向发<br>展，同时也让我们对未来感到憧憬、热血澎湃。我也曾期望着我有许毅一样的头脑，像许毅一样有那么多的机遇，在这个庞大的世界里，我不会有主角光环，但我知道我能做自己<br>人生的主角，所以这条路，我会继续走。</p>\n<p>这部小说唯一的遗憾就是只更新到八十几章，在06年就停止更新了，我不知道为什么，网络上的说法不一，作者庄庄也未曾对此做过任何说明。不过，或许这也从另一方面给了<br>我启示，踏上计算机这条路没有捷径，也没有终点，一直走下去，总有一天会找到属于我自己的结局。</p>\n<p>语录</p>\n<h6 id=\"无私奉献不是天方夜谭，有时候，我们也可以做到\"><a href=\"#无私奉献不是天方夜谭，有时候，我们也可以做到\" class=\"headerlink\" title=\"无私奉献不是天方夜谭，有时候，我们也可以做到\"></a><strong>无私奉献不是天方夜谭，有时候，我们也可以做到</strong></h6><p><strong>编程中我们会遇到多少挫折？表放弃，沙漠尽头必是绿洲</strong><br>非优秀的程序员常常把空间和时间消耗殆尽，优秀的程序员则总是有足够的空间和时间去完成编程任务，而且配合近乎完美<br>我们应该重视团队的精神，一个人作用再大，也不过时一碗水中比较大的一粒水珠而已<br>一个函数始终无法调试通过，是暂时放着还是坚持把他调试出来，我认为使你的心理状态比较好，放的下就放下，否则还是老老实实把他想出来<br>用程序创造激情，激情汇聚友谊<br>你的一个程序有时正常有时不正常，而你已经完全遵循变成的规则，为什么？事实上我认为相信只要遵循别人所说就能得到想当然的结果的人其实是个傻瓜<br>iF(BOOL学习==FALSE) BOOL 落后=TRUE；不断的学习，我们才能不断的前进<br>按照你心里最真实的想法去做决定，即使是错的，也不会后悔<br>退一步开阔天空，这是一种应有的心境<br>如果你喜欢底层开发，千万不要面前自己去搞VC，找到你最真实的想法，程序员最不能忍受的就是万精油<br>最累的时候，家人是你最好的归宿<br>这句话不是很文雅，彻底鄙视那些害怕别人超越自己而拒绝回答别人问题的程序员<br>如果调试一个程序让你很苦恼，千万不要放弃，成功永远在拐角之后，除非你走到拐角，否则你永远不知道你离他多远，所以，请记住，坚持不懈，知道成功<br>就算我们站在群山之巅，也别忘记雄鹰依旧能从我们头顶飞过，骄傲是比用JAVA进行底层开发更可笑的东西<br>调试完一个动态链接函数，固然值得兴奋，但真正的成功远还在无数个函数之后<br>程序是我的声明，但我相信爱她甚过爱我的生命<br>信念和目标，必须永远洋溢在程序员内心<br>一个100行的代码调试都可能会让程序员遇到很多挫折，所以，面对挫折，我们永远不能低头<br>没有情调，不懂浪漫，也许这是程序员的一面，但拥有朴实无华的爱是他们的另一面<br>编程是一种单调的生活，因此程序员比普通人需要更多的关怀，更多的友情<br>程序不是年轻的专利，但是，他属于年轻<br>作为一个真正的程序员，首先应该尊重编程，热爱你所写下的程序，他是你的伙伴，而不是工具<br>程序员可以让步，却不可以退缩，可以羞涩，却不可以软弱，总之，程序员必须是勇敢的</p>\n<h6 id=\"\"><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h6><h6 id=\"封面图片来自Pixebay\"><a href=\"#封面图片来自Pixebay\" class=\"headerlink\" title=\"封面图片来自Pixebay\"></a>封面图片来自Pixebay</h6>"},{"title":"缘来还是她","date":"2011-03-06T15:37:21.000Z","_content":"再一次的，我相信了缘！昨晚梦到有人说第一个看到我换新衣服的人就是我一生的爱！今天来学校时，本以为是我们班那位红衣少女，因为当时她就站在马路对面，结果过马路时\n，她却上了公交车！然后又想让兄弟们看，结果…………………………  \n缘 来 还 是 她\n\n——本文最早发表于QQ空间\n\n  \n\n","source":"_posts/fate-is-her.md","raw":"---\ntitle: \"缘来还是她\"\ndate: 2011-03-06 23:37:21\ncategories: 那时年少\n---\n再一次的，我相信了缘！昨晚梦到有人说第一个看到我换新衣服的人就是我一生的爱！今天来学校时，本以为是我们班那位红衣少女，因为当时她就站在马路对面，结果过马路时\n，她却上了公交车！然后又想让兄弟们看，结果…………………………  \n缘 来 还 是 她\n\n——本文最早发表于QQ空间\n\n  \n\n","slug":"fate-is-her","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p6j001k9vnzliwosui6","content":"<p>再一次的，我相信了缘！昨晚梦到有人说第一个看到我换新衣服的人就是我一生的爱！今天来学校时，本以为是我们班那位红衣少女，因为当时她就站在马路对面，结果过马路时<br>，她却上了公交车！然后又想让兄弟们看，结果…………………………<br>缘 来 还 是 她</p>\n<p>——本文最早发表于QQ空间</p>\n","excerpt":"","more":"<p>再一次的，我相信了缘！昨晚梦到有人说第一个看到我换新衣服的人就是我一生的爱！今天来学校时，本以为是我们班那位红衣少女，因为当时她就站在马路对面，结果过马路时<br>，她却上了公交车！然后又想让兄弟们看，结果…………………………<br>缘 来 还 是 她</p>\n<p>——本文最早发表于QQ空间</p>\n"},{"title":"我也不知为什么","date":"2010-07-12T10:47:10.000Z","_content":"为什么总是这样：我爱的人不爱我，爱我的人我不爱！\n\n这样的日子我受够了！或许我应该放弃这些想法投身学业（妈的，老子不爱学习呀！）\n\n哼，下一次我对女孩说我爱你时，那一定是我最后一次追别人了，结果只有两个，要么她嫁给我；要么 ，老子这辈子不结婚了！\n\n——本文最早发表于QQ空间\n\n","source":"_posts/do-not-know-why.md","raw":"---\ntitle: \"我也不知为什么\"\ndate: 2010-07-12 18:47:10\ncategories: 那时年少\n---\n为什么总是这样：我爱的人不爱我，爱我的人我不爱！\n\n这样的日子我受够了！或许我应该放弃这些想法投身学业（妈的，老子不爱学习呀！）\n\n哼，下一次我对女孩说我爱你时，那一定是我最后一次追别人了，结果只有两个，要么她嫁给我；要么 ，老子这辈子不结婚了！\n\n——本文最早发表于QQ空间\n\n","slug":"do-not-know-why","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p6p001m9vnz7u6dl069","content":"<p>为什么总是这样：我爱的人不爱我，爱我的人我不爱！</p>\n<p>这样的日子我受够了！或许我应该放弃这些想法投身学业（妈的，老子不爱学习呀！）</p>\n<p>哼，下一次我对女孩说我爱你时，那一定是我最后一次追别人了，结果只有两个，要么她嫁给我；要么 ，老子这辈子不结婚了！</p>\n<p>——本文最早发表于QQ空间</p>\n","excerpt":"","more":"<p>为什么总是这样：我爱的人不爱我，爱我的人我不爱！</p>\n<p>这样的日子我受够了！或许我应该放弃这些想法投身学业（妈的，老子不爱学习呀！）</p>\n<p>哼，下一次我对女孩说我爱你时，那一定是我最后一次追别人了，结果只有两个，要么她嫁给我；要么 ，老子这辈子不结婚了！</p>\n<p>——本文最早发表于QQ空间</p>\n"},{"title":"《动物庄园》——我从未见过如此讽刺的小说","date":"2016-02-12T03:24:47.000Z","_content":"之前在微博上看到有关敏感话题的讨论中看到该书名，然后出于愤世嫉俗的原因，我自然会去买来看。看了一点点后我就像说，在天朝，这本书没有被禁，简直是奇迹。\n\n太像了，一切都太像了，为了自由，聪明的猪带领大家起义，最终赶走了农场主。但是随着猪的权利越来越大，得到的利益越来越多，野心越来越膨胀，最终，大家奋斗来的自由都被统治者剥削完了，生活甚至比以前更加艰难了，但是他们的洗脑工作却让下面的以为这样的日子比以前好多了，然而实则已经变成一个充满剥削的社会了。\n\n据说，这部小说背景是俄国的十月革命到苏联1940年代，但我只想说，和某国太像了，既得利益者为了巩固和加强自己的权力，不顾一切地去掠夺，甚至有时候闹出一切滑稽的笑话，就像“所有动物生来平等，但有些动物比其他动物更平等。”这让我想起了某国的特供用品。对于对自己不利的一切消息，对内部一律封锁，甚至建立一堵堵厚厚的墙，声称这样是为了保护大家，实则是将好的东西都挡在了外面，最后的结局可想而知。\n  \n在我眼里，动物们升旗就是最大的讽刺，明显是为洗脑而生的行为。我能说某些国家即使到了大学还要经常升旗吗，升旗还要念文章，我去。自己生活十分艰苦，还一天嚷嚷着要去解放别人，别人的生活不知道比你好到哪里去了。他们还喜欢邀请别人来庄园，炫耀他们这里多么的繁华。还有被取消的“同志”这个词，看着真是搞笑。\n\n至于这本书为什么没被禁，我是想不通了，或许他们根本不屑于审查这部“童话”，或许他们根本看不懂...反正我是推荐生在不平等国家的人都去看看。\n","source":"_posts/dongwuzhuangyuan.md","raw":"---\ntitle: \"《动物庄园》——我从未见过如此讽刺的小说\"\ndate: 2016-02-12 11:24:47\ncategories: 韦编三绝\n---\n之前在微博上看到有关敏感话题的讨论中看到该书名，然后出于愤世嫉俗的原因，我自然会去买来看。看了一点点后我就像说，在天朝，这本书没有被禁，简直是奇迹。\n\n太像了，一切都太像了，为了自由，聪明的猪带领大家起义，最终赶走了农场主。但是随着猪的权利越来越大，得到的利益越来越多，野心越来越膨胀，最终，大家奋斗来的自由都被统治者剥削完了，生活甚至比以前更加艰难了，但是他们的洗脑工作却让下面的以为这样的日子比以前好多了，然而实则已经变成一个充满剥削的社会了。\n\n据说，这部小说背景是俄国的十月革命到苏联1940年代，但我只想说，和某国太像了，既得利益者为了巩固和加强自己的权力，不顾一切地去掠夺，甚至有时候闹出一切滑稽的笑话，就像“所有动物生来平等，但有些动物比其他动物更平等。”这让我想起了某国的特供用品。对于对自己不利的一切消息，对内部一律封锁，甚至建立一堵堵厚厚的墙，声称这样是为了保护大家，实则是将好的东西都挡在了外面，最后的结局可想而知。\n  \n在我眼里，动物们升旗就是最大的讽刺，明显是为洗脑而生的行为。我能说某些国家即使到了大学还要经常升旗吗，升旗还要念文章，我去。自己生活十分艰苦，还一天嚷嚷着要去解放别人，别人的生活不知道比你好到哪里去了。他们还喜欢邀请别人来庄园，炫耀他们这里多么的繁华。还有被取消的“同志”这个词，看着真是搞笑。\n\n至于这本书为什么没被禁，我是想不通了，或许他们根本不屑于审查这部“童话”，或许他们根本看不懂...反正我是推荐生在不平等国家的人都去看看。\n","slug":"dongwuzhuangyuan","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p75001p9vnzvfqcvat1","content":"<p>之前在微博上看到有关敏感话题的讨论中看到该书名，然后出于愤世嫉俗的原因，我自然会去买来看。看了一点点后我就像说，在天朝，这本书没有被禁，简直是奇迹。</p>\n<p>太像了，一切都太像了，为了自由，聪明的猪带领大家起义，最终赶走了农场主。但是随着猪的权利越来越大，得到的利益越来越多，野心越来越膨胀，最终，大家奋斗来的自由都被统治者剥削完了，生活甚至比以前更加艰难了，但是他们的洗脑工作却让下面的以为这样的日子比以前好多了，然而实则已经变成一个充满剥削的社会了。</p>\n<p>据说，这部小说背景是俄国的十月革命到苏联1940年代，但我只想说，和某国太像了，既得利益者为了巩固和加强自己的权力，不顾一切地去掠夺，甚至有时候闹出一切滑稽的笑话，就像“所有动物生来平等，但有些动物比其他动物更平等。”这让我想起了某国的特供用品。对于对自己不利的一切消息，对内部一律封锁，甚至建立一堵堵厚厚的墙，声称这样是为了保护大家，实则是将好的东西都挡在了外面，最后的结局可想而知。</p>\n<p>在我眼里，动物们升旗就是最大的讽刺，明显是为洗脑而生的行为。我能说某些国家即使到了大学还要经常升旗吗，升旗还要念文章，我去。自己生活十分艰苦，还一天嚷嚷着要去解放别人，别人的生活不知道比你好到哪里去了。他们还喜欢邀请别人来庄园，炫耀他们这里多么的繁华。还有被取消的“同志”这个词，看着真是搞笑。</p>\n<p>至于这本书为什么没被禁，我是想不通了，或许他们根本不屑于审查这部“童话”，或许他们根本看不懂…反正我是推荐生在不平等国家的人都去看看。</p>\n","excerpt":"","more":"<p>之前在微博上看到有关敏感话题的讨论中看到该书名，然后出于愤世嫉俗的原因，我自然会去买来看。看了一点点后我就像说，在天朝，这本书没有被禁，简直是奇迹。</p>\n<p>太像了，一切都太像了，为了自由，聪明的猪带领大家起义，最终赶走了农场主。但是随着猪的权利越来越大，得到的利益越来越多，野心越来越膨胀，最终，大家奋斗来的自由都被统治者剥削完了，生活甚至比以前更加艰难了，但是他们的洗脑工作却让下面的以为这样的日子比以前好多了，然而实则已经变成一个充满剥削的社会了。</p>\n<p>据说，这部小说背景是俄国的十月革命到苏联1940年代，但我只想说，和某国太像了，既得利益者为了巩固和加强自己的权力，不顾一切地去掠夺，甚至有时候闹出一切滑稽的笑话，就像“所有动物生来平等，但有些动物比其他动物更平等。”这让我想起了某国的特供用品。对于对自己不利的一切消息，对内部一律封锁，甚至建立一堵堵厚厚的墙，声称这样是为了保护大家，实则是将好的东西都挡在了外面，最后的结局可想而知。</p>\n<p>在我眼里，动物们升旗就是最大的讽刺，明显是为洗脑而生的行为。我能说某些国家即使到了大学还要经常升旗吗，升旗还要念文章，我去。自己生活十分艰苦，还一天嚷嚷着要去解放别人，别人的生活不知道比你好到哪里去了。他们还喜欢邀请别人来庄园，炫耀他们这里多么的繁华。还有被取消的“同志”这个词，看着真是搞笑。</p>\n<p>至于这本书为什么没被禁，我是想不通了，或许他们根本不屑于审查这部“童话”，或许他们根本看不懂…反正我是推荐生在不平等国家的人都去看看。</p>\n"},{"title":"[转]23种设计模式","date":"2015-12-10T21:55:35.000Z","_content":"原文地址：<http://blog.csdn.net/beijiguangyong/article/details/6010756>  \n\n\n\n\n    这篇文章并不是深入讲解各种设计模式该怎么使用，而是列举了23种设计模式的基本结构以及其使用目的和适用场景。这里没有转载图片，需要看图片的，可以到原文直接查看。\n\n创建型  \n1\\\\. Factory Method（工厂方法）  \n2\\\\. Abstract Factory（抽象工厂）  \n3\\\\. Builder（建造者）  \n4\\\\. Prototype（原型）  \n5\\\\. Singleton（单例）  \n\n结构型  \n6\\\\. Adapter Class/Object（适配器）  \n7\\\\. Bridge（桥接）  \n8\\\\. Composite（组合）  \n9\\\\. Decorator（装饰）  \n10\\\\. Facade（外观）  \n11\\\\. Flyweight（享元）  \n12\\\\. Proxy（代理）  \n\n行为型  \n13\\\\. Interpreter（解释器）  \n14\\\\. Template Method（模板方法）  \n15\\\\. Chain of Responsibility（责任链）  \n16\\\\. Command（命令）  \n17\\\\. Iterator（迭代器）  \n18\\\\. Mediator（中介者）  \n19\\\\. Memento（备忘录）  \n20\\\\. Observer（观察者）  \n21\\\\. State（状态）  \n22\\\\. Strategy（策略）  \n23\\\\. Visitor（访问者）  \n\n创建型  \n\n  1. Factory Method（工厂方法）  \n\n意图：  \n定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。  \n适用性：  \n当一个类不知道它所必须创建的对象的类的时候。  \n当一个类希望由它的子类来指定它所创建的对象的时候。  \n当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。\n\n\n\n  2. Abstract Factory（抽象工厂）  \n\n意图：  \n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。  \n\n适用性：  \n一个系统要独立于它的产品的创建、组合和表示时。  \n一个系统要由多个产品系列中的一个来配置时。  \n当你要强调一系列相关的产品对象的设计以便进行联合使用时。  \n当你提供一个产品类库，而只想显示它们的接口而不是实现时。  \n\n  3. Builder（建造者）  \n\n意图：  \n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。  \n\n适用性：  \n当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。  \n当构造过程必须允许被构造的对象有不同的表示时。\n\n\n\n  4. Prototype（原型）  \n\n意图：  \n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。  \n\n适用性：  \n当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者  \n为了避免创建一个与产品类层次平行的工厂类层次时；或者  \n当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。\n\n\n\n  5. Singleton（单例）  \n意图：  \n保证一个类仅有一个实例，并提供一个访问它的全局访问点。  \n\n适用性：  \n当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。  \n当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n\n\n\n  6. Adapter Class/Object（适配器）  \n\n意图：  \n将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。  \n\n适用性：  \n你想使用一个已经存在的类，而它的接口不符合你的需求。  \n你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。  \n（仅适用于对象Adapter）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。\n\n\n\n  7. Bridge（桥接）  \n\n意图：  \n将抽象部分与它的实现部分分离，使它们都可以独立地变化。  \n\n适用性：  \n你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。  \n类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。  \n对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。  \n（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。  \n有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh称这种类层次结构为“嵌套的普化”（nested\ngeneralizations ）。  \n你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien的String类[ Cop92\n]，在这个类中多个对象可以共享同一个字符串表示（StringRep）。\n\n\n\n  8. Composite（组合）  \n\n意图：  \n将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。  \n\n适用性：  \n你想表示对象的部分-整体层次结构。  \n你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。\n\n\n\n  9. Decorator（装饰）  \n\n意图：  \n动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。  \n\n适用性：  \n在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。  \n处理那些可以撤消的职责。  \n当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义\n被隐藏，或类定义不能用于生成子类。\n\n\n\n  10. Facade（外观）  \n\n意图：  \n为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。  \n\n适用性：  \n当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对\n子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要\n更多的可定制性的用户可以越过facade层。  \n客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。  \n当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简\n化了它们之间的依赖关系。\n\n\n\n  11. Flyweight（享元）  \n\n意图：  \n运用共享技术有效地支持大量细粒度的对象。  \n\n适用性：  \n一个应用程序使用了大量的对象。  \n完全由于使用大量的对象，造成很大的存储开销。  \n对象的大多数状态都可变为外部状态。  \n如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。  \n应用程序不依赖于对象标识。由于Flyweight对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。\n\n\n\n  12. Proxy（代理）  \n\n意图：  \n为其他对象提供一种代理以控制对这个对象的访问。  \n\n适用性：  \n在需要用比较通用和复杂的对象指针代替简单的指针的时，使用Proxy模式。下面是一些可以使用Proxy模式常见情况：  \n1) 远程代理（Remote Proxy）为一个对象在不同的地址空间提供局部代表。\nNEXTSTEP[Add94]使用NXProxy类实现了这一目的。Coplien[Cop92]称这种代理为“大使”（Ambassador）。  \n2 )虚代理（Virtual Proxy）根据需要创建开销很大的对象。在动机一节描述的ImageProxy就是这样一种代理的例子。  \n3) 保护代理（Protection Proxy）控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。例如，在Choices操作系统[\nCIRM93]中KemelProxies为操作系统对象提供了访问保护。  \n4 )智能指引（Smart Reference）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：  \n\n对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。  \n当第一次引用一个持久对象时，将它装入内存。  \n在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。\n\n\n\n  13. Interpreter（解释器）  \n\n意图：  \n给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。  \n\n适用性：  \n当有一个语言需要解释执行,并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：  \n\n该文法简单对于复杂的文法,文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式,这样可以节省空\n间而且还可能节省时间。  \n\n效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的,而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况\n下,转换器仍可用解释器模式实现,该模式仍是有用的。\n\n\n\n  14. Template Method（模板方法）  \n\n意图：  \n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  \n\n适用性：  \n一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。  \n各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[ OJ93\n]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。  \n控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。\n\n\n\n  15. Chain of Responsibility（责任链）  \n\n意图：  \n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。  \n\n适用性：  \n有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。  \n你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。  \n可处理一个请求的对象集合应被动态指定。\n\n\n\n  16. Command（命令）  \n\n意图：  \n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。  \n\n适用性：  \n抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call\nback）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command模式是回调机制的一个面向对象的替代品。  \n在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负\n责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。  \n支持取消操作。Command的Excute操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command接口必须添加一个Unex\necute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Exe\ncute来实现重数不限的“取消”和“重做”。  \n支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过\n程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。  \n用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Comman\nd模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。\n\n\n\n  17. Iterator（迭代器）  \n\n意图：  \n提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示。  \n\n适用性：  \n访问一个聚合对象的内容而无需暴露它的内部表示。  \n支持对聚合对象的多种遍历。  \n为遍历不同的聚合结构提供一个统一的接口(即,支持多态迭代)。\n\n\n\n  18. Mediator（中介者）  \n\n意图：  \n用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。  \n\n适用性：  \n一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。  \n一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。  \n想定制一个分布在多个类中的行为，而又不想生成太多的子类。\n\n\n\n  19. Memento（备忘录）  \n\n意图：  \n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。  \n\n适用性：  \n必须保存一个对象在某一个时刻的(部分)状态,这样以后需要时它才能恢复到先前的状态。  \n如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。\n\n\n\n  20. Observer（观察者）  \n\n意图：  \n定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新。  \n\n适用性：  \n当一个抽象模型有两个方面,其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。  \n当对一个对象的改变需要同时改变其它对象,而不知道具体有多少对象有待改变。  \n当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之,你不希望这些对象是紧密耦合的。\n\n\n\n  21. State（状态）  \n\n意图：  \n允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。  \n\n适用性：  \n一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。  \n一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常,有多个操作包含这一相同的条件结构。State\n模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。\n\n\n\n  22. Strategy（策略）  \n\n意图：  \n定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。  \n\n适用性：  \n许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。  \n需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时[H087] ,可以使用策略模式。  \n算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。  \n一个类定义了多种行为,并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。\n\n\n\n  23. Visitor（访问者）  \n\n意图：  \n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  \n\n适用性：  \n一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。  \n各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[OJ93]\n。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。  \n控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。\n","source":"_posts/design-pattern.md","raw":"---\ntitle: \"[转]23种设计模式\"\ndate: 2015-12-11 05:55:35\ncategories: 编程之路\n---\n原文地址：<http://blog.csdn.net/beijiguangyong/article/details/6010756>  \n\n\n\n\n    这篇文章并不是深入讲解各种设计模式该怎么使用，而是列举了23种设计模式的基本结构以及其使用目的和适用场景。这里没有转载图片，需要看图片的，可以到原文直接查看。\n\n创建型  \n1\\\\. Factory Method（工厂方法）  \n2\\\\. Abstract Factory（抽象工厂）  \n3\\\\. Builder（建造者）  \n4\\\\. Prototype（原型）  \n5\\\\. Singleton（单例）  \n\n结构型  \n6\\\\. Adapter Class/Object（适配器）  \n7\\\\. Bridge（桥接）  \n8\\\\. Composite（组合）  \n9\\\\. Decorator（装饰）  \n10\\\\. Facade（外观）  \n11\\\\. Flyweight（享元）  \n12\\\\. Proxy（代理）  \n\n行为型  \n13\\\\. Interpreter（解释器）  \n14\\\\. Template Method（模板方法）  \n15\\\\. Chain of Responsibility（责任链）  \n16\\\\. Command（命令）  \n17\\\\. Iterator（迭代器）  \n18\\\\. Mediator（中介者）  \n19\\\\. Memento（备忘录）  \n20\\\\. Observer（观察者）  \n21\\\\. State（状态）  \n22\\\\. Strategy（策略）  \n23\\\\. Visitor（访问者）  \n\n创建型  \n\n  1. Factory Method（工厂方法）  \n\n意图：  \n定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。  \n适用性：  \n当一个类不知道它所必须创建的对象的类的时候。  \n当一个类希望由它的子类来指定它所创建的对象的时候。  \n当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。\n\n\n\n  2. Abstract Factory（抽象工厂）  \n\n意图：  \n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。  \n\n适用性：  \n一个系统要独立于它的产品的创建、组合和表示时。  \n一个系统要由多个产品系列中的一个来配置时。  \n当你要强调一系列相关的产品对象的设计以便进行联合使用时。  \n当你提供一个产品类库，而只想显示它们的接口而不是实现时。  \n\n  3. Builder（建造者）  \n\n意图：  \n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。  \n\n适用性：  \n当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。  \n当构造过程必须允许被构造的对象有不同的表示时。\n\n\n\n  4. Prototype（原型）  \n\n意图：  \n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。  \n\n适用性：  \n当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者  \n为了避免创建一个与产品类层次平行的工厂类层次时；或者  \n当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。\n\n\n\n  5. Singleton（单例）  \n意图：  \n保证一个类仅有一个实例，并提供一个访问它的全局访问点。  \n\n适用性：  \n当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。  \n当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。\n\n\n\n  6. Adapter Class/Object（适配器）  \n\n意图：  \n将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。  \n\n适用性：  \n你想使用一个已经存在的类，而它的接口不符合你的需求。  \n你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。  \n（仅适用于对象Adapter）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。\n\n\n\n  7. Bridge（桥接）  \n\n意图：  \n将抽象部分与它的实现部分分离，使它们都可以独立地变化。  \n\n适用性：  \n你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。  \n类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。  \n对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。  \n（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。  \n有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh称这种类层次结构为“嵌套的普化”（nested\ngeneralizations ）。  \n你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien的String类[ Cop92\n]，在这个类中多个对象可以共享同一个字符串表示（StringRep）。\n\n\n\n  8. Composite（组合）  \n\n意图：  \n将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。  \n\n适用性：  \n你想表示对象的部分-整体层次结构。  \n你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。\n\n\n\n  9. Decorator（装饰）  \n\n意图：  \n动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。  \n\n适用性：  \n在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。  \n处理那些可以撤消的职责。  \n当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义\n被隐藏，或类定义不能用于生成子类。\n\n\n\n  10. Facade（外观）  \n\n意图：  \n为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。  \n\n适用性：  \n当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对\n子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要\n更多的可定制性的用户可以越过facade层。  \n客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。  \n当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简\n化了它们之间的依赖关系。\n\n\n\n  11. Flyweight（享元）  \n\n意图：  \n运用共享技术有效地支持大量细粒度的对象。  \n\n适用性：  \n一个应用程序使用了大量的对象。  \n完全由于使用大量的对象，造成很大的存储开销。  \n对象的大多数状态都可变为外部状态。  \n如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。  \n应用程序不依赖于对象标识。由于Flyweight对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。\n\n\n\n  12. Proxy（代理）  \n\n意图：  \n为其他对象提供一种代理以控制对这个对象的访问。  \n\n适用性：  \n在需要用比较通用和复杂的对象指针代替简单的指针的时，使用Proxy模式。下面是一些可以使用Proxy模式常见情况：  \n1) 远程代理（Remote Proxy）为一个对象在不同的地址空间提供局部代表。\nNEXTSTEP[Add94]使用NXProxy类实现了这一目的。Coplien[Cop92]称这种代理为“大使”（Ambassador）。  \n2 )虚代理（Virtual Proxy）根据需要创建开销很大的对象。在动机一节描述的ImageProxy就是这样一种代理的例子。  \n3) 保护代理（Protection Proxy）控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。例如，在Choices操作系统[\nCIRM93]中KemelProxies为操作系统对象提供了访问保护。  \n4 )智能指引（Smart Reference）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：  \n\n对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。  \n当第一次引用一个持久对象时，将它装入内存。  \n在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。\n\n\n\n  13. Interpreter（解释器）  \n\n意图：  \n给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。  \n\n适用性：  \n当有一个语言需要解释执行,并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：  \n\n该文法简单对于复杂的文法,文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式,这样可以节省空\n间而且还可能节省时间。  \n\n效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的,而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况\n下,转换器仍可用解释器模式实现,该模式仍是有用的。\n\n\n\n  14. Template Method（模板方法）  \n\n意图：  \n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  \n\n适用性：  \n一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。  \n各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[ OJ93\n]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。  \n控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。\n\n\n\n  15. Chain of Responsibility（责任链）  \n\n意图：  \n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。  \n\n适用性：  \n有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。  \n你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。  \n可处理一个请求的对象集合应被动态指定。\n\n\n\n  16. Command（命令）  \n\n意图：  \n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。  \n\n适用性：  \n抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call\nback）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command模式是回调机制的一个面向对象的替代品。  \n在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负\n责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。  \n支持取消操作。Command的Excute操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command接口必须添加一个Unex\necute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Exe\ncute来实现重数不限的“取消”和“重做”。  \n支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过\n程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。  \n用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Comman\nd模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。\n\n\n\n  17. Iterator（迭代器）  \n\n意图：  \n提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示。  \n\n适用性：  \n访问一个聚合对象的内容而无需暴露它的内部表示。  \n支持对聚合对象的多种遍历。  \n为遍历不同的聚合结构提供一个统一的接口(即,支持多态迭代)。\n\n\n\n  18. Mediator（中介者）  \n\n意图：  \n用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。  \n\n适用性：  \n一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。  \n一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。  \n想定制一个分布在多个类中的行为，而又不想生成太多的子类。\n\n\n\n  19. Memento（备忘录）  \n\n意图：  \n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。  \n\n适用性：  \n必须保存一个对象在某一个时刻的(部分)状态,这样以后需要时它才能恢复到先前的状态。  \n如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。\n\n\n\n  20. Observer（观察者）  \n\n意图：  \n定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新。  \n\n适用性：  \n当一个抽象模型有两个方面,其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。  \n当对一个对象的改变需要同时改变其它对象,而不知道具体有多少对象有待改变。  \n当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之,你不希望这些对象是紧密耦合的。\n\n\n\n  21. State（状态）  \n\n意图：  \n允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。  \n\n适用性：  \n一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。  \n一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常,有多个操作包含这一相同的条件结构。State\n模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。\n\n\n\n  22. Strategy（策略）  \n\n意图：  \n定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。  \n\n适用性：  \n许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。  \n需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时[H087] ,可以使用策略模式。  \n算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。  \n一个类定义了多种行为,并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。\n\n\n\n  23. Visitor（访问者）  \n\n意图：  \n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  \n\n适用性：  \n一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。  \n各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[OJ93]\n。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。  \n控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。\n","slug":"design-pattern","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p7b001r9vnzrfinksu5","content":"<p>原文地址：<a href=\"http://blog.csdn.net/beijiguangyong/article/details/6010756\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/beijiguangyong/article/details/6010756</a>  </p>\n<pre><code>这篇文章并不是深入讲解各种设计模式该怎么使用，而是列举了23种设计模式的基本结构以及其使用目的和适用场景。这里没有转载图片，需要看图片的，可以到原文直接查看。\n</code></pre><p>创建型<br>1\\. Factory Method（工厂方法）<br>2\\. Abstract Factory（抽象工厂）<br>3\\. Builder（建造者）<br>4\\. Prototype（原型）<br>5\\. Singleton（单例）  </p>\n<p>结构型<br>6\\. Adapter Class/Object（适配器）<br>7\\. Bridge（桥接）<br>8\\. Composite（组合）<br>9\\. Decorator（装饰）<br>10\\. Facade（外观）<br>11\\. Flyweight（享元）<br>12\\. Proxy（代理）  </p>\n<p>行为型<br>13\\. Interpreter（解释器）<br>14\\. Template Method（模板方法）<br>15\\. Chain of Responsibility（责任链）<br>16\\. Command（命令）<br>17\\. Iterator（迭代器）<br>18\\. Mediator（中介者）<br>19\\. Memento（备忘录）<br>20\\. Observer（观察者）<br>21\\. State（状态）<br>22\\. Strategy（策略）<br>23\\. Visitor（访问者）  </p>\n<p>创建型  </p>\n<ol>\n<li>Factory Method（工厂方法）  </li>\n</ol>\n<p>意图：<br>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。<br>适用性：<br>当一个类不知道它所必须创建的对象的类的时候。<br>当一个类希望由它的子类来指定它所创建的对象的时候。<br>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</p>\n<ol>\n<li>Abstract Factory（抽象工厂）  </li>\n</ol>\n<p>意图：<br>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。  </p>\n<p>适用性：<br>一个系统要独立于它的产品的创建、组合和表示时。<br>一个系统要由多个产品系列中的一个来配置时。<br>当你要强调一系列相关的产品对象的设计以便进行联合使用时。<br>当你提供一个产品类库，而只想显示它们的接口而不是实现时。  </p>\n<ol>\n<li>Builder（建造者）  </li>\n</ol>\n<p>意图：<br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。  </p>\n<p>适用性：<br>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。<br>当构造过程必须允许被构造的对象有不同的表示时。</p>\n<ol>\n<li>Prototype（原型）  </li>\n</ol>\n<p>意图：<br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。  </p>\n<p>适用性：<br>当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者<br>为了避免创建一个与产品类层次平行的工厂类层次时；或者<br>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p>\n<ol>\n<li>Singleton（单例）<br>意图：<br>保证一个类仅有一个实例，并提供一个访问它的全局访问点。  </li>\n</ol>\n<p>适用性：<br>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。<br>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p>\n<ol>\n<li>Adapter Class/Object（适配器）  </li>\n</ol>\n<p>意图：<br>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。  </p>\n<p>适用性：<br>你想使用一个已经存在的类，而它的接口不符合你的需求。<br>你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。<br>（仅适用于对象Adapter）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p>\n<ol>\n<li>Bridge（桥接）  </li>\n</ol>\n<p>意图：<br>将抽象部分与它的实现部分分离，使它们都可以独立地变化。  </p>\n<p>适用性：<br>你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。<br>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。<br>对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。<br>（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。<br>有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh称这种类层次结构为“嵌套的普化”（nested<br>generalizations ）。<br>你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien的String类[ Cop92<br>]，在这个类中多个对象可以共享同一个字符串表示（StringRep）。</p>\n<ol>\n<li>Composite（组合）  </li>\n</ol>\n<p>意图：<br>将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。  </p>\n<p>适用性：<br>你想表示对象的部分-整体层次结构。<br>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p>\n<ol>\n<li>Decorator（装饰）  </li>\n</ol>\n<p>意图：<br>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。  </p>\n<p>适用性：<br>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。<br>处理那些可以撤消的职责。<br>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义<br>被隐藏，或类定义不能用于生成子类。</p>\n<ol>\n<li>Facade（外观）  </li>\n</ol>\n<p>意图：<br>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。  </p>\n<p>适用性：<br>当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对<br>子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要<br>更多的可定制性的用户可以越过facade层。<br>客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。<br>当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简<br>化了它们之间的依赖关系。</p>\n<ol>\n<li>Flyweight（享元）  </li>\n</ol>\n<p>意图：<br>运用共享技术有效地支持大量细粒度的对象。  </p>\n<p>适用性：<br>一个应用程序使用了大量的对象。<br>完全由于使用大量的对象，造成很大的存储开销。<br>对象的大多数状态都可变为外部状态。<br>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。<br>应用程序不依赖于对象标识。由于Flyweight对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。</p>\n<ol>\n<li>Proxy（代理）  </li>\n</ol>\n<p>意图：<br>为其他对象提供一种代理以控制对这个对象的访问。  </p>\n<p>适用性：<br>在需要用比较通用和复杂的对象指针代替简单的指针的时，使用Proxy模式。下面是一些可以使用Proxy模式常见情况：<br>1) 远程代理（Remote Proxy）为一个对象在不同的地址空间提供局部代表。<br>NEXTSTEP[Add94]使用NXProxy类实现了这一目的。Coplien[Cop92]称这种代理为“大使”（Ambassador）。<br>2 )虚代理（Virtual Proxy）根据需要创建开销很大的对象。在动机一节描述的ImageProxy就是这样一种代理的例子。<br>3) 保护代理（Protection Proxy）控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。例如，在Choices操作系统[<br>CIRM93]中KemelProxies为操作系统对象提供了访问保护。<br>4 )智能指引（Smart Reference）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：  </p>\n<p>对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。<br>当第一次引用一个持久对象时，将它装入内存。<br>在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。</p>\n<ol>\n<li>Interpreter（解释器）  </li>\n</ol>\n<p>意图：<br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。  </p>\n<p>适用性：<br>当有一个语言需要解释执行,并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：  </p>\n<p>该文法简单对于复杂的文法,文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式,这样可以节省空<br>间而且还可能节省时间。  </p>\n<p>效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的,而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况<br>下,转换器仍可用解释器模式实现,该模式仍是有用的。</p>\n<ol>\n<li>Template Method（模板方法）  </li>\n</ol>\n<p>意图：<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  </p>\n<p>适用性：<br>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[ OJ93<br>]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。<br>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p>\n<ol>\n<li>Chain of Responsibility（责任链）  </li>\n</ol>\n<p>意图：<br>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。  </p>\n<p>适用性：<br>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。<br>你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>可处理一个请求的对象集合应被动态指定。</p>\n<ol>\n<li>Command（命令）  </li>\n</ol>\n<p>意图：<br>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。  </p>\n<p>适用性：<br>抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call<br>back）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command模式是回调机制的一个面向对象的替代品。<br>在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负<br>责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。<br>支持取消操作。Command的Excute操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command接口必须添加一个Unex<br>ecute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Exe<br>cute来实现重数不限的“取消”和“重做”。<br>支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过<br>程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。<br>用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Comman<br>d模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。</p>\n<ol>\n<li>Iterator（迭代器）  </li>\n</ol>\n<p>意图：<br>提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示。  </p>\n<p>适用性：<br>访问一个聚合对象的内容而无需暴露它的内部表示。<br>支持对聚合对象的多种遍历。<br>为遍历不同的聚合结构提供一个统一的接口(即,支持多态迭代)。</p>\n<ol>\n<li>Mediator（中介者）  </li>\n</ol>\n<p>意图：<br>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。  </p>\n<p>适用性：<br>一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。<br>一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。<br>想定制一个分布在多个类中的行为，而又不想生成太多的子类。</p>\n<ol>\n<li>Memento（备忘录）  </li>\n</ol>\n<p>意图：<br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。  </p>\n<p>适用性：<br>必须保存一个对象在某一个时刻的(部分)状态,这样以后需要时它才能恢复到先前的状态。<br>如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。</p>\n<ol>\n<li>Observer（观察者）  </li>\n</ol>\n<p>意图：<br>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新。  </p>\n<p>适用性：<br>当一个抽象模型有两个方面,其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。<br>当对一个对象的改变需要同时改变其它对象,而不知道具体有多少对象有待改变。<br>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之,你不希望这些对象是紧密耦合的。</p>\n<ol>\n<li>State（状态）  </li>\n</ol>\n<p>意图：<br>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。  </p>\n<p>适用性：<br>一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。<br>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常,有多个操作包含这一相同的条件结构。State<br>模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。</p>\n<ol>\n<li>Strategy（策略）  </li>\n</ol>\n<p>意图：<br>定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。  </p>\n<p>适用性：<br>许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。<br>需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时[H087] ,可以使用策略模式。<br>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。<br>一个类定义了多种行为,并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。</p>\n<ol>\n<li>Visitor（访问者）  </li>\n</ol>\n<p>意图：<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  </p>\n<p>适用性：<br>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[OJ93]<br>。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。<br>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p>\n","excerpt":"","more":"<p>原文地址：<a href=\"http://blog.csdn.net/beijiguangyong/article/details/6010756\">http://blog.csdn.net/beijiguangyong/article/details/6010756</a>  </p>\n<pre><code>这篇文章并不是深入讲解各种设计模式该怎么使用，而是列举了23种设计模式的基本结构以及其使用目的和适用场景。这里没有转载图片，需要看图片的，可以到原文直接查看。\n</code></pre><p>创建型<br>1\\. Factory Method（工厂方法）<br>2\\. Abstract Factory（抽象工厂）<br>3\\. Builder（建造者）<br>4\\. Prototype（原型）<br>5\\. Singleton（单例）  </p>\n<p>结构型<br>6\\. Adapter Class/Object（适配器）<br>7\\. Bridge（桥接）<br>8\\. Composite（组合）<br>9\\. Decorator（装饰）<br>10\\. Facade（外观）<br>11\\. Flyweight（享元）<br>12\\. Proxy（代理）  </p>\n<p>行为型<br>13\\. Interpreter（解释器）<br>14\\. Template Method（模板方法）<br>15\\. Chain of Responsibility（责任链）<br>16\\. Command（命令）<br>17\\. Iterator（迭代器）<br>18\\. Mediator（中介者）<br>19\\. Memento（备忘录）<br>20\\. Observer（观察者）<br>21\\. State（状态）<br>22\\. Strategy（策略）<br>23\\. Visitor（访问者）  </p>\n<p>创建型  </p>\n<ol>\n<li>Factory Method（工厂方法）  </li>\n</ol>\n<p>意图：<br>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。<br>适用性：<br>当一个类不知道它所必须创建的对象的类的时候。<br>当一个类希望由它的子类来指定它所创建的对象的时候。<br>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</p>\n<ol>\n<li>Abstract Factory（抽象工厂）  </li>\n</ol>\n<p>意图：<br>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。  </p>\n<p>适用性：<br>一个系统要独立于它的产品的创建、组合和表示时。<br>一个系统要由多个产品系列中的一个来配置时。<br>当你要强调一系列相关的产品对象的设计以便进行联合使用时。<br>当你提供一个产品类库，而只想显示它们的接口而不是实现时。  </p>\n<ol>\n<li>Builder（建造者）  </li>\n</ol>\n<p>意图：<br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。  </p>\n<p>适用性：<br>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。<br>当构造过程必须允许被构造的对象有不同的表示时。</p>\n<ol>\n<li>Prototype（原型）  </li>\n</ol>\n<p>意图：<br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。  </p>\n<p>适用性：<br>当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者<br>为了避免创建一个与产品类层次平行的工厂类层次时；或者<br>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p>\n<ol>\n<li>Singleton（单例）<br>意图：<br>保证一个类仅有一个实例，并提供一个访问它的全局访问点。  </li>\n</ol>\n<p>适用性：<br>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。<br>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</p>\n<ol>\n<li>Adapter Class/Object（适配器）  </li>\n</ol>\n<p>意图：<br>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。  </p>\n<p>适用性：<br>你想使用一个已经存在的类，而它的接口不符合你的需求。<br>你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。<br>（仅适用于对象Adapter）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p>\n<ol>\n<li>Bridge（桥接）  </li>\n</ol>\n<p>意图：<br>将抽象部分与它的实现部分分离，使它们都可以独立地变化。  </p>\n<p>适用性：<br>你不希望在抽象和它的实现部分之间有一个固定的绑定关系。例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。<br>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。这时Bridge模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。<br>对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。<br>（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。<br>有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。Rumbaugh称这种类层次结构为“嵌套的普化”（nested<br>generalizations ）。<br>你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。一个简单的例子便是Coplien的String类[ Cop92<br>]，在这个类中多个对象可以共享同一个字符串表示（StringRep）。</p>\n<ol>\n<li>Composite（组合）  </li>\n</ol>\n<p>意图：<br>将对象组合成树形结构以表示“部分-整体”的层次结构。C o m p o s i t e 使得用户对单个对象和组合对象的使用具有一致性。  </p>\n<p>适用性：<br>你想表示对象的部分-整体层次结构。<br>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p>\n<ol>\n<li>Decorator（装饰）  </li>\n</ol>\n<p>意图：<br>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。  </p>\n<p>适用性：<br>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。<br>处理那些可以撤消的职责。<br>当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义<br>被隐藏，或类定义不能用于生成子类。</p>\n<ol>\n<li>Facade（外观）  </li>\n</ol>\n<p>意图：<br>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。  </p>\n<p>适用性：<br>当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对<br>子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需要<br>更多的可定制性的用户可以越过facade层。<br>客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。<br>当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简<br>化了它们之间的依赖关系。</p>\n<ol>\n<li>Flyweight（享元）  </li>\n</ol>\n<p>意图：<br>运用共享技术有效地支持大量细粒度的对象。  </p>\n<p>适用性：<br>一个应用程序使用了大量的对象。<br>完全由于使用大量的对象，造成很大的存储开销。<br>对象的大多数状态都可变为外部状态。<br>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。<br>应用程序不依赖于对象标识。由于Flyweight对象可以被共享，对于概念上明显有别的对象，标识测试将返回真值。</p>\n<ol>\n<li>Proxy（代理）  </li>\n</ol>\n<p>意图：<br>为其他对象提供一种代理以控制对这个对象的访问。  </p>\n<p>适用性：<br>在需要用比较通用和复杂的对象指针代替简单的指针的时，使用Proxy模式。下面是一些可以使用Proxy模式常见情况：<br>1) 远程代理（Remote Proxy）为一个对象在不同的地址空间提供局部代表。<br>NEXTSTEP[Add94]使用NXProxy类实现了这一目的。Coplien[Cop92]称这种代理为“大使”（Ambassador）。<br>2 )虚代理（Virtual Proxy）根据需要创建开销很大的对象。在动机一节描述的ImageProxy就是这样一种代理的例子。<br>3) 保护代理（Protection Proxy）控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。例如，在Choices操作系统[<br>CIRM93]中KemelProxies为操作系统对象提供了访问保护。<br>4 )智能指引（Smart Reference）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：  </p>\n<p>对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它(也称为SmartPointers[Ede92 ] )。<br>当第一次引用一个持久对象时，将它装入内存。<br>在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。</p>\n<ol>\n<li>Interpreter（解释器）  </li>\n</ol>\n<p>意图：<br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。  </p>\n<p>适用性：<br>当有一个语言需要解释执行,并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：  </p>\n<p>该文法简单对于复杂的文法,文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式,这样可以节省空<br>间而且还可能节省时间。  </p>\n<p>效率不是一个关键问题最高效的解释器通常不是通过直接解释语法分析树实现的,而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况<br>下,转换器仍可用解释器模式实现,该模式仍是有用的。</p>\n<ol>\n<li>Template Method（模板方法）  </li>\n</ol>\n<p>意图：<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  </p>\n<p>适用性：<br>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[ OJ93<br>]。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。<br>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p>\n<ol>\n<li>Chain of Responsibility（责任链）  </li>\n</ol>\n<p>意图：<br>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。  </p>\n<p>适用性：<br>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。<br>你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>可处理一个请求的对象集合应被动态指定。</p>\n<ol>\n<li>Command（命令）  </li>\n</ol>\n<p>意图：<br>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤消的操作。  </p>\n<p>适用性：<br>抽象出待执行的动作以参数化某对象，你可用过程语言中的回调（call<br>back）函数表达这种参数化机制。所谓回调函数是指函数先在某处注册，而它将在稍后某个需要的时候被调用。Command模式是回调机制的一个面向对象的替代品。<br>在不同的时刻指定、排列和执行请求。一个Command对象可以有一个与初始请求无关的生存期。如果一个请求的接收者可用一种与地址空间无关的方式表达，那么就可将负<br>责该请求的命令对象传送给另一个不同的进程并在那儿实现该请求。<br>支持取消操作。Command的Excute操作可在实施操作前将状态存储起来，在取消操作时这个状态用来消除该操作的影响。Command接口必须添加一个Unex<br>ecute操作，该操作取消上一次Execute调用的效果。执行的命令被存储在一个历史列表中。可通过向后和向前遍历这一列表并分别调用Unexecute和Exe<br>cute来实现重数不限的“取消”和“重做”。<br>支持修改日志，这样当系统崩溃时，这些修改可以被重做一遍。在Command接口中添加装载操作和存储操作，可以用来保持变动的一个一致的修改日志。从崩溃中恢复的过<br>程包括从磁盘中重新读入记录下来的命令并用Execute操作重新执行它们。<br>用构建在原语操作上的高层操作构造一个系统。这样一种结构在支持事务( transaction)的信息系统中很常见。一个事务封装了对数据的一组变动。Comman<br>d模式提供了对事务进行建模的方法。Command有一个公共的接口，使得你可以用同一种方式调用所有的事务。同时使用该模式也易于添加新事务以扩展系统。</p>\n<ol>\n<li>Iterator（迭代器）  </li>\n</ol>\n<p>意图：<br>提供一种方法顺序访问一个聚合对象中各个元素,而又不需暴露该对象的内部表示。  </p>\n<p>适用性：<br>访问一个聚合对象的内容而无需暴露它的内部表示。<br>支持对聚合对象的多种遍历。<br>为遍历不同的聚合结构提供一个统一的接口(即,支持多态迭代)。</p>\n<ol>\n<li>Mediator（中介者）  </li>\n</ol>\n<p>意图：<br>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。  </p>\n<p>适用性：<br>一组对象以定义良好但是复杂的方式进行通信。产生的相互依赖关系结构混乱且难以理解。<br>一个对象引用其他很多对象并且直接与这些对象通信,导致难以复用该对象。<br>想定制一个分布在多个类中的行为，而又不想生成太多的子类。</p>\n<ol>\n<li>Memento（备忘录）  </li>\n</ol>\n<p>意图：<br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。  </p>\n<p>适用性：<br>必须保存一个对象在某一个时刻的(部分)状态,这样以后需要时它才能恢复到先前的状态。<br>如果一个用接口来让其它对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。</p>\n<ol>\n<li>Observer（观察者）  </li>\n</ol>\n<p>意图：<br>定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新。  </p>\n<p>适用性：<br>当一个抽象模型有两个方面,其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。<br>当对一个对象的改变需要同时改变其它对象,而不知道具体有多少对象有待改变。<br>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之,你不希望这些对象是紧密耦合的。</p>\n<ol>\n<li>State（状态）  </li>\n</ol>\n<p>意图：<br>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。  </p>\n<p>适用性：<br>一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。<br>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态通常用一个或多个枚举常量表示。通常,有多个操作包含这一相同的条件结构。State<br>模式将每一个条件分支放入一个独立的类中。这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化。</p>\n<ol>\n<li>Strategy（策略）  </li>\n</ol>\n<p>意图：<br>定义一系列的算法,把它们一个个封装起来,并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。  </p>\n<p>适用性：<br>许多相关的类仅仅是行为有异。“策略”提供了一种用多个行为中的一个行为来配置一个类的方法。<br>需要使用一个算法的不同变体。例如，你可能会定义一些反映不同的空间/时间权衡的算法。当这些变体实现为一个算法的类层次时[H087] ,可以使用策略模式。<br>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。<br>一个类定义了多种行为,并且这些行为在这个类的操作中以多个条件语句的形式出现。将相关的条件分支移入它们各自的Strategy类中以代替这些条件语句。</p>\n<ol>\n<li>Visitor（访问者）  </li>\n</ol>\n<p>意图：<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。  </p>\n<p>适用性：<br>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<br>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子[OJ93]<br>。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。<br>控制子类扩展。模板方法只在特定点调用“hook ”操作（参见效果一节），这样就只允许在这些点进行扩展。</p>\n"},{"title":"我对前端的学习态度——浅尝辄止","date":"2015-02-08T15:15:31.000Z","_content":"一直都希望能成为一个Full\nDeveloper，现在唯一的短板就是前端(美工就不说了)。但是在学习期间却遇到太多的问题，无论从时间还是从动力方面考虑暂时都无法认真地去学习前端。\n\n首先，我个人确实不喜欢前端，在大一还错误地以为那是女生才应该去做的。其次，纵观近年来前端的发展趋势，Bootstrap，jquery的流行，nodejs，r\nuby的兴起令前端呈现出一片繁荣的景象，并且大有取代后端的趋势，现在完全使用前端的全栈方案也一下冒出来许多。但这些到底是昙花一现还是真的大势所趋？无论怎样，\n前端代替后端我觉得是不可能的，这两年前端确实比后端火，但福兮祸所依，谁又能知道下一次谁又会站在浪潮之巅呢！所以目前还是多深入自己已经掌握的方向，毕竟，找第一\n份工作还是挺重要的。前端虽然很繁荣，但在我看来，这其中有很大一部分处于混乱之中，而且后端的东西已经很多了，但前端的比后端多好多倍，技术栈数不胜数，这让一个选\n择困难症患者怎么去学习。\n\n浅尝辄止，会一点基础，就能使用别人的现有代码，虽然不能很好实现自己的想法，但已经能做很多的事情了。我目前在前端已经学习了html(5)/css(3)/js/\njquery/Ajax/bootstrap等技术或框架，当然，只是会一点点运用而已。另外，由于自学中经常会接触到前端的一些知识点，记性不好，所以决定以后前端\n的一些笔记同样记录到博客上来。\n","source":"_posts/front-end.md","raw":"---\ntitle: \"我对前端的学习态度——浅尝辄止\"\ndate: 2015-02-08 23:15:31\ncategories: 编程之路\n---\n一直都希望能成为一个Full\nDeveloper，现在唯一的短板就是前端(美工就不说了)。但是在学习期间却遇到太多的问题，无论从时间还是从动力方面考虑暂时都无法认真地去学习前端。\n\n首先，我个人确实不喜欢前端，在大一还错误地以为那是女生才应该去做的。其次，纵观近年来前端的发展趋势，Bootstrap，jquery的流行，nodejs，r\nuby的兴起令前端呈现出一片繁荣的景象，并且大有取代后端的趋势，现在完全使用前端的全栈方案也一下冒出来许多。但这些到底是昙花一现还是真的大势所趋？无论怎样，\n前端代替后端我觉得是不可能的，这两年前端确实比后端火，但福兮祸所依，谁又能知道下一次谁又会站在浪潮之巅呢！所以目前还是多深入自己已经掌握的方向，毕竟，找第一\n份工作还是挺重要的。前端虽然很繁荣，但在我看来，这其中有很大一部分处于混乱之中，而且后端的东西已经很多了，但前端的比后端多好多倍，技术栈数不胜数，这让一个选\n择困难症患者怎么去学习。\n\n浅尝辄止，会一点基础，就能使用别人的现有代码，虽然不能很好实现自己的想法，但已经能做很多的事情了。我目前在前端已经学习了html(5)/css(3)/js/\njquery/Ajax/bootstrap等技术或框架，当然，只是会一点点运用而已。另外，由于自学中经常会接触到前端的一些知识点，记性不好，所以决定以后前端\n的一些笔记同样记录到博客上来。\n","slug":"front-end","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p7o001t9vnzhm3b827g","content":"<p>一直都希望能成为一个Full<br>Developer，现在唯一的短板就是前端(美工就不说了)。但是在学习期间却遇到太多的问题，无论从时间还是从动力方面考虑暂时都无法认真地去学习前端。</p>\n<p>首先，我个人确实不喜欢前端，在大一还错误地以为那是女生才应该去做的。其次，纵观近年来前端的发展趋势，Bootstrap，jquery的流行，nodejs，r<br>uby的兴起令前端呈现出一片繁荣的景象，并且大有取代后端的趋势，现在完全使用前端的全栈方案也一下冒出来许多。但这些到底是昙花一现还是真的大势所趋？无论怎样，<br>前端代替后端我觉得是不可能的，这两年前端确实比后端火，但福兮祸所依，谁又能知道下一次谁又会站在浪潮之巅呢！所以目前还是多深入自己已经掌握的方向，毕竟，找第一<br>份工作还是挺重要的。前端虽然很繁荣，但在我看来，这其中有很大一部分处于混乱之中，而且后端的东西已经很多了，但前端的比后端多好多倍，技术栈数不胜数，这让一个选<br>择困难症患者怎么去学习。</p>\n<p>浅尝辄止，会一点基础，就能使用别人的现有代码，虽然不能很好实现自己的想法，但已经能做很多的事情了。我目前在前端已经学习了html(5)/css(3)/js/<br>jquery/Ajax/bootstrap等技术或框架，当然，只是会一点点运用而已。另外，由于自学中经常会接触到前端的一些知识点，记性不好，所以决定以后前端<br>的一些笔记同样记录到博客上来。</p>\n","excerpt":"","more":"<p>一直都希望能成为一个Full<br>Developer，现在唯一的短板就是前端(美工就不说了)。但是在学习期间却遇到太多的问题，无论从时间还是从动力方面考虑暂时都无法认真地去学习前端。</p>\n<p>首先，我个人确实不喜欢前端，在大一还错误地以为那是女生才应该去做的。其次，纵观近年来前端的发展趋势，Bootstrap，jquery的流行，nodejs，r<br>uby的兴起令前端呈现出一片繁荣的景象，并且大有取代后端的趋势，现在完全使用前端的全栈方案也一下冒出来许多。但这些到底是昙花一现还是真的大势所趋？无论怎样，<br>前端代替后端我觉得是不可能的，这两年前端确实比后端火，但福兮祸所依，谁又能知道下一次谁又会站在浪潮之巅呢！所以目前还是多深入自己已经掌握的方向，毕竟，找第一<br>份工作还是挺重要的。前端虽然很繁荣，但在我看来，这其中有很大一部分处于混乱之中，而且后端的东西已经很多了，但前端的比后端多好多倍，技术栈数不胜数，这让一个选<br>择困难症患者怎么去学习。</p>\n<p>浅尝辄止，会一点基础，就能使用别人的现有代码，虽然不能很好实现自己的想法，但已经能做很多的事情了。我目前在前端已经学习了html(5)/css(3)/js/<br>jquery/Ajax/bootstrap等技术或框架，当然，只是会一点点运用而已。另外，由于自学中经常会接触到前端的一些知识点，记性不好，所以决定以后前端<br>的一些笔记同样记录到博客上来。</p>\n"},{"title":"大三了，谈谈对逃课、挂科的看法","date":"2015-01-18T08:13:11.000Z","_content":"其实很早就想写这么一篇文章了，但一直不知道该怎么措辞，借于大学里第三次逃课之际，很多的想法便喷涌而出。\n\n都他妈大三了，才逃过三次课？没错，这就是我。\n\n人家都说，学霸逃课是为了学习，学渣上课是为了玩手机。我就是后者，一个不大标准的学渣，上课戳手机、玩平板、看课外书，睡觉倒是很少，但肯定是不会听老师讲课的。还\n记得刚上大学的时候很多人都说，大学呀，一定要好好利用时间，选修课必逃，必修课选逃。我是一直都很不同意这句话的，这句话只教育了我们要逃课，却没教育我们逃课应该\n去做些其他的什么事情，至少，身边很多的同学，逃课无非这几个目的：玩儿、睡觉、游戏。据我观察，凡是为了写代码而逃课的现在都已经成为高手了，但很遗憾，我可不是这\n种人。我也很多次想逃课，但苦于找不到逃课的理由最终逃课未遂。\n\n纵观我大学这2.5年里逃的三次课，一次因为班级聚餐，就我有课，确实不好叫他们改时间；一次是回家，要是错过了那天下午的车，第二天整个车站都是人啊，反正我曾经见\n过一次那个场面的；第三次就是今天，全校都在考试，我一直觉得那个课应该已经结束了，为什么还有，而且都上课了才通知我，裤子都还没穿呢(其实七点过就醒了，在床上看\n书而已)。\n\n我不逃课，首先是因为尊敬老师。其实，大学的老师和以前的老师不一样，你做什么几乎都不关他们的事，很多老师都只是把教书作为一个工作而已。所以不用太崇拜大学的老师\n，因为他们也是在为生活打拼，也不要瞧不起大学老师，因为他们也是普通人。简单地说，大学的老师，只要你给他面子，他也会给你面子。你只要不天天去招惹他，逃一两次课\n也没什么(当然要排除极少数奇葩的老师)，多挂一个人对他毫无影响，但老师才懒得多此一举呢，省得你背地里骂他。\n\n不逃课还有一个重要的原因就是确实老师交不了我们什么。额，首先，这绝不仅仅是老师的问题，更重要的还是课程上的问题。大学有很多课程类型，必修课、限选课、任选课，\n表面上是给了学生很大的自主选择权，但仔细看看就知道了，限选课除了考试比较水以外，课程量和不可选择性上和必修课没什么两样，剩下的任选课要求四年里修满6个学分，\n也就三门。。。作为一个正在经历这个年龄的人来说，我就感觉越是强制要求的越是我不想学的，这或许也算有点儿叛逆吧。课程设置已经如此让人讨厌了，大学里随处可见的照\n着PPT和教材读的老师我更是无力吐槽。\n\n至于挂科嘛，我大学读到现在，都没挂过科，绩点也还可以，3.224，额，没算这学期的，目测我决定不考研后，绩点在这学期会一下降到2.X。原因很简单，大学读得越\n久，越觉得毕业证没有那么重要了。我很庆幸，我读到了计算机这个专业，或者说，进入了互联网行业。这是一个真正拼实力的行业，对我们年轻人，这个行业有极大的包容心，\n很多互联网企业看重的是学力，而不是学历。还记得元旦节第一次坚决地跟父亲说我不考研的时候，也顺便把这个观点说给他听了，他听后没说什么，只说不能理解我们这个行业\n，但是同意让我自己选择。所以挂科这种东西早就看淡了，唯一不想的是挂科后得提前几天来学校补考，本来这假期安排的就过不了大年了，还提前。\n\n唉，无病呻吟……\n\n封面图片来自Pixebay\n","source":"_posts/escape_class.md","raw":"---\ntitle: \"大三了，谈谈对逃课、挂科的看法\"\ndate: 2015-01-18 16:13:11\ncategories: 边走边想\n---\n其实很早就想写这么一篇文章了，但一直不知道该怎么措辞，借于大学里第三次逃课之际，很多的想法便喷涌而出。\n\n都他妈大三了，才逃过三次课？没错，这就是我。\n\n人家都说，学霸逃课是为了学习，学渣上课是为了玩手机。我就是后者，一个不大标准的学渣，上课戳手机、玩平板、看课外书，睡觉倒是很少，但肯定是不会听老师讲课的。还\n记得刚上大学的时候很多人都说，大学呀，一定要好好利用时间，选修课必逃，必修课选逃。我是一直都很不同意这句话的，这句话只教育了我们要逃课，却没教育我们逃课应该\n去做些其他的什么事情，至少，身边很多的同学，逃课无非这几个目的：玩儿、睡觉、游戏。据我观察，凡是为了写代码而逃课的现在都已经成为高手了，但很遗憾，我可不是这\n种人。我也很多次想逃课，但苦于找不到逃课的理由最终逃课未遂。\n\n纵观我大学这2.5年里逃的三次课，一次因为班级聚餐，就我有课，确实不好叫他们改时间；一次是回家，要是错过了那天下午的车，第二天整个车站都是人啊，反正我曾经见\n过一次那个场面的；第三次就是今天，全校都在考试，我一直觉得那个课应该已经结束了，为什么还有，而且都上课了才通知我，裤子都还没穿呢(其实七点过就醒了，在床上看\n书而已)。\n\n我不逃课，首先是因为尊敬老师。其实，大学的老师和以前的老师不一样，你做什么几乎都不关他们的事，很多老师都只是把教书作为一个工作而已。所以不用太崇拜大学的老师\n，因为他们也是在为生活打拼，也不要瞧不起大学老师，因为他们也是普通人。简单地说，大学的老师，只要你给他面子，他也会给你面子。你只要不天天去招惹他，逃一两次课\n也没什么(当然要排除极少数奇葩的老师)，多挂一个人对他毫无影响，但老师才懒得多此一举呢，省得你背地里骂他。\n\n不逃课还有一个重要的原因就是确实老师交不了我们什么。额，首先，这绝不仅仅是老师的问题，更重要的还是课程上的问题。大学有很多课程类型，必修课、限选课、任选课，\n表面上是给了学生很大的自主选择权，但仔细看看就知道了，限选课除了考试比较水以外，课程量和不可选择性上和必修课没什么两样，剩下的任选课要求四年里修满6个学分，\n也就三门。。。作为一个正在经历这个年龄的人来说，我就感觉越是强制要求的越是我不想学的，这或许也算有点儿叛逆吧。课程设置已经如此让人讨厌了，大学里随处可见的照\n着PPT和教材读的老师我更是无力吐槽。\n\n至于挂科嘛，我大学读到现在，都没挂过科，绩点也还可以，3.224，额，没算这学期的，目测我决定不考研后，绩点在这学期会一下降到2.X。原因很简单，大学读得越\n久，越觉得毕业证没有那么重要了。我很庆幸，我读到了计算机这个专业，或者说，进入了互联网行业。这是一个真正拼实力的行业，对我们年轻人，这个行业有极大的包容心，\n很多互联网企业看重的是学力，而不是学历。还记得元旦节第一次坚决地跟父亲说我不考研的时候，也顺便把这个观点说给他听了，他听后没说什么，只说不能理解我们这个行业\n，但是同意让我自己选择。所以挂科这种东西早就看淡了，唯一不想的是挂科后得提前几天来学校补考，本来这假期安排的就过不了大年了，还提前。\n\n唉，无病呻吟……\n\n封面图片来自Pixebay\n","slug":"escape_class","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p89001w9vnz8hoh1u6g","content":"<p>其实很早就想写这么一篇文章了，但一直不知道该怎么措辞，借于大学里第三次逃课之际，很多的想法便喷涌而出。</p>\n<p>都他妈大三了，才逃过三次课？没错，这就是我。</p>\n<p>人家都说，学霸逃课是为了学习，学渣上课是为了玩手机。我就是后者，一个不大标准的学渣，上课戳手机、玩平板、看课外书，睡觉倒是很少，但肯定是不会听老师讲课的。还<br>记得刚上大学的时候很多人都说，大学呀，一定要好好利用时间，选修课必逃，必修课选逃。我是一直都很不同意这句话的，这句话只教育了我们要逃课，却没教育我们逃课应该<br>去做些其他的什么事情，至少，身边很多的同学，逃课无非这几个目的：玩儿、睡觉、游戏。据我观察，凡是为了写代码而逃课的现在都已经成为高手了，但很遗憾，我可不是这<br>种人。我也很多次想逃课，但苦于找不到逃课的理由最终逃课未遂。</p>\n<p>纵观我大学这2.5年里逃的三次课，一次因为班级聚餐，就我有课，确实不好叫他们改时间；一次是回家，要是错过了那天下午的车，第二天整个车站都是人啊，反正我曾经见<br>过一次那个场面的；第三次就是今天，全校都在考试，我一直觉得那个课应该已经结束了，为什么还有，而且都上课了才通知我，裤子都还没穿呢(其实七点过就醒了，在床上看<br>书而已)。</p>\n<p>我不逃课，首先是因为尊敬老师。其实，大学的老师和以前的老师不一样，你做什么几乎都不关他们的事，很多老师都只是把教书作为一个工作而已。所以不用太崇拜大学的老师<br>，因为他们也是在为生活打拼，也不要瞧不起大学老师，因为他们也是普通人。简单地说，大学的老师，只要你给他面子，他也会给你面子。你只要不天天去招惹他，逃一两次课<br>也没什么(当然要排除极少数奇葩的老师)，多挂一个人对他毫无影响，但老师才懒得多此一举呢，省得你背地里骂他。</p>\n<p>不逃课还有一个重要的原因就是确实老师交不了我们什么。额，首先，这绝不仅仅是老师的问题，更重要的还是课程上的问题。大学有很多课程类型，必修课、限选课、任选课，<br>表面上是给了学生很大的自主选择权，但仔细看看就知道了，限选课除了考试比较水以外，课程量和不可选择性上和必修课没什么两样，剩下的任选课要求四年里修满6个学分，<br>也就三门。。。作为一个正在经历这个年龄的人来说，我就感觉越是强制要求的越是我不想学的，这或许也算有点儿叛逆吧。课程设置已经如此让人讨厌了，大学里随处可见的照<br>着PPT和教材读的老师我更是无力吐槽。</p>\n<p>至于挂科嘛，我大学读到现在，都没挂过科，绩点也还可以，3.224，额，没算这学期的，目测我决定不考研后，绩点在这学期会一下降到2.X。原因很简单，大学读得越<br>久，越觉得毕业证没有那么重要了。我很庆幸，我读到了计算机这个专业，或者说，进入了互联网行业。这是一个真正拼实力的行业，对我们年轻人，这个行业有极大的包容心，<br>很多互联网企业看重的是学力，而不是学历。还记得元旦节第一次坚决地跟父亲说我不考研的时候，也顺便把这个观点说给他听了，他听后没说什么，只说不能理解我们这个行业<br>，但是同意让我自己选择。所以挂科这种东西早就看淡了，唯一不想的是挂科后得提前几天来学校补考，本来这假期安排的就过不了大年了，还提前。</p>\n<p>唉，无病呻吟……</p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>其实很早就想写这么一篇文章了，但一直不知道该怎么措辞，借于大学里第三次逃课之际，很多的想法便喷涌而出。</p>\n<p>都他妈大三了，才逃过三次课？没错，这就是我。</p>\n<p>人家都说，学霸逃课是为了学习，学渣上课是为了玩手机。我就是后者，一个不大标准的学渣，上课戳手机、玩平板、看课外书，睡觉倒是很少，但肯定是不会听老师讲课的。还<br>记得刚上大学的时候很多人都说，大学呀，一定要好好利用时间，选修课必逃，必修课选逃。我是一直都很不同意这句话的，这句话只教育了我们要逃课，却没教育我们逃课应该<br>去做些其他的什么事情，至少，身边很多的同学，逃课无非这几个目的：玩儿、睡觉、游戏。据我观察，凡是为了写代码而逃课的现在都已经成为高手了，但很遗憾，我可不是这<br>种人。我也很多次想逃课，但苦于找不到逃课的理由最终逃课未遂。</p>\n<p>纵观我大学这2.5年里逃的三次课，一次因为班级聚餐，就我有课，确实不好叫他们改时间；一次是回家，要是错过了那天下午的车，第二天整个车站都是人啊，反正我曾经见<br>过一次那个场面的；第三次就是今天，全校都在考试，我一直觉得那个课应该已经结束了，为什么还有，而且都上课了才通知我，裤子都还没穿呢(其实七点过就醒了，在床上看<br>书而已)。</p>\n<p>我不逃课，首先是因为尊敬老师。其实，大学的老师和以前的老师不一样，你做什么几乎都不关他们的事，很多老师都只是把教书作为一个工作而已。所以不用太崇拜大学的老师<br>，因为他们也是在为生活打拼，也不要瞧不起大学老师，因为他们也是普通人。简单地说，大学的老师，只要你给他面子，他也会给你面子。你只要不天天去招惹他，逃一两次课<br>也没什么(当然要排除极少数奇葩的老师)，多挂一个人对他毫无影响，但老师才懒得多此一举呢，省得你背地里骂他。</p>\n<p>不逃课还有一个重要的原因就是确实老师交不了我们什么。额，首先，这绝不仅仅是老师的问题，更重要的还是课程上的问题。大学有很多课程类型，必修课、限选课、任选课，<br>表面上是给了学生很大的自主选择权，但仔细看看就知道了，限选课除了考试比较水以外，课程量和不可选择性上和必修课没什么两样，剩下的任选课要求四年里修满6个学分，<br>也就三门。。。作为一个正在经历这个年龄的人来说，我就感觉越是强制要求的越是我不想学的，这或许也算有点儿叛逆吧。课程设置已经如此让人讨厌了，大学里随处可见的照<br>着PPT和教材读的老师我更是无力吐槽。</p>\n<p>至于挂科嘛，我大学读到现在，都没挂过科，绩点也还可以，3.224，额，没算这学期的，目测我决定不考研后，绩点在这学期会一下降到2.X。原因很简单，大学读得越<br>久，越觉得毕业证没有那么重要了。我很庆幸，我读到了计算机这个专业，或者说，进入了互联网行业。这是一个真正拼实力的行业，对我们年轻人，这个行业有极大的包容心，<br>很多互联网企业看重的是学力，而不是学历。还记得元旦节第一次坚决地跟父亲说我不考研的时候，也顺便把这个观点说给他听了，他听后没说什么，只说不能理解我们这个行业<br>，但是同意让我自己选择。所以挂科这种东西早就看淡了，唯一不想的是挂科后得提前几天来学校补考，本来这假期安排的就过不了大年了，还提前。</p>\n<p>唉，无病呻吟……</p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"[转]函数式编程——CoolShell","date":"2015-07-25T08:35:42.000Z","_content":"原文地址：<http://coolshell.cn/articles/10822.html>\n\n> 本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来\n向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。\n\n\n\n原文地址：<http://coolshell.cn/articles/10822.html>\n\n> 本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来\n向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。\n\n\n\n当我们说起函数式编程来说，我们会看到如下函数式编程的长相：\n\n  * 函数式编程的三大特性：  \n**immutable data 不可变数据**：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）  \n**first class functions**：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（[参看Javascript的面向对象编程](http://coolshell.cn/articles/6668.html)）  \n**尾递归优化**：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。\n\n  * 函数式编程的几个技术  \n**map & reduce** ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。  \n**pipeline**：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。  \n**recursing 递归** ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。  \n**currying**：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。  \n**higher order function 高阶函数**：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。\n  * 还有函数式的一些好处  \n**parallelization 并行**：所谓并行的意思就是在并行环境下，各个线程之间不需要同步或互斥。**lazy evaluation 惰性求值**：这个需要编译器的支持。表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值，也就是说，语句如x:=expression; (把一个表达式的结果赋值给一个变量)明显的调用这个表达式被计算并把结果放置到 x 中，但是先不管实际在 x 中的是什么，直到通过后面的表达式中到 x 的引用而有了对它的值的需求的时候，而后面表达式自身的求值也可以被延迟，最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树。**determinism 确定性**：所谓确定性的意思就是像数学那样 f(x) = y ，这个函数无论在什么场景下，都会得到同样的结果，这个我们称之为函数的确定性。而不是像程序中的很多函数那样，同一个参数，却会在不同的场景下计算出不同的结果。所谓不同的场景的意思就是我们的函数会根据一些运行中的状态信息的不同而发生变化。\n\n上面的那些东西太抽象了，还是让我们来循序渐近地看一些例子吧。\n\n我们先用一个最简单的例子来说明一下什么是函数式编程。\n\n先看一个非函数式的例子：\n\n1\n\n2\n\n3\n\n4\n\n|\n\nint cnt;\n\nvoid increment()\\{\n\ncnt++;\n\n\\}  \n\n---|---  \n\n那么，函数式的应该怎么写呢？\n\n1\n\n2\n\n3\n\n|\n\nint increment(int cnt)\\{\n\nreturn cnt+1;\n\n\\}  \n\n---|---  \n\n你可能会觉得这个例子太普通了。是的，这个例子就是函数式编程的准则：**不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你**。\n\n我们再来看一个简单例子：\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n|\n\ndef inc(x):\n\ndef incx(y):\n\nreturn x+y\n\nreturn incx\n\ninc2 = inc(2)\n\ninc5 = inc(5)\n\nprint inc2(5) # 输出 7\n\nprint inc5(5) # 输出 10  \n\n---|---  \n\n我们可以看到上面那个例子inc()函数返回了另一个函数incx()，于是我们可以用inc()函数来构造各种版本的inc函数，比如：inc2()和inc5()\n。这个技术其实就是上面所说的Currying技术。从这个技术上，你可能体会到函数式编程的理念：**把函数当成变量来用，关注于描述问题而不是怎么实现**，这样\n可以让代码更易读。\n\n## Map & Reduce\n\n在函数式编程中，我们不应该用循环迭代的方式，我们应该用更为高级的方法，如下所示的Python代码\n\n1\n\n2\n\n3\n\n|\n\nname_len = map(len, [\"hao\", \"chen\", \"coolshell\"])\n\nprint name_len\n\n# 输出 [3, 4, 9]  \n\n---|---  \n\n你可以看到这样的代码很易读，因为，**这样的代码是在描述要干什么，而不是怎么干**。\n\n我们再来看一个Python代码的例子：\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n|\n\ndef toUpper(item):\n\nreturn item.upper()\n\nupper_name = map(toUpper, [\"hao\", \"chen\", \"coolshell\"])\n\nprint upper_name\n\n# 输出 ['HAO', 'CHEN', 'COOLSHELL']  \n\n---|---  \n\n顺便说一下，上面的例子个是不是和我们的STL的transform有些像？\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n|\n\n#include <iostream>\n\n#include <algorithm>\n\n#include <string>\n\nusing namespace std;\n\nint main() \\{\n\nstring s=\"hello\";\n\nstring out;\n\ntransform(s.begin(), s.end(), back_inserter(out), ::toupper);\n\ncout << out << endl;\n\n// 输出：HELLO\n\n\\}  \n\n---|---  \n\n在上面Python的那个例子中我们可以看到，我们写义了一个函数toUpper，这个函数没有改变传进来的值，只是把传进来的值做个简单的操作，然后返回。然后，我\n们把其用在map函数中，就可以很清楚地描述出我们想要干什么。而不会去理解一个在循环中的怎么实现的代码，最终在读了很多循环的逻辑后才发现原来是这个或那个意思。\n下面，我们看看描述实现方法的过程式编程是怎么玩的（看上去是不是不如函数式的清晰？）：\n\n1\n\n2\n\n3\n\n4\n\n|\n\nupname =['HAO', 'CHEN', 'COOLSHELL']\n\nlowname =[]\n\nfor i in range(len(upname)):\n\nlowname.append( upname[i].lower() )  \n\n---|---  \n\n对于map我们别忘了lambda表达式：你可以简单地理解为这是一个inline的匿名函数。下面的lambda表达式相当于：def func(x):\nreturn x*x\n\n1\n\n2\n\n3\n\n|\n\nsquares = map(lambda x: x * x, range(9))\n\nprint squares\n\n# 输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]  \n\n---|---  \n\n我们再来看看reduce怎么玩？（下面的lambda表达式中有两个参数，也就是说每次从列表中取两个值，计算结果后把这个值再放回去，下面的表达式相当于：(((\n(1+2)+3)+4)+5) ）\n\n1\n\n2\n\n|\n\nprint reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])\n\n# 输出 15  \n\n---|---  \n\nPython中的除了map和reduce外，还有一些别的如filter, find, all,\nany的函数做辅助（其它函数式的语言也有），可以让你的代码更简洁，更易读。 我们再来看一个比较复杂的例子：\n\n计算数组中正数的平均值\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n|\n\nnum =[2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8]\n\npositive_num_cnt = 0\n\npositive_num_sum = 0\n\nfor i in range(len(num)):\n\nif num[i] > 0:\n\npositive_num_cnt += 1\n\npositive_num_sum += num[i]\n\nif positive_num_cnt > 0:\n\naverage = positive_num_sum / positive_num_cnt\n\nprint average\n\n# 输出 5  \n\n---|---  \n\n如果用函数式编程，这个例子可以写成这样：\n\n1\n\n2\n\n|\n\npositive_num = filter(lambda x: x>0, num)\n\naverage = reduce(lambda x,y: x+y, positive_num) / len( positive_num )  \n\n---|---  \n\nC++11玩的法：\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n|\n\n#include <iostream>\n\n#include <algorithm>\n\n#include <numeric>\n\n#include <string>\n\n#include <vector>\n\nusing namespace std;\n\nvector num \\{2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8\\};\n\nvector p_num;\n\ncopy_if(num.begin(), num.end(<span class=\"crayon-sy\" sty\n","source":"_posts/function-coding-coolshell.md","raw":"---\ntitle: \"[转]函数式编程——CoolShell\"\ndate: 2015-07-25 16:35:42\ncategories: 韦编三绝\n---\n原文地址：<http://coolshell.cn/articles/10822.html>\n\n> 本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来\n向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。\n\n\n\n原文地址：<http://coolshell.cn/articles/10822.html>\n\n> 本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来\n向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。\n\n\n\n当我们说起函数式编程来说，我们会看到如下函数式编程的长相：\n\n  * 函数式编程的三大特性：  \n**immutable data 不可变数据**：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）  \n**first class functions**：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（[参看Javascript的面向对象编程](http://coolshell.cn/articles/6668.html)）  \n**尾递归优化**：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。\n\n  * 函数式编程的几个技术  \n**map & reduce** ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。  \n**pipeline**：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。  \n**recursing 递归** ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。  \n**currying**：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。  \n**higher order function 高阶函数**：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。\n  * 还有函数式的一些好处  \n**parallelization 并行**：所谓并行的意思就是在并行环境下，各个线程之间不需要同步或互斥。**lazy evaluation 惰性求值**：这个需要编译器的支持。表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值，也就是说，语句如x:=expression; (把一个表达式的结果赋值给一个变量)明显的调用这个表达式被计算并把结果放置到 x 中，但是先不管实际在 x 中的是什么，直到通过后面的表达式中到 x 的引用而有了对它的值的需求的时候，而后面表达式自身的求值也可以被延迟，最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树。**determinism 确定性**：所谓确定性的意思就是像数学那样 f(x) = y ，这个函数无论在什么场景下，都会得到同样的结果，这个我们称之为函数的确定性。而不是像程序中的很多函数那样，同一个参数，却会在不同的场景下计算出不同的结果。所谓不同的场景的意思就是我们的函数会根据一些运行中的状态信息的不同而发生变化。\n\n上面的那些东西太抽象了，还是让我们来循序渐近地看一些例子吧。\n\n我们先用一个最简单的例子来说明一下什么是函数式编程。\n\n先看一个非函数式的例子：\n\n1\n\n2\n\n3\n\n4\n\n|\n\nint cnt;\n\nvoid increment()\\{\n\ncnt++;\n\n\\}  \n\n---|---  \n\n那么，函数式的应该怎么写呢？\n\n1\n\n2\n\n3\n\n|\n\nint increment(int cnt)\\{\n\nreturn cnt+1;\n\n\\}  \n\n---|---  \n\n你可能会觉得这个例子太普通了。是的，这个例子就是函数式编程的准则：**不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你**。\n\n我们再来看一个简单例子：\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n|\n\ndef inc(x):\n\ndef incx(y):\n\nreturn x+y\n\nreturn incx\n\ninc2 = inc(2)\n\ninc5 = inc(5)\n\nprint inc2(5) # 输出 7\n\nprint inc5(5) # 输出 10  \n\n---|---  \n\n我们可以看到上面那个例子inc()函数返回了另一个函数incx()，于是我们可以用inc()函数来构造各种版本的inc函数，比如：inc2()和inc5()\n。这个技术其实就是上面所说的Currying技术。从这个技术上，你可能体会到函数式编程的理念：**把函数当成变量来用，关注于描述问题而不是怎么实现**，这样\n可以让代码更易读。\n\n## Map & Reduce\n\n在函数式编程中，我们不应该用循环迭代的方式，我们应该用更为高级的方法，如下所示的Python代码\n\n1\n\n2\n\n3\n\n|\n\nname_len = map(len, [\"hao\", \"chen\", \"coolshell\"])\n\nprint name_len\n\n# 输出 [3, 4, 9]  \n\n---|---  \n\n你可以看到这样的代码很易读，因为，**这样的代码是在描述要干什么，而不是怎么干**。\n\n我们再来看一个Python代码的例子：\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n|\n\ndef toUpper(item):\n\nreturn item.upper()\n\nupper_name = map(toUpper, [\"hao\", \"chen\", \"coolshell\"])\n\nprint upper_name\n\n# 输出 ['HAO', 'CHEN', 'COOLSHELL']  \n\n---|---  \n\n顺便说一下，上面的例子个是不是和我们的STL的transform有些像？\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n|\n\n#include <iostream>\n\n#include <algorithm>\n\n#include <string>\n\nusing namespace std;\n\nint main() \\{\n\nstring s=\"hello\";\n\nstring out;\n\ntransform(s.begin(), s.end(), back_inserter(out), ::toupper);\n\ncout << out << endl;\n\n// 输出：HELLO\n\n\\}  \n\n---|---  \n\n在上面Python的那个例子中我们可以看到，我们写义了一个函数toUpper，这个函数没有改变传进来的值，只是把传进来的值做个简单的操作，然后返回。然后，我\n们把其用在map函数中，就可以很清楚地描述出我们想要干什么。而不会去理解一个在循环中的怎么实现的代码，最终在读了很多循环的逻辑后才发现原来是这个或那个意思。\n下面，我们看看描述实现方法的过程式编程是怎么玩的（看上去是不是不如函数式的清晰？）：\n\n1\n\n2\n\n3\n\n4\n\n|\n\nupname =['HAO', 'CHEN', 'COOLSHELL']\n\nlowname =[]\n\nfor i in range(len(upname)):\n\nlowname.append( upname[i].lower() )  \n\n---|---  \n\n对于map我们别忘了lambda表达式：你可以简单地理解为这是一个inline的匿名函数。下面的lambda表达式相当于：def func(x):\nreturn x*x\n\n1\n\n2\n\n3\n\n|\n\nsquares = map(lambda x: x * x, range(9))\n\nprint squares\n\n# 输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]  \n\n---|---  \n\n我们再来看看reduce怎么玩？（下面的lambda表达式中有两个参数，也就是说每次从列表中取两个值，计算结果后把这个值再放回去，下面的表达式相当于：(((\n(1+2)+3)+4)+5) ）\n\n1\n\n2\n\n|\n\nprint reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])\n\n# 输出 15  \n\n---|---  \n\nPython中的除了map和reduce外，还有一些别的如filter, find, all,\nany的函数做辅助（其它函数式的语言也有），可以让你的代码更简洁，更易读。 我们再来看一个比较复杂的例子：\n\n计算数组中正数的平均值\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n|\n\nnum =[2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8]\n\npositive_num_cnt = 0\n\npositive_num_sum = 0\n\nfor i in range(len(num)):\n\nif num[i] > 0:\n\npositive_num_cnt += 1\n\npositive_num_sum += num[i]\n\nif positive_num_cnt > 0:\n\naverage = positive_num_sum / positive_num_cnt\n\nprint average\n\n# 输出 5  \n\n---|---  \n\n如果用函数式编程，这个例子可以写成这样：\n\n1\n\n2\n\n|\n\npositive_num = filter(lambda x: x>0, num)\n\naverage = reduce(lambda x,y: x+y, positive_num) / len( positive_num )  \n\n---|---  \n\nC++11玩的法：\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n|\n\n#include <iostream>\n\n#include <algorithm>\n\n#include <numeric>\n\n#include <string>\n\n#include <vector>\n\nusing namespace std;\n\nvector num \\{2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8\\};\n\nvector p_num;\n\ncopy_if(num.begin(), num.end(<span class=\"crayon-sy\" sty\n","slug":"function-coding-coolshell","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p8d001y9vnz4uzkg8ko","content":"<p>原文地址：<a href=\"http://coolshell.cn/articles/10822.html\" target=\"_blank\" rel=\"external\">http://coolshell.cn/articles/10822.html</a></p>\n<blockquote>\n<p>本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来<br>向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。</p>\n</blockquote>\n<p>原文地址：<a href=\"http://coolshell.cn/articles/10822.html\" target=\"_blank\" rel=\"external\">http://coolshell.cn/articles/10822.html</a></p>\n<blockquote>\n<p>本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来<br>向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。</p>\n</blockquote>\n<p>当我们说起函数式编程来说，我们会看到如下函数式编程的长相：</p>\n<ul>\n<li><p>函数式编程的三大特性：<br><strong>immutable data 不可变数据</strong>：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）<br><strong>first class functions</strong>：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（<a href=\"http://coolshell.cn/articles/6668.html\" target=\"_blank\" rel=\"external\">参看Javascript的面向对象编程</a>）<br><strong>尾递归优化</strong>：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。</p>\n</li>\n<li><p>函数式编程的几个技术<br><strong>map &amp; reduce</strong> ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。<br><strong>pipeline</strong>：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。<br><strong>recursing 递归</strong> ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。<br><strong>currying</strong>：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。<br><strong>higher order function 高阶函数</strong>：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。</p>\n</li>\n<li>还有函数式的一些好处<br><strong>parallelization 并行</strong>：所谓并行的意思就是在并行环境下，各个线程之间不需要同步或互斥。<strong>lazy evaluation 惰性求值</strong>：这个需要编译器的支持。表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值，也就是说，语句如x:=expression; (把一个表达式的结果赋值给一个变量)明显的调用这个表达式被计算并把结果放置到 x 中，但是先不管实际在 x 中的是什么，直到通过后面的表达式中到 x 的引用而有了对它的值的需求的时候，而后面表达式自身的求值也可以被延迟，最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树。<strong>determinism 确定性</strong>：所谓确定性的意思就是像数学那样 f(x) = y ，这个函数无论在什么场景下，都会得到同样的结果，这个我们称之为函数的确定性。而不是像程序中的很多函数那样，同一个参数，却会在不同的场景下计算出不同的结果。所谓不同的场景的意思就是我们的函数会根据一些运行中的状态信息的不同而发生变化。</li>\n</ul>\n<p>上面的那些东西太抽象了，还是让我们来循序渐近地看一些例子吧。</p>\n<p>我们先用一个最简单的例子来说明一下什么是函数式编程。</p>\n<p>先看一个非函数式的例子：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>|</p>\n<p>int cnt;</p>\n<p>void increment(){</p>\n<p>cnt++;</p>\n<p>}  </p>\n<p>—|—  </p>\n<p>那么，函数式的应该怎么写呢？</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>int increment(int cnt){</p>\n<p>return cnt+1;</p>\n<p>}  </p>\n<p>—|—  </p>\n<p>你可能会觉得这个例子太普通了。是的，这个例子就是函数式编程的准则：<strong>不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你</strong>。</p>\n<p>我们再来看一个简单例子：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>|</p>\n<p>def inc(x):</p>\n<p>def incx(y):</p>\n<p>return x+y</p>\n<p>return incx</p>\n<p>inc2 = inc(2)</p>\n<p>inc5 = inc(5)</p>\n<p>print inc2(5) # 输出 7</p>\n<p>print inc5(5) # 输出 10  </p>\n<p>—|—  </p>\n<p>我们可以看到上面那个例子inc()函数返回了另一个函数incx()，于是我们可以用inc()函数来构造各种版本的inc函数，比如：inc2()和inc5()<br>。这个技术其实就是上面所说的Currying技术。从这个技术上，你可能体会到函数式编程的理念：<strong>把函数当成变量来用，关注于描述问题而不是怎么实现</strong>，这样<br>可以让代码更易读。</p>\n<h2 id=\"Map-amp-Reduce\"><a href=\"#Map-amp-Reduce\" class=\"headerlink\" title=\"Map &amp; Reduce\"></a>Map &amp; Reduce</h2><p>在函数式编程中，我们不应该用循环迭代的方式，我们应该用更为高级的方法，如下所示的Python代码</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>name_len = map(len, [“hao”, “chen”, “coolshell”])</p>\n<p>print name_len</p>\n<h1 id=\"输出-3-4-9\"><a href=\"#输出-3-4-9\" class=\"headerlink\" title=\"输出 [3, 4, 9]\"></a>输出 [3, 4, 9]</h1><p>—|—  </p>\n<p>你可以看到这样的代码很易读，因为，<strong>这样的代码是在描述要干什么，而不是怎么干</strong>。</p>\n<p>我们再来看一个Python代码的例子：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>|</p>\n<p>def toUpper(item):</p>\n<p>return item.upper()</p>\n<p>upper_name = map(toUpper, [“hao”, “chen”, “coolshell”])</p>\n<p>print upper_name</p>\n<h1 id=\"输出-‘HAO’-‘CHEN’-‘COOLSHELL’\"><a href=\"#输出-‘HAO’-‘CHEN’-‘COOLSHELL’\" class=\"headerlink\" title=\"输出 [‘HAO’, ‘CHEN’, ‘COOLSHELL’]\"></a>输出 [‘HAO’, ‘CHEN’, ‘COOLSHELL’]</h1><p>—|—  </p>\n<p>顺便说一下，上面的例子个是不是和我们的STL的transform有些像？</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>|</p>\n<p>#include <iostream></iostream></p>\n<p>#include <algorithm></algorithm></p>\n<p>#include <string></string></p>\n<p>using namespace std;</p>\n<p>int main() {</p>\n<p>string s=”hello”;</p>\n<p>string out;</p>\n<p>transform(s.begin(), s.end(), back_inserter(out), ::toupper);</p>\n<p>cout &lt;&lt; out &lt;&lt; endl;</p>\n<p>// 输出：HELLO</p>\n<p>}  </p>\n<p>—|—  </p>\n<p>在上面Python的那个例子中我们可以看到，我们写义了一个函数toUpper，这个函数没有改变传进来的值，只是把传进来的值做个简单的操作，然后返回。然后，我<br>们把其用在map函数中，就可以很清楚地描述出我们想要干什么。而不会去理解一个在循环中的怎么实现的代码，最终在读了很多循环的逻辑后才发现原来是这个或那个意思。<br>下面，我们看看描述实现方法的过程式编程是怎么玩的（看上去是不是不如函数式的清晰？）：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>|</p>\n<p>upname =[‘HAO’, ‘CHEN’, ‘COOLSHELL’]</p>\n<p>lowname =[]</p>\n<p>for i in range(len(upname)):</p>\n<p>lowname.append( upname[i].lower() )  </p>\n<p>—|—  </p>\n<p>对于map我们别忘了lambda表达式：你可以简单地理解为这是一个inline的匿名函数。下面的lambda表达式相当于：def func(x):<br>return x*x</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>squares = map(lambda x: x * x, range(9))</p>\n<p>print squares</p>\n<h1 id=\"输出-0-1-4-9-16-25-36-49-64\"><a href=\"#输出-0-1-4-9-16-25-36-49-64\" class=\"headerlink\" title=\"输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]\"></a>输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]</h1><p>—|—  </p>\n<p>我们再来看看reduce怎么玩？（下面的lambda表达式中有两个参数，也就是说每次从列表中取两个值，计算结果后把这个值再放回去，下面的表达式相当于：(((<br>(1+2)+3)+4)+5) ）</p>\n<p>1</p>\n<p>2</p>\n<p>|</p>\n<p>print reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</p>\n<h1 id=\"输出-15\"><a href=\"#输出-15\" class=\"headerlink\" title=\"输出 15\"></a>输出 15</h1><p>—|—  </p>\n<p>Python中的除了map和reduce外，还有一些别的如filter, find, all,<br>any的函数做辅助（其它函数式的语言也有），可以让你的代码更简洁，更易读。 我们再来看一个比较复杂的例子：</p>\n<p>计算数组中正数的平均值</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>|</p>\n<p>num =[2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8]</p>\n<p>positive_num_cnt = 0</p>\n<p>positive_num_sum = 0</p>\n<p>for i in range(len(num)):</p>\n<p>if num[i] &gt; 0:</p>\n<p>positive_num_cnt += 1</p>\n<p>positive_num_sum += num[i]</p>\n<p>if positive_num_cnt &gt; 0:</p>\n<p>average = positive_num_sum / positive_num_cnt</p>\n<p>print average</p>\n<h1 id=\"输出-5\"><a href=\"#输出-5\" class=\"headerlink\" title=\"输出 5\"></a>输出 5</h1><p>—|—  </p>\n<p>如果用函数式编程，这个例子可以写成这样：</p>\n<p>1</p>\n<p>2</p>\n<p>|</p>\n<p>positive_num = filter(lambda x: x&gt;0, num)</p>\n<p>average = reduce(lambda x,y: x+y, positive_num) / len( positive_num )  </p>\n<p>—|—  </p>\n<p>C++11玩的法：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>|</p>\n<p>#include <iostream></iostream></p>\n<p>#include <algorithm></algorithm></p>\n<p>#include <numeric></numeric></p>\n<p>#include <string></string></p>\n<p>#include <vector></vector></p>\n<p>using namespace std;</p>\n<p>vector num {2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8};</p>\n<p>vector p_num;</p>\n<p>copy_if(num.begin(), num.end(&lt;span class=”crayon-sy” sty</p>\n","excerpt":"","more":"<p>原文地址：<a href=\"http://coolshell.cn/articles/10822.html\">http://coolshell.cn/articles/10822.html</a></p>\n<blockquote>\n<p>本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来<br>向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。</p>\n</blockquote>\n<p>原文地址：<a href=\"http://coolshell.cn/articles/10822.html\">http://coolshell.cn/articles/10822.html</a></p>\n<blockquote>\n<p>本篇文章写于2013年底，而今天我看来，依然是精华中的精华，就喜欢这种深入浅出的文章，带我们对函数式编程更深入的理解，并且本篇文章采用多种语言多种角度来<br>向我们讲解了到底什么才是函数式编程，再加上最近工作上很多的问题，才发现，其实公司之前的代码有很多优秀的地方。</p>\n</blockquote>\n<p>当我们说起函数式编程来说，我们会看到如下函数式编程的长相：</p>\n<ul>\n<li><p>函数式编程的三大特性：<br><strong>immutable data 不可变数据</strong>：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）<br><strong>first class functions</strong>：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（<a href=\"http://coolshell.cn/articles/6668.html\">参看Javascript的面向对象编程</a>）<br><strong>尾递归优化</strong>：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。</p>\n</li>\n<li><p>函数式编程的几个技术<br><strong>map &amp; reduce</strong> ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。<br><strong>pipeline</strong>：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。<br><strong>recursing 递归</strong> ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。<br><strong>currying</strong>：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。<br><strong>higher order function 高阶函数</strong>：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。</p>\n</li>\n<li>还有函数式的一些好处<br><strong>parallelization 并行</strong>：所谓并行的意思就是在并行环境下，各个线程之间不需要同步或互斥。<strong>lazy evaluation 惰性求值</strong>：这个需要编译器的支持。表达式不在它被绑定到变量之后就立即求值，而是在该值被取用的时候求值，也就是说，语句如x:=expression; (把一个表达式的结果赋值给一个变量)明显的调用这个表达式被计算并把结果放置到 x 中，但是先不管实际在 x 中的是什么，直到通过后面的表达式中到 x 的引用而有了对它的值的需求的时候，而后面表达式自身的求值也可以被延迟，最终为了生成让外界看到的某个符号而计算这个快速增长的依赖树。<strong>determinism 确定性</strong>：所谓确定性的意思就是像数学那样 f(x) = y ，这个函数无论在什么场景下，都会得到同样的结果，这个我们称之为函数的确定性。而不是像程序中的很多函数那样，同一个参数，却会在不同的场景下计算出不同的结果。所谓不同的场景的意思就是我们的函数会根据一些运行中的状态信息的不同而发生变化。</li>\n</ul>\n<p>上面的那些东西太抽象了，还是让我们来循序渐近地看一些例子吧。</p>\n<p>我们先用一个最简单的例子来说明一下什么是函数式编程。</p>\n<p>先看一个非函数式的例子：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>|</p>\n<p>int cnt;</p>\n<p>void increment(){</p>\n<p>cnt++;</p>\n<p>}  </p>\n<p>—|—  </p>\n<p>那么，函数式的应该怎么写呢？</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>int increment(int cnt){</p>\n<p>return cnt+1;</p>\n<p>}  </p>\n<p>—|—  </p>\n<p>你可能会觉得这个例子太普通了。是的，这个例子就是函数式编程的准则：<strong>不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你</strong>。</p>\n<p>我们再来看一个简单例子：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>|</p>\n<p>def inc(x):</p>\n<p>def incx(y):</p>\n<p>return x+y</p>\n<p>return incx</p>\n<p>inc2 = inc(2)</p>\n<p>inc5 = inc(5)</p>\n<p>print inc2(5) # 输出 7</p>\n<p>print inc5(5) # 输出 10  </p>\n<p>—|—  </p>\n<p>我们可以看到上面那个例子inc()函数返回了另一个函数incx()，于是我们可以用inc()函数来构造各种版本的inc函数，比如：inc2()和inc5()<br>。这个技术其实就是上面所说的Currying技术。从这个技术上，你可能体会到函数式编程的理念：<strong>把函数当成变量来用，关注于描述问题而不是怎么实现</strong>，这样<br>可以让代码更易读。</p>\n<h2 id=\"Map-amp-Reduce\"><a href=\"#Map-amp-Reduce\" class=\"headerlink\" title=\"Map &amp; Reduce\"></a>Map &amp; Reduce</h2><p>在函数式编程中，我们不应该用循环迭代的方式，我们应该用更为高级的方法，如下所示的Python代码</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>name_len = map(len, [“hao”, “chen”, “coolshell”])</p>\n<p>print name_len</p>\n<h1 id=\"输出-3-4-9\"><a href=\"#输出-3-4-9\" class=\"headerlink\" title=\"输出 [3, 4, 9]\"></a>输出 [3, 4, 9]</h1><p>—|—  </p>\n<p>你可以看到这样的代码很易读，因为，<strong>这样的代码是在描述要干什么，而不是怎么干</strong>。</p>\n<p>我们再来看一个Python代码的例子：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>|</p>\n<p>def toUpper(item):</p>\n<p>return item.upper()</p>\n<p>upper_name = map(toUpper, [“hao”, “chen”, “coolshell”])</p>\n<p>print upper_name</p>\n<h1 id=\"输出-‘HAO’-‘CHEN’-‘COOLSHELL’\"><a href=\"#输出-‘HAO’-‘CHEN’-‘COOLSHELL’\" class=\"headerlink\" title=\"输出 [‘HAO’, ‘CHEN’, ‘COOLSHELL’]\"></a>输出 [‘HAO’, ‘CHEN’, ‘COOLSHELL’]</h1><p>—|—  </p>\n<p>顺便说一下，上面的例子个是不是和我们的STL的transform有些像？</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>|</p>\n<p>#include <iostream></p>\n<p>#include <algorithm></p>\n<p>#include <string></p>\n<p>using namespace std;</p>\n<p>int main() {</p>\n<p>string s=”hello”;</p>\n<p>string out;</p>\n<p>transform(s.begin(), s.end(), back_inserter(out), ::toupper);</p>\n<p>cout &lt;&lt; out &lt;&lt; endl;</p>\n<p>// 输出：HELLO</p>\n<p>}  </p>\n<p>—|—  </p>\n<p>在上面Python的那个例子中我们可以看到，我们写义了一个函数toUpper，这个函数没有改变传进来的值，只是把传进来的值做个简单的操作，然后返回。然后，我<br>们把其用在map函数中，就可以很清楚地描述出我们想要干什么。而不会去理解一个在循环中的怎么实现的代码，最终在读了很多循环的逻辑后才发现原来是这个或那个意思。<br>下面，我们看看描述实现方法的过程式编程是怎么玩的（看上去是不是不如函数式的清晰？）：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>|</p>\n<p>upname =[‘HAO’, ‘CHEN’, ‘COOLSHELL’]</p>\n<p>lowname =[]</p>\n<p>for i in range(len(upname)):</p>\n<p>lowname.append( upname[i].lower() )  </p>\n<p>—|—  </p>\n<p>对于map我们别忘了lambda表达式：你可以简单地理解为这是一个inline的匿名函数。下面的lambda表达式相当于：def func(x):<br>return x*x</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>squares = map(lambda x: x * x, range(9))</p>\n<p>print squares</p>\n<h1 id=\"输出-0-1-4-9-16-25-36-49-64\"><a href=\"#输出-0-1-4-9-16-25-36-49-64\" class=\"headerlink\" title=\"输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]\"></a>输出 [0, 1, 4, 9, 16, 25, 36, 49, 64]</h1><p>—|—  </p>\n<p>我们再来看看reduce怎么玩？（下面的lambda表达式中有两个参数，也就是说每次从列表中取两个值，计算结果后把这个值再放回去，下面的表达式相当于：(((<br>(1+2)+3)+4)+5) ）</p>\n<p>1</p>\n<p>2</p>\n<p>|</p>\n<p>print reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</p>\n<h1 id=\"输出-15\"><a href=\"#输出-15\" class=\"headerlink\" title=\"输出 15\"></a>输出 15</h1><p>—|—  </p>\n<p>Python中的除了map和reduce外，还有一些别的如filter, find, all,<br>any的函数做辅助（其它函数式的语言也有），可以让你的代码更简洁，更易读。 我们再来看一个比较复杂的例子：</p>\n<p>计算数组中正数的平均值</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>|</p>\n<p>num =[2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8]</p>\n<p>positive_num_cnt = 0</p>\n<p>positive_num_sum = 0</p>\n<p>for i in range(len(num)):</p>\n<p>if num[i] &gt; 0:</p>\n<p>positive_num_cnt += 1</p>\n<p>positive_num_sum += num[i]</p>\n<p>if positive_num_cnt &gt; 0:</p>\n<p>average = positive_num_sum / positive_num_cnt</p>\n<p>print average</p>\n<h1 id=\"输出-5\"><a href=\"#输出-5\" class=\"headerlink\" title=\"输出 5\"></a>输出 5</h1><p>—|—  </p>\n<p>如果用函数式编程，这个例子可以写成这样：</p>\n<p>1</p>\n<p>2</p>\n<p>|</p>\n<p>positive_num = filter(lambda x: x&gt;0, num)</p>\n<p>average = reduce(lambda x,y: x+y, positive_num) / len( positive_num )  </p>\n<p>—|—  </p>\n<p>C++11玩的法：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>|</p>\n<p>#include <iostream></p>\n<p>#include <algorithm></p>\n<p>#include <numeric></p>\n<p>#include <string></p>\n<p>#include <vector></p>\n<p>using namespace std;</p>\n<p>vector num {2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8};</p>\n<p>vector p_num;</p>\n<p>copy_if(num.begin(), num.end(&lt;span class=”crayon-sy” sty</p>\n"},{"title":"《浮生六记》","date":"2014-05-13T03:03:47.000Z","_content":"[《浮生六记》——沈复](http://www.amazon.cn/\\%E6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0-\\%E6\\%B2\\%\n88\\%E5\\%A4\\%8D/dp/B002FL42J2/ref=sr_1_1?ie=UTF8&qid=1399975529&sr=8-1&keywords=\\%E\n6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0)\n\n也忘了当初是出于什么原因买了这本书了。书中内容并不多，但是我还是看了一些时间，主要是书中的生字，文言倒没有多大的问题，毕竟这清代的。\n\n读完本书，我很欣赏作者的生活和写作的态度。在古代，很少看到这种详细描述了和妻子生活的作品，即使是十年生死两茫茫之类的作品只是反映了对妻子的牵挂而已。看完作者\n的一生，也着实为他的生活感到遗憾。一个修为如此高的人，一个只想做一个平凡人的人，怎么会经历这么多不幸的事呢。\n\n\n读完本书，最大的感慨就是体会到了作者那种出世的心态。虽然作为一个21世纪的新青年，但我也有这种心态。或许，每一个程序猿都有这么一种心态吧。当然，我绝不会像古\n人那样做一个隐士的，我的隐，是大隐隐于朝野的隐。教我们老庄与道家思想的老师也说过，大隐隐于朝野，既能实现自己的愿望，又能做一个独立的人，一个不与世俗同流合污\n的人。我最大的愿望也是过上平平凡凡的生活，得一人心，白首不分离。\n\n### 语录\n\n**_浮生若梦，为欢几何 _**  \n**_蜣螂团粪而化蝉，以其欲修高举也 _**  \n**_情之所钟，虽丑不嫌 _**  \n**_当日浑闲事，而今尽可怜 _**  \n**_人大言，我小语；人多烦，我少记；人悸怖，我不怒；淡然无为，神气自满，此长生之药 _**  \n**_且从来拂意之事，自不读书者见之_**\n","source":"_posts/fushengliuji.md","raw":"---\ntitle: \"《浮生六记》\"\ndate: 2014-05-13 11:03:47\ncategories: 韦编三绝\n---\n[《浮生六记》——沈复](http://www.amazon.cn/\\%E6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0-\\%E6\\%B2\\%\n88\\%E5\\%A4\\%8D/dp/B002FL42J2/ref=sr_1_1?ie=UTF8&qid=1399975529&sr=8-1&keywords=\\%E\n6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0)\n\n也忘了当初是出于什么原因买了这本书了。书中内容并不多，但是我还是看了一些时间，主要是书中的生字，文言倒没有多大的问题，毕竟这清代的。\n\n读完本书，我很欣赏作者的生活和写作的态度。在古代，很少看到这种详细描述了和妻子生活的作品，即使是十年生死两茫茫之类的作品只是反映了对妻子的牵挂而已。看完作者\n的一生，也着实为他的生活感到遗憾。一个修为如此高的人，一个只想做一个平凡人的人，怎么会经历这么多不幸的事呢。\n\n\n读完本书，最大的感慨就是体会到了作者那种出世的心态。虽然作为一个21世纪的新青年，但我也有这种心态。或许，每一个程序猿都有这么一种心态吧。当然，我绝不会像古\n人那样做一个隐士的，我的隐，是大隐隐于朝野的隐。教我们老庄与道家思想的老师也说过，大隐隐于朝野，既能实现自己的愿望，又能做一个独立的人，一个不与世俗同流合污\n的人。我最大的愿望也是过上平平凡凡的生活，得一人心，白首不分离。\n\n### 语录\n\n**_浮生若梦，为欢几何 _**  \n**_蜣螂团粪而化蝉，以其欲修高举也 _**  \n**_情之所钟，虽丑不嫌 _**  \n**_当日浑闲事，而今尽可怜 _**  \n**_人大言，我小语；人多烦，我少记；人悸怖，我不怒；淡然无为，神气自满，此长生之药 _**  \n**_且从来拂意之事，自不读书者见之_**\n","slug":"fushengliuji","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p8p00209vnz7dcvafdm","content":"<p><a href=\"http://www.amazon.cn/\\%E6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0-\\%E6\\%B2\\%\n88\\%E5\\%A4\\%8D/dp/B002FL42J2/ref=sr_1_1?ie=UTF8&amp;qid=1399975529&amp;sr=8-1&amp;keywords=\\%E\n6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0\" target=\"_blank\" rel=\"external\">《浮生六记》——沈复</a></p>\n<p>也忘了当初是出于什么原因买了这本书了。书中内容并不多，但是我还是看了一些时间，主要是书中的生字，文言倒没有多大的问题，毕竟这清代的。</p>\n<p>读完本书，我很欣赏作者的生活和写作的态度。在古代，很少看到这种详细描述了和妻子生活的作品，即使是十年生死两茫茫之类的作品只是反映了对妻子的牵挂而已。看完作者<br>的一生，也着实为他的生活感到遗憾。一个修为如此高的人，一个只想做一个平凡人的人，怎么会经历这么多不幸的事呢。</p>\n<p>读完本书，最大的感慨就是体会到了作者那种出世的心态。虽然作为一个21世纪的新青年，但我也有这种心态。或许，每一个程序猿都有这么一种心态吧。当然，我绝不会像古<br>人那样做一个隐士的，我的隐，是大隐隐于朝野的隐。教我们老庄与道家思想的老师也说过，大隐隐于朝野，既能实现自己的愿望，又能做一个独立的人，一个不与世俗同流合污<br>的人。我最大的愿望也是过上平平凡凡的生活，得一人心，白首不分离。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p><strong><em>浮生若梦，为欢几何 </em></strong><br><strong><em>蜣螂团粪而化蝉，以其欲修高举也 </em></strong><br><strong><em>情之所钟，虽丑不嫌 </em></strong><br><strong><em>当日浑闲事，而今尽可怜 </em></strong><br><strong><em>人大言，我小语；人多烦，我少记；人悸怖，我不怒；淡然无为，神气自满，此长生之药 </em></strong><br><strong><em>且从来拂意之事，自不读书者见之</em></strong></p>\n","excerpt":"","more":"<p><a href=\"http://www.amazon.cn/\\%E6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0-\\%E6\\%B2\\%\n88\\%E5\\%A4\\%8D/dp/B002FL42J2/ref=sr_1_1?ie=UTF8&amp;qid=1399975529&amp;sr=8-1&amp;keywords=\\%E\n6\\%B5\\%AE\\%E7\\%94\\%9F\\%E5\\%85\\%AD\\%E8\\%AE\\%B0\">《浮生六记》——沈复</a></p>\n<p>也忘了当初是出于什么原因买了这本书了。书中内容并不多，但是我还是看了一些时间，主要是书中的生字，文言倒没有多大的问题，毕竟这清代的。</p>\n<p>读完本书，我很欣赏作者的生活和写作的态度。在古代，很少看到这种详细描述了和妻子生活的作品，即使是十年生死两茫茫之类的作品只是反映了对妻子的牵挂而已。看完作者<br>的一生，也着实为他的生活感到遗憾。一个修为如此高的人，一个只想做一个平凡人的人，怎么会经历这么多不幸的事呢。</p>\n<p>读完本书，最大的感慨就是体会到了作者那种出世的心态。虽然作为一个21世纪的新青年，但我也有这种心态。或许，每一个程序猿都有这么一种心态吧。当然，我绝不会像古<br>人那样做一个隐士的，我的隐，是大隐隐于朝野的隐。教我们老庄与道家思想的老师也说过，大隐隐于朝野，既能实现自己的愿望，又能做一个独立的人，一个不与世俗同流合污<br>的人。我最大的愿望也是过上平平凡凡的生活，得一人心，白首不分离。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><p><strong><em>浮生若梦，为欢几何 </em></strong><br><strong><em>蜣螂团粪而化蝉，以其欲修高举也 </em></strong><br><strong><em>情之所钟，虽丑不嫌 </em></strong><br><strong><em>当日浑闲事，而今尽可怜 </em></strong><br><strong><em>人大言，我小语；人多烦，我少记；人悸怖，我不怒；淡然无为，神气自满，此长生之药 </em></strong><br><strong><em>且从来拂意之事，自不读书者见之</em></strong></p>\n"},{"title":"别忘了前行的目的——致去年今日半途而废的自己","date":"2014-07-22T19:18:20.000Z","_content":"很多时候，我们走着走着，就忘了前行的目的。\n\n去年今日，我放弃了和同伴们一起去西藏的旅途，没错，那时候，我真的觉得自己是一个彻彻底底的loser，一个男人，连这点毅力都没有。\n\n2013年7月21日，我和同伴们(BOSS、大强、喉咙)一起，开始我们的足藏行(大足——西藏)。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_0.jpg)  \n还记得第一天的骑行，大足到内江，一百多公里，虽然我确实挺喜欢骑自行车的，但也从来没有骑过这么远，也从来没有骑山地车的经验，第一天就精疲力竭了。呵呵，说来可笑\n，第一天就产生了放弃的想法，当时我想，这只是第一天，可能只是不适应而已。第二天又骑了很远很远，更重要的是我们还赶了几小时的夜路，在郊外骑夜路真的太危险了，那\n天我们好像十点才找到住宿的地方，那天开始我就发现自己身体不行了。第三天，也就是去年的今天，早上，我们在路边休息的时候，喉咙突然问了句，“我们当初为什么要来呢\n”。这句话我不小心就听进去了，一直想一直想。那天中午，路过眉山的时候，他们都骑了很远很远，只有我一个人还在后面，灰尘、烈日、高温，真的吃不消了，有几次都差点\n晕过去。我找到路边一处树荫处躺在了地上，从树叶间的缝隙看着太阳，阳光很刺眼，我不敢看。转向地下的泥土，泥土还有点湿润。当时真想快点回家吹空调，发誓回去后一定\n要好好热爱生活，一定要好好学习，一定要。。。等等，我当初到底是为什么来的呢？是因为很多人都去了我也想去？是因为我想挑战自己？是因为我想去看美丽的风景？是因为\n我想逃避？我忘了，我真的忘了此行的目的了。我要回家！我想，这次的放弃这辈子可能就没有下次了，这次放弃我肯定会后悔一辈子的，但是，我还是放弃了。其实那天下午，\n太阳一阴下来我就开始后悔了，但是我不好意思跟队友说，其实，算了吧，我都想不出继续前进的理由了，哪怕是一个借口我也找不到。\n\n在眉山住了一晚，想想在四川的所见所闻，真的怀念在路上的感觉，可以体会一个地方的风土人情，更重要的还有美食，好久没去四川，那个地方菜是真正保留了辣味原滋原味的\n地方。我以后肯定会再去眉山的。(PS:貌似每次在亚马逊买书，都是从眉山那个仓库送过来的)。\n\n一个人回到重庆，到菜园坝已经是晚上了，打算把车子放在一个车行，但居然关门了，一个人把车子从车站抬到了两路口这上面来，没有坐那个皇冠大扶梯。看到它关门后，不知\n道该什么，就一个人在街头游荡。更倒霉的是，在一次过马路的时候，车子居然散架了，我操，辛辛苦苦捡到了马路边，一个人坐在那儿发呆，好无助，当时很想买瓶酒一醉方休\n。过了一会儿，有个大哥过来问了下我的情况，然后就帮了我一下，把车寄放到他那里，当然，第二天，我是直接回家而没有去取的，现在想来，我最对不起的是我那辆车，磨砂\n的黑色，美利达，具体型号忘了，还好这儿还有张特写：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_1.jpg)  \n那晚，我独自走上菜园坝长江大桥，走过来又走过去，和以前的女朋友们打了电话，他们都很好，呵呵，挺羡慕他们的生活的，唉。\n\n白岩松(好像是他说的)曾经说过：“**不要因为我们走得太远，就忘记了我们当初出发的目的**。”这一年里，我改变了很多东西，也发现了自己很多的缺点，唯一不变的\n是仍然坚持做一个梦想家，心中的梦永远做不完。我知道，我王豪绝不是一个半途而废的人，只是有些时候我们会忘记前行的目的，没有了目的，那前行还有什么动力，没有终点\n，前行还有什么意义。写这篇文章的时候，音乐播放器正好播放到郑智化的一首歌“有再多的悲，有再多的伤，我不怕我不怕啊，再多的悲伤只为证明幸福的代价；有再多的痛，\n有再多的苦，我不怕我不怕啊，再多的痛苦掩盖不住梦想的伟大。“有了目标并坚定目标，严寒、酷暑，这些挫折算个屁呀。\n\n我想创业，我知道路上有很多未知的东西，但我也知道我的小伙伴会一直相信我、鼓励我，这次，我绝不会忘记自己前行的目的。人这辈子虽然有几十年，但我们真的追过的梦想\n又有几个。很多人说现实太残酷了，别他妈以为只有心里想想就能称得上是梦想，没有付出，没有痛苦，那梦想有什么价值，不要说你的梦想就是出去吃二两小面，吃二两小面还\n要给钱呢。\n\n无论怎样，调整好心态，找回曾经的梦想，一切，都还来得及。\n\n# 318，辉煌的最后一年：\n\n一年了，虽然这一年里我没有碰过自行车，但是我依然很崇拜那些真正能够骑车到西藏的人，大强就是这样，他们绝对是为了目标能够不顾一切，心中永远坚持那个目标的人。我\n不知道以后还能不能再次踏上这段路，但是听说，今年是318最后一年，也高尔寺山，剪子弯山垭口的风景只能在一集中搜索了，漫步云端从此将成为传说，就是说，以后再走\n318，再也不能看到那充满原始魅力的318了。如果前行的路被铺得那么好，那真正的行者还能有几个。希望所有曾踏上过这条路的人，无论是否到达过拉萨，都能为曾经的\n”冲动“感到骄傲！318，再见！  \n![](http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_2.jpg)  \n","source":"_posts/give-up-halfway.md","raw":"---\ntitle: \"别忘了前行的目的——致去年今日半途而废的自己\"\ndate: 2014-07-23 03:18:20\ncategories: 边走边想\n---\n很多时候，我们走着走着，就忘了前行的目的。\n\n去年今日，我放弃了和同伴们一起去西藏的旅途，没错，那时候，我真的觉得自己是一个彻彻底底的loser，一个男人，连这点毅力都没有。\n\n2013年7月21日，我和同伴们(BOSS、大强、喉咙)一起，开始我们的足藏行(大足——西藏)。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_0.jpg)  \n还记得第一天的骑行，大足到内江，一百多公里，虽然我确实挺喜欢骑自行车的，但也从来没有骑过这么远，也从来没有骑山地车的经验，第一天就精疲力竭了。呵呵，说来可笑\n，第一天就产生了放弃的想法，当时我想，这只是第一天，可能只是不适应而已。第二天又骑了很远很远，更重要的是我们还赶了几小时的夜路，在郊外骑夜路真的太危险了，那\n天我们好像十点才找到住宿的地方，那天开始我就发现自己身体不行了。第三天，也就是去年的今天，早上，我们在路边休息的时候，喉咙突然问了句，“我们当初为什么要来呢\n”。这句话我不小心就听进去了，一直想一直想。那天中午，路过眉山的时候，他们都骑了很远很远，只有我一个人还在后面，灰尘、烈日、高温，真的吃不消了，有几次都差点\n晕过去。我找到路边一处树荫处躺在了地上，从树叶间的缝隙看着太阳，阳光很刺眼，我不敢看。转向地下的泥土，泥土还有点湿润。当时真想快点回家吹空调，发誓回去后一定\n要好好热爱生活，一定要好好学习，一定要。。。等等，我当初到底是为什么来的呢？是因为很多人都去了我也想去？是因为我想挑战自己？是因为我想去看美丽的风景？是因为\n我想逃避？我忘了，我真的忘了此行的目的了。我要回家！我想，这次的放弃这辈子可能就没有下次了，这次放弃我肯定会后悔一辈子的，但是，我还是放弃了。其实那天下午，\n太阳一阴下来我就开始后悔了，但是我不好意思跟队友说，其实，算了吧，我都想不出继续前进的理由了，哪怕是一个借口我也找不到。\n\n在眉山住了一晚，想想在四川的所见所闻，真的怀念在路上的感觉，可以体会一个地方的风土人情，更重要的还有美食，好久没去四川，那个地方菜是真正保留了辣味原滋原味的\n地方。我以后肯定会再去眉山的。(PS:貌似每次在亚马逊买书，都是从眉山那个仓库送过来的)。\n\n一个人回到重庆，到菜园坝已经是晚上了，打算把车子放在一个车行，但居然关门了，一个人把车子从车站抬到了两路口这上面来，没有坐那个皇冠大扶梯。看到它关门后，不知\n道该什么，就一个人在街头游荡。更倒霉的是，在一次过马路的时候，车子居然散架了，我操，辛辛苦苦捡到了马路边，一个人坐在那儿发呆，好无助，当时很想买瓶酒一醉方休\n。过了一会儿，有个大哥过来问了下我的情况，然后就帮了我一下，把车寄放到他那里，当然，第二天，我是直接回家而没有去取的，现在想来，我最对不起的是我那辆车，磨砂\n的黑色，美利达，具体型号忘了，还好这儿还有张特写：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_1.jpg)  \n那晚，我独自走上菜园坝长江大桥，走过来又走过去，和以前的女朋友们打了电话，他们都很好，呵呵，挺羡慕他们的生活的，唉。\n\n白岩松(好像是他说的)曾经说过：“**不要因为我们走得太远，就忘记了我们当初出发的目的**。”这一年里，我改变了很多东西，也发现了自己很多的缺点，唯一不变的\n是仍然坚持做一个梦想家，心中的梦永远做不完。我知道，我王豪绝不是一个半途而废的人，只是有些时候我们会忘记前行的目的，没有了目的，那前行还有什么动力，没有终点\n，前行还有什么意义。写这篇文章的时候，音乐播放器正好播放到郑智化的一首歌“有再多的悲，有再多的伤，我不怕我不怕啊，再多的悲伤只为证明幸福的代价；有再多的痛，\n有再多的苦，我不怕我不怕啊，再多的痛苦掩盖不住梦想的伟大。“有了目标并坚定目标，严寒、酷暑，这些挫折算个屁呀。\n\n我想创业，我知道路上有很多未知的东西，但我也知道我的小伙伴会一直相信我、鼓励我，这次，我绝不会忘记自己前行的目的。人这辈子虽然有几十年，但我们真的追过的梦想\n又有几个。很多人说现实太残酷了，别他妈以为只有心里想想就能称得上是梦想，没有付出，没有痛苦，那梦想有什么价值，不要说你的梦想就是出去吃二两小面，吃二两小面还\n要给钱呢。\n\n无论怎样，调整好心态，找回曾经的梦想，一切，都还来得及。\n\n# 318，辉煌的最后一年：\n\n一年了，虽然这一年里我没有碰过自行车，但是我依然很崇拜那些真正能够骑车到西藏的人，大强就是这样，他们绝对是为了目标能够不顾一切，心中永远坚持那个目标的人。我\n不知道以后还能不能再次踏上这段路，但是听说，今年是318最后一年，也高尔寺山，剪子弯山垭口的风景只能在一集中搜索了，漫步云端从此将成为传说，就是说，以后再走\n318，再也不能看到那充满原始魅力的318了。如果前行的路被铺得那么好，那真正的行者还能有几个。希望所有曾踏上过这条路的人，无论是否到达过拉萨，都能为曾经的\n”冲动“感到骄傲！318，再见！  \n![](http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_2.jpg)  \n","slug":"give-up-halfway","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p8s00229vnzvv2tkln1","content":"<p>很多时候，我们走着走着，就忘了前行的目的。</p>\n<p>去年今日，我放弃了和同伴们一起去西藏的旅途，没错，那时候，我真的觉得自己是一个彻彻底底的loser，一个男人，连这点毅力都没有。</p>\n<p>2013年7月21日，我和同伴们(BOSS、大强、喉咙)一起，开始我们的足藏行(大足——西藏)。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_0.jpg\" alt=\"\"><br>还记得第一天的骑行，大足到内江，一百多公里，虽然我确实挺喜欢骑自行车的，但也从来没有骑过这么远，也从来没有骑山地车的经验，第一天就精疲力竭了。呵呵，说来可笑<br>，第一天就产生了放弃的想法，当时我想，这只是第一天，可能只是不适应而已。第二天又骑了很远很远，更重要的是我们还赶了几小时的夜路，在郊外骑夜路真的太危险了，那<br>天我们好像十点才找到住宿的地方，那天开始我就发现自己身体不行了。第三天，也就是去年的今天，早上，我们在路边休息的时候，喉咙突然问了句，“我们当初为什么要来呢<br>”。这句话我不小心就听进去了，一直想一直想。那天中午，路过眉山的时候，他们都骑了很远很远，只有我一个人还在后面，灰尘、烈日、高温，真的吃不消了，有几次都差点<br>晕过去。我找到路边一处树荫处躺在了地上，从树叶间的缝隙看着太阳，阳光很刺眼，我不敢看。转向地下的泥土，泥土还有点湿润。当时真想快点回家吹空调，发誓回去后一定<br>要好好热爱生活，一定要好好学习，一定要。。。等等，我当初到底是为什么来的呢？是因为很多人都去了我也想去？是因为我想挑战自己？是因为我想去看美丽的风景？是因为<br>我想逃避？我忘了，我真的忘了此行的目的了。我要回家！我想，这次的放弃这辈子可能就没有下次了，这次放弃我肯定会后悔一辈子的，但是，我还是放弃了。其实那天下午，<br>太阳一阴下来我就开始后悔了，但是我不好意思跟队友说，其实，算了吧，我都想不出继续前进的理由了，哪怕是一个借口我也找不到。</p>\n<p>在眉山住了一晚，想想在四川的所见所闻，真的怀念在路上的感觉，可以体会一个地方的风土人情，更重要的还有美食，好久没去四川，那个地方菜是真正保留了辣味原滋原味的<br>地方。我以后肯定会再去眉山的。(PS:貌似每次在亚马逊买书，都是从眉山那个仓库送过来的)。</p>\n<p>一个人回到重庆，到菜园坝已经是晚上了，打算把车子放在一个车行，但居然关门了，一个人把车子从车站抬到了两路口这上面来，没有坐那个皇冠大扶梯。看到它关门后，不知<br>道该什么，就一个人在街头游荡。更倒霉的是，在一次过马路的时候，车子居然散架了，我操，辛辛苦苦捡到了马路边，一个人坐在那儿发呆，好无助，当时很想买瓶酒一醉方休<br>。过了一会儿，有个大哥过来问了下我的情况，然后就帮了我一下，把车寄放到他那里，当然，第二天，我是直接回家而没有去取的，现在想来，我最对不起的是我那辆车，磨砂<br>的黑色，美利达，具体型号忘了，还好这儿还有张特写：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_1.jpg\" alt=\"\"><br>那晚，我独自走上菜园坝长江大桥，走过来又走过去，和以前的女朋友们打了电话，他们都很好，呵呵，挺羡慕他们的生活的，唉。</p>\n<p>白岩松(好像是他说的)曾经说过：“<strong>不要因为我们走得太远，就忘记了我们当初出发的目的</strong>。”这一年里，我改变了很多东西，也发现了自己很多的缺点，唯一不变的<br>是仍然坚持做一个梦想家，心中的梦永远做不完。我知道，我王豪绝不是一个半途而废的人，只是有些时候我们会忘记前行的目的，没有了目的，那前行还有什么动力，没有终点<br>，前行还有什么意义。写这篇文章的时候，音乐播放器正好播放到郑智化的一首歌“有再多的悲，有再多的伤，我不怕我不怕啊，再多的悲伤只为证明幸福的代价；有再多的痛，<br>有再多的苦，我不怕我不怕啊，再多的痛苦掩盖不住梦想的伟大。“有了目标并坚定目标，严寒、酷暑，这些挫折算个屁呀。</p>\n<p>我想创业，我知道路上有很多未知的东西，但我也知道我的小伙伴会一直相信我、鼓励我，这次，我绝不会忘记自己前行的目的。人这辈子虽然有几十年，但我们真的追过的梦想<br>又有几个。很多人说现实太残酷了，别他妈以为只有心里想想就能称得上是梦想，没有付出，没有痛苦，那梦想有什么价值，不要说你的梦想就是出去吃二两小面，吃二两小面还<br>要给钱呢。</p>\n<p>无论怎样，调整好心态，找回曾经的梦想，一切，都还来得及。</p>\n<h1 id=\"318，辉煌的最后一年：\"><a href=\"#318，辉煌的最后一年：\" class=\"headerlink\" title=\"318，辉煌的最后一年：\"></a>318，辉煌的最后一年：</h1><p>一年了，虽然这一年里我没有碰过自行车，但是我依然很崇拜那些真正能够骑车到西藏的人，大强就是这样，他们绝对是为了目标能够不顾一切，心中永远坚持那个目标的人。我<br>不知道以后还能不能再次踏上这段路，但是听说，今年是318最后一年，也高尔寺山，剪子弯山垭口的风景只能在一集中搜索了，漫步云端从此将成为传说，就是说，以后再走<br>318，再也不能看到那充满原始魅力的318了。如果前行的路被铺得那么好，那真正的行者还能有几个。希望所有曾踏上过这条路的人，无论是否到达过拉萨，都能为曾经的<br>”冲动“感到骄傲！318，再见！<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_2.jpg\" alt=\"\">  </p>\n","excerpt":"","more":"<p>很多时候，我们走着走着，就忘了前行的目的。</p>\n<p>去年今日，我放弃了和同伴们一起去西藏的旅途，没错，那时候，我真的觉得自己是一个彻彻底底的loser，一个男人，连这点毅力都没有。</p>\n<p>2013年7月21日，我和同伴们(BOSS、大强、喉咙)一起，开始我们的足藏行(大足——西藏)。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_0.jpg\" alt=\"\"><br>还记得第一天的骑行，大足到内江，一百多公里，虽然我确实挺喜欢骑自行车的，但也从来没有骑过这么远，也从来没有骑山地车的经验，第一天就精疲力竭了。呵呵，说来可笑<br>，第一天就产生了放弃的想法，当时我想，这只是第一天，可能只是不适应而已。第二天又骑了很远很远，更重要的是我们还赶了几小时的夜路，在郊外骑夜路真的太危险了，那<br>天我们好像十点才找到住宿的地方，那天开始我就发现自己身体不行了。第三天，也就是去年的今天，早上，我们在路边休息的时候，喉咙突然问了句，“我们当初为什么要来呢<br>”。这句话我不小心就听进去了，一直想一直想。那天中午，路过眉山的时候，他们都骑了很远很远，只有我一个人还在后面，灰尘、烈日、高温，真的吃不消了，有几次都差点<br>晕过去。我找到路边一处树荫处躺在了地上，从树叶间的缝隙看着太阳，阳光很刺眼，我不敢看。转向地下的泥土，泥土还有点湿润。当时真想快点回家吹空调，发誓回去后一定<br>要好好热爱生活，一定要好好学习，一定要。。。等等，我当初到底是为什么来的呢？是因为很多人都去了我也想去？是因为我想挑战自己？是因为我想去看美丽的风景？是因为<br>我想逃避？我忘了，我真的忘了此行的目的了。我要回家！我想，这次的放弃这辈子可能就没有下次了，这次放弃我肯定会后悔一辈子的，但是，我还是放弃了。其实那天下午，<br>太阳一阴下来我就开始后悔了，但是我不好意思跟队友说，其实，算了吧，我都想不出继续前进的理由了，哪怕是一个借口我也找不到。</p>\n<p>在眉山住了一晚，想想在四川的所见所闻，真的怀念在路上的感觉，可以体会一个地方的风土人情，更重要的还有美食，好久没去四川，那个地方菜是真正保留了辣味原滋原味的<br>地方。我以后肯定会再去眉山的。(PS:貌似每次在亚马逊买书，都是从眉山那个仓库送过来的)。</p>\n<p>一个人回到重庆，到菜园坝已经是晚上了，打算把车子放在一个车行，但居然关门了，一个人把车子从车站抬到了两路口这上面来，没有坐那个皇冠大扶梯。看到它关门后，不知<br>道该什么，就一个人在街头游荡。更倒霉的是，在一次过马路的时候，车子居然散架了，我操，辛辛苦苦捡到了马路边，一个人坐在那儿发呆，好无助，当时很想买瓶酒一醉方休<br>。过了一会儿，有个大哥过来问了下我的情况，然后就帮了我一下，把车寄放到他那里，当然，第二天，我是直接回家而没有去取的，现在想来，我最对不起的是我那辆车，磨砂<br>的黑色，美利达，具体型号忘了，还好这儿还有张特写：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_1.jpg\" alt=\"\"><br>那晚，我独自走上菜园坝长江大桥，走过来又走过去，和以前的女朋友们打了电话，他们都很好，呵呵，挺羡慕他们的生活的，唉。</p>\n<p>白岩松(好像是他说的)曾经说过：“<strong>不要因为我们走得太远，就忘记了我们当初出发的目的</strong>。”这一年里，我改变了很多东西，也发现了自己很多的缺点，唯一不变的<br>是仍然坚持做一个梦想家，心中的梦永远做不完。我知道，我王豪绝不是一个半途而废的人，只是有些时候我们会忘记前行的目的，没有了目的，那前行还有什么动力，没有终点<br>，前行还有什么意义。写这篇文章的时候，音乐播放器正好播放到郑智化的一首歌“有再多的悲，有再多的伤，我不怕我不怕啊，再多的悲伤只为证明幸福的代价；有再多的痛，<br>有再多的苦，我不怕我不怕啊，再多的痛苦掩盖不住梦想的伟大。“有了目标并坚定目标，严寒、酷暑，这些挫折算个屁呀。</p>\n<p>我想创业，我知道路上有很多未知的东西，但我也知道我的小伙伴会一直相信我、鼓励我，这次，我绝不会忘记自己前行的目的。人这辈子虽然有几十年，但我们真的追过的梦想<br>又有几个。很多人说现实太残酷了，别他妈以为只有心里想想就能称得上是梦想，没有付出，没有痛苦，那梦想有什么价值，不要说你的梦想就是出去吃二两小面，吃二两小面还<br>要给钱呢。</p>\n<p>无论怎样，调整好心态，找回曾经的梦想，一切，都还来得及。</p>\n<h1 id=\"318，辉煌的最后一年：\"><a href=\"#318，辉煌的最后一年：\" class=\"headerlink\" title=\"318，辉煌的最后一年：\"></a>318，辉煌的最后一年：</h1><p>一年了，虽然这一年里我没有碰过自行车，但是我依然很崇拜那些真正能够骑车到西藏的人，大强就是这样，他们绝对是为了目标能够不顾一切，心中永远坚持那个目标的人。我<br>不知道以后还能不能再次踏上这段路，但是听说，今年是318最后一年，也高尔寺山，剪子弯山垭口的风景只能在一集中搜索了，漫步云端从此将成为传说，就是说，以后再走<br>318，再也不能看到那充满原始魅力的318了。如果前行的路被铺得那么好，那真正的行者还能有几个。希望所有曾踏上过这条路的人，无论是否到达过拉萨，都能为曾经的<br>”冲动“感到骄傲！318，再见！<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/give-up-halfway_2.jpg\" alt=\"\">  </p>\n"},{"title":"在Github上设置webhook钩子","date":"2015-03-22T09:47:14.000Z","_content":"又搞了一天才搞好，主要原因是没看懂错误提示信息。\n\n**webhook**：简单地说，使用webhook可以让每次在本地push到github上去后，让服务器自动pull下来，这样就不用每次提交然后手动pull的过程了。\n\n下面是详细配置过程(基于laravel)：\n\n1. 首先，得在laravel里添加一个路由，然后指向某个文件，例如路由为'/webhook'，然后指向PHP文件为'webhook.php'，然后在该文件内添加如下内容，该文件即是服务器响应Github webhook请求的文件：\n\n\t\t<?php\n\t\t\t$dir = '/var/www/test';\n\t\t\techo shell_exec(\"cd /var/www/test\");\n\t\t\techo shell_exec(\"sudo git pull -f git@github.com:haoflynet/guake.git 2>&1\");\n    \t?>\n\n2. 用户权限问题，由于执行该PHP文件的用户是apache的默认用户www-data，所以我在上面的命令中使用的是'sudo'，这样可以不用给www-\ndata用户生成ssh，然后又出现各种混乱的问题。但是www-\ndata又怎么免输密码执行git命令呢，还好linux提供了这么一个方面的操作，在'/etc/sudoers'文件里有如下内容：\n\n\t\t# User privilege specification\n\t\troot ALL=(ALL:ALL) ALL  # 默认的root用户可以在所有平台使用所有权限\n\t\twww-data ALL=NOPASSWD:/usr/bin/git # 这里给www-data赋予免密码执行git的权限\n\n3. 在仓库中添加钩子，执行`vim .git/hooks/post-receive`，然后添加如下内容，最后还要加入可执行权限：\n\n        GIT_WORK_TREE=/var/www git checkout -f\n\n4. 在Github上进行设置  \n![](http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_0.png)  \n如图所示添加webhook，设置中可以选择各种出发事件event，一般默认是push事件，在Payload\nURL中设置自己刚才所设置的URL，最后添加即可完成。\n\n5. 测试\n测试钩子的时候，可以直接在Github上面看到执行的列表，还可以看到每一个POST的详细信息以及响应信息：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_2.png)  \n\n## TroubleShooting：\n- Laravel 5中如果要设置webhook，该POST路由不能使用CSRF\n- Django同样要禁用csrf：\n\n\t\timport os\n\t\tfrom django.views.decorators.csrf import csrf_exempt\n\t\tfrom django.http import HttpResponse\n\n\t\t@csrf_exempt\n\t\tdef webhook(request):\n\t\t\tos.system('cd /var/www/admin')\n\t\tos.system('git pull -f git@github.com:haoflynet/admin.git 2>&1')\n\t\t\treturn HttpResponse('ok')\n","source":"_posts/github-set-webhook.md","raw":"---\ntitle: \"在Github上设置webhook钩子\"\ndate: 2015-03-22 17:47:14\ncategories: 编程之路\n---\n又搞了一天才搞好，主要原因是没看懂错误提示信息。\n\n**webhook**：简单地说，使用webhook可以让每次在本地push到github上去后，让服务器自动pull下来，这样就不用每次提交然后手动pull的过程了。\n\n下面是详细配置过程(基于laravel)：\n\n1. 首先，得在laravel里添加一个路由，然后指向某个文件，例如路由为'/webhook'，然后指向PHP文件为'webhook.php'，然后在该文件内添加如下内容，该文件即是服务器响应Github webhook请求的文件：\n\n\t\t<?php\n\t\t\t$dir = '/var/www/test';\n\t\t\techo shell_exec(\"cd /var/www/test\");\n\t\t\techo shell_exec(\"sudo git pull -f git@github.com:haoflynet/guake.git 2>&1\");\n    \t?>\n\n2. 用户权限问题，由于执行该PHP文件的用户是apache的默认用户www-data，所以我在上面的命令中使用的是'sudo'，这样可以不用给www-\ndata用户生成ssh，然后又出现各种混乱的问题。但是www-\ndata又怎么免输密码执行git命令呢，还好linux提供了这么一个方面的操作，在'/etc/sudoers'文件里有如下内容：\n\n\t\t# User privilege specification\n\t\troot ALL=(ALL:ALL) ALL  # 默认的root用户可以在所有平台使用所有权限\n\t\twww-data ALL=NOPASSWD:/usr/bin/git # 这里给www-data赋予免密码执行git的权限\n\n3. 在仓库中添加钩子，执行`vim .git/hooks/post-receive`，然后添加如下内容，最后还要加入可执行权限：\n\n        GIT_WORK_TREE=/var/www git checkout -f\n\n4. 在Github上进行设置  \n![](http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_0.png)  \n如图所示添加webhook，设置中可以选择各种出发事件event，一般默认是push事件，在Payload\nURL中设置自己刚才所设置的URL，最后添加即可完成。\n\n5. 测试\n测试钩子的时候，可以直接在Github上面看到执行的列表，还可以看到每一个POST的详细信息以及响应信息：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_2.png)  \n\n## TroubleShooting：\n- Laravel 5中如果要设置webhook，该POST路由不能使用CSRF\n- Django同样要禁用csrf：\n\n\t\timport os\n\t\tfrom django.views.decorators.csrf import csrf_exempt\n\t\tfrom django.http import HttpResponse\n\n\t\t@csrf_exempt\n\t\tdef webhook(request):\n\t\t\tos.system('cd /var/www/admin')\n\t\tos.system('git pull -f git@github.com:haoflynet/admin.git 2>&1')\n\t\t\treturn HttpResponse('ok')\n","slug":"github-set-webhook","published":1,"updated":"2016-06-03T10:22:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9000249vnzk8bm1xxw","content":"<p>又搞了一天才搞好，主要原因是没看懂错误提示信息。</p>\n<p><strong>webhook</strong>：简单地说，使用webhook可以让每次在本地push到github上去后，让服务器自动pull下来，这样就不用每次提交然后手动pull的过程了。</p>\n<p>下面是详细配置过程(基于laravel)：</p>\n<ol>\n<li><p>首先，得在laravel里添加一个路由，然后指向某个文件，例如路由为’/webhook’，然后指向PHP文件为’webhook.php’，然后在该文件内添加如下内容，该文件即是服务器响应Github webhook请求的文件：</p>\n<pre><code>&lt;?php\n    $dir = &apos;/var/www/test&apos;;\n    echo shell_exec(&quot;cd /var/www/test&quot;);\n    echo shell_exec(&quot;sudo git pull -f git@github.com:haoflynet/guake.git 2&gt;&amp;1&quot;);\n?&gt;\n</code></pre></li>\n<li><p>用户权限问题，由于执行该PHP文件的用户是apache的默认用户www-data，所以我在上面的命令中使用的是’sudo’，这样可以不用给www-<br>data用户生成ssh，然后又出现各种混乱的问题。但是www-<br>data又怎么免输密码执行git命令呢，还好linux提供了这么一个方面的操作，在’/etc/sudoers’文件里有如下内容：</p>\n<pre><code># User privilege specification\nroot ALL=(ALL:ALL) ALL  # 默认的root用户可以在所有平台使用所有权限\nwww-data ALL=NOPASSWD:/usr/bin/git # 这里给www-data赋予免密码执行git的权限\n</code></pre></li>\n<li><p>在仓库中添加钩子，执行<code>vim .git/hooks/post-receive</code>，然后添加如下内容，最后还要加入可执行权限：</p>\n<pre><code>GIT_WORK_TREE=/var/www git checkout -f\n</code></pre></li>\n<li><p>在Github上进行设置<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_0.png\" alt=\"\"><br>如图所示添加webhook，设置中可以选择各种出发事件event，一般默认是push事件，在Payload<br>URL中设置自己刚才所设置的URL，最后添加即可完成。</p>\n</li>\n<li><p>测试<br>测试钩子的时候，可以直接在Github上面看到执行的列表，还可以看到每一个POST的详细信息以及响应信息：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_2.png\" alt=\"\">  </p>\n</li>\n</ol>\n<h2 id=\"TroubleShooting：\"><a href=\"#TroubleShooting：\" class=\"headerlink\" title=\"TroubleShooting：\"></a>TroubleShooting：</h2><ul>\n<li>Laravel 5中如果要设置webhook，该POST路由不能使用CSRF</li>\n<li><p>Django同样要禁用csrf：</p>\n<pre><code>import os\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.http import HttpResponse\n\n@csrf_exempt\ndef webhook(request):\n    os.system(&apos;cd /var/www/admin&apos;)\nos.system(&apos;git pull -f git@github.com:haoflynet/admin.git 2&gt;&amp;1&apos;)\n    return HttpResponse(&apos;ok&apos;)\n</code></pre></li>\n</ul>\n","excerpt":"","more":"<p>又搞了一天才搞好，主要原因是没看懂错误提示信息。</p>\n<p><strong>webhook</strong>：简单地说，使用webhook可以让每次在本地push到github上去后，让服务器自动pull下来，这样就不用每次提交然后手动pull的过程了。</p>\n<p>下面是详细配置过程(基于laravel)：</p>\n<ol>\n<li><p>首先，得在laravel里添加一个路由，然后指向某个文件，例如路由为’/webhook’，然后指向PHP文件为’webhook.php’，然后在该文件内添加如下内容，该文件即是服务器响应Github webhook请求的文件：</p>\n<pre><code>&lt;?php\n    $dir = &apos;/var/www/test&apos;;\n    echo shell_exec(&quot;cd /var/www/test&quot;);\n    echo shell_exec(&quot;sudo git pull -f git@github.com:haoflynet/guake.git 2&gt;&amp;1&quot;);\n?&gt;\n</code></pre></li>\n<li><p>用户权限问题，由于执行该PHP文件的用户是apache的默认用户www-data，所以我在上面的命令中使用的是’sudo’，这样可以不用给www-<br>data用户生成ssh，然后又出现各种混乱的问题。但是www-<br>data又怎么免输密码执行git命令呢，还好linux提供了这么一个方面的操作，在’/etc/sudoers’文件里有如下内容：</p>\n<pre><code># User privilege specification\nroot ALL=(ALL:ALL) ALL  # 默认的root用户可以在所有平台使用所有权限\nwww-data ALL=NOPASSWD:/usr/bin/git # 这里给www-data赋予免密码执行git的权限\n</code></pre></li>\n<li><p>在仓库中添加钩子，执行<code>vim .git/hooks/post-receive</code>，然后添加如下内容，最后还要加入可执行权限：</p>\n<pre><code>GIT_WORK_TREE=/var/www git checkout -f\n</code></pre></li>\n<li><p>在Github上进行设置<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_0.png\" alt=\"\"><br>如图所示添加webhook，设置中可以选择各种出发事件event，一般默认是push事件，在Payload<br>URL中设置自己刚才所设置的URL，最后添加即可完成。</p>\n</li>\n<li><p>测试<br>测试钩子的时候，可以直接在Github上面看到执行的列表，还可以看到每一个POST的详细信息以及响应信息：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/github-set-webhook_2.png\" alt=\"\">  </p>\n</li>\n</ol>\n<h2 id=\"TroubleShooting：\"><a href=\"#TroubleShooting：\" class=\"headerlink\" title=\"TroubleShooting：\"></a>TroubleShooting：</h2><ul>\n<li>Laravel 5中如果要设置webhook，该POST路由不能使用CSRF</li>\n<li><p>Django同样要禁用csrf：</p>\n<pre><code>import os\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.http import HttpResponse\n\n@csrf_exempt\ndef webhook(request):\n    os.system(&apos;cd /var/www/admin&apos;)\nos.system(&apos;git pull -f git@github.com:haoflynet/admin.git 2&gt;&amp;1&apos;)\n    return HttpResponse(&apos;ok&apos;)\n</code></pre></li>\n</ul>\n"},{"title":"Hdu 4267 the Ghost Blows Light","date":"2014-03-26T11:22:51.000Z","_content":"封面图片来自Pixabay\n\n题目链接：<http://acm.hdu.edu.cn/showproblem.php?pid=4276>)  \n参考链接：<http://blog.csdn.net/u012841845/article/details/18739425>  \n以及：<http://blog.csdn.net/xianxingwuguan1/article/details/18954537>  \n手写邻接表：<http://blog.csdn.net/ooooooooe/article/details/17035501>\n\n分析：先寻找1到N的最短路径和走这段路所用的时间，再把路径的权置为0,如果时间有多的，就把剩余的时间拿来进行树上背包，具体过程我已经写在了程序的注释里，之所\n以要写这个，是因为网上关于这道题的文章虽然很多，但逗讲解得不是很清楚。  \nhead数组是一种手写邻接表的方法，在上面的网址可以找到，但是该博并没有说明，所以我特地去请教了另外的人。它是图的另一种存储方法，head[a]表示以a为起\n点的边的编号，下面的add函数中的head[u] = tol++是在更新编号(即改为当前边的编号)，表面上看起来它是在一直变化，但是每一次add它都会把自己\n的指存储在的edge结构体中，这样就可以根据一个head值一直找到它的父亲的父亲的父亲…  \n另外，之所以说最短路上的边指走一遍是因为财宝只有那么多，拿了一次就没有了\n\n>  \n#include <cstdio>  \n#include <cstring>  \n#include <iostream>  \nusing namespace std;\n\n>\n\n> const int maxn = 200;  \nint head[maxn], tol, dp[maxn][5*maxn], weight[maxn], T, t, n;\n\n>\n\n> // 此结构体表示各条边(这里其实是把room当做是有向无环图来看待，  \n// 每一条边都以两个方向来表示，该结构体的元素含义如下：  \n// next：表示下一条以当前边为起点的边(和邻接表的实现有些类似)  \n// to：表示这条边的终点  \n// time：表示走这条边所需要的时间  \n// 另外两个就是默认构造函数和构造函数了  \nstruct node  \n\\{  \nint next, to, time;  \nnode()\\{\\};  \nnode(int _next, int _to, int _time) : next(_next), to(_to), time(_time)\\{\\}  \n\\}edge[5*maxn];\n\n>\n\n> // add函数用来添加边(每条边用edge结构体表示)  \nvoid add(int u, int v, int time)  \n\\{  \nedge[tol] = node(head[u], v, time);  \nhead[u] = tol++;  \n\\}\n\n>\n\n> // 深度搜索找到1到N的最短路径(即花费时间最少)  \n// 并把该路径上的所有边所要的时间置为0，方便之后搜索，并得到最短时间为t  \n// 其中u表示当前节点，pre表示上一个节点  \nbool dfs(int u, int pre)  \n\\{  \nif(u == n)  \nreturn 1;  \nfor(int i = head[u]; i != -1; i = edge[i].next)  \n\\{  \nint v = edge[i].to;  \nif( v == pre )  \ncontinue;  \nif(dfs(v, u)) // 当返回1时就表示采取了那一条边  \n\\{  \nt += edge[i].time;  \nedge[i].time = 0;  \nreturn 1;  \n\\}  \n\\}  \nreturn 0;  \n\\}\n\n>\n\n> // 深度搜索，统计了所有节点在一定时间范围内所有时间所能获得的最大价值  \n// dp[u][j]：表示从u点出发到回到u点，花费时间j所能获得的最大的财富  \nvoid dfs1(int u, int pre)  \n\\{  \nfor(int i = 0; i <= T; i++) // T为剩下的总时间  \ndp[u][i] = weight[u]; // 只要是经过了这个节点的都应该把它的财宝即weight加起来  \nfor(int i = head[u]; i != -1; i = edge[i].next) // 这就是上面使用邻接表的作用，方便深度搜索  \n\\{  \nint v = edge[i].to;  \nif( v == pre ) // 如果是指向上一条边的就直接略过  \ncontinue;  \ndfs1(v, u); // 递归  \nint pp = 2*edge[i].time; // 与u点直接相连的那一条边的时间，因为如果要继续下去，就必然会经过该边  \nfor(int j = T; j >= pp; j–) // j必须大于走那条边的时间，它表示的是从该边走的总时间  \nfor(int k = 0; k <= j-pp; k++) // k表示走了那条边后从那条边的终点继续走所用的时间  \ndp[u][j] = max(dp[u][j], dp[v][k]+dp[u][j-pp-k]); // j-pp-k表示剩下的从u点出发走的时间  \n\\}  \n\\}\n\n>\n\n> int main()  \n\\{  \nint i, j, k, p;  \nwhile(~scanf(“\\%d\\%d”, &n, &T))  \n\\{  \nmemset(head, -1, sizeof(head));  \ntol = 0;  \nfor(i = 1; i < n; i++)  \n\\{  \nscanf(“\\%d\\%d\\%d”, &j, &k, &p);  \nadd(j, k, p);  \nadd(k, j, p);  \n\\}  \nfor(i = 1; i <= n; i++)  \nscanf(“\\%d”, &weight[i]);  \nt = 0;  \ndfs(1, 1);  \nif(t > T)  \n\\{  \nputs(“Human beings die in pursuit of wealth, and birds die in pursuit of\nfood!”);  \ncontinue;  \n\\}  \nmemset(dp, 0, sizeof(dp));  \nT -= t;  \ndfs1(1, -1);  \ncout<< dp[1][T] <<endl; // 应该无论是否从1出发都能得到同样的结果的  \n\\}  \nreturn 0;  \n\\}\n\n这道题花了两天时间，写了七八张纸都没有完全理解清楚，难道真的是我太愚笨了吗？\n","source":"_posts/hdu-4267.md","raw":"---\ntitle: \"hdu 4267 The Ghost Blows Light\"\ndate: 2014-03-26 19:22:51\ncategories: 编程之路\n---\n封面图片来自Pixabay\n\n题目链接：<http://acm.hdu.edu.cn/showproblem.php?pid=4276>)  \n参考链接：<http://blog.csdn.net/u012841845/article/details/18739425>  \n以及：<http://blog.csdn.net/xianxingwuguan1/article/details/18954537>  \n手写邻接表：<http://blog.csdn.net/ooooooooe/article/details/17035501>\n\n分析：先寻找1到N的最短路径和走这段路所用的时间，再把路径的权置为0,如果时间有多的，就把剩余的时间拿来进行树上背包，具体过程我已经写在了程序的注释里，之所\n以要写这个，是因为网上关于这道题的文章虽然很多，但逗讲解得不是很清楚。  \nhead数组是一种手写邻接表的方法，在上面的网址可以找到，但是该博并没有说明，所以我特地去请教了另外的人。它是图的另一种存储方法，head[a]表示以a为起\n点的边的编号，下面的add函数中的head[u] = tol++是在更新编号(即改为当前边的编号)，表面上看起来它是在一直变化，但是每一次add它都会把自己\n的指存储在的edge结构体中，这样就可以根据一个head值一直找到它的父亲的父亲的父亲…  \n另外，之所以说最短路上的边指走一遍是因为财宝只有那么多，拿了一次就没有了\n\n>  \n#include <cstdio>  \n#include <cstring>  \n#include <iostream>  \nusing namespace std;\n\n>\n\n> const int maxn = 200;  \nint head[maxn], tol, dp[maxn][5*maxn], weight[maxn], T, t, n;\n\n>\n\n> // 此结构体表示各条边(这里其实是把room当做是有向无环图来看待，  \n// 每一条边都以两个方向来表示，该结构体的元素含义如下：  \n// next：表示下一条以当前边为起点的边(和邻接表的实现有些类似)  \n// to：表示这条边的终点  \n// time：表示走这条边所需要的时间  \n// 另外两个就是默认构造函数和构造函数了  \nstruct node  \n\\{  \nint next, to, time;  \nnode()\\{\\};  \nnode(int _next, int _to, int _time) : next(_next), to(_to), time(_time)\\{\\}  \n\\}edge[5*maxn];\n\n>\n\n> // add函数用来添加边(每条边用edge结构体表示)  \nvoid add(int u, int v, int time)  \n\\{  \nedge[tol] = node(head[u], v, time);  \nhead[u] = tol++;  \n\\}\n\n>\n\n> // 深度搜索找到1到N的最短路径(即花费时间最少)  \n// 并把该路径上的所有边所要的时间置为0，方便之后搜索，并得到最短时间为t  \n// 其中u表示当前节点，pre表示上一个节点  \nbool dfs(int u, int pre)  \n\\{  \nif(u == n)  \nreturn 1;  \nfor(int i = head[u]; i != -1; i = edge[i].next)  \n\\{  \nint v = edge[i].to;  \nif( v == pre )  \ncontinue;  \nif(dfs(v, u)) // 当返回1时就表示采取了那一条边  \n\\{  \nt += edge[i].time;  \nedge[i].time = 0;  \nreturn 1;  \n\\}  \n\\}  \nreturn 0;  \n\\}\n\n>\n\n> // 深度搜索，统计了所有节点在一定时间范围内所有时间所能获得的最大价值  \n// dp[u][j]：表示从u点出发到回到u点，花费时间j所能获得的最大的财富  \nvoid dfs1(int u, int pre)  \n\\{  \nfor(int i = 0; i <= T; i++) // T为剩下的总时间  \ndp[u][i] = weight[u]; // 只要是经过了这个节点的都应该把它的财宝即weight加起来  \nfor(int i = head[u]; i != -1; i = edge[i].next) // 这就是上面使用邻接表的作用，方便深度搜索  \n\\{  \nint v = edge[i].to;  \nif( v == pre ) // 如果是指向上一条边的就直接略过  \ncontinue;  \ndfs1(v, u); // 递归  \nint pp = 2*edge[i].time; // 与u点直接相连的那一条边的时间，因为如果要继续下去，就必然会经过该边  \nfor(int j = T; j >= pp; j–) // j必须大于走那条边的时间，它表示的是从该边走的总时间  \nfor(int k = 0; k <= j-pp; k++) // k表示走了那条边后从那条边的终点继续走所用的时间  \ndp[u][j] = max(dp[u][j], dp[v][k]+dp[u][j-pp-k]); // j-pp-k表示剩下的从u点出发走的时间  \n\\}  \n\\}\n\n>\n\n> int main()  \n\\{  \nint i, j, k, p;  \nwhile(~scanf(“\\%d\\%d”, &n, &T))  \n\\{  \nmemset(head, -1, sizeof(head));  \ntol = 0;  \nfor(i = 1; i < n; i++)  \n\\{  \nscanf(“\\%d\\%d\\%d”, &j, &k, &p);  \nadd(j, k, p);  \nadd(k, j, p);  \n\\}  \nfor(i = 1; i <= n; i++)  \nscanf(“\\%d”, &weight[i]);  \nt = 0;  \ndfs(1, 1);  \nif(t > T)  \n\\{  \nputs(“Human beings die in pursuit of wealth, and birds die in pursuit of\nfood!”);  \ncontinue;  \n\\}  \nmemset(dp, 0, sizeof(dp));  \nT -= t;  \ndfs1(1, -1);  \ncout<< dp[1][T] <<endl; // 应该无论是否从1出发都能得到同样的结果的  \n\\}  \nreturn 0;  \n\\}\n\n这道题花了两天时间，写了七八张纸都没有完全理解清楚，难道真的是我太愚笨了吗？\n","slug":"hdu-4267","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9600269vnz85izyowi","content":"<p>封面图片来自Pixabay</p>\n<p>题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4276\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=4276</a>)<br>参考链接：<a href=\"http://blog.csdn.net/u012841845/article/details/18739425\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u012841845/article/details/18739425</a><br>以及：<a href=\"http://blog.csdn.net/xianxingwuguan1/article/details/18954537\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/xianxingwuguan1/article/details/18954537</a><br>手写邻接表：<a href=\"http://blog.csdn.net/ooooooooe/article/details/17035501\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ooooooooe/article/details/17035501</a></p>\n<p>分析：先寻找1到N的最短路径和走这段路所用的时间，再把路径的权置为0,如果时间有多的，就把剩余的时间拿来进行树上背包，具体过程我已经写在了程序的注释里，之所<br>以要写这个，是因为网上关于这道题的文章虽然很多，但逗讲解得不是很清楚。<br>head数组是一种手写邻接表的方法，在上面的网址可以找到，但是该博并没有说明，所以我特地去请教了另外的人。它是图的另一种存储方法，head[a]表示以a为起<br>点的边的编号，下面的add函数中的head[u] = tol++是在更新编号(即改为当前边的编号)，表面上看起来它是在一直变化，但是每一次add它都会把自己<br>的指存储在的edge结构体中，这样就可以根据一个head值一直找到它的父亲的父亲的父亲…<br>另外，之所以说最短路上的边指走一遍是因为财宝只有那么多，拿了一次就没有了</p>\n<blockquote>\n<p>#include <cstdio>  </cstdio></p>\n<p>#include <cstring>  </cstring></p>\n<p>#include <iostream><br>using namespace std;</iostream></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>const int maxn = 200;<br>int head[maxn], tol, dp[maxn][5*maxn], weight[maxn], T, t, n;</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// 此结构体表示各条边(这里其实是把room当做是有向无环图来看待，<br>// 每一条边都以两个方向来表示，该结构体的元素含义如下：<br>// next：表示下一条以当前边为起点的边(和邻接表的实现有些类似)<br>// to：表示这条边的终点<br>// time：表示走这条边所需要的时间<br>// 另外两个就是默认构造函数和构造函数了<br>struct node<br>{<br>int next, to, time;<br>node(){};<br>node(int _next, int _to, int _time) : next(_next), to(_to), time(_time){}<br>}edge[5*maxn];</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// add函数用来添加边(每条边用edge结构体表示)<br>void add(int u, int v, int time)<br>{<br>edge[tol] = node(head[u], v, time);<br>head[u] = tol++;<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// 深度搜索找到1到N的最短路径(即花费时间最少)<br>// 并把该路径上的所有边所要的时间置为0，方便之后搜索，并得到最短时间为t<br>// 其中u表示当前节点，pre表示上一个节点<br>bool dfs(int u, int pre)<br>{<br>if(u == n)<br>return 1;<br>for(int i = head[u]; i != -1; i = edge[i].next)<br>{<br>int v = edge[i].to;<br>if( v == pre )<br>continue;<br>if(dfs(v, u)) // 当返回1时就表示采取了那一条边<br>{<br>t += edge[i].time;<br>edge[i].time = 0;<br>return 1;<br>}<br>}<br>return 0;<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// 深度搜索，统计了所有节点在一定时间范围内所有时间所能获得的最大价值<br>// dp[u][j]：表示从u点出发到回到u点，花费时间j所能获得的最大的财富<br>void dfs1(int u, int pre)<br>{<br>for(int i = 0; i &lt;= T; i++) // T为剩下的总时间<br>dp[u][i] = weight[u]; // 只要是经过了这个节点的都应该把它的财宝即weight加起来<br>for(int i = head[u]; i != -1; i = edge[i].next) // 这就是上面使用邻接表的作用，方便深度搜索<br>{<br>int v = edge[i].to;<br>if( v == pre ) // 如果是指向上一条边的就直接略过<br>continue;<br>dfs1(v, u); // 递归<br>int pp = 2*edge[i].time; // 与u点直接相连的那一条边的时间，因为如果要继续下去，就必然会经过该边<br>for(int j = T; j &gt;= pp; j–) // j必须大于走那条边的时间，它表示的是从该边走的总时间<br>for(int k = 0; k &lt;= j-pp; k++) // k表示走了那条边后从那条边的终点继续走所用的时间<br>dp[u][j] = max(dp[u][j], dp[v][k]+dp[u][j-pp-k]); // j-pp-k表示剩下的从u点出发走的时间<br>}<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>int main()<br>{<br>int i, j, k, p;<br>while(~scanf(“\\%d\\%d”, &amp;n, &amp;T))<br>{<br>memset(head, -1, sizeof(head));<br>tol = 0;<br>for(i = 1; i &lt; n; i++)<br>{<br>scanf(“\\%d\\%d\\%d”, &amp;j, &amp;k, &amp;p);<br>add(j, k, p);<br>add(k, j, p);<br>}<br>for(i = 1; i &lt;= n; i++)<br>scanf(“\\%d”, &amp;weight[i]);<br>t = 0;<br>dfs(1, 1);<br>if(t &gt; T)<br>{<br>puts(“Human beings die in pursuit of wealth, and birds die in pursuit of<br>food!”);<br>continue;<br>}<br>memset(dp, 0, sizeof(dp));<br>T -= t;<br>dfs1(1, -1);<br>cout&lt;&lt; dp[1][T] &lt;&lt;endl; // 应该无论是否从1出发都能得到同样的结果的<br>}<br>return 0;<br>}</p>\n</blockquote>\n<p>这道题花了两天时间，写了七八张纸都没有完全理解清楚，难道真的是我太愚笨了吗？</p>\n","excerpt":"","more":"<p>封面图片来自Pixabay</p>\n<p>题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=4276\">http://acm.hdu.edu.cn/showproblem.php?pid=4276</a>)<br>参考链接：<a href=\"http://blog.csdn.net/u012841845/article/details/18739425\">http://blog.csdn.net/u012841845/article/details/18739425</a><br>以及：<a href=\"http://blog.csdn.net/xianxingwuguan1/article/details/18954537\">http://blog.csdn.net/xianxingwuguan1/article/details/18954537</a><br>手写邻接表：<a href=\"http://blog.csdn.net/ooooooooe/article/details/17035501\">http://blog.csdn.net/ooooooooe/article/details/17035501</a></p>\n<p>分析：先寻找1到N的最短路径和走这段路所用的时间，再把路径的权置为0,如果时间有多的，就把剩余的时间拿来进行树上背包，具体过程我已经写在了程序的注释里，之所<br>以要写这个，是因为网上关于这道题的文章虽然很多，但逗讲解得不是很清楚。<br>head数组是一种手写邻接表的方法，在上面的网址可以找到，但是该博并没有说明，所以我特地去请教了另外的人。它是图的另一种存储方法，head[a]表示以a为起<br>点的边的编号，下面的add函数中的head[u] = tol++是在更新编号(即改为当前边的编号)，表面上看起来它是在一直变化，但是每一次add它都会把自己<br>的指存储在的edge结构体中，这样就可以根据一个head值一直找到它的父亲的父亲的父亲…<br>另外，之所以说最短路上的边指走一遍是因为财宝只有那么多，拿了一次就没有了</p>\n<blockquote>\n<p>#include <cstdio>  </p>\n<p>#include <cstring>  </p>\n<p>#include <iostream><br>using namespace std;</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>const int maxn = 200;<br>int head[maxn], tol, dp[maxn][5*maxn], weight[maxn], T, t, n;</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// 此结构体表示各条边(这里其实是把room当做是有向无环图来看待，<br>// 每一条边都以两个方向来表示，该结构体的元素含义如下：<br>// next：表示下一条以当前边为起点的边(和邻接表的实现有些类似)<br>// to：表示这条边的终点<br>// time：表示走这条边所需要的时间<br>// 另外两个就是默认构造函数和构造函数了<br>struct node<br>{<br>int next, to, time;<br>node(){};<br>node(int _next, int _to, int _time) : next(_next), to(_to), time(_time){}<br>}edge[5*maxn];</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// add函数用来添加边(每条边用edge结构体表示)<br>void add(int u, int v, int time)<br>{<br>edge[tol] = node(head[u], v, time);<br>head[u] = tol++;<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// 深度搜索找到1到N的最短路径(即花费时间最少)<br>// 并把该路径上的所有边所要的时间置为0，方便之后搜索，并得到最短时间为t<br>// 其中u表示当前节点，pre表示上一个节点<br>bool dfs(int u, int pre)<br>{<br>if(u == n)<br>return 1;<br>for(int i = head[u]; i != -1; i = edge[i].next)<br>{<br>int v = edge[i].to;<br>if( v == pre )<br>continue;<br>if(dfs(v, u)) // 当返回1时就表示采取了那一条边<br>{<br>t += edge[i].time;<br>edge[i].time = 0;<br>return 1;<br>}<br>}<br>return 0;<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>// 深度搜索，统计了所有节点在一定时间范围内所有时间所能获得的最大价值<br>// dp[u][j]：表示从u点出发到回到u点，花费时间j所能获得的最大的财富<br>void dfs1(int u, int pre)<br>{<br>for(int i = 0; i &lt;= T; i++) // T为剩下的总时间<br>dp[u][i] = weight[u]; // 只要是经过了这个节点的都应该把它的财宝即weight加起来<br>for(int i = head[u]; i != -1; i = edge[i].next) // 这就是上面使用邻接表的作用，方便深度搜索<br>{<br>int v = edge[i].to;<br>if( v == pre ) // 如果是指向上一条边的就直接略过<br>continue;<br>dfs1(v, u); // 递归<br>int pp = 2*edge[i].time; // 与u点直接相连的那一条边的时间，因为如果要继续下去，就必然会经过该边<br>for(int j = T; j &gt;= pp; j–) // j必须大于走那条边的时间，它表示的是从该边走的总时间<br>for(int k = 0; k &lt;= j-pp; k++) // k表示走了那条边后从那条边的终点继续走所用的时间<br>dp[u][j] = max(dp[u][j], dp[v][k]+dp[u][j-pp-k]); // j-pp-k表示剩下的从u点出发走的时间<br>}<br>}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>int main()<br>{<br>int i, j, k, p;<br>while(~scanf(“\\%d\\%d”, &amp;n, &amp;T))<br>{<br>memset(head, -1, sizeof(head));<br>tol = 0;<br>for(i = 1; i &lt; n; i++)<br>{<br>scanf(“\\%d\\%d\\%d”, &amp;j, &amp;k, &amp;p);<br>add(j, k, p);<br>add(k, j, p);<br>}<br>for(i = 1; i &lt;= n; i++)<br>scanf(“\\%d”, &amp;weight[i]);<br>t = 0;<br>dfs(1, 1);<br>if(t &gt; T)<br>{<br>puts(“Human beings die in pursuit of wealth, and birds die in pursuit of<br>food!”);<br>continue;<br>}<br>memset(dp, 0, sizeof(dp));<br>T -= t;<br>dfs1(1, -1);<br>cout&lt;&lt; dp[1][T] &lt;&lt;endl; // 应该无论是否从1出发都能得到同样的结果的<br>}<br>return 0;<br>}</p>\n</blockquote>\n<p>这道题花了两天时间，写了七八张纸都没有完全理解清楚，难道真的是我太愚笨了吗？</p>\n"},{"title":"再见XP","date":"2014-04-08T04:21:24.000Z","_content":"今天，XP真的退休了，看到网上一句话“突然发现黄家驹去世20年了，不老神话林志颖40了，当年双截棍的周董35了，七十二变的蔡依林34了，还珠格格的赵薇都当妈\n了，蜡笔小新爸爸死了，火影快结束了，苹果出5s了， xp停止服务了，不得不承认，我们这一代，\n开始老了.”是啊，雅虎也没了，诺基亚也没了，比尔盖茨也退休了.青春，真的走了.我只是想在这里缅怀一下XP伴随我走过的青春.\n\n虽然我接触得最早的系统是windows2000, 并不是Win XP，学习Win XP的时间仅限于中学那六年，我的第一台电脑就是Win7的.以前听到XP退役\n的消息的时候我还不以为然，退役就退役吧，反正我已经不用Windows的系统了，虽然偶尔会用XP做一些必要的事情，但是已经很少了.不过仔细想想，Win\nXP怎么也算是一代经典，包含着我们多少美好而纯真的回忆啊.\n\n## 论XP的强大\n\n###  兼容性\n\n世界上没有哪一款系统会有XP这么好的兼容性，几乎所有主流或非主流的软件都会支持XP，当然现在最新的软件正在逐渐放弃对XP的支持.\n\n### 简洁\n\n当第一次体验Win7、Win8的效果时，或许每个人都会为之感到惊讶，可是直到现在我也无法忘怀曾经的简洁，没有那么多的特效.还记得那副蓝天白云草原的经典画面吗\n？在高科技日益发展的今天，我们即使掌握着高科技，也应该多回归自然.玩XP玩累了，看看桌面也是一种享受.\n\n###  安全性\n\n在12年里，XP经历了大大小小不同病毒的侵袭依然挺到了今天，由于我接触电脑比较晚，听过的出名的也就是熊猫烧香了，呵呵.\n\n### 那些年，我们用过的XP\n\n小学的时候我们上微机课用的是Win 2000,没什么印象了，因为上了几天课，几十台电脑无缘无故别偷了(据说是CPU被偷了)，后来直到初中才碰到电脑，才知道X\nP，当时完全没有操作系统的概念，只是觉得电脑就应该都是一打开就是蓝天白云的画面.那三年的电脑课基本上是在4399度过的，记得还要早点去抢占位置. 后来初中升\n高中的那一年，我哥哥把他们在外面那台台式机搬回来了，从此以后，我终于可以天天搞电脑了，虽然当时没联网，但那时是我对计算机探索的开始.平时玩玩红警，CS什么的\n，太好玩了.大一下学期我家终于联网了，于是我就经常周末请假回家去，就是在那之后我的成绩就一直下降(当然，我可不认为是因为电脑的原因).记得有一天我看到了计算\n机里安装了个什么VC++什么的，当时上网查发现这就是用来编程用的(其实那只是windows默认安装的库而已).后来，就一发不可收拾，顺便买了本谭浩强《C程序\n设计》，这本书到我大一才看完.也造就了我在同学们心中编程高手的地位(只是会点儿谭语言而已...).高二的时候，win7开始出来了，当即我就买了一张15块的安\n装光盘，后来才知道被坑了，即使是盗版的也不会这么贵呀(之前也买过XP系统来装的，因为我哥电脑里装了影子系统，害的得我每次开机什么都没有了，当时又不会破解这个\n).还有XP上面自带的游戏，记得那个“蜘蛛纸牌”虽然我知道规则，但一直走不好，还有“扫雷”，我能说我是在高三才知道到底该怎么玩吗，还是数学老师教的.当然，上\n了大学后我主要是在用Linux了，命令行什么的，最喜欢了.\n\n###  再见XP\n\n4月8日后，还会再见到XP吗？当然，至少在大学期间我不会放弃它.学校里的所有公用的电脑都是XP，计算机相关的上机课都是在XP上进行的，我永远无法理解一个专门\n学计算机的学院为什么一定要守着老的系统老的软件版本来做实验，做来也没用，不要最新至少也要流行撒.\n中国的网吧或许也不会放弃XP更新到win7吧，主要原因应该是资金和兼容性问题. 还有一点就是学习信息安全，也得用到XP，比如逆向.\n\nXP，感谢你陪我度过最青涩的年华，你留给了我很多甜蜜的记忆，没关系，即使全世界都离你而去，你也会像硬盘里的女神一样永远留在我的电脑里，永远给你一个20G的家\n.\n","source":"_posts/goodbye-xp.md","raw":"---\ntitle: \"再见XP\"\ndate: 2014-04-08 12:21:24\ncategories: 边走边想\n---\n今天，XP真的退休了，看到网上一句话“突然发现黄家驹去世20年了，不老神话林志颖40了，当年双截棍的周董35了，七十二变的蔡依林34了，还珠格格的赵薇都当妈\n了，蜡笔小新爸爸死了，火影快结束了，苹果出5s了， xp停止服务了，不得不承认，我们这一代，\n开始老了.”是啊，雅虎也没了，诺基亚也没了，比尔盖茨也退休了.青春，真的走了.我只是想在这里缅怀一下XP伴随我走过的青春.\n\n虽然我接触得最早的系统是windows2000, 并不是Win XP，学习Win XP的时间仅限于中学那六年，我的第一台电脑就是Win7的.以前听到XP退役\n的消息的时候我还不以为然，退役就退役吧，反正我已经不用Windows的系统了，虽然偶尔会用XP做一些必要的事情，但是已经很少了.不过仔细想想，Win\nXP怎么也算是一代经典，包含着我们多少美好而纯真的回忆啊.\n\n## 论XP的强大\n\n###  兼容性\n\n世界上没有哪一款系统会有XP这么好的兼容性，几乎所有主流或非主流的软件都会支持XP，当然现在最新的软件正在逐渐放弃对XP的支持.\n\n### 简洁\n\n当第一次体验Win7、Win8的效果时，或许每个人都会为之感到惊讶，可是直到现在我也无法忘怀曾经的简洁，没有那么多的特效.还记得那副蓝天白云草原的经典画面吗\n？在高科技日益发展的今天，我们即使掌握着高科技，也应该多回归自然.玩XP玩累了，看看桌面也是一种享受.\n\n###  安全性\n\n在12年里，XP经历了大大小小不同病毒的侵袭依然挺到了今天，由于我接触电脑比较晚，听过的出名的也就是熊猫烧香了，呵呵.\n\n### 那些年，我们用过的XP\n\n小学的时候我们上微机课用的是Win 2000,没什么印象了，因为上了几天课，几十台电脑无缘无故别偷了(据说是CPU被偷了)，后来直到初中才碰到电脑，才知道X\nP，当时完全没有操作系统的概念，只是觉得电脑就应该都是一打开就是蓝天白云的画面.那三年的电脑课基本上是在4399度过的，记得还要早点去抢占位置. 后来初中升\n高中的那一年，我哥哥把他们在外面那台台式机搬回来了，从此以后，我终于可以天天搞电脑了，虽然当时没联网，但那时是我对计算机探索的开始.平时玩玩红警，CS什么的\n，太好玩了.大一下学期我家终于联网了，于是我就经常周末请假回家去，就是在那之后我的成绩就一直下降(当然，我可不认为是因为电脑的原因).记得有一天我看到了计算\n机里安装了个什么VC++什么的，当时上网查发现这就是用来编程用的(其实那只是windows默认安装的库而已).后来，就一发不可收拾，顺便买了本谭浩强《C程序\n设计》，这本书到我大一才看完.也造就了我在同学们心中编程高手的地位(只是会点儿谭语言而已...).高二的时候，win7开始出来了，当即我就买了一张15块的安\n装光盘，后来才知道被坑了，即使是盗版的也不会这么贵呀(之前也买过XP系统来装的，因为我哥电脑里装了影子系统，害的得我每次开机什么都没有了，当时又不会破解这个\n).还有XP上面自带的游戏，记得那个“蜘蛛纸牌”虽然我知道规则，但一直走不好，还有“扫雷”，我能说我是在高三才知道到底该怎么玩吗，还是数学老师教的.当然，上\n了大学后我主要是在用Linux了，命令行什么的，最喜欢了.\n\n###  再见XP\n\n4月8日后，还会再见到XP吗？当然，至少在大学期间我不会放弃它.学校里的所有公用的电脑都是XP，计算机相关的上机课都是在XP上进行的，我永远无法理解一个专门\n学计算机的学院为什么一定要守着老的系统老的软件版本来做实验，做来也没用，不要最新至少也要流行撒.\n中国的网吧或许也不会放弃XP更新到win7吧，主要原因应该是资金和兼容性问题. 还有一点就是学习信息安全，也得用到XP，比如逆向.\n\nXP，感谢你陪我度过最青涩的年华，你留给了我很多甜蜜的记忆，没关系，即使全世界都离你而去，你也会像硬盘里的女神一样永远留在我的电脑里，永远给你一个20G的家\n.\n","slug":"goodbye-xp","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9b00289vnztvqf5sm6","content":"<p>今天，XP真的退休了，看到网上一句话“突然发现黄家驹去世20年了，不老神话林志颖40了，当年双截棍的周董35了，七十二变的蔡依林34了，还珠格格的赵薇都当妈<br>了，蜡笔小新爸爸死了，火影快结束了，苹果出5s了， xp停止服务了，不得不承认，我们这一代，<br>开始老了.”是啊，雅虎也没了，诺基亚也没了，比尔盖茨也退休了.青春，真的走了.我只是想在这里缅怀一下XP伴随我走过的青春.</p>\n<p>虽然我接触得最早的系统是windows2000, 并不是Win XP，学习Win XP的时间仅限于中学那六年，我的第一台电脑就是Win7的.以前听到XP退役<br>的消息的时候我还不以为然，退役就退役吧，反正我已经不用Windows的系统了，虽然偶尔会用XP做一些必要的事情，但是已经很少了.不过仔细想想，Win<br>XP怎么也算是一代经典，包含着我们多少美好而纯真的回忆啊.</p>\n<h2 id=\"论XP的强大\"><a href=\"#论XP的强大\" class=\"headerlink\" title=\"论XP的强大\"></a>论XP的强大</h2><h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>世界上没有哪一款系统会有XP这么好的兼容性，几乎所有主流或非主流的软件都会支持XP，当然现在最新的软件正在逐渐放弃对XP的支持.</p>\n<h3 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a>简洁</h3><p>当第一次体验Win7、Win8的效果时，或许每个人都会为之感到惊讶，可是直到现在我也无法忘怀曾经的简洁，没有那么多的特效.还记得那副蓝天白云草原的经典画面吗<br>？在高科技日益发展的今天，我们即使掌握着高科技，也应该多回归自然.玩XP玩累了，看看桌面也是一种享受.</p>\n<h3 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h3><p>在12年里，XP经历了大大小小不同病毒的侵袭依然挺到了今天，由于我接触电脑比较晚，听过的出名的也就是熊猫烧香了，呵呵.</p>\n<h3 id=\"那些年，我们用过的XP\"><a href=\"#那些年，我们用过的XP\" class=\"headerlink\" title=\"那些年，我们用过的XP\"></a>那些年，我们用过的XP</h3><p>小学的时候我们上微机课用的是Win 2000,没什么印象了，因为上了几天课，几十台电脑无缘无故别偷了(据说是CPU被偷了)，后来直到初中才碰到电脑，才知道X<br>P，当时完全没有操作系统的概念，只是觉得电脑就应该都是一打开就是蓝天白云的画面.那三年的电脑课基本上是在4399度过的，记得还要早点去抢占位置. 后来初中升<br>高中的那一年，我哥哥把他们在外面那台台式机搬回来了，从此以后，我终于可以天天搞电脑了，虽然当时没联网，但那时是我对计算机探索的开始.平时玩玩红警，CS什么的<br>，太好玩了.大一下学期我家终于联网了，于是我就经常周末请假回家去，就是在那之后我的成绩就一直下降(当然，我可不认为是因为电脑的原因).记得有一天我看到了计算<br>机里安装了个什么VC++什么的，当时上网查发现这就是用来编程用的(其实那只是windows默认安装的库而已).后来，就一发不可收拾，顺便买了本谭浩强《C程序<br>设计》，这本书到我大一才看完.也造就了我在同学们心中编程高手的地位(只是会点儿谭语言而已…).高二的时候，win7开始出来了，当即我就买了一张15块的安<br>装光盘，后来才知道被坑了，即使是盗版的也不会这么贵呀(之前也买过XP系统来装的，因为我哥电脑里装了影子系统，害的得我每次开机什么都没有了，当时又不会破解这个<br>).还有XP上面自带的游戏，记得那个“蜘蛛纸牌”虽然我知道规则，但一直走不好，还有“扫雷”，我能说我是在高三才知道到底该怎么玩吗，还是数学老师教的.当然，上<br>了大学后我主要是在用Linux了，命令行什么的，最喜欢了.</p>\n<h3 id=\"再见XP\"><a href=\"#再见XP\" class=\"headerlink\" title=\"再见XP\"></a>再见XP</h3><p>4月8日后，还会再见到XP吗？当然，至少在大学期间我不会放弃它.学校里的所有公用的电脑都是XP，计算机相关的上机课都是在XP上进行的，我永远无法理解一个专门<br>学计算机的学院为什么一定要守着老的系统老的软件版本来做实验，做来也没用，不要最新至少也要流行撒.<br>中国的网吧或许也不会放弃XP更新到win7吧，主要原因应该是资金和兼容性问题. 还有一点就是学习信息安全，也得用到XP，比如逆向.</p>\n<p>XP，感谢你陪我度过最青涩的年华，你留给了我很多甜蜜的记忆，没关系，即使全世界都离你而去，你也会像硬盘里的女神一样永远留在我的电脑里，永远给你一个20G的家<br>.</p>\n","excerpt":"","more":"<p>今天，XP真的退休了，看到网上一句话“突然发现黄家驹去世20年了，不老神话林志颖40了，当年双截棍的周董35了，七十二变的蔡依林34了，还珠格格的赵薇都当妈<br>了，蜡笔小新爸爸死了，火影快结束了，苹果出5s了， xp停止服务了，不得不承认，我们这一代，<br>开始老了.”是啊，雅虎也没了，诺基亚也没了，比尔盖茨也退休了.青春，真的走了.我只是想在这里缅怀一下XP伴随我走过的青春.</p>\n<p>虽然我接触得最早的系统是windows2000, 并不是Win XP，学习Win XP的时间仅限于中学那六年，我的第一台电脑就是Win7的.以前听到XP退役<br>的消息的时候我还不以为然，退役就退役吧，反正我已经不用Windows的系统了，虽然偶尔会用XP做一些必要的事情，但是已经很少了.不过仔细想想，Win<br>XP怎么也算是一代经典，包含着我们多少美好而纯真的回忆啊.</p>\n<h2 id=\"论XP的强大\"><a href=\"#论XP的强大\" class=\"headerlink\" title=\"论XP的强大\"></a>论XP的强大</h2><h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>世界上没有哪一款系统会有XP这么好的兼容性，几乎所有主流或非主流的软件都会支持XP，当然现在最新的软件正在逐渐放弃对XP的支持.</p>\n<h3 id=\"简洁\"><a href=\"#简洁\" class=\"headerlink\" title=\"简洁\"></a>简洁</h3><p>当第一次体验Win7、Win8的效果时，或许每个人都会为之感到惊讶，可是直到现在我也无法忘怀曾经的简洁，没有那么多的特效.还记得那副蓝天白云草原的经典画面吗<br>？在高科技日益发展的今天，我们即使掌握着高科技，也应该多回归自然.玩XP玩累了，看看桌面也是一种享受.</p>\n<h3 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h3><p>在12年里，XP经历了大大小小不同病毒的侵袭依然挺到了今天，由于我接触电脑比较晚，听过的出名的也就是熊猫烧香了，呵呵.</p>\n<h3 id=\"那些年，我们用过的XP\"><a href=\"#那些年，我们用过的XP\" class=\"headerlink\" title=\"那些年，我们用过的XP\"></a>那些年，我们用过的XP</h3><p>小学的时候我们上微机课用的是Win 2000,没什么印象了，因为上了几天课，几十台电脑无缘无故别偷了(据说是CPU被偷了)，后来直到初中才碰到电脑，才知道X<br>P，当时完全没有操作系统的概念，只是觉得电脑就应该都是一打开就是蓝天白云的画面.那三年的电脑课基本上是在4399度过的，记得还要早点去抢占位置. 后来初中升<br>高中的那一年，我哥哥把他们在外面那台台式机搬回来了，从此以后，我终于可以天天搞电脑了，虽然当时没联网，但那时是我对计算机探索的开始.平时玩玩红警，CS什么的<br>，太好玩了.大一下学期我家终于联网了，于是我就经常周末请假回家去，就是在那之后我的成绩就一直下降(当然，我可不认为是因为电脑的原因).记得有一天我看到了计算<br>机里安装了个什么VC++什么的，当时上网查发现这就是用来编程用的(其实那只是windows默认安装的库而已).后来，就一发不可收拾，顺便买了本谭浩强《C程序<br>设计》，这本书到我大一才看完.也造就了我在同学们心中编程高手的地位(只是会点儿谭语言而已…).高二的时候，win7开始出来了，当即我就买了一张15块的安<br>装光盘，后来才知道被坑了，即使是盗版的也不会这么贵呀(之前也买过XP系统来装的，因为我哥电脑里装了影子系统，害的得我每次开机什么都没有了，当时又不会破解这个<br>).还有XP上面自带的游戏，记得那个“蜘蛛纸牌”虽然我知道规则，但一直走不好，还有“扫雷”，我能说我是在高三才知道到底该怎么玩吗，还是数学老师教的.当然，上<br>了大学后我主要是在用Linux了，命令行什么的，最喜欢了.</p>\n<h3 id=\"再见XP\"><a href=\"#再见XP\" class=\"headerlink\" title=\"再见XP\"></a>再见XP</h3><p>4月8日后，还会再见到XP吗？当然，至少在大学期间我不会放弃它.学校里的所有公用的电脑都是XP，计算机相关的上机课都是在XP上进行的，我永远无法理解一个专门<br>学计算机的学院为什么一定要守着老的系统老的软件版本来做实验，做来也没用，不要最新至少也要流行撒.<br>中国的网吧或许也不会放弃XP更新到win7吧，主要原因应该是资金和兼容性问题. 还有一点就是学习信息安全，也得用到XP，比如逆向.</p>\n<p>XP，感谢你陪我度过最青涩的年华，你留给了我很多甜蜜的记忆，没关系，即使全世界都离你而去，你也会像硬盘里的女神一样永远留在我的电脑里，永远给你一个20G的家<br>.</p>\n"},{"title":"《黑客与画家》——读后感","date":"2014-09-11T15:37:39.000Z","_content":"作者：[Paul Graham(保罗·格雷厄姆)](http://en.wikipedia.org/wiki/Paul_Graham_\\\\(computer_\nprogrammer\\\\))\n\n翻译：[阮一峰](http://www.ruanyifeng.com/home.html)\n\n# 关于本书\n\n我一向不喜欢在文章里介绍作者以及译者，因为我的文笔及对他们的理解不可能会比他们自己的网站或者维基百科相近透彻，所以如果想了解他们可以直接点击他们的名字进入相\n应的网站。\n\n第一次听说这本书还以为是讲黑客的，但之后在微博上书本上了解了这本书后就立马决定买下来，想一探究竟，这本书到底为什么会成为经典。本书的目标读者不仅仅是程序员，\n还有现实中的普通人、职员以及创业者。本书虽然是阮一峰翻译的，但不知道是不是因为我阅读外国著作的数量还不够还是怎么的，我始终感觉作者的话有很多累赘的地方，有时\n一个概念要用很多句话来解释(其实，在翻译一些外国文章的时候我也遇到过类似的问题，前后要么不搭边要么有点累赘要么没有过度语句)。在[《代码的未来》](http\n://haofly.net/daimadeweilai/)里我也将两本书对比过，但其实我是先看《黑客与画家》再看《代码的未来》的，《黑客与画家》描述的是从计\n算机开始至二十一世纪初的一些互联网发展规律以及一些概念，从历史发展的角度来延伸到未来的计算机潮流，虽然具有一定的时代性，但此书一定能打开你的眼光，更好地看待\n现在的互联网世界。\n\n# 书呆子？宅男吧！\n\n书中所说的书呆子，其实就是现在所说的宅男。“为什么他们不受欢迎？因为他们把心思都放在了别的地方。”宅，就要宅出技术。技术宅，他们不善交际，他们不爱参加公共活\n动，他们不乱花钱(钱只花在数码产品上)，技术宅与普通宅不同，技术宅不是因为别的，而是因为热衷于技术才那么宅，他们可能为了钻研某个技术而几天几夜不出门，他们可\n能为了修改某个bug而茶不思饭不想，但总归来说他们是为了技术，为了自己所热爱的技术。我对这种生活还是很向往的，但是现在貌似这样不行了，还是应该出去锻炼一下自\n己的社交能力的，这点我不多说，相信现代人都能够理解，因为这已经不是那个“酒好不怕巷子深”的年代了。\n\n# 黑客与画家\n\n我很赞同书中所提到的黑客伦理，诚然，我对黑客的理解从来都不是媒体眼中的那样，而就是作者这样的，”黑客不服从管教，具有叛逆精神“，这句话是对的，但绝不是贬义的\n，因为黑客就是自由的象征，hacker not blacker。黑客总会以自己的方式去捍卫自己的权利，实现自己的想法。他们会因为政府的某些不公而去攻击政府网\n站，会因为自己的某个新奇的想法而日夜编码，为了自由，他们发明了Linux，发明了RSS，发明了社交网站……\n\n黑客应该与画家一样，是创造艺术的一群人，而不是搞破坏的一群人。只有懂得艺术精华的人才能像黑客那样写出伟大的程序。在此书的影响下，我现在也在有意无意地提高自己\n在其他方面的理解，比如会话、歌曲等。\n\n黑客并不神秘，他们可能就是你身边的书呆子！\n\n# 关于创业\n\n随着90后的崛起，书中所提到的创业观念我觉得有些也应该值得商榷，现在的创业观念和以前不大一样了。作者所说，要创业就要让对手无法理解你的技术，无法复制你的商业\n模式，但现在这个知识爆炸的年代，这一点绝对是难上加难。正确的创业应该是利用大家都知道的技术，但只有你最先想到把那项技术用到可以发挥其长的地方，并能迅速推广，\n那么你就是赢家，即使是大公司来复制，也难以复制第一批的客户。\n\n# 黑客伦理(Hacker ethic)\n\n(1)Access to computers–and anything that might teach you something about the\nway the world work–should be unlimited and total. Always yield to the Hands-On\nImperative!(使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试)\n\n(2)All information should be free.(所有信息应该都是自由的)\n\n(3)Mistrust Authority–Promote Decentralization(不信任权威，提倡去中心化)\n\n(4)Hackers should be judged by their hacking, not bogus criteria such as\ndegrees, age, race, or position.(判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或低位等其他标准)\n\n(5)You can create art and beauty on a computer.(你可以用计算机创造美和艺术)\n\n(6)Computers can change your life for the better(计算机使生活更美好)\n\n**语录**\n\n为什么书呆子不受欢迎？他们的心思在别的地方  \n致富的最好方法就是为社会创造财富。创造财富的最好方法就是创业  \n正确的合作方法是将项目分割成严格定义的模块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好能把文档说明写得像编程语言规范那\n样清晰  \n程序写出来是给人看的，附带能在机器上运行  \n毕竟生命只有一次，你可能想用它来做一些伟大的事情  \n公民自由真的是国家富强的原因，而不是结果吗？  \n你开办创业公司不是单纯地为了解决问题，而是为了解决那些用户关心的问题  \n以永不过时作为目标是一种帮助自己找到最佳答案的方法：如果你不愿别人的答案取代你的答案，你就只好自己做出最佳答案\n","source":"_posts/hacker-and-painter.md","raw":"---\ntitle: \"《黑客与画家》——读后感\"\ndate: 2014-09-11 23:37:39\ncategories: 韦编三绝\n---\n作者：[Paul Graham(保罗·格雷厄姆)](http://en.wikipedia.org/wiki/Paul_Graham_\\\\(computer_\nprogrammer\\\\))\n\n翻译：[阮一峰](http://www.ruanyifeng.com/home.html)\n\n# 关于本书\n\n我一向不喜欢在文章里介绍作者以及译者，因为我的文笔及对他们的理解不可能会比他们自己的网站或者维基百科相近透彻，所以如果想了解他们可以直接点击他们的名字进入相\n应的网站。\n\n第一次听说这本书还以为是讲黑客的，但之后在微博上书本上了解了这本书后就立马决定买下来，想一探究竟，这本书到底为什么会成为经典。本书的目标读者不仅仅是程序员，\n还有现实中的普通人、职员以及创业者。本书虽然是阮一峰翻译的，但不知道是不是因为我阅读外国著作的数量还不够还是怎么的，我始终感觉作者的话有很多累赘的地方，有时\n一个概念要用很多句话来解释(其实，在翻译一些外国文章的时候我也遇到过类似的问题，前后要么不搭边要么有点累赘要么没有过度语句)。在[《代码的未来》](http\n://haofly.net/daimadeweilai/)里我也将两本书对比过，但其实我是先看《黑客与画家》再看《代码的未来》的，《黑客与画家》描述的是从计\n算机开始至二十一世纪初的一些互联网发展规律以及一些概念，从历史发展的角度来延伸到未来的计算机潮流，虽然具有一定的时代性，但此书一定能打开你的眼光，更好地看待\n现在的互联网世界。\n\n# 书呆子？宅男吧！\n\n书中所说的书呆子，其实就是现在所说的宅男。“为什么他们不受欢迎？因为他们把心思都放在了别的地方。”宅，就要宅出技术。技术宅，他们不善交际，他们不爱参加公共活\n动，他们不乱花钱(钱只花在数码产品上)，技术宅与普通宅不同，技术宅不是因为别的，而是因为热衷于技术才那么宅，他们可能为了钻研某个技术而几天几夜不出门，他们可\n能为了修改某个bug而茶不思饭不想，但总归来说他们是为了技术，为了自己所热爱的技术。我对这种生活还是很向往的，但是现在貌似这样不行了，还是应该出去锻炼一下自\n己的社交能力的，这点我不多说，相信现代人都能够理解，因为这已经不是那个“酒好不怕巷子深”的年代了。\n\n# 黑客与画家\n\n我很赞同书中所提到的黑客伦理，诚然，我对黑客的理解从来都不是媒体眼中的那样，而就是作者这样的，”黑客不服从管教，具有叛逆精神“，这句话是对的，但绝不是贬义的\n，因为黑客就是自由的象征，hacker not blacker。黑客总会以自己的方式去捍卫自己的权利，实现自己的想法。他们会因为政府的某些不公而去攻击政府网\n站，会因为自己的某个新奇的想法而日夜编码，为了自由，他们发明了Linux，发明了RSS，发明了社交网站……\n\n黑客应该与画家一样，是创造艺术的一群人，而不是搞破坏的一群人。只有懂得艺术精华的人才能像黑客那样写出伟大的程序。在此书的影响下，我现在也在有意无意地提高自己\n在其他方面的理解，比如会话、歌曲等。\n\n黑客并不神秘，他们可能就是你身边的书呆子！\n\n# 关于创业\n\n随着90后的崛起，书中所提到的创业观念我觉得有些也应该值得商榷，现在的创业观念和以前不大一样了。作者所说，要创业就要让对手无法理解你的技术，无法复制你的商业\n模式，但现在这个知识爆炸的年代，这一点绝对是难上加难。正确的创业应该是利用大家都知道的技术，但只有你最先想到把那项技术用到可以发挥其长的地方，并能迅速推广，\n那么你就是赢家，即使是大公司来复制，也难以复制第一批的客户。\n\n# 黑客伦理(Hacker ethic)\n\n(1)Access to computers–and anything that might teach you something about the\nway the world work–should be unlimited and total. Always yield to the Hands-On\nImperative!(使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试)\n\n(2)All information should be free.(所有信息应该都是自由的)\n\n(3)Mistrust Authority–Promote Decentralization(不信任权威，提倡去中心化)\n\n(4)Hackers should be judged by their hacking, not bogus criteria such as\ndegrees, age, race, or position.(判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或低位等其他标准)\n\n(5)You can create art and beauty on a computer.(你可以用计算机创造美和艺术)\n\n(6)Computers can change your life for the better(计算机使生活更美好)\n\n**语录**\n\n为什么书呆子不受欢迎？他们的心思在别的地方  \n致富的最好方法就是为社会创造财富。创造财富的最好方法就是创业  \n正确的合作方法是将项目分割成严格定义的模块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好能把文档说明写得像编程语言规范那\n样清晰  \n程序写出来是给人看的，附带能在机器上运行  \n毕竟生命只有一次，你可能想用它来做一些伟大的事情  \n公民自由真的是国家富强的原因，而不是结果吗？  \n你开办创业公司不是单纯地为了解决问题，而是为了解决那些用户关心的问题  \n以永不过时作为目标是一种帮助自己找到最佳答案的方法：如果你不愿别人的答案取代你的答案，你就只好自己做出最佳答案\n","slug":"hacker-and-painter","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9f002a9vnzsdo48h29","content":"<p>作者：<a href=\"http://en.wikipedia.org/wiki/Paul_Graham_\\\\(computer_\nprogrammer\\\\\" target=\"_blank\" rel=\"external\">Paul Graham(保罗·格雷厄姆)</a>)</p>\n<p>翻译：<a href=\"http://www.ruanyifeng.com/home.html\" target=\"_blank\" rel=\"external\">阮一峰</a></p>\n<h1 id=\"关于本书\"><a href=\"#关于本书\" class=\"headerlink\" title=\"关于本书\"></a>关于本书</h1><p>我一向不喜欢在文章里介绍作者以及译者，因为我的文笔及对他们的理解不可能会比他们自己的网站或者维基百科相近透彻，所以如果想了解他们可以直接点击他们的名字进入相<br>应的网站。</p>\n<p>第一次听说这本书还以为是讲黑客的，但之后在微博上书本上了解了这本书后就立马决定买下来，想一探究竟，这本书到底为什么会成为经典。本书的目标读者不仅仅是程序员，<br>还有现实中的普通人、职员以及创业者。本书虽然是阮一峰翻译的，但不知道是不是因为我阅读外国著作的数量还不够还是怎么的，我始终感觉作者的话有很多累赘的地方，有时<br>一个概念要用很多句话来解释(其实，在翻译一些外国文章的时候我也遇到过类似的问题，前后要么不搭边要么有点累赘要么没有过度语句)。在<a href=\"http\n://haofly.net/daimadeweilai/\">《代码的未来》</a>里我也将两本书对比过，但其实我是先看《黑客与画家》再看《代码的未来》的，《黑客与画家》描述的是从计<br>算机开始至二十一世纪初的一些互联网发展规律以及一些概念，从历史发展的角度来延伸到未来的计算机潮流，虽然具有一定的时代性，但此书一定能打开你的眼光，更好地看待<br>现在的互联网世界。</p>\n<h1 id=\"书呆子？宅男吧！\"><a href=\"#书呆子？宅男吧！\" class=\"headerlink\" title=\"书呆子？宅男吧！\"></a>书呆子？宅男吧！</h1><p>书中所说的书呆子，其实就是现在所说的宅男。“为什么他们不受欢迎？因为他们把心思都放在了别的地方。”宅，就要宅出技术。技术宅，他们不善交际，他们不爱参加公共活<br>动，他们不乱花钱(钱只花在数码产品上)，技术宅与普通宅不同，技术宅不是因为别的，而是因为热衷于技术才那么宅，他们可能为了钻研某个技术而几天几夜不出门，他们可<br>能为了修改某个bug而茶不思饭不想，但总归来说他们是为了技术，为了自己所热爱的技术。我对这种生活还是很向往的，但是现在貌似这样不行了，还是应该出去锻炼一下自<br>己的社交能力的，这点我不多说，相信现代人都能够理解，因为这已经不是那个“酒好不怕巷子深”的年代了。</p>\n<h1 id=\"黑客与画家\"><a href=\"#黑客与画家\" class=\"headerlink\" title=\"黑客与画家\"></a>黑客与画家</h1><p>我很赞同书中所提到的黑客伦理，诚然，我对黑客的理解从来都不是媒体眼中的那样，而就是作者这样的，”黑客不服从管教，具有叛逆精神“，这句话是对的，但绝不是贬义的<br>，因为黑客就是自由的象征，hacker not blacker。黑客总会以自己的方式去捍卫自己的权利，实现自己的想法。他们会因为政府的某些不公而去攻击政府网<br>站，会因为自己的某个新奇的想法而日夜编码，为了自由，他们发明了Linux，发明了RSS，发明了社交网站……</p>\n<p>黑客应该与画家一样，是创造艺术的一群人，而不是搞破坏的一群人。只有懂得艺术精华的人才能像黑客那样写出伟大的程序。在此书的影响下，我现在也在有意无意地提高自己<br>在其他方面的理解，比如会话、歌曲等。</p>\n<p>黑客并不神秘，他们可能就是你身边的书呆子！</p>\n<h1 id=\"关于创业\"><a href=\"#关于创业\" class=\"headerlink\" title=\"关于创业\"></a>关于创业</h1><p>随着90后的崛起，书中所提到的创业观念我觉得有些也应该值得商榷，现在的创业观念和以前不大一样了。作者所说，要创业就要让对手无法理解你的技术，无法复制你的商业<br>模式，但现在这个知识爆炸的年代，这一点绝对是难上加难。正确的创业应该是利用大家都知道的技术，但只有你最先想到把那项技术用到可以发挥其长的地方，并能迅速推广，<br>那么你就是赢家，即使是大公司来复制，也难以复制第一批的客户。</p>\n<h1 id=\"黑客伦理-Hacker-ethic\"><a href=\"#黑客伦理-Hacker-ethic\" class=\"headerlink\" title=\"黑客伦理(Hacker ethic)\"></a>黑客伦理(Hacker ethic)</h1><p>(1)Access to computers–and anything that might teach you something about the<br>way the world work–should be unlimited and total. Always yield to the Hands-On<br>Imperative!(使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试)</p>\n<p>(2)All information should be free.(所有信息应该都是自由的)</p>\n<p>(3)Mistrust Authority–Promote Decentralization(不信任权威，提倡去中心化)</p>\n<p>(4)Hackers should be judged by their hacking, not bogus criteria such as<br>degrees, age, race, or position.(判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或低位等其他标准)</p>\n<p>(5)You can create art and beauty on a computer.(你可以用计算机创造美和艺术)</p>\n<p>(6)Computers can change your life for the better(计算机使生活更美好)</p>\n<p><strong>语录</strong></p>\n<p>为什么书呆子不受欢迎？他们的心思在别的地方<br>致富的最好方法就是为社会创造财富。创造财富的最好方法就是创业<br>正确的合作方法是将项目分割成严格定义的模块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好能把文档说明写得像编程语言规范那<br>样清晰<br>程序写出来是给人看的，附带能在机器上运行<br>毕竟生命只有一次，你可能想用它来做一些伟大的事情<br>公民自由真的是国家富强的原因，而不是结果吗？<br>你开办创业公司不是单纯地为了解决问题，而是为了解决那些用户关心的问题<br>以永不过时作为目标是一种帮助自己找到最佳答案的方法：如果你不愿别人的答案取代你的答案，你就只好自己做出最佳答案</p>\n","excerpt":"","more":"<p>作者：<a href=\"http://en.wikipedia.org/wiki/Paul_Graham_\\\\(computer_\nprogrammer\\\\\">Paul Graham(保罗·格雷厄姆)</a>)</p>\n<p>翻译：<a href=\"http://www.ruanyifeng.com/home.html\">阮一峰</a></p>\n<h1 id=\"关于本书\"><a href=\"#关于本书\" class=\"headerlink\" title=\"关于本书\"></a>关于本书</h1><p>我一向不喜欢在文章里介绍作者以及译者，因为我的文笔及对他们的理解不可能会比他们自己的网站或者维基百科相近透彻，所以如果想了解他们可以直接点击他们的名字进入相<br>应的网站。</p>\n<p>第一次听说这本书还以为是讲黑客的，但之后在微博上书本上了解了这本书后就立马决定买下来，想一探究竟，这本书到底为什么会成为经典。本书的目标读者不仅仅是程序员，<br>还有现实中的普通人、职员以及创业者。本书虽然是阮一峰翻译的，但不知道是不是因为我阅读外国著作的数量还不够还是怎么的，我始终感觉作者的话有很多累赘的地方，有时<br>一个概念要用很多句话来解释(其实，在翻译一些外国文章的时候我也遇到过类似的问题，前后要么不搭边要么有点累赘要么没有过度语句)。在<a href=\"http\n://haofly.net/daimadeweilai/\">《代码的未来》</a>里我也将两本书对比过，但其实我是先看《黑客与画家》再看《代码的未来》的，《黑客与画家》描述的是从计<br>算机开始至二十一世纪初的一些互联网发展规律以及一些概念，从历史发展的角度来延伸到未来的计算机潮流，虽然具有一定的时代性，但此书一定能打开你的眼光，更好地看待<br>现在的互联网世界。</p>\n<h1 id=\"书呆子？宅男吧！\"><a href=\"#书呆子？宅男吧！\" class=\"headerlink\" title=\"书呆子？宅男吧！\"></a>书呆子？宅男吧！</h1><p>书中所说的书呆子，其实就是现在所说的宅男。“为什么他们不受欢迎？因为他们把心思都放在了别的地方。”宅，就要宅出技术。技术宅，他们不善交际，他们不爱参加公共活<br>动，他们不乱花钱(钱只花在数码产品上)，技术宅与普通宅不同，技术宅不是因为别的，而是因为热衷于技术才那么宅，他们可能为了钻研某个技术而几天几夜不出门，他们可<br>能为了修改某个bug而茶不思饭不想，但总归来说他们是为了技术，为了自己所热爱的技术。我对这种生活还是很向往的，但是现在貌似这样不行了，还是应该出去锻炼一下自<br>己的社交能力的，这点我不多说，相信现代人都能够理解，因为这已经不是那个“酒好不怕巷子深”的年代了。</p>\n<h1 id=\"黑客与画家\"><a href=\"#黑客与画家\" class=\"headerlink\" title=\"黑客与画家\"></a>黑客与画家</h1><p>我很赞同书中所提到的黑客伦理，诚然，我对黑客的理解从来都不是媒体眼中的那样，而就是作者这样的，”黑客不服从管教，具有叛逆精神“，这句话是对的，但绝不是贬义的<br>，因为黑客就是自由的象征，hacker not blacker。黑客总会以自己的方式去捍卫自己的权利，实现自己的想法。他们会因为政府的某些不公而去攻击政府网<br>站，会因为自己的某个新奇的想法而日夜编码，为了自由，他们发明了Linux，发明了RSS，发明了社交网站……</p>\n<p>黑客应该与画家一样，是创造艺术的一群人，而不是搞破坏的一群人。只有懂得艺术精华的人才能像黑客那样写出伟大的程序。在此书的影响下，我现在也在有意无意地提高自己<br>在其他方面的理解，比如会话、歌曲等。</p>\n<p>黑客并不神秘，他们可能就是你身边的书呆子！</p>\n<h1 id=\"关于创业\"><a href=\"#关于创业\" class=\"headerlink\" title=\"关于创业\"></a>关于创业</h1><p>随着90后的崛起，书中所提到的创业观念我觉得有些也应该值得商榷，现在的创业观念和以前不大一样了。作者所说，要创业就要让对手无法理解你的技术，无法复制你的商业<br>模式，但现在这个知识爆炸的年代，这一点绝对是难上加难。正确的创业应该是利用大家都知道的技术，但只有你最先想到把那项技术用到可以发挥其长的地方，并能迅速推广，<br>那么你就是赢家，即使是大公司来复制，也难以复制第一批的客户。</p>\n<h1 id=\"黑客伦理-Hacker-ethic\"><a href=\"#黑客伦理-Hacker-ethic\" class=\"headerlink\" title=\"黑客伦理(Hacker ethic)\"></a>黑客伦理(Hacker ethic)</h1><p>(1)Access to computers–and anything that might teach you something about the<br>way the world work–should be unlimited and total. Always yield to the Hands-On<br>Imperative!(使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试)</p>\n<p>(2)All information should be free.(所有信息应该都是自由的)</p>\n<p>(3)Mistrust Authority–Promote Decentralization(不信任权威，提倡去中心化)</p>\n<p>(4)Hackers should be judged by their hacking, not bogus criteria such as<br>degrees, age, race, or position.(判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或低位等其他标准)</p>\n<p>(5)You can create art and beauty on a computer.(你可以用计算机创造美和艺术)</p>\n<p>(6)Computers can change your life for the better(计算机使生活更美好)</p>\n<p><strong>语录</strong></p>\n<p>为什么书呆子不受欢迎？他们的心思在别的地方<br>致富的最好方法就是为社会创造财富。创造财富的最好方法就是创业<br>正确的合作方法是将项目分割成严格定义的模块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好能把文档说明写得像编程语言规范那<br>样清晰<br>程序写出来是给人看的，附带能在机器上运行<br>毕竟生命只有一次，你可能想用它来做一些伟大的事情<br>公民自由真的是国家富强的原因，而不是结果吗？<br>你开办创业公司不是单纯地为了解决问题，而是为了解决那些用户关心的问题<br>以永不过时作为目标是一种帮助自己找到最佳答案的方法：如果你不愿别人的答案取代你的答案，你就只好自己做出最佳答案</p>\n"},{"title":"《互联网时代》观后感","date":"2015-03-06T12:23:55.000Z","_content":"说实话，这样一部片子，很不想跟它写观后感的，但由于辅导员布置的寒假任务需要有这一项，那我就勉为其难地写一写观感。毕竟，这部片子我很早就开始在微博上听到，并且\n在8月份首播时也是天天晚上守着电视观看的。\n\n首先，抛开其他的，从片子本身来说，这种大型纪录片还是非常令人震撼的，与浪潮之巅一样，能深深地让人体会到身处互联网时代的我们是有多么地幸运。全片分为十集：时代\n、浪潮、能量、再构、崛起、迁徙、控制、忧虑、世界、眺望，向我们全面展示了信息时代的发展过程以及其当前的影响力。\n\n我是一个90后，电脑系统从Windows Xp一直用到Windows 10，从老式的闪屏电脑到最新的高清平板电脑，从MTK国产手机到最新的MIUI手机，我统\n统都经历过，深刻地体会到技术力量的不断推进给我们人类生活带来的方便和生活方式上带来的改进。我相信互联网正以改变一切的力量，在全球范围(以后也一定会扩展到外太\n空去)掀起一场影响人类所有层面的深刻边个，人类正站在一个新时代到来的前沿。\n\n纪录片中说，对于互联网，人类未知的远远大于已知的，但我认为，在互联网方面，人类未知的远远小于已知的，但人类未通过互联网创造的远远大于人类所有历史中所已知的。\n我们不仅要理解互联网，体会互联网，更要使用互联网为未来创造，给人类带来更加深远的影响。\n\n作为一名计算机专业的大学生，我深深地被这些改变所震撼。从各个新兴互联网公司的崛起，比如小米、淘宝、京东等让我们年轻人也看到了希望，互联网行业远没有饱和。微博\n改变了新闻传播的方式，支付宝改变了金钱传播的方式，Coursera改变了教育的方式。当互联网产品越来越多地替代了现实生活中的事务时，我们就进入了互联网时代。\n目前，内陆人们的互联网意识完全不及沿海地区的人们，可以预见，今后的互联网不仅会更多地渗透入我们的日常生活，还会渗透到各个地区，各个行业，实现真正的公平。\n\n最后就说说我对这部片不满意的地方了，每次看到CCAV那欲说还休的嘴脸我也是醉了。片中多次出现长城这个镜头，让人难免联想到GFVV这个众所周知但又没人敢承认的\n东西。据悉，全球仅有四个国家屏蔽了facebook、twitter等世界最大的几个社交网站，包括朝鲜，伊朗，叙利亚和其它国家。这些国家的ZF都深喑控制言论的\n方法，将言论自由牢牢地控制在自己手上。互联网发展到今天，如果还要拿国情来当借口，那么总有一天这些国家会因为闭关锁国而没落。还记得中国的第一封跨洋电子邮件的内\n容：Across the Great Wall we can reach every corner in thee world（越过长城，走向世界），而在某\n些国家可能一封电子邮件也很难发出去，所以，即使是在互联网这个整个人类历史上最开放的阶段，也依然存在着不公平的现象，改变这种现象，需要的是我们新一代的计算机人\n。\n\n总之，这部纪录片让我们对互联网有了更加深刻的理解，互联网绝不仅是一场技术上的变革，而是一场社会变革，它势必会引领人类进入一个全新的时代。而我们计算机专业的学\n生也应该有危机感，抱着终身学习的态度，务必让自己处于浪潮之巅。\n","source":"_posts/hulianwangshidai.md","raw":"---\ntitle: \"《互联网时代》观后感\"\ndate: 2015-03-06 20:23:55\ncategories: 韦编三绝\n---\n说实话，这样一部片子，很不想跟它写观后感的，但由于辅导员布置的寒假任务需要有这一项，那我就勉为其难地写一写观感。毕竟，这部片子我很早就开始在微博上听到，并且\n在8月份首播时也是天天晚上守着电视观看的。\n\n首先，抛开其他的，从片子本身来说，这种大型纪录片还是非常令人震撼的，与浪潮之巅一样，能深深地让人体会到身处互联网时代的我们是有多么地幸运。全片分为十集：时代\n、浪潮、能量、再构、崛起、迁徙、控制、忧虑、世界、眺望，向我们全面展示了信息时代的发展过程以及其当前的影响力。\n\n我是一个90后，电脑系统从Windows Xp一直用到Windows 10，从老式的闪屏电脑到最新的高清平板电脑，从MTK国产手机到最新的MIUI手机，我统\n统都经历过，深刻地体会到技术力量的不断推进给我们人类生活带来的方便和生活方式上带来的改进。我相信互联网正以改变一切的力量，在全球范围(以后也一定会扩展到外太\n空去)掀起一场影响人类所有层面的深刻边个，人类正站在一个新时代到来的前沿。\n\n纪录片中说，对于互联网，人类未知的远远大于已知的，但我认为，在互联网方面，人类未知的远远小于已知的，但人类未通过互联网创造的远远大于人类所有历史中所已知的。\n我们不仅要理解互联网，体会互联网，更要使用互联网为未来创造，给人类带来更加深远的影响。\n\n作为一名计算机专业的大学生，我深深地被这些改变所震撼。从各个新兴互联网公司的崛起，比如小米、淘宝、京东等让我们年轻人也看到了希望，互联网行业远没有饱和。微博\n改变了新闻传播的方式，支付宝改变了金钱传播的方式，Coursera改变了教育的方式。当互联网产品越来越多地替代了现实生活中的事务时，我们就进入了互联网时代。\n目前，内陆人们的互联网意识完全不及沿海地区的人们，可以预见，今后的互联网不仅会更多地渗透入我们的日常生活，还会渗透到各个地区，各个行业，实现真正的公平。\n\n最后就说说我对这部片不满意的地方了，每次看到CCAV那欲说还休的嘴脸我也是醉了。片中多次出现长城这个镜头，让人难免联想到GFVV这个众所周知但又没人敢承认的\n东西。据悉，全球仅有四个国家屏蔽了facebook、twitter等世界最大的几个社交网站，包括朝鲜，伊朗，叙利亚和其它国家。这些国家的ZF都深喑控制言论的\n方法，将言论自由牢牢地控制在自己手上。互联网发展到今天，如果还要拿国情来当借口，那么总有一天这些国家会因为闭关锁国而没落。还记得中国的第一封跨洋电子邮件的内\n容：Across the Great Wall we can reach every corner in thee world（越过长城，走向世界），而在某\n些国家可能一封电子邮件也很难发出去，所以，即使是在互联网这个整个人类历史上最开放的阶段，也依然存在着不公平的现象，改变这种现象，需要的是我们新一代的计算机人\n。\n\n总之，这部纪录片让我们对互联网有了更加深刻的理解，互联网绝不仅是一场技术上的变革，而是一场社会变革，它势必会引领人类进入一个全新的时代。而我们计算机专业的学\n生也应该有危机感，抱着终身学习的态度，务必让自己处于浪潮之巅。\n","slug":"hulianwangshidai","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9h002c9vnzkvuup7jx","content":"<p>说实话，这样一部片子，很不想跟它写观后感的，但由于辅导员布置的寒假任务需要有这一项，那我就勉为其难地写一写观感。毕竟，这部片子我很早就开始在微博上听到，并且<br>在8月份首播时也是天天晚上守着电视观看的。</p>\n<p>首先，抛开其他的，从片子本身来说，这种大型纪录片还是非常令人震撼的，与浪潮之巅一样，能深深地让人体会到身处互联网时代的我们是有多么地幸运。全片分为十集：时代<br>、浪潮、能量、再构、崛起、迁徙、控制、忧虑、世界、眺望，向我们全面展示了信息时代的发展过程以及其当前的影响力。</p>\n<p>我是一个90后，电脑系统从Windows Xp一直用到Windows 10，从老式的闪屏电脑到最新的高清平板电脑，从MTK国产手机到最新的MIUI手机，我统<br>统都经历过，深刻地体会到技术力量的不断推进给我们人类生活带来的方便和生活方式上带来的改进。我相信互联网正以改变一切的力量，在全球范围(以后也一定会扩展到外太<br>空去)掀起一场影响人类所有层面的深刻边个，人类正站在一个新时代到来的前沿。</p>\n<p>纪录片中说，对于互联网，人类未知的远远大于已知的，但我认为，在互联网方面，人类未知的远远小于已知的，但人类未通过互联网创造的远远大于人类所有历史中所已知的。<br>我们不仅要理解互联网，体会互联网，更要使用互联网为未来创造，给人类带来更加深远的影响。</p>\n<p>作为一名计算机专业的大学生，我深深地被这些改变所震撼。从各个新兴互联网公司的崛起，比如小米、淘宝、京东等让我们年轻人也看到了希望，互联网行业远没有饱和。微博<br>改变了新闻传播的方式，支付宝改变了金钱传播的方式，Coursera改变了教育的方式。当互联网产品越来越多地替代了现实生活中的事务时，我们就进入了互联网时代。<br>目前，内陆人们的互联网意识完全不及沿海地区的人们，可以预见，今后的互联网不仅会更多地渗透入我们的日常生活，还会渗透到各个地区，各个行业，实现真正的公平。</p>\n<p>最后就说说我对这部片不满意的地方了，每次看到CCAV那欲说还休的嘴脸我也是醉了。片中多次出现长城这个镜头，让人难免联想到GFVV这个众所周知但又没人敢承认的<br>东西。据悉，全球仅有四个国家屏蔽了facebook、twitter等世界最大的几个社交网站，包括朝鲜，伊朗，叙利亚和其它国家。这些国家的ZF都深喑控制言论的<br>方法，将言论自由牢牢地控制在自己手上。互联网发展到今天，如果还要拿国情来当借口，那么总有一天这些国家会因为闭关锁国而没落。还记得中国的第一封跨洋电子邮件的内<br>容：Across the Great Wall we can reach every corner in thee world（越过长城，走向世界），而在某<br>些国家可能一封电子邮件也很难发出去，所以，即使是在互联网这个整个人类历史上最开放的阶段，也依然存在着不公平的现象，改变这种现象，需要的是我们新一代的计算机人<br>。</p>\n<p>总之，这部纪录片让我们对互联网有了更加深刻的理解，互联网绝不仅是一场技术上的变革，而是一场社会变革，它势必会引领人类进入一个全新的时代。而我们计算机专业的学<br>生也应该有危机感，抱着终身学习的态度，务必让自己处于浪潮之巅。</p>\n","excerpt":"","more":"<p>说实话，这样一部片子，很不想跟它写观后感的，但由于辅导员布置的寒假任务需要有这一项，那我就勉为其难地写一写观感。毕竟，这部片子我很早就开始在微博上听到，并且<br>在8月份首播时也是天天晚上守着电视观看的。</p>\n<p>首先，抛开其他的，从片子本身来说，这种大型纪录片还是非常令人震撼的，与浪潮之巅一样，能深深地让人体会到身处互联网时代的我们是有多么地幸运。全片分为十集：时代<br>、浪潮、能量、再构、崛起、迁徙、控制、忧虑、世界、眺望，向我们全面展示了信息时代的发展过程以及其当前的影响力。</p>\n<p>我是一个90后，电脑系统从Windows Xp一直用到Windows 10，从老式的闪屏电脑到最新的高清平板电脑，从MTK国产手机到最新的MIUI手机，我统<br>统都经历过，深刻地体会到技术力量的不断推进给我们人类生活带来的方便和生活方式上带来的改进。我相信互联网正以改变一切的力量，在全球范围(以后也一定会扩展到外太<br>空去)掀起一场影响人类所有层面的深刻边个，人类正站在一个新时代到来的前沿。</p>\n<p>纪录片中说，对于互联网，人类未知的远远大于已知的，但我认为，在互联网方面，人类未知的远远小于已知的，但人类未通过互联网创造的远远大于人类所有历史中所已知的。<br>我们不仅要理解互联网，体会互联网，更要使用互联网为未来创造，给人类带来更加深远的影响。</p>\n<p>作为一名计算机专业的大学生，我深深地被这些改变所震撼。从各个新兴互联网公司的崛起，比如小米、淘宝、京东等让我们年轻人也看到了希望，互联网行业远没有饱和。微博<br>改变了新闻传播的方式，支付宝改变了金钱传播的方式，Coursera改变了教育的方式。当互联网产品越来越多地替代了现实生活中的事务时，我们就进入了互联网时代。<br>目前，内陆人们的互联网意识完全不及沿海地区的人们，可以预见，今后的互联网不仅会更多地渗透入我们的日常生活，还会渗透到各个地区，各个行业，实现真正的公平。</p>\n<p>最后就说说我对这部片不满意的地方了，每次看到CCAV那欲说还休的嘴脸我也是醉了。片中多次出现长城这个镜头，让人难免联想到GFVV这个众所周知但又没人敢承认的<br>东西。据悉，全球仅有四个国家屏蔽了facebook、twitter等世界最大的几个社交网站，包括朝鲜，伊朗，叙利亚和其它国家。这些国家的ZF都深喑控制言论的<br>方法，将言论自由牢牢地控制在自己手上。互联网发展到今天，如果还要拿国情来当借口，那么总有一天这些国家会因为闭关锁国而没落。还记得中国的第一封跨洋电子邮件的内<br>容：Across the Great Wall we can reach every corner in thee world（越过长城，走向世界），而在某<br>些国家可能一封电子邮件也很难发出去，所以，即使是在互联网这个整个人类历史上最开放的阶段，也依然存在着不公平的现象，改变这种现象，需要的是我们新一代的计算机人<br>。</p>\n<p>总之，这部纪录片让我们对互联网有了更加深刻的理解，互联网绝不仅是一场技术上的变革，而是一场社会变革，它势必会引领人类进入一个全新的时代。而我们计算机专业的学<br>生也应该有危机感，抱着终身学习的态度，务必让自己处于浪潮之巅。</p>\n"},{"title":"《海贼王教会我的50件事》读后感","date":"2014-07-29T15:08:00.000Z","_content":"# 为梦想而受伤，永远值得骄傲\n\n本书作者是微博和facebook上比较出名的一位叫”冒牌生“的留学生，是”惊点语录“粉丝团的版主。我和他一样，都十分热爱海贼王，也一直为着梦想在奋斗。\n\n当然对于这本书的语言，我觉得并没什么亮点，或许有一些文化上的差异吧，也或许是我看微博上的段子看得太多了，觉得作者的语言很多都是堆砌式的，而且并没有什么逻辑，\n并没有什么深度。这也或许是作者的风格，毕竟作者是“惊点语录”的版主，语录嘛，就是一句一句经典的话，而不是像写书这样一篇一篇的长篇大论，作者说他从小就梦想当一\n个作家，我当然觉得他的梦想能够实现，因为他热爱海贼王，热爱海贼王的人都能实现自己的梦想，这是我一直坚信的。\n\n看完本书，学到最大的一点就是遇到问题，先想想：”如果是路飞遇到这样的事，他会怎么做？“作为故事的主人公路飞，或许在外人看来他有些疯，但懂他的人都知道他的智慧\n和聪明才智绝对是海贼王里最高的。继续追《海贼王》，继续追我的梦，或许当我看完《海贼王》，学到其中真正的智慧后，我的梦想也实现了。\n\n最后，请记住路飞的名言：”能在这片大海自由自在翱翔的人，就是海贼王！“\n\n语录：\n\n**与其在等待中浪费青春，不如在追求中燃烧生命！**\n\n**人生短暂无常，如果你曾遇到过一个”有点疯“的朋友，请好好珍惜你们在一起的日子！**\n\n**时间总在火烧屁股中流逝，而人则是在火烧屁股中燃烧殆尽**\n\n**你不知道自己要什么，是不是因为你要的东西太多，超出自己的能力范围？**\n\n**关于梦想，重要的不是你想做什么，而是你可以做什么，还有实际上你愿意做什么。**\n\n**人生可以追求平凡，但不可以认命，更不能没有梦想。**\n\n**即使蓦然回首，自己终究没有成为小时候想成为的人，那又何妨？！**\n\n**现实会让你不得不舍弃一个梦想，可是别让它抹杀你所有的梦想。**\n\n**扯到钱的友情并非复杂，把它搞得复杂的是人。**\n\n**朋友就是用来麻烦的，你不麻烦我，我才生气呢**\n\n**”认清现实“和”怀抱梦想“并没有冲突**\n\n**人最容易犯的错，就是”因为害怕自己会犯错，而选择什么都不做“。**\n\n**平淡不是不爱，而是换了一种方式去爱。**\n\n**人的一生也许可以爱很多次。然而，总有一个人可以让你笑得最灿烂，哭得最透彻，想得最深刻。只是你往往嘴硬不愿承认。**\n\n**爱了以后失去爱，也比从未爱过来得好。**\n\n**真正忘记一个人，并非不再想起，而是偶尔想起，也没有关系。**\n\n**想要忘记一段感情 ，方法永远只有一个：时间和新欢 。如果时间和新欢也不能让你忘记一段感情，原因只有一个——时间不够长，新欢不够好。**\n\n**时间不会让人忘记很多事情，只会让人习惯很多事情。**\n\n**有时候，我们不得不假装很快乐，只是为了不让别人问：”你好好吗？”**\n\n**有时候，人之所以紧抓着回忆不放，是因为回忆是唯一不会变的东西，就算一切都已经沧海桑田。**\n\n**我们常常手里拿着一张梦想的藏宝图，为自己的人生做了许多规划，却忘了出发的重要性，以致许多年后，仍然在原地踏步。**\n\n**每个人都是梦想家，有时候梦醒了，就只剩下想家了。**\n","source":"_posts/haizeiwangjiaohuiwode.md","raw":"---\ntitle: \"《海贼王教会我的50件事》读后感\"\ndate: 2014-07-29 23:08:00\ncategories: 韦编三绝\n---\n# 为梦想而受伤，永远值得骄傲\n\n本书作者是微博和facebook上比较出名的一位叫”冒牌生“的留学生，是”惊点语录“粉丝团的版主。我和他一样，都十分热爱海贼王，也一直为着梦想在奋斗。\n\n当然对于这本书的语言，我觉得并没什么亮点，或许有一些文化上的差异吧，也或许是我看微博上的段子看得太多了，觉得作者的语言很多都是堆砌式的，而且并没有什么逻辑，\n并没有什么深度。这也或许是作者的风格，毕竟作者是“惊点语录”的版主，语录嘛，就是一句一句经典的话，而不是像写书这样一篇一篇的长篇大论，作者说他从小就梦想当一\n个作家，我当然觉得他的梦想能够实现，因为他热爱海贼王，热爱海贼王的人都能实现自己的梦想，这是我一直坚信的。\n\n看完本书，学到最大的一点就是遇到问题，先想想：”如果是路飞遇到这样的事，他会怎么做？“作为故事的主人公路飞，或许在外人看来他有些疯，但懂他的人都知道他的智慧\n和聪明才智绝对是海贼王里最高的。继续追《海贼王》，继续追我的梦，或许当我看完《海贼王》，学到其中真正的智慧后，我的梦想也实现了。\n\n最后，请记住路飞的名言：”能在这片大海自由自在翱翔的人，就是海贼王！“\n\n语录：\n\n**与其在等待中浪费青春，不如在追求中燃烧生命！**\n\n**人生短暂无常，如果你曾遇到过一个”有点疯“的朋友，请好好珍惜你们在一起的日子！**\n\n**时间总在火烧屁股中流逝，而人则是在火烧屁股中燃烧殆尽**\n\n**你不知道自己要什么，是不是因为你要的东西太多，超出自己的能力范围？**\n\n**关于梦想，重要的不是你想做什么，而是你可以做什么，还有实际上你愿意做什么。**\n\n**人生可以追求平凡，但不可以认命，更不能没有梦想。**\n\n**即使蓦然回首，自己终究没有成为小时候想成为的人，那又何妨？！**\n\n**现实会让你不得不舍弃一个梦想，可是别让它抹杀你所有的梦想。**\n\n**扯到钱的友情并非复杂，把它搞得复杂的是人。**\n\n**朋友就是用来麻烦的，你不麻烦我，我才生气呢**\n\n**”认清现实“和”怀抱梦想“并没有冲突**\n\n**人最容易犯的错，就是”因为害怕自己会犯错，而选择什么都不做“。**\n\n**平淡不是不爱，而是换了一种方式去爱。**\n\n**人的一生也许可以爱很多次。然而，总有一个人可以让你笑得最灿烂，哭得最透彻，想得最深刻。只是你往往嘴硬不愿承认。**\n\n**爱了以后失去爱，也比从未爱过来得好。**\n\n**真正忘记一个人，并非不再想起，而是偶尔想起，也没有关系。**\n\n**想要忘记一段感情 ，方法永远只有一个：时间和新欢 。如果时间和新欢也不能让你忘记一段感情，原因只有一个——时间不够长，新欢不够好。**\n\n**时间不会让人忘记很多事情，只会让人习惯很多事情。**\n\n**有时候，我们不得不假装很快乐，只是为了不让别人问：”你好好吗？”**\n\n**有时候，人之所以紧抓着回忆不放，是因为回忆是唯一不会变的东西，就算一切都已经沧海桑田。**\n\n**我们常常手里拿着一张梦想的藏宝图，为自己的人生做了许多规划，却忘了出发的重要性，以致许多年后，仍然在原地踏步。**\n\n**每个人都是梦想家，有时候梦醒了，就只剩下想家了。**\n","slug":"haizeiwangjiaohuiwode","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9k002e9vnzw6osxwsm","content":"<h1 id=\"为梦想而受伤，永远值得骄傲\"><a href=\"#为梦想而受伤，永远值得骄傲\" class=\"headerlink\" title=\"为梦想而受伤，永远值得骄傲\"></a>为梦想而受伤，永远值得骄傲</h1><p>本书作者是微博和facebook上比较出名的一位叫”冒牌生“的留学生，是”惊点语录“粉丝团的版主。我和他一样，都十分热爱海贼王，也一直为着梦想在奋斗。</p>\n<p>当然对于这本书的语言，我觉得并没什么亮点，或许有一些文化上的差异吧，也或许是我看微博上的段子看得太多了，觉得作者的语言很多都是堆砌式的，而且并没有什么逻辑，<br>并没有什么深度。这也或许是作者的风格，毕竟作者是“惊点语录”的版主，语录嘛，就是一句一句经典的话，而不是像写书这样一篇一篇的长篇大论，作者说他从小就梦想当一<br>个作家，我当然觉得他的梦想能够实现，因为他热爱海贼王，热爱海贼王的人都能实现自己的梦想，这是我一直坚信的。</p>\n<p>看完本书，学到最大的一点就是遇到问题，先想想：”如果是路飞遇到这样的事，他会怎么做？“作为故事的主人公路飞，或许在外人看来他有些疯，但懂他的人都知道他的智慧<br>和聪明才智绝对是海贼王里最高的。继续追《海贼王》，继续追我的梦，或许当我看完《海贼王》，学到其中真正的智慧后，我的梦想也实现了。</p>\n<p>最后，请记住路飞的名言：”能在这片大海自由自在翱翔的人，就是海贼王！“</p>\n<p>语录：</p>\n<p><strong>与其在等待中浪费青春，不如在追求中燃烧生命！</strong></p>\n<p><strong>人生短暂无常，如果你曾遇到过一个”有点疯“的朋友，请好好珍惜你们在一起的日子！</strong></p>\n<p><strong>时间总在火烧屁股中流逝，而人则是在火烧屁股中燃烧殆尽</strong></p>\n<p><strong>你不知道自己要什么，是不是因为你要的东西太多，超出自己的能力范围？</strong></p>\n<p><strong>关于梦想，重要的不是你想做什么，而是你可以做什么，还有实际上你愿意做什么。</strong></p>\n<p><strong>人生可以追求平凡，但不可以认命，更不能没有梦想。</strong></p>\n<p><strong>即使蓦然回首，自己终究没有成为小时候想成为的人，那又何妨？！</strong></p>\n<p><strong>现实会让你不得不舍弃一个梦想，可是别让它抹杀你所有的梦想。</strong></p>\n<p><strong>扯到钱的友情并非复杂，把它搞得复杂的是人。</strong></p>\n<p><strong>朋友就是用来麻烦的，你不麻烦我，我才生气呢</strong></p>\n<p><strong>”认清现实“和”怀抱梦想“并没有冲突</strong></p>\n<p><strong>人最容易犯的错，就是”因为害怕自己会犯错，而选择什么都不做“。</strong></p>\n<p><strong>平淡不是不爱，而是换了一种方式去爱。</strong></p>\n<p><strong>人的一生也许可以爱很多次。然而，总有一个人可以让你笑得最灿烂，哭得最透彻，想得最深刻。只是你往往嘴硬不愿承认。</strong></p>\n<p><strong>爱了以后失去爱，也比从未爱过来得好。</strong></p>\n<p><strong>真正忘记一个人，并非不再想起，而是偶尔想起，也没有关系。</strong></p>\n<p><strong>想要忘记一段感情 ，方法永远只有一个：时间和新欢 。如果时间和新欢也不能让你忘记一段感情，原因只有一个——时间不够长，新欢不够好。</strong></p>\n<p><strong>时间不会让人忘记很多事情，只会让人习惯很多事情。</strong></p>\n<p><strong>有时候，我们不得不假装很快乐，只是为了不让别人问：”你好好吗？”</strong></p>\n<p><strong>有时候，人之所以紧抓着回忆不放，是因为回忆是唯一不会变的东西，就算一切都已经沧海桑田。</strong></p>\n<p><strong>我们常常手里拿着一张梦想的藏宝图，为自己的人生做了许多规划，却忘了出发的重要性，以致许多年后，仍然在原地踏步。</strong></p>\n<p><strong>每个人都是梦想家，有时候梦醒了，就只剩下想家了。</strong></p>\n","excerpt":"","more":"<h1 id=\"为梦想而受伤，永远值得骄傲\"><a href=\"#为梦想而受伤，永远值得骄傲\" class=\"headerlink\" title=\"为梦想而受伤，永远值得骄傲\"></a>为梦想而受伤，永远值得骄傲</h1><p>本书作者是微博和facebook上比较出名的一位叫”冒牌生“的留学生，是”惊点语录“粉丝团的版主。我和他一样，都十分热爱海贼王，也一直为着梦想在奋斗。</p>\n<p>当然对于这本书的语言，我觉得并没什么亮点，或许有一些文化上的差异吧，也或许是我看微博上的段子看得太多了，觉得作者的语言很多都是堆砌式的，而且并没有什么逻辑，<br>并没有什么深度。这也或许是作者的风格，毕竟作者是“惊点语录”的版主，语录嘛，就是一句一句经典的话，而不是像写书这样一篇一篇的长篇大论，作者说他从小就梦想当一<br>个作家，我当然觉得他的梦想能够实现，因为他热爱海贼王，热爱海贼王的人都能实现自己的梦想，这是我一直坚信的。</p>\n<p>看完本书，学到最大的一点就是遇到问题，先想想：”如果是路飞遇到这样的事，他会怎么做？“作为故事的主人公路飞，或许在外人看来他有些疯，但懂他的人都知道他的智慧<br>和聪明才智绝对是海贼王里最高的。继续追《海贼王》，继续追我的梦，或许当我看完《海贼王》，学到其中真正的智慧后，我的梦想也实现了。</p>\n<p>最后，请记住路飞的名言：”能在这片大海自由自在翱翔的人，就是海贼王！“</p>\n<p>语录：</p>\n<p><strong>与其在等待中浪费青春，不如在追求中燃烧生命！</strong></p>\n<p><strong>人生短暂无常，如果你曾遇到过一个”有点疯“的朋友，请好好珍惜你们在一起的日子！</strong></p>\n<p><strong>时间总在火烧屁股中流逝，而人则是在火烧屁股中燃烧殆尽</strong></p>\n<p><strong>你不知道自己要什么，是不是因为你要的东西太多，超出自己的能力范围？</strong></p>\n<p><strong>关于梦想，重要的不是你想做什么，而是你可以做什么，还有实际上你愿意做什么。</strong></p>\n<p><strong>人生可以追求平凡，但不可以认命，更不能没有梦想。</strong></p>\n<p><strong>即使蓦然回首，自己终究没有成为小时候想成为的人，那又何妨？！</strong></p>\n<p><strong>现实会让你不得不舍弃一个梦想，可是别让它抹杀你所有的梦想。</strong></p>\n<p><strong>扯到钱的友情并非复杂，把它搞得复杂的是人。</strong></p>\n<p><strong>朋友就是用来麻烦的，你不麻烦我，我才生气呢</strong></p>\n<p><strong>”认清现实“和”怀抱梦想“并没有冲突</strong></p>\n<p><strong>人最容易犯的错，就是”因为害怕自己会犯错，而选择什么都不做“。</strong></p>\n<p><strong>平淡不是不爱，而是换了一种方式去爱。</strong></p>\n<p><strong>人的一生也许可以爱很多次。然而，总有一个人可以让你笑得最灿烂，哭得最透彻，想得最深刻。只是你往往嘴硬不愿承认。</strong></p>\n<p><strong>爱了以后失去爱，也比从未爱过来得好。</strong></p>\n<p><strong>真正忘记一个人，并非不再想起，而是偶尔想起，也没有关系。</strong></p>\n<p><strong>想要忘记一段感情 ，方法永远只有一个：时间和新欢 。如果时间和新欢也不能让你忘记一段感情，原因只有一个——时间不够长，新欢不够好。</strong></p>\n<p><strong>时间不会让人忘记很多事情，只会让人习惯很多事情。</strong></p>\n<p><strong>有时候，我们不得不假装很快乐，只是为了不让别人问：”你好好吗？”</strong></p>\n<p><strong>有时候，人之所以紧抓着回忆不放，是因为回忆是唯一不会变的东西，就算一切都已经沧海桑田。</strong></p>\n<p><strong>我们常常手里拿着一张梦想的藏宝图，为自己的人生做了许多规划，却忘了出发的重要性，以致许多年后，仍然在原地踏步。</strong></p>\n<p><strong>每个人都是梦想家，有时候梦醒了，就只剩下想家了。</strong></p>\n"},{"title":"我，等你","date":"2010-08-06T11:47:21.000Z","_content":"不知为什么，在你的世界里总是没有我。你爱着他，可他现在已经有了另一个她，所以我愿意等你，我会一直爱你，一直爱到我不再爱你的时候，但无论结果怎样，请你记住曾经\n有一个男孩默默地守护过你！我爱你！我想你！\n\n——本文最早发表于QQ空间\n","source":"_posts/i-wait-you.md","raw":"---\ntitle: \"我，等你\"\ndate: 2010-08-06 19:47:21\ncategories: 那时年少\n---\n不知为什么，在你的世界里总是没有我。你爱着他，可他现在已经有了另一个她，所以我愿意等你，我会一直爱你，一直爱到我不再爱你的时候，但无论结果怎样，请你记住曾经\n有一个男孩默默地守护过你！我爱你！我想你！\n\n——本文最早发表于QQ空间\n","slug":"i-wait-you","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9o002g9vnzsnd0wwti","content":"<p>不知为什么，在你的世界里总是没有我。你爱着他，可他现在已经有了另一个她，所以我愿意等你，我会一直爱你，一直爱到我不再爱你的时候，但无论结果怎样，请你记住曾经<br>有一个男孩默默地守护过你！我爱你！我想你！</p>\n<p>——本文最早发表于QQ空间</p>\n","excerpt":"","more":"<p>不知为什么，在你的世界里总是没有我。你爱着他，可他现在已经有了另一个她，所以我愿意等你，我会一直爱你，一直爱到我不再爱你的时候，但无论结果怎样，请你记住曾经<br>有一个男孩默默地守护过你！我爱你！我想你！</p>\n<p>——本文最早发表于QQ空间</p>\n"},{"title":"Linux 内核的安装","date":"2014-02-02T03:14:24.000Z","_content":"封面图片来自Pixabay  \n\n系统环境：64位ubuntu\n\nLinux内核的安装主要有以下两种方法：\n\n### 方法一：安装编译好的通用内核DEB包\n\n(包括内核核心文件linux-image，内核头文件linux-headers，内核通用头文件linux-headers三个文件)\n\nubuntu内核DEB包 [下载地址](http://kernel.ubuntu.com/~kernel-\nppa/mainline/)（带了rc的内核为非稳定版本）\n\n这是最简单的方法，因为是通用的，所以不需要去配置任何东西\n\n首先通过上述下载地址下载到以下三个DEB包(注：32位系统请下载i386版本)：\n\n– linux-image-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb  \n– linux-headers-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb  \n– linux-header-3.13.0-031300_3.13.0-031300.201401192235_all.deb\n(这个文件不用区分32位和64位)\n\n然后把他们放到同一个文件夹，在该文件夹内打开终端，执行如下命令：\n\nsudo dpkg -i *.deb 安装DEB包\n\nsudo update-grub 刷新grub\n\n### 方法二：下载内核源代码，按照个人需求编译安装\n\n此方法较为复杂，而且可能会出现很多问题，但是对于想了解内核以及想提高性能的用户就非常适用了，因为通过此方法可以精简内核，提高系统效率\n\n首先下载[最新稳定版内核源代码](<http://kernel.org)，然后在该目录打开终>端\n\n将源代码解压，如果右键不能直接提取那就执行命令：\n\n1\n\n2\n\n|\n\n内核解压命令为`xz -kd 文件名\n\n然后再解压tar：`tar –xvf 文件名.tar  \n\n---|---  \n\n如果之前编译过那么就需要清理一下，在终端执行命令： make mrproper\n\n当然，如果是刚从网上下载下来的就不需要这一步\n\n然后在该目录内执行 make menuconfig  \n在图形化界面配置各个选项\n\n详细的内核配置说明见：[Linux内核配置详细说明](http://haofly.net/linux-kernel/)\n\n当然，我这里列举了通常需要修改的项目：[Linux内核个性化配置](http://haofly.net/kernel-mainmenu/)\n\n配置好后，在终端执行(注：下面的命令参数中-x表示设置的线程数，设置多线程可加快编译时间，比如我是双核处理器那就选4线程，x为4)：\n\nmake -jx 编译内核  \nmake modules -jx 编译内核模块  \nmake headers -jx 编译内核头文件  \nsudo make headers_install 安装内核头文件  \nsudo make modules_install 安装内核模块  \nsudo make install 安装内核  \nsudo reboot 重启以验证内核\n\n可能遇到的错误：  \n执行`make menuconfig`的时候如果出现如下错误，那么\n\n*** Unable to find the ncurses libraries or the  \n*** required header files.  \n*** ‘make menuconfig’ requires the ncurses libraries.  \n***  \n*** Install ncurses (ncurses-devel) and try again.  \n***  \nmake[1]: *** [scripts/kconfig/dochecklxdialog] 错误 1  \nmake: *** [menuconfig] 错误 2  \n那么可以执行 sudo apt-get install libncurses5-dev\n","source":"_posts/install-linux-core.md","raw":"---\ntitle: \"Linux 内核的安装\"\ndate: 2014-02-02 11:14:24\ncategories: 编程之路\n---\n封面图片来自Pixabay  \n\n系统环境：64位ubuntu\n\nLinux内核的安装主要有以下两种方法：\n\n### 方法一：安装编译好的通用内核DEB包\n\n(包括内核核心文件linux-image，内核头文件linux-headers，内核通用头文件linux-headers三个文件)\n\nubuntu内核DEB包 [下载地址](http://kernel.ubuntu.com/~kernel-\nppa/mainline/)（带了rc的内核为非稳定版本）\n\n这是最简单的方法，因为是通用的，所以不需要去配置任何东西\n\n首先通过上述下载地址下载到以下三个DEB包(注：32位系统请下载i386版本)：\n\n– linux-image-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb  \n– linux-headers-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb  \n– linux-header-3.13.0-031300_3.13.0-031300.201401192235_all.deb\n(这个文件不用区分32位和64位)\n\n然后把他们放到同一个文件夹，在该文件夹内打开终端，执行如下命令：\n\nsudo dpkg -i *.deb 安装DEB包\n\nsudo update-grub 刷新grub\n\n### 方法二：下载内核源代码，按照个人需求编译安装\n\n此方法较为复杂，而且可能会出现很多问题，但是对于想了解内核以及想提高性能的用户就非常适用了，因为通过此方法可以精简内核，提高系统效率\n\n首先下载[最新稳定版内核源代码](<http://kernel.org)，然后在该目录打开终>端\n\n将源代码解压，如果右键不能直接提取那就执行命令：\n\n1\n\n2\n\n|\n\n内核解压命令为`xz -kd 文件名\n\n然后再解压tar：`tar –xvf 文件名.tar  \n\n---|---  \n\n如果之前编译过那么就需要清理一下，在终端执行命令： make mrproper\n\n当然，如果是刚从网上下载下来的就不需要这一步\n\n然后在该目录内执行 make menuconfig  \n在图形化界面配置各个选项\n\n详细的内核配置说明见：[Linux内核配置详细说明](http://haofly.net/linux-kernel/)\n\n当然，我这里列举了通常需要修改的项目：[Linux内核个性化配置](http://haofly.net/kernel-mainmenu/)\n\n配置好后，在终端执行(注：下面的命令参数中-x表示设置的线程数，设置多线程可加快编译时间，比如我是双核处理器那就选4线程，x为4)：\n\nmake -jx 编译内核  \nmake modules -jx 编译内核模块  \nmake headers -jx 编译内核头文件  \nsudo make headers_install 安装内核头文件  \nsudo make modules_install 安装内核模块  \nsudo make install 安装内核  \nsudo reboot 重启以验证内核\n\n可能遇到的错误：  \n执行`make menuconfig`的时候如果出现如下错误，那么\n\n*** Unable to find the ncurses libraries or the  \n*** required header files.  \n*** ‘make menuconfig’ requires the ncurses libraries.  \n***  \n*** Install ncurses (ncurses-devel) and try again.  \n***  \nmake[1]: *** [scripts/kconfig/dochecklxdialog] 错误 1  \nmake: *** [menuconfig] 错误 2  \n那么可以执行 sudo apt-get install libncurses5-dev\n","slug":"install-linux-core","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9q002i9vnzkxnoaphh","content":"<p>封面图片来自Pixabay  </p>\n<p>系统环境：64位ubuntu</p>\n<p>Linux内核的安装主要有以下两种方法：</p>\n<h3 id=\"方法一：安装编译好的通用内核DEB包\"><a href=\"#方法一：安装编译好的通用内核DEB包\" class=\"headerlink\" title=\"方法一：安装编译好的通用内核DEB包\"></a>方法一：安装编译好的通用内核DEB包</h3><p>(包括内核核心文件linux-image，内核头文件linux-headers，内核通用头文件linux-headers三个文件)</p>\n<p>ubuntu内核DEB包 <a href=\"http://kernel.ubuntu.com/~kernel-\nppa/mainline/\" target=\"_blank\" rel=\"external\">下载地址</a>（带了rc的内核为非稳定版本）</p>\n<p>这是最简单的方法，因为是通用的，所以不需要去配置任何东西</p>\n<p>首先通过上述下载地址下载到以下三个DEB包(注：32位系统请下载i386版本)：</p>\n<p>– linux-image-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb<br>– linux-headers-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb<br>– linux-header-3.13.0-031300_3.13.0-031300.201401192235_all.deb<br>(这个文件不用区分32位和64位)</p>\n<p>然后把他们放到同一个文件夹，在该文件夹内打开终端，执行如下命令：</p>\n<p>sudo dpkg -i *.deb 安装DEB包</p>\n<p>sudo update-grub 刷新grub</p>\n<h3 id=\"方法二：下载内核源代码，按照个人需求编译安装\"><a href=\"#方法二：下载内核源代码，按照个人需求编译安装\" class=\"headerlink\" title=\"方法二：下载内核源代码，按照个人需求编译安装\"></a>方法二：下载内核源代码，按照个人需求编译安装</h3><p>此方法较为复杂，而且可能会出现很多问题，但是对于想了解内核以及想提高性能的用户就非常适用了，因为通过此方法可以精简内核，提高系统效率</p>\n<p>首先下载<a href=\"http://kernel.org\" target=\"_blank\" rel=\"external\">最新稳定版内核源代码</a>，然后在该目录打开终&gt;端</p>\n<p>将源代码解压，如果右键不能直接提取那就执行命令：</p>\n<p>1</p>\n<p>2</p>\n<p>|</p>\n<p>内核解压命令为`xz -kd 文件名</p>\n<p>然后再解压tar：`tar –xvf 文件名.tar  </p>\n<p>—|—  </p>\n<p>如果之前编译过那么就需要清理一下，在终端执行命令： make mrproper</p>\n<p>当然，如果是刚从网上下载下来的就不需要这一步</p>\n<p>然后在该目录内执行 make menuconfig<br>在图形化界面配置各个选项</p>\n<p>详细的内核配置说明见：<a href=\"http://haofly.net/linux-kernel/\">Linux内核配置详细说明</a></p>\n<p>当然，我这里列举了通常需要修改的项目：<a href=\"http://haofly.net/kernel-mainmenu/\">Linux内核个性化配置</a></p>\n<p>配置好后，在终端执行(注：下面的命令参数中-x表示设置的线程数，设置多线程可加快编译时间，比如我是双核处理器那就选4线程，x为4)：</p>\n<p>make -jx 编译内核<br>make modules -jx 编译内核模块<br>make headers -jx 编译内核头文件<br>sudo make headers_install 安装内核头文件<br>sudo make modules_install 安装内核模块<br>sudo make install 安装内核<br>sudo reboot 重启以验证内核</p>\n<p>可能遇到的错误：<br>执行<code>make menuconfig</code>的时候如果出现如下错误，那么</p>\n<p><strong><em> Unable to find the ncurses libraries or the  \n</em></strong> required header files.<br><em>*</em> ‘make menuconfig’ requires the ncurses libraries.  </p>\n<hr>\n<p><em>*</em> Install ncurses (ncurses-devel) and try again.  </p>\n<hr>\n<p>make[1]: <strong><em> [scripts/kconfig/dochecklxdialog] 错误 1<br>make: </em></strong> [menuconfig] 错误 2<br>那么可以执行 sudo apt-get install libncurses5-dev</p>\n","excerpt":"","more":"<p>封面图片来自Pixabay  </p>\n<p>系统环境：64位ubuntu</p>\n<p>Linux内核的安装主要有以下两种方法：</p>\n<h3 id=\"方法一：安装编译好的通用内核DEB包\"><a href=\"#方法一：安装编译好的通用内核DEB包\" class=\"headerlink\" title=\"方法一：安装编译好的通用内核DEB包\"></a>方法一：安装编译好的通用内核DEB包</h3><p>(包括内核核心文件linux-image，内核头文件linux-headers，内核通用头文件linux-headers三个文件)</p>\n<p>ubuntu内核DEB包 <a href=\"http://kernel.ubuntu.com/~kernel-\nppa/mainline/\">下载地址</a>（带了rc的内核为非稳定版本）</p>\n<p>这是最简单的方法，因为是通用的，所以不需要去配置任何东西</p>\n<p>首先通过上述下载地址下载到以下三个DEB包(注：32位系统请下载i386版本)：</p>\n<p>– linux-image-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb<br>– linux-headers-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb<br>– linux-header-3.13.0-031300_3.13.0-031300.201401192235_all.deb<br>(这个文件不用区分32位和64位)</p>\n<p>然后把他们放到同一个文件夹，在该文件夹内打开终端，执行如下命令：</p>\n<p>sudo dpkg -i *.deb 安装DEB包</p>\n<p>sudo update-grub 刷新grub</p>\n<h3 id=\"方法二：下载内核源代码，按照个人需求编译安装\"><a href=\"#方法二：下载内核源代码，按照个人需求编译安装\" class=\"headerlink\" title=\"方法二：下载内核源代码，按照个人需求编译安装\"></a>方法二：下载内核源代码，按照个人需求编译安装</h3><p>此方法较为复杂，而且可能会出现很多问题，但是对于想了解内核以及想提高性能的用户就非常适用了，因为通过此方法可以精简内核，提高系统效率</p>\n<p>首先下载<a href=\"http://kernel.org\">最新稳定版内核源代码</a>，然后在该目录打开终&gt;端</p>\n<p>将源代码解压，如果右键不能直接提取那就执行命令：</p>\n<p>1</p>\n<p>2</p>\n<p>|</p>\n<p>内核解压命令为`xz -kd 文件名</p>\n<p>然后再解压tar：`tar –xvf 文件名.tar  </p>\n<p>—|—  </p>\n<p>如果之前编译过那么就需要清理一下，在终端执行命令： make mrproper</p>\n<p>当然，如果是刚从网上下载下来的就不需要这一步</p>\n<p>然后在该目录内执行 make menuconfig<br>在图形化界面配置各个选项</p>\n<p>详细的内核配置说明见：<a href=\"http://haofly.net/linux-kernel/\">Linux内核配置详细说明</a></p>\n<p>当然，我这里列举了通常需要修改的项目：<a href=\"http://haofly.net/kernel-mainmenu/\">Linux内核个性化配置</a></p>\n<p>配置好后，在终端执行(注：下面的命令参数中-x表示设置的线程数，设置多线程可加快编译时间，比如我是双核处理器那就选4线程，x为4)：</p>\n<p>make -jx 编译内核<br>make modules -jx 编译内核模块<br>make headers -jx 编译内核头文件<br>sudo make headers_install 安装内核头文件<br>sudo make modules_install 安装内核模块<br>sudo make install 安装内核<br>sudo reboot 重启以验证内核</p>\n<p>可能遇到的错误：<br>执行<code>make menuconfig</code>的时候如果出现如下错误，那么</p>\n<p><strong><em> Unable to find the ncurses libraries or the  \n</em></strong> required header files.<br><em>*</em> ‘make menuconfig’ requires the ncurses libraries.  </p>\n<hr>\n<p><em>*</em> Install ncurses (ncurses-devel) and try again.  </p>\n<hr>\n<p>make[1]: <strong><em> [scripts/kconfig/dochecklxdialog] 错误 1<br>make: </em></strong> [menuconfig] 错误 2<br>那么可以执行 sudo apt-get install libncurses5-dev</p>\n"},{"title":"《浪潮之巅》——英雄造时势","date":"2015-04-19T15:59:05.000Z","_content":"## 说说本书\n\n这本书可以说是每一个互联网爱好者的必读书籍，尤其是那些想在互联网界大显身手的人。这不是单纯的心灵鸡汤，而是一本史书，一本不仅仅陈述基本事实，还道出几十年来腥\n风血雨中的不变规律。它给了你一个直观的感受，让你仿佛身临其境，短短几天就体会到互联网诞生至今的那些潮起潮落，而是否能踏上下一波浪潮，还得看你自己的造化。\n\n《浪潮之巅》点燃了很多人创业的灵感，也点燃了我奋斗的激情，每次看到这种关于互联网的鸿篇巨著，我就庆幸自己当初选择了这个行业，并热爱上这个行业。在互联网，要踏\n上浪潮之巅，很容易，也很不容易，这本书同样也削减了一些人的锐气，互联网的路上，一不小心，便会永世不得超生，它每天都在千变万化，我们要更加脚踏实地。\n\n或许，正如书中所说，不是时势造英雄，恰好是英雄创造了时势。\n\n据作者吴军介绍，这本书很多都是当年发表在谷歌黑板报上的文章，我之前没看过，但我知道，也只有吴军这样的经历才能站在那样的高度审时度势，酿造这本史诗。(另外，有\n不少读者说此书存在许多细节错误，这些东西我觉得没必要去计较，毕竟，我们不是学历史…)\n\n## 说说互联网公司\n\n这本书有上下两册，上册主要讲互联网大公司的兴衰，下册则主要讲互联网的本质。从AT&T、IBM、摩托罗拉、Google、Apple这些大牌公司中发现，一个企业\n能有发展，基因是决定性作用。我也曾一直在观察着，比如Google，我也一直找不到一个准确的词语来形容我的发现，后来发现了“基因”这个词，我才恍然顿悟，这不就\n是企业基因吗？它伴随着企业诞生，也是企业能否踏上浪潮之巅的关键所在。\n\n我想，我以后所在的公司，不看它有多壮大，而更看它是否适合我，是否是我想要的公司。(这句话并不代表我有多大的选择的余地，只是，这种公司肯定会有很多的)\n\n## 说说我最喜欢的Google\n\n我接触互联网比较晚，没有见证谷歌飞速发展的年代，我刚开始使用谷歌的时候，就正好碰上它离开某国的时候，作为一个愤青，自然对它多了一份喜爱。\n\n我看互联网公司，主要是看该公司的所作所为。Don’t be evil！这是谷歌的格言，我想，谷歌或许还是做过一些对不起用户的事的，但是它依然在做着很多好事，\n这才是真正以用户为中心的公司，踏上浪潮之巅也是自然而然的事情了。国内的一些公司也一样，七牛、Segmentfault等新兴的互联网公司也是深受大众的喜爱。\n\n# 自由、开放、分享，永远都是互联网的代名词\n","source":"_posts/langchaozhidian.md","raw":"---\ntitle: \"《浪潮之巅》——英雄造时势\"\ndate: 2015-04-19 23:59:05\ncategories: 韦编三绝\n---\n## 说说本书\n\n这本书可以说是每一个互联网爱好者的必读书籍，尤其是那些想在互联网界大显身手的人。这不是单纯的心灵鸡汤，而是一本史书，一本不仅仅陈述基本事实，还道出几十年来腥\n风血雨中的不变规律。它给了你一个直观的感受，让你仿佛身临其境，短短几天就体会到互联网诞生至今的那些潮起潮落，而是否能踏上下一波浪潮，还得看你自己的造化。\n\n《浪潮之巅》点燃了很多人创业的灵感，也点燃了我奋斗的激情，每次看到这种关于互联网的鸿篇巨著，我就庆幸自己当初选择了这个行业，并热爱上这个行业。在互联网，要踏\n上浪潮之巅，很容易，也很不容易，这本书同样也削减了一些人的锐气，互联网的路上，一不小心，便会永世不得超生，它每天都在千变万化，我们要更加脚踏实地。\n\n或许，正如书中所说，不是时势造英雄，恰好是英雄创造了时势。\n\n据作者吴军介绍，这本书很多都是当年发表在谷歌黑板报上的文章，我之前没看过，但我知道，也只有吴军这样的经历才能站在那样的高度审时度势，酿造这本史诗。(另外，有\n不少读者说此书存在许多细节错误，这些东西我觉得没必要去计较，毕竟，我们不是学历史…)\n\n## 说说互联网公司\n\n这本书有上下两册，上册主要讲互联网大公司的兴衰，下册则主要讲互联网的本质。从AT&T、IBM、摩托罗拉、Google、Apple这些大牌公司中发现，一个企业\n能有发展，基因是决定性作用。我也曾一直在观察着，比如Google，我也一直找不到一个准确的词语来形容我的发现，后来发现了“基因”这个词，我才恍然顿悟，这不就\n是企业基因吗？它伴随着企业诞生，也是企业能否踏上浪潮之巅的关键所在。\n\n我想，我以后所在的公司，不看它有多壮大，而更看它是否适合我，是否是我想要的公司。(这句话并不代表我有多大的选择的余地，只是，这种公司肯定会有很多的)\n\n## 说说我最喜欢的Google\n\n我接触互联网比较晚，没有见证谷歌飞速发展的年代，我刚开始使用谷歌的时候，就正好碰上它离开某国的时候，作为一个愤青，自然对它多了一份喜爱。\n\n我看互联网公司，主要是看该公司的所作所为。Don’t be evil！这是谷歌的格言，我想，谷歌或许还是做过一些对不起用户的事的，但是它依然在做着很多好事，\n这才是真正以用户为中心的公司，踏上浪潮之巅也是自然而然的事情了。国内的一些公司也一样，七牛、Segmentfault等新兴的互联网公司也是深受大众的喜爱。\n\n# 自由、开放、分享，永远都是互联网的代名词\n","slug":"langchaozhidian","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2p9s002k9vnzafl34oc8","content":"<h2 id=\"说说本书\"><a href=\"#说说本书\" class=\"headerlink\" title=\"说说本书\"></a>说说本书</h2><p>这本书可以说是每一个互联网爱好者的必读书籍，尤其是那些想在互联网界大显身手的人。这不是单纯的心灵鸡汤，而是一本史书，一本不仅仅陈述基本事实，还道出几十年来腥<br>风血雨中的不变规律。它给了你一个直观的感受，让你仿佛身临其境，短短几天就体会到互联网诞生至今的那些潮起潮落，而是否能踏上下一波浪潮，还得看你自己的造化。</p>\n<p>《浪潮之巅》点燃了很多人创业的灵感，也点燃了我奋斗的激情，每次看到这种关于互联网的鸿篇巨著，我就庆幸自己当初选择了这个行业，并热爱上这个行业。在互联网，要踏<br>上浪潮之巅，很容易，也很不容易，这本书同样也削减了一些人的锐气，互联网的路上，一不小心，便会永世不得超生，它每天都在千变万化，我们要更加脚踏实地。</p>\n<p>或许，正如书中所说，不是时势造英雄，恰好是英雄创造了时势。</p>\n<p>据作者吴军介绍，这本书很多都是当年发表在谷歌黑板报上的文章，我之前没看过，但我知道，也只有吴军这样的经历才能站在那样的高度审时度势，酿造这本史诗。(另外，有<br>不少读者说此书存在许多细节错误，这些东西我觉得没必要去计较，毕竟，我们不是学历史…)</p>\n<h2 id=\"说说互联网公司\"><a href=\"#说说互联网公司\" class=\"headerlink\" title=\"说说互联网公司\"></a>说说互联网公司</h2><p>这本书有上下两册，上册主要讲互联网大公司的兴衰，下册则主要讲互联网的本质。从AT&amp;T、IBM、摩托罗拉、Google、Apple这些大牌公司中发现，一个企业<br>能有发展，基因是决定性作用。我也曾一直在观察着，比如Google，我也一直找不到一个准确的词语来形容我的发现，后来发现了“基因”这个词，我才恍然顿悟，这不就<br>是企业基因吗？它伴随着企业诞生，也是企业能否踏上浪潮之巅的关键所在。</p>\n<p>我想，我以后所在的公司，不看它有多壮大，而更看它是否适合我，是否是我想要的公司。(这句话并不代表我有多大的选择的余地，只是，这种公司肯定会有很多的)</p>\n<h2 id=\"说说我最喜欢的Google\"><a href=\"#说说我最喜欢的Google\" class=\"headerlink\" title=\"说说我最喜欢的Google\"></a>说说我最喜欢的Google</h2><p>我接触互联网比较晚，没有见证谷歌飞速发展的年代，我刚开始使用谷歌的时候，就正好碰上它离开某国的时候，作为一个愤青，自然对它多了一份喜爱。</p>\n<p>我看互联网公司，主要是看该公司的所作所为。Don’t be evil！这是谷歌的格言，我想，谷歌或许还是做过一些对不起用户的事的，但是它依然在做着很多好事，<br>这才是真正以用户为中心的公司，踏上浪潮之巅也是自然而然的事情了。国内的一些公司也一样，七牛、Segmentfault等新兴的互联网公司也是深受大众的喜爱。</p>\n<h1 id=\"自由、开放、分享，永远都是互联网的代名词\"><a href=\"#自由、开放、分享，永远都是互联网的代名词\" class=\"headerlink\" title=\"自由、开放、分享，永远都是互联网的代名词\"></a>自由、开放、分享，永远都是互联网的代名词</h1>","excerpt":"","more":"<h2 id=\"说说本书\"><a href=\"#说说本书\" class=\"headerlink\" title=\"说说本书\"></a>说说本书</h2><p>这本书可以说是每一个互联网爱好者的必读书籍，尤其是那些想在互联网界大显身手的人。这不是单纯的心灵鸡汤，而是一本史书，一本不仅仅陈述基本事实，还道出几十年来腥<br>风血雨中的不变规律。它给了你一个直观的感受，让你仿佛身临其境，短短几天就体会到互联网诞生至今的那些潮起潮落，而是否能踏上下一波浪潮，还得看你自己的造化。</p>\n<p>《浪潮之巅》点燃了很多人创业的灵感，也点燃了我奋斗的激情，每次看到这种关于互联网的鸿篇巨著，我就庆幸自己当初选择了这个行业，并热爱上这个行业。在互联网，要踏<br>上浪潮之巅，很容易，也很不容易，这本书同样也削减了一些人的锐气，互联网的路上，一不小心，便会永世不得超生，它每天都在千变万化，我们要更加脚踏实地。</p>\n<p>或许，正如书中所说，不是时势造英雄，恰好是英雄创造了时势。</p>\n<p>据作者吴军介绍，这本书很多都是当年发表在谷歌黑板报上的文章，我之前没看过，但我知道，也只有吴军这样的经历才能站在那样的高度审时度势，酿造这本史诗。(另外，有<br>不少读者说此书存在许多细节错误，这些东西我觉得没必要去计较，毕竟，我们不是学历史…)</p>\n<h2 id=\"说说互联网公司\"><a href=\"#说说互联网公司\" class=\"headerlink\" title=\"说说互联网公司\"></a>说说互联网公司</h2><p>这本书有上下两册，上册主要讲互联网大公司的兴衰，下册则主要讲互联网的本质。从AT&amp;T、IBM、摩托罗拉、Google、Apple这些大牌公司中发现，一个企业<br>能有发展，基因是决定性作用。我也曾一直在观察着，比如Google，我也一直找不到一个准确的词语来形容我的发现，后来发现了“基因”这个词，我才恍然顿悟，这不就<br>是企业基因吗？它伴随着企业诞生，也是企业能否踏上浪潮之巅的关键所在。</p>\n<p>我想，我以后所在的公司，不看它有多壮大，而更看它是否适合我，是否是我想要的公司。(这句话并不代表我有多大的选择的余地，只是，这种公司肯定会有很多的)</p>\n<h2 id=\"说说我最喜欢的Google\"><a href=\"#说说我最喜欢的Google\" class=\"headerlink\" title=\"说说我最喜欢的Google\"></a>说说我最喜欢的Google</h2><p>我接触互联网比较晚，没有见证谷歌飞速发展的年代，我刚开始使用谷歌的时候，就正好碰上它离开某国的时候，作为一个愤青，自然对它多了一份喜爱。</p>\n<p>我看互联网公司，主要是看该公司的所作所为。Don’t be evil！这是谷歌的格言，我想，谷歌或许还是做过一些对不起用户的事的，但是它依然在做着很多好事，<br>这才是真正以用户为中心的公司，踏上浪潮之巅也是自然而然的事情了。国内的一些公司也一样，七牛、Segmentfault等新兴的互联网公司也是深受大众的喜爱。</p>\n<h1 id=\"自由、开放、分享，永远都是互联网的代名词\"><a href=\"#自由、开放、分享，永远都是互联网的代名词\" class=\"headerlink\" title=\"自由、开放、分享，永远都是互联网的代名词\"></a>自由、开放、分享，永远都是互联网的代名词</h1>"},{"title":"Laravel使用IoC模式(DI、依赖注入)","date":"2015-05-17T08:19:06.000Z","_content":"参考文章：<https://phphub.org/topics/607> (以下内容基本上都摘自该文章)\n\nIoC这个主题我已经收藏了很久了，直到今天才有空深入地理解了一遍Laravel的IoC模式。\n\n前几天在使用LeanCloud的Python SDK，我就在想，每次连接LeanCloud的存储服务都需要先创建一个连接，如果要执行其它的操作，那又得新建那\n个连接了。IoC就是为了解决每次都重复连接的一种编码模式，通过依赖注入减少耦合。\n\n上面引用的参考文章里已经注明了为什么我们在这种情况下一定要使用依赖注入，这里我就只记录下到底该如何使用该模式。\n\nLaravel的依赖注入是使用的“容器”这个概念，是一种全局注册表，使用容器的依赖注入作为一种桥梁来解决依赖可以使我们的代码耦合度耕地，很好的降低了组件的复\n杂性。示例代码如下：\n\n\n\n    <?php\n\n\n\n\n    class SomeComponent\\{      # 组件\n        protected $_di;      # 一个私有变量\n\n\n\n\n\n    public function __construct($di)\\{\n        $this-&gt;_di = $di;\n    \\}\n\n    public function someDbTask()\\{\n        // 通过get获取connection service总是返回一个新的连接\n        $connection = $this-&gt;_di-&gt;get('db');\n    \\}\n\n    public function someOtherDbTask()\\{\n        // 和上面不同，这里获取的是共享的连接\n        $connection = $this-&gt;_di-&gt;getShared('db');\n\n        //This method also requires a input filtering service\n        $filter = $this-&gt;_db-&gt;get('filter');\n    \\}\n\n\n\\}\n\n$di = new Phalcon\\\\DI(); // 创建一个容器\n\n// 在容器中注册一个名为'db'的服务，用于连接数据库，并返回该连接 $di->set('db', function()\\{ return new\nConnection(array( \"host\" => \"localhost\", \"username\" => \"root\", \"password\" =>\n\"secret\", \"dbname\" => \"invo\" )); \\});\n\n// 在容器中注册一个名为'filter'的服务 $di->set('filter', function()\\{ return new Filter();\n\\});\n\n// 在容器中注册一个名为'session'的服务 $di->set('session', function()\\{ return new\nSession(); \\});\n\n// 将容器作为一个参数传递到构造函数中去 $some = new SomeComponent($di);\n\n$some->someTask();\n\n现在，该组件只有访问某种service的时候才需要它，如果它不需要，它甚至不会被初始化，以节约资源。Phalcon\\\\DI是一个实现了服务的依赖注入功能的组件\n，它本身就是一个容器。由于Phalcon高度解耦，Phalcon\\\\DI是框架用来集成其他组件的必不可少的部分，开发人员也可以使用这个组件依赖注入和管理应用程\n序中不同类文件的实例。\n\n在容器中注册服务，框架本身或开发人员都可以注册服务。当一个组件A要求调用组件B(或它的类的一个实例)，可以从容器中请求调用组件B，而不是创建组件B的一个实例\n。\n\n### 注入方法\n\n服务可以通过以下几种方式注入到容器：\n\n\n\n    <?php\n\n\n\n\n    // 首先要创建一个依赖注入容器\n    $di = new Phalcon\\\\DI();\n\n\n\n\n    // 通过类名注入\n    $di->set(\"request\", 'Phalcon\\\\Http\\\\Request');\n\n\n\n\n    // 通过匿名函数注入Using an anonymous function, the instance will lazy loaded\n    $di->set(\"request\", function()\\{\n        return new Phalcon\\\\Http\\\\Request();\n    \\});\n\n\n\n\n    // 直接用一个实例来注入\n    $di->set(\"request\", new Phalcon\\\\Http\\\\Request());\n\n\n\n\n    // 通过数组来注入\n    $di->set(\"request\", array(\n        \"className\" => 'Phalcon\\\\Http\\\\Request',\n        \"parameters\" => array(\n                parameter\" => array(\n                    \"host\" => \"localhost\",\n                )\n            )\n        )\n    ));\n\n在容器中，通过数组，字符串等方式存储的服务都将被延迟加载，即只有在请求对象的时候才被初始化。\n\n从容器获得服务：\n\n\n\n    <?php $request = $di->get(\"request\");\n    //或者使用魔术方法\n    $request = $di->getRequest();\n\n其它相关文章：\n\n# [PHP程序员如何理解IoC/DI](http://segmentfault.com/a/1190000002411255 \"Link:\nhttp://segmentfault.com/a/1190000002411255\" )\n","source":"_posts/laravel-IoC-DI.md","raw":"---\ntitle: \"Laravel使用IoC模式(DI、依赖注入)\"\ndate: 2015-05-17 16:19:06\ncategories: 编程之路\n---\n参考文章：<https://phphub.org/topics/607> (以下内容基本上都摘自该文章)\n\nIoC这个主题我已经收藏了很久了，直到今天才有空深入地理解了一遍Laravel的IoC模式。\n\n前几天在使用LeanCloud的Python SDK，我就在想，每次连接LeanCloud的存储服务都需要先创建一个连接，如果要执行其它的操作，那又得新建那\n个连接了。IoC就是为了解决每次都重复连接的一种编码模式，通过依赖注入减少耦合。\n\n上面引用的参考文章里已经注明了为什么我们在这种情况下一定要使用依赖注入，这里我就只记录下到底该如何使用该模式。\n\nLaravel的依赖注入是使用的“容器”这个概念，是一种全局注册表，使用容器的依赖注入作为一种桥梁来解决依赖可以使我们的代码耦合度耕地，很好的降低了组件的复\n杂性。示例代码如下：\n\n\n\n    <?php\n\n\n\n\n    class SomeComponent\\{      # 组件\n        protected $_di;      # 一个私有变量\n\n\n\n\n\n    public function __construct($di)\\{\n        $this-&gt;_di = $di;\n    \\}\n\n    public function someDbTask()\\{\n        // 通过get获取connection service总是返回一个新的连接\n        $connection = $this-&gt;_di-&gt;get('db');\n    \\}\n\n    public function someOtherDbTask()\\{\n        // 和上面不同，这里获取的是共享的连接\n        $connection = $this-&gt;_di-&gt;getShared('db');\n\n        //This method also requires a input filtering service\n        $filter = $this-&gt;_db-&gt;get('filter');\n    \\}\n\n\n\\}\n\n$di = new Phalcon\\\\DI(); // 创建一个容器\n\n// 在容器中注册一个名为'db'的服务，用于连接数据库，并返回该连接 $di->set('db', function()\\{ return new\nConnection(array( \"host\" => \"localhost\", \"username\" => \"root\", \"password\" =>\n\"secret\", \"dbname\" => \"invo\" )); \\});\n\n// 在容器中注册一个名为'filter'的服务 $di->set('filter', function()\\{ return new Filter();\n\\});\n\n// 在容器中注册一个名为'session'的服务 $di->set('session', function()\\{ return new\nSession(); \\});\n\n// 将容器作为一个参数传递到构造函数中去 $some = new SomeComponent($di);\n\n$some->someTask();\n\n现在，该组件只有访问某种service的时候才需要它，如果它不需要，它甚至不会被初始化，以节约资源。Phalcon\\\\DI是一个实现了服务的依赖注入功能的组件\n，它本身就是一个容器。由于Phalcon高度解耦，Phalcon\\\\DI是框架用来集成其他组件的必不可少的部分，开发人员也可以使用这个组件依赖注入和管理应用程\n序中不同类文件的实例。\n\n在容器中注册服务，框架本身或开发人员都可以注册服务。当一个组件A要求调用组件B(或它的类的一个实例)，可以从容器中请求调用组件B，而不是创建组件B的一个实例\n。\n\n### 注入方法\n\n服务可以通过以下几种方式注入到容器：\n\n\n\n    <?php\n\n\n\n\n    // 首先要创建一个依赖注入容器\n    $di = new Phalcon\\\\DI();\n\n\n\n\n    // 通过类名注入\n    $di->set(\"request\", 'Phalcon\\\\Http\\\\Request');\n\n\n\n\n    // 通过匿名函数注入Using an anonymous function, the instance will lazy loaded\n    $di->set(\"request\", function()\\{\n        return new Phalcon\\\\Http\\\\Request();\n    \\});\n\n\n\n\n    // 直接用一个实例来注入\n    $di->set(\"request\", new Phalcon\\\\Http\\\\Request());\n\n\n\n\n    // 通过数组来注入\n    $di->set(\"request\", array(\n        \"className\" => 'Phalcon\\\\Http\\\\Request',\n        \"parameters\" => array(\n                parameter\" => array(\n                    \"host\" => \"localhost\",\n                )\n            )\n        )\n    ));\n\n在容器中，通过数组，字符串等方式存储的服务都将被延迟加载，即只有在请求对象的时候才被初始化。\n\n从容器获得服务：\n\n\n\n    <?php $request = $di->get(\"request\");\n    //或者使用魔术方法\n    $request = $di->getRequest();\n\n其它相关文章：\n\n# [PHP程序员如何理解IoC/DI](http://segmentfault.com/a/1190000002411255 \"Link:\nhttp://segmentfault.com/a/1190000002411255\" )\n","slug":"laravel-IoC-DI","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pa3002m9vnzouwyp6h3","content":"<p>参考文章：<a href=\"https://phphub.org/topics/607\" target=\"_blank\" rel=\"external\">https://phphub.org/topics/607</a> (以下内容基本上都摘自该文章)</p>\n<p>IoC这个主题我已经收藏了很久了，直到今天才有空深入地理解了一遍Laravel的IoC模式。</p>\n<p>前几天在使用LeanCloud的Python SDK，我就在想，每次连接LeanCloud的存储服务都需要先创建一个连接，如果要执行其它的操作，那又得新建那<br>个连接了。IoC就是为了解决每次都重复连接的一种编码模式，通过依赖注入减少耦合。</p>\n<p>上面引用的参考文章里已经注明了为什么我们在这种情况下一定要使用依赖注入，这里我就只记录下到底该如何使用该模式。</p>\n<p>Laravel的依赖注入是使用的“容器”这个概念，是一种全局注册表，使用容器的依赖注入作为一种桥梁来解决依赖可以使我们的代码耦合度耕地，很好的降低了组件的复<br>杂性。示例代码如下：</p>\n<pre><code>&lt;?php\n\n\n\n\nclass SomeComponent\\{      # 组件\n    protected $_di;      # 一个私有变量\n\n\n\n\n\npublic function __construct($di)\\{\n    $this-&amp;gt;_di = $di;\n\\}\n\npublic function someDbTask()\\{\n    // 通过get获取connection service总是返回一个新的连接\n    $connection = $this-&amp;gt;_di-&amp;gt;get(&apos;db&apos;);\n\\}\n\npublic function someOtherDbTask()\\{\n    // 和上面不同，这里获取的是共享的连接\n    $connection = $this-&amp;gt;_di-&amp;gt;getShared(&apos;db&apos;);\n\n    //This method also requires a input filtering service\n    $filter = $this-&amp;gt;_db-&amp;gt;get(&apos;filter&apos;);\n\\}\n</code></pre><p>}</p>\n<p>$di = new Phalcon\\DI(); // 创建一个容器</p>\n<p>// 在容器中注册一个名为’db’的服务，用于连接数据库，并返回该连接 $di-&gt;set(‘db’, function(){ return new<br>Connection(array( “host” =&gt; “localhost”, “username” =&gt; “root”, “password” =&gt;<br>“secret”, “dbname” =&gt; “invo” )); });</p>\n<p>// 在容器中注册一个名为’filter’的服务 $di-&gt;set(‘filter’, function(){ return new Filter();<br>});</p>\n<p>// 在容器中注册一个名为’session’的服务 $di-&gt;set(‘session’, function(){ return new<br>Session(); });</p>\n<p>// 将容器作为一个参数传递到构造函数中去 $some = new SomeComponent($di);</p>\n<p>$some-&gt;someTask();</p>\n<p>现在，该组件只有访问某种service的时候才需要它，如果它不需要，它甚至不会被初始化，以节约资源。Phalcon\\DI是一个实现了服务的依赖注入功能的组件<br>，它本身就是一个容器。由于Phalcon高度解耦，Phalcon\\DI是框架用来集成其他组件的必不可少的部分，开发人员也可以使用这个组件依赖注入和管理应用程<br>序中不同类文件的实例。</p>\n<p>在容器中注册服务，框架本身或开发人员都可以注册服务。当一个组件A要求调用组件B(或它的类的一个实例)，可以从容器中请求调用组件B，而不是创建组件B的一个实例<br>。</p>\n<h3 id=\"注入方法\"><a href=\"#注入方法\" class=\"headerlink\" title=\"注入方法\"></a>注入方法</h3><p>服务可以通过以下几种方式注入到容器：</p>\n<pre><code>&lt;?php\n\n\n\n\n// 首先要创建一个依赖注入容器\n$di = new Phalcon\\\\DI();\n\n\n\n\n// 通过类名注入\n$di-&gt;set(&quot;request&quot;, &apos;Phalcon\\\\Http\\\\Request&apos;);\n\n\n\n\n// 通过匿名函数注入Using an anonymous function, the instance will lazy loaded\n$di-&gt;set(&quot;request&quot;, function()\\{\n    return new Phalcon\\\\Http\\\\Request();\n\\});\n\n\n\n\n// 直接用一个实例来注入\n$di-&gt;set(&quot;request&quot;, new Phalcon\\\\Http\\\\Request());\n\n\n\n\n// 通过数组来注入\n$di-&gt;set(&quot;request&quot;, array(\n    &quot;className&quot; =&gt; &apos;Phalcon\\\\Http\\\\Request&apos;,\n    &quot;parameters&quot; =&gt; array(\n            parameter&quot; =&gt; array(\n                &quot;host&quot; =&gt; &quot;localhost&quot;,\n            )\n        )\n    )\n));\n</code></pre><p>在容器中，通过数组，字符串等方式存储的服务都将被延迟加载，即只有在请求对象的时候才被初始化。</p>\n<p>从容器获得服务：</p>\n<pre><code>&lt;?php $request = $di-&gt;get(&quot;request&quot;);\n//或者使用魔术方法\n$request = $di-&gt;getRequest();\n</code></pre><p>其它相关文章：</p>\n<h1 id=\"PHP程序员如何理解IoC-DI-http-segmentfault-com-a-1190000002411255-“Link\"><a href=\"#PHP程序员如何理解IoC-DI-http-segmentfault-com-a-1190000002411255-“Link\" class=\"headerlink\" title=\"[PHP程序员如何理解IoC/DI](http://segmentfault.com/a/1190000002411255 “Link:\"></a>[PHP程序员如何理解IoC/DI](<a href=\"http://segmentfault.com/a/1190000002411255\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000002411255</a> “Link:</h1><p><a href=\"http://segmentfault.com/a/1190000002411255\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000002411255</a>“ )</p>\n","excerpt":"","more":"<p>参考文章：<a href=\"https://phphub.org/topics/607\">https://phphub.org/topics/607</a> (以下内容基本上都摘自该文章)</p>\n<p>IoC这个主题我已经收藏了很久了，直到今天才有空深入地理解了一遍Laravel的IoC模式。</p>\n<p>前几天在使用LeanCloud的Python SDK，我就在想，每次连接LeanCloud的存储服务都需要先创建一个连接，如果要执行其它的操作，那又得新建那<br>个连接了。IoC就是为了解决每次都重复连接的一种编码模式，通过依赖注入减少耦合。</p>\n<p>上面引用的参考文章里已经注明了为什么我们在这种情况下一定要使用依赖注入，这里我就只记录下到底该如何使用该模式。</p>\n<p>Laravel的依赖注入是使用的“容器”这个概念，是一种全局注册表，使用容器的依赖注入作为一种桥梁来解决依赖可以使我们的代码耦合度耕地，很好的降低了组件的复<br>杂性。示例代码如下：</p>\n<pre><code>&lt;?php\n\n\n\n\nclass SomeComponent\\{      # 组件\n    protected $_di;      # 一个私有变量\n\n\n\n\n\npublic function __construct($di)\\{\n    $this-&amp;gt;_di = $di;\n\\}\n\npublic function someDbTask()\\{\n    // 通过get获取connection service总是返回一个新的连接\n    $connection = $this-&amp;gt;_di-&amp;gt;get(&apos;db&apos;);\n\\}\n\npublic function someOtherDbTask()\\{\n    // 和上面不同，这里获取的是共享的连接\n    $connection = $this-&amp;gt;_di-&amp;gt;getShared(&apos;db&apos;);\n\n    //This method also requires a input filtering service\n    $filter = $this-&amp;gt;_db-&amp;gt;get(&apos;filter&apos;);\n\\}\n</code></pre><p>}</p>\n<p>$di = new Phalcon\\DI(); // 创建一个容器</p>\n<p>// 在容器中注册一个名为’db’的服务，用于连接数据库，并返回该连接 $di-&gt;set(‘db’, function(){ return new<br>Connection(array( “host” =&gt; “localhost”, “username” =&gt; “root”, “password” =&gt;<br>“secret”, “dbname” =&gt; “invo” )); });</p>\n<p>// 在容器中注册一个名为’filter’的服务 $di-&gt;set(‘filter’, function(){ return new Filter();<br>});</p>\n<p>// 在容器中注册一个名为’session’的服务 $di-&gt;set(‘session’, function(){ return new<br>Session(); });</p>\n<p>// 将容器作为一个参数传递到构造函数中去 $some = new SomeComponent($di);</p>\n<p>$some-&gt;someTask();</p>\n<p>现在，该组件只有访问某种service的时候才需要它，如果它不需要，它甚至不会被初始化，以节约资源。Phalcon\\DI是一个实现了服务的依赖注入功能的组件<br>，它本身就是一个容器。由于Phalcon高度解耦，Phalcon\\DI是框架用来集成其他组件的必不可少的部分，开发人员也可以使用这个组件依赖注入和管理应用程<br>序中不同类文件的实例。</p>\n<p>在容器中注册服务，框架本身或开发人员都可以注册服务。当一个组件A要求调用组件B(或它的类的一个实例)，可以从容器中请求调用组件B，而不是创建组件B的一个实例<br>。</p>\n<h3 id=\"注入方法\"><a href=\"#注入方法\" class=\"headerlink\" title=\"注入方法\"></a>注入方法</h3><p>服务可以通过以下几种方式注入到容器：</p>\n<pre><code>&lt;?php\n\n\n\n\n// 首先要创建一个依赖注入容器\n$di = new Phalcon\\\\DI();\n\n\n\n\n// 通过类名注入\n$di-&gt;set(&quot;request&quot;, &apos;Phalcon\\\\Http\\\\Request&apos;);\n\n\n\n\n// 通过匿名函数注入Using an anonymous function, the instance will lazy loaded\n$di-&gt;set(&quot;request&quot;, function()\\{\n    return new Phalcon\\\\Http\\\\Request();\n\\});\n\n\n\n\n// 直接用一个实例来注入\n$di-&gt;set(&quot;request&quot;, new Phalcon\\\\Http\\\\Request());\n\n\n\n\n// 通过数组来注入\n$di-&gt;set(&quot;request&quot;, array(\n    &quot;className&quot; =&gt; &apos;Phalcon\\\\Http\\\\Request&apos;,\n    &quot;parameters&quot; =&gt; array(\n            parameter&quot; =&gt; array(\n                &quot;host&quot; =&gt; &quot;localhost&quot;,\n            )\n        )\n    )\n));\n</code></pre><p>在容器中，通过数组，字符串等方式存储的服务都将被延迟加载，即只有在请求对象的时候才被初始化。</p>\n<p>从容器获得服务：</p>\n<pre><code>&lt;?php $request = $di-&gt;get(&quot;request&quot;);\n//或者使用魔术方法\n$request = $di-&gt;getRequest();\n</code></pre><p>其它相关文章：</p>\n<h1 id=\"PHP程序员如何理解IoC-DI-http-segmentfault-com-a-1190000002411255-“Link\"><a href=\"#PHP程序员如何理解IoC-DI-http-segmentfault-com-a-1190000002411255-“Link\" class=\"headerlink\" title=\"[PHP程序员如何理解IoC/DI](http://segmentfault.com/a/1190000002411255 “Link:\"></a>[PHP程序员如何理解IoC/DI](<a href=\"http://segmentfault.com/a/1190000002411255\">http://segmentfault.com/a/1190000002411255</a> “Link:</h1><p><a href=\"http://segmentfault.com/a/1190000002411255\">http://segmentfault.com/a/1190000002411255</a>“ )</p>\n"},{"title":"《卡耐基三部曲》","date":"2014-10-07T15:36:13.000Z","_content":"不知道是因为以前看过太多成功学书籍还是译者没有翻译好，还是我买的版本不对，反正我总感觉这本书，不大好。文笔有点枯燥，和很多成功学书籍差不多。当时买这本书的时\n候还是京东上打折，谁知道买来纸质非常差，而且比32开还小，每本也只有300页左右，一股盗版的感觉，我一直以为京东上是不会买到盗版书的哟。\n\n《人性的弱点》《人性的优点》《语言的突破》，分别出版于1937年、1948年、1926年，我相信，在上个世纪，这本书肯定是给很多人带来了很多的启发，无论是为\n人处事还是商业活动都对一个人有很大的影响，但是现在已经21世纪，书中的观点和很多方法都没有过时，只是这样的书在现在已经泛滥成灾了。任何一个书店的“成功学”分\n类中都能一抓一大把，或许其始祖就是卡耐基的三部曲。\n\n唉，比较失望，也没大从中学到什么。\n\n语录\n\n**什么是进取精神呢？我可以告诉各位：那就是在没有人告诉你应该怎样行事的情况下，就能做出最正确的行动。**\n\n**让自己不停地忙着。忧虑的人一定要让自己沉浸在工作里，否则只有在绝望中挣扎。**\n\n**每个人都会死，但并非每个人都真正地活着。**\n\n**如果你想成为有勇气的人，那么你就去尝试一些至今从没有做过，但却令你胆怯的事情，而且一直做到有相当的成绩为止。**\n\n**一个人的成功，只有15\\%归结于他的专业也只是，还有85\\%归于他表达思想、领导他人及唤起他人热情的能力。**\n\n**人类天性中最深切的冲动，那是“成为重要人物的欲望”。**\n\n**批评是没有用的，因它使人增加一层防御，而且竭力地替自己辩护。批评也是危险的，它会伤害了一个人的自尊和自重的感觉，并激起他的反抗。**\n\n**你所认识的人，你愿意他改变、调整，或是进步吗？是的，那是最好不过的。可是为什么不从你自己先开始呢？**\n\n**要显示一个伟大人物的伟大之处，那就要看他如何对待一个卑微的人。——卡莱尔**\n\n**如果我们是那样的卑贱自私，不从别人身上得到什么，就不愿意分给别人一点快乐，假如我们的气量比一个酸苹果还小，那我们所要遇到的，也绝对是失败。**\n\n**永远使别人感觉重要。**\n\n**在辩论中，获得最大利益的唯一方法，就是避免讨论。**\n\n**称赞最细微的进步，而且称赞每一个进步。**\n\n**婚姻的成功，那不只是寻找一个适当的人，而是自己该如何做一个适当的人。**\n\n**这条路，我只能经过一次，所以，凡我所能为人做的任何好事，任何一点仁慈，让我现在就做吧！不要延迟，不要忽略，因为我将不会再从这里经过了。**\n","source":"_posts/kanaiji.md","raw":"---\ntitle: \"《卡耐基三部曲》\"\ndate: 2014-10-07 23:36:13\ncategories: 韦编三绝\n---\n不知道是因为以前看过太多成功学书籍还是译者没有翻译好，还是我买的版本不对，反正我总感觉这本书，不大好。文笔有点枯燥，和很多成功学书籍差不多。当时买这本书的时\n候还是京东上打折，谁知道买来纸质非常差，而且比32开还小，每本也只有300页左右，一股盗版的感觉，我一直以为京东上是不会买到盗版书的哟。\n\n《人性的弱点》《人性的优点》《语言的突破》，分别出版于1937年、1948年、1926年，我相信，在上个世纪，这本书肯定是给很多人带来了很多的启发，无论是为\n人处事还是商业活动都对一个人有很大的影响，但是现在已经21世纪，书中的观点和很多方法都没有过时，只是这样的书在现在已经泛滥成灾了。任何一个书店的“成功学”分\n类中都能一抓一大把，或许其始祖就是卡耐基的三部曲。\n\n唉，比较失望，也没大从中学到什么。\n\n语录\n\n**什么是进取精神呢？我可以告诉各位：那就是在没有人告诉你应该怎样行事的情况下，就能做出最正确的行动。**\n\n**让自己不停地忙着。忧虑的人一定要让自己沉浸在工作里，否则只有在绝望中挣扎。**\n\n**每个人都会死，但并非每个人都真正地活着。**\n\n**如果你想成为有勇气的人，那么你就去尝试一些至今从没有做过，但却令你胆怯的事情，而且一直做到有相当的成绩为止。**\n\n**一个人的成功，只有15\\%归结于他的专业也只是，还有85\\%归于他表达思想、领导他人及唤起他人热情的能力。**\n\n**人类天性中最深切的冲动，那是“成为重要人物的欲望”。**\n\n**批评是没有用的，因它使人增加一层防御，而且竭力地替自己辩护。批评也是危险的，它会伤害了一个人的自尊和自重的感觉，并激起他的反抗。**\n\n**你所认识的人，你愿意他改变、调整，或是进步吗？是的，那是最好不过的。可是为什么不从你自己先开始呢？**\n\n**要显示一个伟大人物的伟大之处，那就要看他如何对待一个卑微的人。——卡莱尔**\n\n**如果我们是那样的卑贱自私，不从别人身上得到什么，就不愿意分给别人一点快乐，假如我们的气量比一个酸苹果还小，那我们所要遇到的，也绝对是失败。**\n\n**永远使别人感觉重要。**\n\n**在辩论中，获得最大利益的唯一方法，就是避免讨论。**\n\n**称赞最细微的进步，而且称赞每一个进步。**\n\n**婚姻的成功，那不只是寻找一个适当的人，而是自己该如何做一个适当的人。**\n\n**这条路，我只能经过一次，所以，凡我所能为人做的任何好事，任何一点仁慈，让我现在就做吧！不要延迟，不要忽略，因为我将不会再从这里经过了。**\n","slug":"kanaiji","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pa6002o9vnz1binuxlz","content":"<p>不知道是因为以前看过太多成功学书籍还是译者没有翻译好，还是我买的版本不对，反正我总感觉这本书，不大好。文笔有点枯燥，和很多成功学书籍差不多。当时买这本书的时<br>候还是京东上打折，谁知道买来纸质非常差，而且比32开还小，每本也只有300页左右，一股盗版的感觉，我一直以为京东上是不会买到盗版书的哟。</p>\n<p>《人性的弱点》《人性的优点》《语言的突破》，分别出版于1937年、1948年、1926年，我相信，在上个世纪，这本书肯定是给很多人带来了很多的启发，无论是为<br>人处事还是商业活动都对一个人有很大的影响，但是现在已经21世纪，书中的观点和很多方法都没有过时，只是这样的书在现在已经泛滥成灾了。任何一个书店的“成功学”分<br>类中都能一抓一大把，或许其始祖就是卡耐基的三部曲。</p>\n<p>唉，比较失望，也没大从中学到什么。</p>\n<p>语录</p>\n<p><strong>什么是进取精神呢？我可以告诉各位：那就是在没有人告诉你应该怎样行事的情况下，就能做出最正确的行动。</strong></p>\n<p><strong>让自己不停地忙着。忧虑的人一定要让自己沉浸在工作里，否则只有在绝望中挣扎。</strong></p>\n<p><strong>每个人都会死，但并非每个人都真正地活着。</strong></p>\n<p><strong>如果你想成为有勇气的人，那么你就去尝试一些至今从没有做过，但却令你胆怯的事情，而且一直做到有相当的成绩为止。</strong></p>\n<p><strong>一个人的成功，只有15\\%归结于他的专业也只是，还有85\\%归于他表达思想、领导他人及唤起他人热情的能力。</strong></p>\n<p><strong>人类天性中最深切的冲动，那是“成为重要人物的欲望”。</strong></p>\n<p><strong>批评是没有用的，因它使人增加一层防御，而且竭力地替自己辩护。批评也是危险的，它会伤害了一个人的自尊和自重的感觉，并激起他的反抗。</strong></p>\n<p><strong>你所认识的人，你愿意他改变、调整，或是进步吗？是的，那是最好不过的。可是为什么不从你自己先开始呢？</strong></p>\n<p><strong>要显示一个伟大人物的伟大之处，那就要看他如何对待一个卑微的人。——卡莱尔</strong></p>\n<p><strong>如果我们是那样的卑贱自私，不从别人身上得到什么，就不愿意分给别人一点快乐，假如我们的气量比一个酸苹果还小，那我们所要遇到的，也绝对是失败。</strong></p>\n<p><strong>永远使别人感觉重要。</strong></p>\n<p><strong>在辩论中，获得最大利益的唯一方法，就是避免讨论。</strong></p>\n<p><strong>称赞最细微的进步，而且称赞每一个进步。</strong></p>\n<p><strong>婚姻的成功，那不只是寻找一个适当的人，而是自己该如何做一个适当的人。</strong></p>\n<p><strong>这条路，我只能经过一次，所以，凡我所能为人做的任何好事，任何一点仁慈，让我现在就做吧！不要延迟，不要忽略，因为我将不会再从这里经过了。</strong></p>\n","excerpt":"","more":"<p>不知道是因为以前看过太多成功学书籍还是译者没有翻译好，还是我买的版本不对，反正我总感觉这本书，不大好。文笔有点枯燥，和很多成功学书籍差不多。当时买这本书的时<br>候还是京东上打折，谁知道买来纸质非常差，而且比32开还小，每本也只有300页左右，一股盗版的感觉，我一直以为京东上是不会买到盗版书的哟。</p>\n<p>《人性的弱点》《人性的优点》《语言的突破》，分别出版于1937年、1948年、1926年，我相信，在上个世纪，这本书肯定是给很多人带来了很多的启发，无论是为<br>人处事还是商业活动都对一个人有很大的影响，但是现在已经21世纪，书中的观点和很多方法都没有过时，只是这样的书在现在已经泛滥成灾了。任何一个书店的“成功学”分<br>类中都能一抓一大把，或许其始祖就是卡耐基的三部曲。</p>\n<p>唉，比较失望，也没大从中学到什么。</p>\n<p>语录</p>\n<p><strong>什么是进取精神呢？我可以告诉各位：那就是在没有人告诉你应该怎样行事的情况下，就能做出最正确的行动。</strong></p>\n<p><strong>让自己不停地忙着。忧虑的人一定要让自己沉浸在工作里，否则只有在绝望中挣扎。</strong></p>\n<p><strong>每个人都会死，但并非每个人都真正地活着。</strong></p>\n<p><strong>如果你想成为有勇气的人，那么你就去尝试一些至今从没有做过，但却令你胆怯的事情，而且一直做到有相当的成绩为止。</strong></p>\n<p><strong>一个人的成功，只有15\\%归结于他的专业也只是，还有85\\%归于他表达思想、领导他人及唤起他人热情的能力。</strong></p>\n<p><strong>人类天性中最深切的冲动，那是“成为重要人物的欲望”。</strong></p>\n<p><strong>批评是没有用的，因它使人增加一层防御，而且竭力地替自己辩护。批评也是危险的，它会伤害了一个人的自尊和自重的感觉，并激起他的反抗。</strong></p>\n<p><strong>你所认识的人，你愿意他改变、调整，或是进步吗？是的，那是最好不过的。可是为什么不从你自己先开始呢？</strong></p>\n<p><strong>要显示一个伟大人物的伟大之处，那就要看他如何对待一个卑微的人。——卡莱尔</strong></p>\n<p><strong>如果我们是那样的卑贱自私，不从别人身上得到什么，就不愿意分给别人一点快乐，假如我们的气量比一个酸苹果还小，那我们所要遇到的，也绝对是失败。</strong></p>\n<p><strong>永远使别人感觉重要。</strong></p>\n<p><strong>在辩论中，获得最大利益的唯一方法，就是避免讨论。</strong></p>\n<p><strong>称赞最细微的进步，而且称赞每一个进步。</strong></p>\n<p><strong>婚姻的成功，那不只是寻找一个适当的人，而是自己该如何做一个适当的人。</strong></p>\n<p><strong>这条路，我只能经过一次，所以，凡我所能为人做的任何好事，任何一点仁慈，让我现在就做吧！不要延迟，不要忽略，因为我将不会再从这里经过了。</strong></p>\n"},{"title":"【持】那些年我看过的励志视频","date":"2014-08-28T06:12:43.000Z","_content":"# 励志视频\n\n  * [尽管蹂躏(青春版)](http://v.youku.com/v_show/id_XNzYyMTAwOTI0.html)\n  * [火影《青鸟》现场版](http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html \"Link: http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html\" )\n  * [如何成为传说中的“土豪”(不是马云)](http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html \"Link: http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html\" )\n  * [方励《感谢你给我机会上场》](http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html?qq-pf-to=pcqq.group)：随心才能快乐，才是真正的成功，钱没那么重要\n  * [岛国热血广告——人生不是场马拉松](http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html \"Link: http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html\" )\n  * 谁的青春不热血：孩子永远走的和父亲相似的道路\n  * [为什么你干不成一番事业](http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html \"Link: http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html\" )\n  * [《开奖啦》李亚鹏：心有所愿行而成力](http://www.iqiyi.com/v_19rrh8g098.html \"Link: http://www.iqiyi.com/v_19rrh8g098.html\" )\n  * [我今年二十七八岁](http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm \"Link: http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm\" )\n  * [再一次，为平凡人喝彩](http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm \"Link: http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm\" )\n  * [星空日记](http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm \"Link: http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm\" )：\n\n# 励志歌曲\n\n机器铃 砍菜刀\n","source":"_posts/inspirational-video.md","raw":"---\ntitle: \"【持】那些年我看过的励志视频\"\ndate: 2014-08-28 14:12:43\ncategories: 韦编三绝\n---\n# 励志视频\n\n  * [尽管蹂躏(青春版)](http://v.youku.com/v_show/id_XNzYyMTAwOTI0.html)\n  * [火影《青鸟》现场版](http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html \"Link: http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html\" )\n  * [如何成为传说中的“土豪”(不是马云)](http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html \"Link: http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html\" )\n  * [方励《感谢你给我机会上场》](http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html?qq-pf-to=pcqq.group)：随心才能快乐，才是真正的成功，钱没那么重要\n  * [岛国热血广告——人生不是场马拉松](http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html \"Link: http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html\" )\n  * 谁的青春不热血：孩子永远走的和父亲相似的道路\n  * [为什么你干不成一番事业](http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html \"Link: http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html\" )\n  * [《开奖啦》李亚鹏：心有所愿行而成力](http://www.iqiyi.com/v_19rrh8g098.html \"Link: http://www.iqiyi.com/v_19rrh8g098.html\" )\n  * [我今年二十七八岁](http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm \"Link: http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm\" )\n  * [再一次，为平凡人喝彩](http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm \"Link: http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm\" )\n  * [星空日记](http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm \"Link: http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm\" )：\n\n# 励志歌曲\n\n机器铃 砍菜刀\n","slug":"inspirational-video","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pa8002q9vnzu7y8o4n5","content":"<h1 id=\"励志视频\"><a href=\"#励志视频\" class=\"headerlink\" title=\"励志视频\"></a>励志视频</h1><ul>\n<li><a href=\"http://v.youku.com/v_show/id_XNzYyMTAwOTI0.html\" target=\"_blank\" rel=\"external\">尽管蹂躏(青春版)</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html\" title=\"Link: http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html\" target=\"_blank\" rel=\"external\">火影《青鸟》现场版</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html\" title=\"Link: http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html\" target=\"_blank\" rel=\"external\">如何成为传说中的“土豪”(不是马云)</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html?qq-pf-to=pcqq.group\" target=\"_blank\" rel=\"external\">方励《感谢你给我机会上场》</a>：随心才能快乐，才是真正的成功，钱没那么重要</li>\n<li><a href=\"http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html\" title=\"Link: http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html\" target=\"_blank\" rel=\"external\">岛国热血广告——人生不是场马拉松</a></li>\n<li>谁的青春不热血：孩子永远走的和父亲相似的道路</li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html\" title=\"Link: http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html\" target=\"_blank\" rel=\"external\">为什么你干不成一番事业</a></li>\n<li><a href=\"http://www.iqiyi.com/v_19rrh8g098.html\" title=\"Link: http://www.iqiyi.com/v_19rrh8g098.html\" target=\"_blank\" rel=\"external\">《开奖啦》李亚鹏：心有所愿行而成力</a></li>\n<li><a href=\"http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm\" title=\"Link: http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm\" target=\"_blank\" rel=\"external\">我今年二十七八岁</a></li>\n<li><a href=\"http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm\" title=\"Link: http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm\" target=\"_blank\" rel=\"external\">再一次，为平凡人喝彩</a></li>\n<li><a href=\"http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm\" title=\"Link: http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm\" target=\"_blank\" rel=\"external\">星空日记</a>：</li>\n</ul>\n<h1 id=\"励志歌曲\"><a href=\"#励志歌曲\" class=\"headerlink\" title=\"励志歌曲\"></a>励志歌曲</h1><p>机器铃 砍菜刀</p>\n","excerpt":"","more":"<h1 id=\"励志视频\"><a href=\"#励志视频\" class=\"headerlink\" title=\"励志视频\"></a>励志视频</h1><ul>\n<li><a href=\"http://v.youku.com/v_show/id_XNzYyMTAwOTI0.html\">尽管蹂躏(青春版)</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html\" title=\"Link: http://v.youku.com/v_show/id_XNzU0MDMxOTUy.html\">火影《青鸟》现场版</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html\" title=\"Link: http://v.youku.com/v_show/id_XNzg2Nzk5Njcy.html\">如何成为传说中的“土豪”(不是马云)</a></li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzg2MDQyNzYw.html?qq-pf-to=pcqq.group\">方励《感谢你给我机会上场》</a>：随心才能快乐，才是真正的成功，钱没那么重要</li>\n<li><a href=\"http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html\" title=\"Link: http://v.youku.com/v_show/id_XNjc1NDAzMjQ4.html\">岛国热血广告——人生不是场马拉松</a></li>\n<li>谁的青春不热血：孩子永远走的和父亲相似的道路</li>\n<li><a href=\"http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html\" title=\"Link: http://v.youku.com/v_show/id_XNzQ0NjI4MTgw.html\">为什么你干不成一番事业</a></li>\n<li><a href=\"http://www.iqiyi.com/v_19rrh8g098.html\" title=\"Link: http://www.iqiyi.com/v_19rrh8g098.html\">《开奖啦》李亚鹏：心有所愿行而成力</a></li>\n<li><a href=\"http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm\" title=\"Link: http://www.miaopai.com/show/QOOHNbAkLLhNm8tgTujs5g__.htm\">我今年二十七八岁</a></li>\n<li><a href=\"http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm\" title=\"Link: http://www.miaopai.com/show/g1YsnG3zN58ce0dAfL8IPQ__.htm\">再一次，为平凡人喝彩</a></li>\n<li><a href=\"http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm\" title=\"Link: http://www.miaopai.com/show/QVe50grNG0tRcYdS-VMyHQ__.htm\">星空日记</a>：</li>\n</ul>\n<h1 id=\"励志歌曲\"><a href=\"#励志歌曲\" class=\"headerlink\" title=\"励志歌曲\"></a>励志歌曲</h1><p>机器铃 砍菜刀</p>\n"},{"title":"内网穿透方案","date":"2015-12-03T23:39:55.000Z","_content":"##### 背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\n要公网IP是要独立宽带，公网IP和共享宽带明明是两个概念好不好，你可以封80端口，但是其它什么端口至少给我留一个总行吧，客服没用，就只能自己动手了。  \n\n## 方案一：SSH Tunnel\n\n使用SSH进行的Tunnel进行端口转发，对于不需要访问desktop来说是最简单的一种内网穿透方案，当然，唯一的要求是你得有一个有公网IP的服务器做代理。  \n\n  1. 首先，在内网主机上执行ssh命令：  \n\n\n        ssh -NfR 外网ssh端口号:localhost:本地ssh端口号 远端IP\n\n  2. 在代理服务器上执行通过ssh连接内网的服务器：  \n\n\n        ssh -p 刚才定义的远程端口号  localhost\n\n  3. SSH太容易掉线了，为了不掉线，有多种方法：  \n\n\n        # 首先，修改SSH配置\n    代理服务器段：vim /etc/ssh/sshd_config，修改或新增如下两项\n\n\n    ClinetAliveInterval 60\n    ClientAliveCountMax 10\n    然后重启SSH服务：service sshd restart\n\n    内网服务器端：vim /etc/ssh/ssh_config，修改或新增\n\n\n    Host *\n    ServerAliveInterval 30\n\n    # 但其实，这两种方法都还是容易掉线，接下来，终极解决方案  \n\n\n\n    写一个python脚本，然后nohup keepalived.py &，在脚本里新建一个ssh连接，不断发送空格即可\n    \n\t```\n\t#!/usr/bin/python\n\t#coding: utf-8\n\timport paramiko, time\n\n\tclass myssh():  \n\t\tdef **init**(self, ip, port, username, password):  \n\t\tself.ssh = paramiko.SSHClient()  \n    \tself.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  \n\t\tself.ssh.connect(ip, port, username, password, timeout=5)  \n\n\t\tdef exec(self, cmd):  \n\t\t\treturn self.ssh.exec_command(cmd)  \n\n\tif '__name__ == '__main__':  \n\t\tssh = myssh('localhost', 8022, 'haofly', '896499825')  \n\t\twhile True:  \n\t\t\tssh.exec(' ')  \n\t\t\ttime.sleep(30)  \n\t\tssh.close()\n\n**推荐阅读**：  \n[几个内网穿透，内网网站穿透，内网端口映射到公网的服务推荐](https://v2ex.com/t/268495#reply11)\n","source":"_posts/internal-network-penetration.md","raw":"---\ntitle: \"内网穿透方案\"\ndate: 2015-12-04 07:39:55\ncategories: 编程之路\n---\n##### 背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\n要公网IP是要独立宽带，公网IP和共享宽带明明是两个概念好不好，你可以封80端口，但是其它什么端口至少给我留一个总行吧，客服没用，就只能自己动手了。  \n\n## 方案一：SSH Tunnel\n\n使用SSH进行的Tunnel进行端口转发，对于不需要访问desktop来说是最简单的一种内网穿透方案，当然，唯一的要求是你得有一个有公网IP的服务器做代理。  \n\n  1. 首先，在内网主机上执行ssh命令：  \n\n\n        ssh -NfR 外网ssh端口号:localhost:本地ssh端口号 远端IP\n\n  2. 在代理服务器上执行通过ssh连接内网的服务器：  \n\n\n        ssh -p 刚才定义的远程端口号  localhost\n\n  3. SSH太容易掉线了，为了不掉线，有多种方法：  \n\n\n        # 首先，修改SSH配置\n    代理服务器段：vim /etc/ssh/sshd_config，修改或新增如下两项\n\n\n    ClinetAliveInterval 60\n    ClientAliveCountMax 10\n    然后重启SSH服务：service sshd restart\n\n    内网服务器端：vim /etc/ssh/ssh_config，修改或新增\n\n\n    Host *\n    ServerAliveInterval 30\n\n    # 但其实，这两种方法都还是容易掉线，接下来，终极解决方案  \n\n\n\n    写一个python脚本，然后nohup keepalived.py &，在脚本里新建一个ssh连接，不断发送空格即可\n    \n\t```\n\t#!/usr/bin/python\n\t#coding: utf-8\n\timport paramiko, time\n\n\tclass myssh():  \n\t\tdef **init**(self, ip, port, username, password):  \n\t\tself.ssh = paramiko.SSHClient()  \n    \tself.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  \n\t\tself.ssh.connect(ip, port, username, password, timeout=5)  \n\n\t\tdef exec(self, cmd):  \n\t\t\treturn self.ssh.exec_command(cmd)  \n\n\tif '__name__ == '__main__':  \n\t\tssh = myssh('localhost', 8022, 'haofly', '896499825')  \n\t\twhile True:  \n\t\t\tssh.exec(' ')  \n\t\t\ttime.sleep(30)  \n\t\tssh.close()\n\n**推荐阅读**：  \n[几个内网穿透，内网网站穿透，内网端口映射到公网的服务推荐](https://v2ex.com/t/268495#reply11)\n","slug":"internal-network-penetration","published":1,"updated":"2016-04-26T08:51:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pab002s9vnzpb9z1ze8","content":"<h5 id=\"背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\"><a href=\"#背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\" class=\"headerlink\" title=\"背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\"></a>背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我</h5><p>要公网IP是要独立宽带，公网IP和共享宽带明明是两个概念好不好，你可以封80端口，但是其它什么端口至少给我留一个总行吧，客服没用，就只能自己动手了。  </p>\n<h2 id=\"方案一：SSH-Tunnel\"><a href=\"#方案一：SSH-Tunnel\" class=\"headerlink\" title=\"方案一：SSH Tunnel\"></a>方案一：SSH Tunnel</h2><p>使用SSH进行的Tunnel进行端口转发，对于不需要访问desktop来说是最简单的一种内网穿透方案，当然，唯一的要求是你得有一个有公网IP的服务器做代理。  </p>\n<ol>\n<li>首先，在内网主机上执行ssh命令：  </li>\n</ol>\n<pre><code>ssh -NfR 外网ssh端口号:localhost:本地ssh端口号 远端IP\n</code></pre><ol>\n<li>在代理服务器上执行通过ssh连接内网的服务器：  </li>\n</ol>\n<pre><code>ssh -p 刚才定义的远程端口号  localhost\n</code></pre><ol>\n<li>SSH太容易掉线了，为了不掉线，有多种方法：  </li>\n</ol>\n<pre><code>    # 首先，修改SSH配置\n代理服务器段：vim /etc/ssh/sshd_config，修改或新增如下两项\n\n\nClinetAliveInterval 60\nClientAliveCountMax 10\n然后重启SSH服务：service sshd restart\n\n内网服务器端：vim /etc/ssh/ssh_config，修改或新增\n\n\nHost *\nServerAliveInterval 30\n\n# 但其实，这两种方法都还是容易掉线，接下来，终极解决方案  \n\n\n\n写一个python脚本，然后nohup keepalived.py &amp;，在脚本里新建一个ssh连接，不断发送空格即可\n\n```\n#!/usr/bin/python\n#coding: utf-8\nimport paramiko, time\n\nclass myssh():  \n    def **init**(self, ip, port, username, password):  \n    self.ssh = paramiko.SSHClient()  \n    self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  \n    self.ssh.connect(ip, port, username, password, timeout=5)  \n\n    def exec(self, cmd):  \n        return self.ssh.exec_command(cmd)  \n\nif &apos;__name__ == &apos;__main__&apos;:  \n    ssh = myssh(&apos;localhost&apos;, 8022, &apos;haofly&apos;, &apos;896499825&apos;)  \n    while True:  \n        ssh.exec(&apos; &apos;)  \n        time.sleep(30)  \n    ssh.close()\n</code></pre><p><strong>推荐阅读</strong>：<br><a href=\"https://v2ex.com/t/268495#reply11\" target=\"_blank\" rel=\"external\">几个内网穿透，内网网站穿透，内网端口映射到公网的服务推荐</a></p>\n","excerpt":"","more":"<h5 id=\"背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\"><a href=\"#背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\" class=\"headerlink\" title=\"背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我\"></a>背景：天朝大局域网，网上都说可以打电话叫客服切换到公网IP，但是电信、移动宽带，无论打客服还是安装师傅，居然从上到下都不知道公网IP是什么，他们以为我</h5><p>要公网IP是要独立宽带，公网IP和共享宽带明明是两个概念好不好，你可以封80端口，但是其它什么端口至少给我留一个总行吧，客服没用，就只能自己动手了。  </p>\n<h2 id=\"方案一：SSH-Tunnel\"><a href=\"#方案一：SSH-Tunnel\" class=\"headerlink\" title=\"方案一：SSH Tunnel\"></a>方案一：SSH Tunnel</h2><p>使用SSH进行的Tunnel进行端口转发，对于不需要访问desktop来说是最简单的一种内网穿透方案，当然，唯一的要求是你得有一个有公网IP的服务器做代理。  </p>\n<ol>\n<li>首先，在内网主机上执行ssh命令：  </li>\n</ol>\n<pre><code>ssh -NfR 外网ssh端口号:localhost:本地ssh端口号 远端IP\n</code></pre><ol>\n<li>在代理服务器上执行通过ssh连接内网的服务器：  </li>\n</ol>\n<pre><code>ssh -p 刚才定义的远程端口号  localhost\n</code></pre><ol>\n<li>SSH太容易掉线了，为了不掉线，有多种方法：  </li>\n</ol>\n<pre><code>    # 首先，修改SSH配置\n代理服务器段：vim /etc/ssh/sshd_config，修改或新增如下两项\n\n\nClinetAliveInterval 60\nClientAliveCountMax 10\n然后重启SSH服务：service sshd restart\n\n内网服务器端：vim /etc/ssh/ssh_config，修改或新增\n\n\nHost *\nServerAliveInterval 30\n\n# 但其实，这两种方法都还是容易掉线，接下来，终极解决方案  \n\n\n\n写一个python脚本，然后nohup keepalived.py &amp;，在脚本里新建一个ssh连接，不断发送空格即可\n\n```\n#!/usr/bin/python\n#coding: utf-8\nimport paramiko, time\n\nclass myssh():  \n    def **init**(self, ip, port, username, password):  \n    self.ssh = paramiko.SSHClient()  \n    self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  \n    self.ssh.connect(ip, port, username, password, timeout=5)  \n\n    def exec(self, cmd):  \n        return self.ssh.exec_command(cmd)  \n\nif &apos;__name__ == &apos;__main__&apos;:  \n    ssh = myssh(&apos;localhost&apos;, 8022, &apos;haofly&apos;, &apos;896499825&apos;)  \n    while True:  \n        ssh.exec(&apos; &apos;)  \n        time.sleep(30)  \n    ssh.close()\n</code></pre><p><strong>推荐阅读</strong>：<br><a href=\"https://v2ex.com/t/268495#reply11\">几个内网穿透，内网网站穿透，内网端口映射到公网的服务推荐</a></p>\n"},{"title":"[转]Laravel学习笔记——神奇的服务容器","date":"2015-07-10T12:11:49.000Z","_content":"原文地址：<https://www.insp.top/learn-laravel-container>\n\n转注：本文详细介绍了依赖注入以及Laravel IoC容器的原理，深入浅出，十分容易让人理解。\n\n**控制反转(IoC)**：由外部负责其依赖需求的行为\n\n**依赖注入(DI)**：只要不是由内部生产，而是由外部以参数或其他形式注入的，都属于依赖注入\n\n_容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是\n文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦”\n、“依赖注入（DI）”。本文就从这里开始。_\n\n# IoC 容器， laravel 的核心\n\nLaravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概\n念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。\n\n本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 laravel\n服务容器的用法建议阅读文档即可。\n\n# IoC 容器诞生的故事\n\n讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。\n\n## 超人和超能力，依赖的产生！\n\n面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为\n一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。\n\n_怪物横行的世界，总归需要点超级人物来摆平。_\n\n我们把一个“超人”作为一个类，\n\n\n\n    class Superman \\{\\}\n\n我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方\n法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：\n\n\n\n    class Power \\{\n        /*_\n        * 能力值\n        _/\n        protected $ability;\n\n\n\n\n\n    /**\n    * 能力范围或距离\n    */\n    protected $range;\n\n    public function __construct($ability, $range)\n    \\{\n        $this-&gt;ability = $ability;\n        $this-&gt;range = $range;\n    \\}\n\n\n\\}\n\n这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct()\n    \\{\n        $this-&gt;power = new Power(999, 100);\n    \\}\n\n\n\\}\n\n这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。\n\n_所谓“依赖”，就是“我若依赖你，少了你就没有我”。_\n\n在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎\n样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。\n\n## 一堆乱麻 —— 可怕的依赖\n\n之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现\n在进行修改，我们假设超人可以有以下多种超能力：\n\n  * 飞行，属性有：飞行速度、持续飞行时间\n  * 蛮力，属性有：力量值\n  * 能量弹，属性有：伤害值、射击距离、同时射击个数\n我们创建了如下类：\n\n\n\n    class Flight\n    \\{\n        protected $speed;\n        protected $holdtime;\n        public function __construct($speed, $holdtime) \\{\\}\n    \\}\n\n\n\n\n    class Force\n    \\{\n        protected $force;\n        public function __construct($force) \\{\\}\n    \\}\n\n\n\n\n    class Shot\n    \\{\n        protected $atk;\n        protected $range;\n        protected $limit;\n        public function **construct($atk, $range, $limit) \\{\\}\n    \\}\n\n*为了省事儿我没有详细写出 **construct() 这个构造函数的全部，只写了需要传递的参数。\n\n好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下：\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct()\n    \\{\n        $this-&gt;power = new Fight(9, 100);\n        // $this-&gt;power = new Force(45);\n        // $this-&gt;power = new Shot(99, 50, 2);\n        /*\n        $this-&gt;power = array(\n            new Force(45),\n            new Shot(99, 50, 2)\n        );\n        */\n    \\}\n\n\n\\}\n\n我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 新的\n超能力，或者需要 变更 超能力的方法，我们必须 重新改造\n超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。\n\n_这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来\n过了。_\n\n对，就是这样的。\n\n我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为\n“模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组”\n满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。\n\n## 工厂模式，依赖转移！\n\n当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。\n\n_我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式：\n工厂模式。_\n\n工厂模式，顾名思义，就是一个类所以依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。\n\n我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：\n\n\n\n    class SuperModuleFactory\n    \\{\n        public function makeModule($moduleName, $options)\n        \\{\n           switch ($moduleName) \\{\n               case 'Fight': return new Fight($options[0], $options[1]);\n               case 'Force': return new Force($options[0]);\n               case 'Shot': return new Shot($options[0], $options[1], $options[2]);\n           \\}\n        \\}\n    \\}\n\n这时候，超人 创建之初就可以使用这个工厂！\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct()\n    \\{\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        $this-&gt;power = $factory-&gt;makeModule('Fight', [9, 100]);\n        // $this-&gt;power = $factory-&gt;makeModule('Force', [45]);\n        // $this-&gt;power = $factory-&gt;makeModule('Shot', [99, 50, 2]);\n        /*\n        $this-&gt;power = array(\n            $factory-&gt;makeModule('Force', [45]),\n            $factory-&gt;makeModule('Shot', [99, 50, 2])\n        );\n        */\n    \\}\n\n\n\\}\n\n可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new\n关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct(array $modules)\n    \\{\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        foreach ($modules as $moduleName =&gt; $moduleOptions) \\{\n            $this-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);\n        \\}\n    \\}\n\n\n\\}\n\n// 创建超人 $superman = new Superman([ 'Fight' => [9, 100], 'Shot' => [99, 50, 2]\n]);\n\n现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改\nSuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。\n\n## 再进一步！IoC 容器的重要组成 —— 依赖注入！\n\n由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂”\n的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂”\n的依赖。假如工厂出了点麻烦，问题变得就很棘手。\n\n_其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不\n够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。_\n\n我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。\n\n事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 ——\n由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：\n\n\n\n    class SuperModuleFactory\n    \\{\n        public function makeModule($moduleName, $options)\n        \\{\n           switch ($moduleName) \\{\n                case 'Fight': return new Fight($options[0], $options[1]);\n                case 'Force': return new Force($options[0]);\n                case 'Shot': return new Shot($options[0], $options[1], $options[2]);\n                // case 'more': .......\n                // case 'and more': .......\n                // case 'and more': .......\n                // case 'oh no! its too many!': .......\n            \\}\n        \\}\n    \\}\n\n看到没。。。噩梦般的感受！\n\n_其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）_\n\n由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是\n对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。\n\n\n\n    interface SuperModuleInterface\n    \\{\n        /**\n        * 超能力激活方法\n        _\n        * 任何一个超能力都得有该方法，并拥有一个参数\n        _@param array $target 针对目标，可以是一个或多个，自己或他人\n        */\n        public function activate(array $target);\n    \\}\n\n_上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。_\n\n_其实，这就是 php 中 接口（ interface ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C#\n之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object）\n本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（c\nlass），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。_\n\n_虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。_\n\n这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：\n\n\n\n    /**\n    _ X-超能量\n    _/\n    class XPower implements SuperModuleInterface\n    \\{\n        public function activate(array $target)\n        \\{\n            // 这只是个例子。。具体自行脑补\n        \\}\n    \\}\n\n\n\n\n    /__\n    _ 终极炸弹 （就这么俗）\n    _/\n    class UltraBomb implements SuperModuleInterface\n    \\{\n        public function activate(array $target)\n        \\{\n            // 这只是个例子。。具体自行脑补\n        \\}\n    \\}\n\n同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：\n\n\n\n    class Superman\n    \\{\n        protected $module;\n\n\n\n\n\n    public function __construct(SuperModuleInterface $module)\n    \\{\n        $this-&gt;module = $module\n    \\}\n\n\n\\}\n\n改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 SuperModuleInterface 接口的实现。否则就会提示错误。\n\n正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超\n人更容易变多，我们也不怕怪兽啦！\n\n_现在有人疑惑了，你要讲的 依赖注入 呢？_\n\n_其实，上面讲的内容，正是依赖注入。_\n\n什么叫做 依赖注入？\n\n本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new\n的），而是由外部以参数或其他形式注入的，都属于 依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：\n\n\n\n    // 超能力模组\n    $superModule = new XPower;\n\n\n\n\n    // 初始化一个超人，并注入一个超能力模组依赖\n    $superMan = new Superman($superModule);\n\n关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……\n\n## 更为先进的工厂 —— IoC 容器！\n\n刚刚列了一段代码：\n\n\n\n    $superModule = new XPower;\n\n\n\n\n    $superMan = new Superman($superModule);\n\n读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。\n\n_现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。_\n\n一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，\n工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。\n\n\n\n    class Container\n    \\{\n        protected $binds;\n\n\n\n\n\n    protected $instances;\n\n    public function bind($abstract, $concrete)\n    \\{\n        if ($concrete instanceof Closure) \\{\n            $this-&gt;binds[$abstract] = $concrete;\n        \\} else \\{\n            $this-&gt;instances[$abstract] = $concrete;\n        \\}\n    \\}\n\n    public function make($abstract, $parameters = [])\n    \\{\n       if (isset($this-&gt;instances[$abstract])) \\{\n            return $this-&gt;instances[$abstract];\n       \\}\n\n       array_unshift($parameters, $this);\n\n       return call_user_func_array($this-&gt;binds[$abstract], $parameters);\n    \\}\n\n\n\\}\n\n这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！\n\n\n\n    // 创建一个容器（后面称作超级工厂）\n    $container = new Container;\n\n\n\n\n    // 向该 超级工厂 添加 超人 的生产脚本\n    $container->bind('superman', function($container, $moduleName) \\{\n        return new Superman($container->make($moduleName));\n    \\});\n\n\n\n\n    // 向该 超级工厂 添加 超能力模组 的生产脚本\n    $container->bind('xpower', function($container) \\{\n        return new XPower;\n    \\});\n\n\n\n\n    // 同上\n    $container->bind('ultrabomb', function($container) \\{\n        return new UltraBomb;\n    \\});\n\n\n\n\n    // **_*_****_*_****_* 华丽丽的分割线 _****_*_****_*_*******\n    // 开始启动生产\n    $superman_1 = $container->make('superman', 'xpower');\n    $superman_2 = $container->make('superman', 'ultrabomb');\n    $superman_3 = $container->make('superman', 'xpower');\n    // ...随意添加\n\n看到没？通过最初的 绑定（bind） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人\n与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名\n函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（make） 操作被调用执行时，才会触发。\n\n这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。\n\n_实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC\n容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel\n框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。_\n\n_不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 反射（Reflection） 实现的，恰好的，php 完美的支持反射机制！关于反射，php\n官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！_\n\n_http://php.net/manual/zh/book.reflection.php_\n\n现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是\n哦 ！\n\n# 回归正常世界。我们开始重新审视 laravel 的核心。\n\n现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。\n\n可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如Route（路由）、Eloquent\nORM（数据库 ORM 组件）、Request and\nResponse（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel\n的服务容器负责的。\n\n我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：\n\n\n\n    Route::get('/', function() \\{\n        // bla bla bla...\n    \\});\n\n实际上， Route 类被定义在这个命名空间：Illuminate\\\\Routing\\\\Router，文件vendor/laravel/framework/sr\nc/Illuminate/Routing/Router.php。\n\n我们通过打开发现，这个类的这一系列方法，如 get，post，any 等都不是静态（static）方法，这是怎么一回事儿？不要急，我们继续。\n\n## 服务提供者\n\n我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。\n\n对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel\n称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是\n服务提供者（ServiceProvider）。\n\n_虽然，绑定一个类到容器不一定非要通过 服务提供者（ServiceProvider） 。_\n\n_但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，laravel\n将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的 服务提供者。_\n_服务提供者主要分为两个部分，register（注册） 和 boot（引导、初始化），具体参考文档。register\n负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 boot 部分。_\n\n## Facade\n\n我们现在解答之前关于 Route 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法__callSta\ntic，并将该静态方法映射到真正的方法上。\n\n我们使用的 Route 类实际上是 Illuminate\\\\Support\\\\Facades\\\\Route 通过 class_alias() 函数创造的 别名\n而已，这个类被定义在文件\nvendor/laravel/framework/src/Illuminate/Support/Facades/Route.php。\n\n我们打开文件一看……诶？怎么只有这么简单的一段代码呢？\n\n\n\n    <?php namespace Illuminate\\\\Support\\\\Facades;\n\n\n\n\n    /__\n    _ @see \\\\Illuminate\\\\Routing\\\\Router\n    _/\n    class Route extends Facade \\{\n\n\n\n\n\n    /**\n    * Get the registered name of the component.\n    *\n    * @return string\n    */\n    protected static function getFacadeAccessor()\n    \\{\n        return 'router';\n    \\}\n\n\n\\}\n\n其实仔细看，会发现这个类继承了一个叫做 Facade 的类，到这里谜底差不多要解开了。\n\n上述简单的定义中，我们看到了 getFacadeAccessor 方法返回了一个 route，这是什么意思呢？事实上，这个值被一个\nServiceProvider 注册过，大家应该知道注册了个什么，当然是那个真正的路由类！\n\n_有人会问，Facade\n是怎么实现的。我并不想说得太细，一个是我懒，另一个原因就是，自己发现一些东西更容易理解，并不容易忘记。很多细节我已经说了，建议大家自行去研究。_\n\n至此，我们已经讲的差不多了。\n\n# 和平！我们该总结总结了！\n\n无论如何，世界和平了。\n\n这里要总结的内容就是，其实很多事情并不复杂，怕的是复杂的理论内容。我觉得很多东西一旦想通也就那么回事儿。很多人觉得 laravel\n这不好那不好、这里难哪里难，我只能说，laravel 的确不是一流和优秀的框架，说 laravel 是一流、优秀的框架的人，不是 laravel\n的粉丝那么就是跟风炒作。Laravel 最大的特点和优秀之处就是使用了很多 php 比较新（实际上并不新）的概念和技术（也就一堆语法糖）而已。因此\nlaravel 的确符合一个适宜学习的框架。Laravel 的构思的确和其他框架有很大不同，这也要求学习他的人必须熟练 php，并 基础扎实！如果你觉得学\nlaravel 框架十分困难，那么原因只有一个：你 php 基础不好。\n\n另外，善于利用命名空间和面向对象的诸多特性，去追寻一些东西，你会发现，原来这一切这么容易。\n","source":"_posts/laravel-container.md","raw":"---\ntitle: \"[转]Laravel学习笔记——神奇的服务容器\"\ndate: 2015-07-10 20:11:49\ncategories: 韦编三绝\n---\n原文地址：<https://www.insp.top/learn-laravel-container>\n\n转注：本文详细介绍了依赖注入以及Laravel IoC容器的原理，深入浅出，十分容易让人理解。\n\n**控制反转(IoC)**：由外部负责其依赖需求的行为\n\n**依赖注入(DI)**：只要不是由内部生产，而是由外部以参数或其他形式注入的，都属于依赖注入\n\n_容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是\n文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦”\n、“依赖注入（DI）”。本文就从这里开始。_\n\n# IoC 容器， laravel 的核心\n\nLaravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概\n念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。\n\n本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 laravel\n服务容器的用法建议阅读文档即可。\n\n# IoC 容器诞生的故事\n\n讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。\n\n## 超人和超能力，依赖的产生！\n\n面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为\n一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。\n\n_怪物横行的世界，总归需要点超级人物来摆平。_\n\n我们把一个“超人”作为一个类，\n\n\n\n    class Superman \\{\\}\n\n我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方\n法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：\n\n\n\n    class Power \\{\n        /*_\n        * 能力值\n        _/\n        protected $ability;\n\n\n\n\n\n    /**\n    * 能力范围或距离\n    */\n    protected $range;\n\n    public function __construct($ability, $range)\n    \\{\n        $this-&gt;ability = $ability;\n        $this-&gt;range = $range;\n    \\}\n\n\n\\}\n\n这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct()\n    \\{\n        $this-&gt;power = new Power(999, 100);\n    \\}\n\n\n\\}\n\n这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。\n\n_所谓“依赖”，就是“我若依赖你，少了你就没有我”。_\n\n在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎\n样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。\n\n## 一堆乱麻 —— 可怕的依赖\n\n之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现\n在进行修改，我们假设超人可以有以下多种超能力：\n\n  * 飞行，属性有：飞行速度、持续飞行时间\n  * 蛮力，属性有：力量值\n  * 能量弹，属性有：伤害值、射击距离、同时射击个数\n我们创建了如下类：\n\n\n\n    class Flight\n    \\{\n        protected $speed;\n        protected $holdtime;\n        public function __construct($speed, $holdtime) \\{\\}\n    \\}\n\n\n\n\n    class Force\n    \\{\n        protected $force;\n        public function __construct($force) \\{\\}\n    \\}\n\n\n\n\n    class Shot\n    \\{\n        protected $atk;\n        protected $range;\n        protected $limit;\n        public function **construct($atk, $range, $limit) \\{\\}\n    \\}\n\n*为了省事儿我没有详细写出 **construct() 这个构造函数的全部，只写了需要传递的参数。\n\n好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下：\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct()\n    \\{\n        $this-&gt;power = new Fight(9, 100);\n        // $this-&gt;power = new Force(45);\n        // $this-&gt;power = new Shot(99, 50, 2);\n        /*\n        $this-&gt;power = array(\n            new Force(45),\n            new Shot(99, 50, 2)\n        );\n        */\n    \\}\n\n\n\\}\n\n我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 新的\n超能力，或者需要 变更 超能力的方法，我们必须 重新改造\n超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。\n\n_这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来\n过了。_\n\n对，就是这样的。\n\n我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为\n“模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组”\n满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。\n\n## 工厂模式，依赖转移！\n\n当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。\n\n_我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式：\n工厂模式。_\n\n工厂模式，顾名思义，就是一个类所以依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。\n\n我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：\n\n\n\n    class SuperModuleFactory\n    \\{\n        public function makeModule($moduleName, $options)\n        \\{\n           switch ($moduleName) \\{\n               case 'Fight': return new Fight($options[0], $options[1]);\n               case 'Force': return new Force($options[0]);\n               case 'Shot': return new Shot($options[0], $options[1], $options[2]);\n           \\}\n        \\}\n    \\}\n\n这时候，超人 创建之初就可以使用这个工厂！\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct()\n    \\{\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        $this-&gt;power = $factory-&gt;makeModule('Fight', [9, 100]);\n        // $this-&gt;power = $factory-&gt;makeModule('Force', [45]);\n        // $this-&gt;power = $factory-&gt;makeModule('Shot', [99, 50, 2]);\n        /*\n        $this-&gt;power = array(\n            $factory-&gt;makeModule('Force', [45]),\n            $factory-&gt;makeModule('Shot', [99, 50, 2])\n        );\n        */\n    \\}\n\n\n\\}\n\n可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new\n关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。\n\n\n\n    class Superman\n    \\{\n        protected $power;\n\n\n\n\n\n    public function __construct(array $modules)\n    \\{\n        // 初始化工厂\n        $factory = new SuperModuleFactory;\n\n        // 通过工厂提供的方法制造需要的模块\n        foreach ($modules as $moduleName =&gt; $moduleOptions) \\{\n            $this-&gt;power[] = $factory-&gt;makeModule($moduleName, $moduleOptions);\n        \\}\n    \\}\n\n\n\\}\n\n// 创建超人 $superman = new Superman([ 'Fight' => [9, 100], 'Shot' => [99, 50, 2]\n]);\n\n现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改\nSuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。\n\n## 再进一步！IoC 容器的重要组成 —— 依赖注入！\n\n由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂”\n的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂”\n的依赖。假如工厂出了点麻烦，问题变得就很棘手。\n\n_其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不\n够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。_\n\n我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。\n\n事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 ——\n由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：\n\n\n\n    class SuperModuleFactory\n    \\{\n        public function makeModule($moduleName, $options)\n        \\{\n           switch ($moduleName) \\{\n                case 'Fight': return new Fight($options[0], $options[1]);\n                case 'Force': return new Force($options[0]);\n                case 'Shot': return new Shot($options[0], $options[1], $options[2]);\n                // case 'more': .......\n                // case 'and more': .......\n                // case 'and more': .......\n                // case 'oh no! its too many!': .......\n            \\}\n        \\}\n    \\}\n\n看到没。。。噩梦般的感受！\n\n_其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）_\n\n由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是\n对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。\n\n\n\n    interface SuperModuleInterface\n    \\{\n        /**\n        * 超能力激活方法\n        _\n        * 任何一个超能力都得有该方法，并拥有一个参数\n        _@param array $target 针对目标，可以是一个或多个，自己或他人\n        */\n        public function activate(array $target);\n    \\}\n\n_上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。_\n\n_其实，这就是 php 中 接口（ interface ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C#\n之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object）\n本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（c\nlass），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。_\n\n_虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。_\n\n这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：\n\n\n\n    /**\n    _ X-超能量\n    _/\n    class XPower implements SuperModuleInterface\n    \\{\n        public function activate(array $target)\n        \\{\n            // 这只是个例子。。具体自行脑补\n        \\}\n    \\}\n\n\n\n\n    /__\n    _ 终极炸弹 （就这么俗）\n    _/\n    class UltraBomb implements SuperModuleInterface\n    \\{\n        public function activate(array $target)\n        \\{\n            // 这只是个例子。。具体自行脑补\n        \\}\n    \\}\n\n同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：\n\n\n\n    class Superman\n    \\{\n        protected $module;\n\n\n\n\n\n    public function __construct(SuperModuleInterface $module)\n    \\{\n        $this-&gt;module = $module\n    \\}\n\n\n\\}\n\n改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 SuperModuleInterface 接口的实现。否则就会提示错误。\n\n正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超\n人更容易变多，我们也不怕怪兽啦！\n\n_现在有人疑惑了，你要讲的 依赖注入 呢？_\n\n_其实，上面讲的内容，正是依赖注入。_\n\n什么叫做 依赖注入？\n\n本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new\n的），而是由外部以参数或其他形式注入的，都属于 依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：\n\n\n\n    // 超能力模组\n    $superModule = new XPower;\n\n\n\n\n    // 初始化一个超人，并注入一个超能力模组依赖\n    $superMan = new Superman($superModule);\n\n关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……\n\n## 更为先进的工厂 —— IoC 容器！\n\n刚刚列了一段代码：\n\n\n\n    $superModule = new XPower;\n\n\n\n\n    $superMan = new Superman($superModule);\n\n读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。\n\n_现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。_\n\n一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，\n工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。\n\n\n\n    class Container\n    \\{\n        protected $binds;\n\n\n\n\n\n    protected $instances;\n\n    public function bind($abstract, $concrete)\n    \\{\n        if ($concrete instanceof Closure) \\{\n            $this-&gt;binds[$abstract] = $concrete;\n        \\} else \\{\n            $this-&gt;instances[$abstract] = $concrete;\n        \\}\n    \\}\n\n    public function make($abstract, $parameters = [])\n    \\{\n       if (isset($this-&gt;instances[$abstract])) \\{\n            return $this-&gt;instances[$abstract];\n       \\}\n\n       array_unshift($parameters, $this);\n\n       return call_user_func_array($this-&gt;binds[$abstract], $parameters);\n    \\}\n\n\n\\}\n\n这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！\n\n\n\n    // 创建一个容器（后面称作超级工厂）\n    $container = new Container;\n\n\n\n\n    // 向该 超级工厂 添加 超人 的生产脚本\n    $container->bind('superman', function($container, $moduleName) \\{\n        return new Superman($container->make($moduleName));\n    \\});\n\n\n\n\n    // 向该 超级工厂 添加 超能力模组 的生产脚本\n    $container->bind('xpower', function($container) \\{\n        return new XPower;\n    \\});\n\n\n\n\n    // 同上\n    $container->bind('ultrabomb', function($container) \\{\n        return new UltraBomb;\n    \\});\n\n\n\n\n    // **_*_****_*_****_* 华丽丽的分割线 _****_*_****_*_*******\n    // 开始启动生产\n    $superman_1 = $container->make('superman', 'xpower');\n    $superman_2 = $container->make('superman', 'ultrabomb');\n    $superman_3 = $container->make('superman', 'xpower');\n    // ...随意添加\n\n看到没？通过最初的 绑定（bind） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人\n与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名\n函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（make） 操作被调用执行时，才会触发。\n\n这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。\n\n_实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC\n容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel\n框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。_\n\n_不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 反射（Reflection） 实现的，恰好的，php 完美的支持反射机制！关于反射，php\n官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！_\n\n_http://php.net/manual/zh/book.reflection.php_\n\n现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是\n哦 ！\n\n# 回归正常世界。我们开始重新审视 laravel 的核心。\n\n现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。\n\n可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如Route（路由）、Eloquent\nORM（数据库 ORM 组件）、Request and\nResponse（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel\n的服务容器负责的。\n\n我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：\n\n\n\n    Route::get('/', function() \\{\n        // bla bla bla...\n    \\});\n\n实际上， Route 类被定义在这个命名空间：Illuminate\\\\Routing\\\\Router，文件vendor/laravel/framework/sr\nc/Illuminate/Routing/Router.php。\n\n我们通过打开发现，这个类的这一系列方法，如 get，post，any 等都不是静态（static）方法，这是怎么一回事儿？不要急，我们继续。\n\n## 服务提供者\n\n我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。\n\n对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel\n称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是\n服务提供者（ServiceProvider）。\n\n_虽然，绑定一个类到容器不一定非要通过 服务提供者（ServiceProvider） 。_\n\n_但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，laravel\n将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的 服务提供者。_\n_服务提供者主要分为两个部分，register（注册） 和 boot（引导、初始化），具体参考文档。register\n负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 boot 部分。_\n\n## Facade\n\n我们现在解答之前关于 Route 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法__callSta\ntic，并将该静态方法映射到真正的方法上。\n\n我们使用的 Route 类实际上是 Illuminate\\\\Support\\\\Facades\\\\Route 通过 class_alias() 函数创造的 别名\n而已，这个类被定义在文件\nvendor/laravel/framework/src/Illuminate/Support/Facades/Route.php。\n\n我们打开文件一看……诶？怎么只有这么简单的一段代码呢？\n\n\n\n    <?php namespace Illuminate\\\\Support\\\\Facades;\n\n\n\n\n    /__\n    _ @see \\\\Illuminate\\\\Routing\\\\Router\n    _/\n    class Route extends Facade \\{\n\n\n\n\n\n    /**\n    * Get the registered name of the component.\n    *\n    * @return string\n    */\n    protected static function getFacadeAccessor()\n    \\{\n        return 'router';\n    \\}\n\n\n\\}\n\n其实仔细看，会发现这个类继承了一个叫做 Facade 的类，到这里谜底差不多要解开了。\n\n上述简单的定义中，我们看到了 getFacadeAccessor 方法返回了一个 route，这是什么意思呢？事实上，这个值被一个\nServiceProvider 注册过，大家应该知道注册了个什么，当然是那个真正的路由类！\n\n_有人会问，Facade\n是怎么实现的。我并不想说得太细，一个是我懒，另一个原因就是，自己发现一些东西更容易理解，并不容易忘记。很多细节我已经说了，建议大家自行去研究。_\n\n至此，我们已经讲的差不多了。\n\n# 和平！我们该总结总结了！\n\n无论如何，世界和平了。\n\n这里要总结的内容就是，其实很多事情并不复杂，怕的是复杂的理论内容。我觉得很多东西一旦想通也就那么回事儿。很多人觉得 laravel\n这不好那不好、这里难哪里难，我只能说，laravel 的确不是一流和优秀的框架，说 laravel 是一流、优秀的框架的人，不是 laravel\n的粉丝那么就是跟风炒作。Laravel 最大的特点和优秀之处就是使用了很多 php 比较新（实际上并不新）的概念和技术（也就一堆语法糖）而已。因此\nlaravel 的确符合一个适宜学习的框架。Laravel 的构思的确和其他框架有很大不同，这也要求学习他的人必须熟练 php，并 基础扎实！如果你觉得学\nlaravel 框架十分困难，那么原因只有一个：你 php 基础不好。\n\n另外，善于利用命名空间和面向对象的诸多特性，去追寻一些东西，你会发现，原来这一切这么容易。\n","slug":"laravel-container","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2paf002u9vnz0poazge9","content":"<p>原文地址：<a href=\"https://www.insp.top/learn-laravel-container\" target=\"_blank\" rel=\"external\">https://www.insp.top/learn-laravel-container</a></p>\n<p>转注：本文详细介绍了依赖注入以及Laravel IoC容器的原理，深入浅出，十分容易让人理解。</p>\n<p><strong>控制反转(IoC)</strong>：由外部负责其依赖需求的行为</p>\n<p><strong>依赖注入(DI)</strong>：只要不是由内部生产，而是由外部以参数或其他形式注入的，都属于依赖注入</p>\n<p><em>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是<br>文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦”<br>、“依赖注入（DI）”。本文就从这里开始。</em></p>\n<h1 id=\"IoC-容器，-laravel-的核心\"><a href=\"#IoC-容器，-laravel-的核心\" class=\"headerlink\" title=\"IoC 容器， laravel 的核心\"></a>IoC 容器， laravel 的核心</h1><p>Laravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概<br>念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>\n<p>本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 laravel<br>服务容器的用法建议阅读文档即可。</p>\n<h1 id=\"IoC-容器诞生的故事\"><a href=\"#IoC-容器诞生的故事\" class=\"headerlink\" title=\"IoC 容器诞生的故事\"></a>IoC 容器诞生的故事</h1><p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>\n<h2 id=\"超人和超能力，依赖的产生！\"><a href=\"#超人和超能力，依赖的产生！\" class=\"headerlink\" title=\"超人和超能力，依赖的产生！\"></a>超人和超能力，依赖的产生！</h2><p>面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为<br>一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>\n<p><em>怪物横行的世界，总归需要点超级人物来摆平。</em></p>\n<p>我们把一个“超人”作为一个类，</p>\n<pre><code>class Superman \\{\\}\n</code></pre><p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方<br>法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>\n<pre><code>class Power \\{\n    /*_\n    * 能力值\n    _/\n    protected $ability;\n\n\n\n\n\n/**\n* 能力范围或距离\n*/\nprotected $range;\n\npublic function __construct($ability, $range)\n\\{\n    $this-&amp;gt;ability = $ability;\n    $this-&amp;gt;range = $range;\n\\}\n</code></pre><p>}</p>\n<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct()\n\\{\n    $this-&amp;gt;power = new Power(999, 100);\n\\}\n</code></pre><p>}</p>\n<p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>\n<p><em>所谓“依赖”，就是“我若依赖你，少了你就没有我”。</em></p>\n<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎<br>样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>\n<h2 id=\"一堆乱麻-——-可怕的依赖\"><a href=\"#一堆乱麻-——-可怕的依赖\" class=\"headerlink\" title=\"一堆乱麻 —— 可怕的依赖\"></a>一堆乱麻 —— 可怕的依赖</h2><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现<br>在进行修改，我们假设超人可以有以下多种超能力：</p>\n<ul>\n<li>飞行，属性有：飞行速度、持续飞行时间</li>\n<li>蛮力，属性有：力量值</li>\n<li>能量弹，属性有：伤害值、射击距离、同时射击个数<br>我们创建了如下类：</li>\n</ul>\n<pre><code>class Flight\n\\{\n    protected $speed;\n    protected $holdtime;\n    public function __construct($speed, $holdtime) \\{\\}\n\\}\n\n\n\n\nclass Force\n\\{\n    protected $force;\n    public function __construct($force) \\{\\}\n\\}\n\n\n\n\nclass Shot\n\\{\n    protected $atk;\n    protected $range;\n    protected $limit;\n    public function **construct($atk, $range, $limit) \\{\\}\n\\}\n</code></pre><p><em>为了省事儿我没有详细写出 *</em>construct() 这个构造函数的全部，只写了需要传递的参数。</p>\n<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下：</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct()\n\\{\n    $this-&amp;gt;power = new Fight(9, 100);\n    // $this-&amp;gt;power = new Force(45);\n    // $this-&amp;gt;power = new Shot(99, 50, 2);\n    /*\n    $this-&amp;gt;power = array(\n        new Force(45),\n        new Shot(99, 50, 2)\n    );\n    */\n\\}\n</code></pre><p>}</p>\n<p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 新的<br>超能力，或者需要 变更 超能力的方法，我们必须 重新改造<br>超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。</p>\n<p><em>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来<br>过了。</em></p>\n<p>对，就是这样的。</p>\n<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为<br>“模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组”<br>满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。</p>\n<h2 id=\"工厂模式，依赖转移！\"><a href=\"#工厂模式，依赖转移！\" class=\"headerlink\" title=\"工厂模式，依赖转移！\"></a>工厂模式，依赖转移！</h2><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>\n<p><em>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式：<br>工厂模式。</em></p>\n<p>工厂模式，顾名思义，就是一个类所以依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。</p>\n<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>\n<pre><code>class SuperModuleFactory\n\\{\n    public function makeModule($moduleName, $options)\n    \\{\n       switch ($moduleName) \\{\n           case &apos;Fight&apos;: return new Fight($options[0], $options[1]);\n           case &apos;Force&apos;: return new Force($options[0]);\n           case &apos;Shot&apos;: return new Shot($options[0], $options[1], $options[2]);\n       \\}\n    \\}\n\\}\n</code></pre><p>这时候，超人 创建之初就可以使用这个工厂！</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct()\n\\{\n    // 初始化工厂\n    $factory = new SuperModuleFactory;\n\n    // 通过工厂提供的方法制造需要的模块\n    $this-&amp;gt;power = $factory-&amp;gt;makeModule(&apos;Fight&apos;, [9, 100]);\n    // $this-&amp;gt;power = $factory-&amp;gt;makeModule(&apos;Force&apos;, [45]);\n    // $this-&amp;gt;power = $factory-&amp;gt;makeModule(&apos;Shot&apos;, [99, 50, 2]);\n    /*\n    $this-&amp;gt;power = array(\n        $factory-&amp;gt;makeModule(&apos;Force&apos;, [45]),\n        $factory-&amp;gt;makeModule(&apos;Shot&apos;, [99, 50, 2])\n    );\n    */\n\\}\n</code></pre><p>}</p>\n<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new<br>关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct(array $modules)\n\\{\n    // 初始化工厂\n    $factory = new SuperModuleFactory;\n\n    // 通过工厂提供的方法制造需要的模块\n    foreach ($modules as $moduleName =&amp;gt; $moduleOptions) \\{\n        $this-&amp;gt;power[] = $factory-&amp;gt;makeModule($moduleName, $moduleOptions);\n    \\}\n\\}\n</code></pre><p>}</p>\n<p>// 创建超人 $superman = new Superman([ ‘Fight’ =&gt; [9, 100], ‘Shot’ =&gt; [99, 50, 2]<br>]);</p>\n<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改<br>SuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>\n<h2 id=\"再进一步！IoC-容器的重要组成-——-依赖注入！\"><a href=\"#再进一步！IoC-容器的重要组成-——-依赖注入！\" class=\"headerlink\" title=\"再进一步！IoC 容器的重要组成 —— 依赖注入！\"></a>再进一步！IoC 容器的重要组成 —— 依赖注入！</h2><p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂”<br>的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂”<br>的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>\n<p><em>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不<br>够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。</em></p>\n<p>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>\n<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 ——<br>由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：</p>\n<pre><code>class SuperModuleFactory\n\\{\n    public function makeModule($moduleName, $options)\n    \\{\n       switch ($moduleName) \\{\n            case &apos;Fight&apos;: return new Fight($options[0], $options[1]);\n            case &apos;Force&apos;: return new Force($options[0]);\n            case &apos;Shot&apos;: return new Shot($options[0], $options[1], $options[2]);\n            // case &apos;more&apos;: .......\n            // case &apos;and more&apos;: .......\n            // case &apos;and more&apos;: .......\n            // case &apos;oh no! its too many!&apos;: .......\n        \\}\n    \\}\n\\}\n</code></pre><p>看到没。。。噩梦般的感受！</p>\n<p><em>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</em></p>\n<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是<br>对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。</p>\n<pre><code>interface SuperModuleInterface\n\\{\n    /**\n    * 超能力激活方法\n    _\n    * 任何一个超能力都得有该方法，并拥有一个参数\n    _@param array $target 针对目标，可以是一个或多个，自己或他人\n    */\n    public function activate(array $target);\n\\}\n</code></pre><p><em>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</em></p>\n<p><em>其实，这就是 php 中 接口（ interface ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C#<br>之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object）<br>本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（c<br>lass），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</em></p>\n<p><em>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</em></p>\n<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：</p>\n<pre><code>/**\n_ X-超能量\n_/\nclass XPower implements SuperModuleInterface\n\\{\n    public function activate(array $target)\n    \\{\n        // 这只是个例子。。具体自行脑补\n    \\}\n\\}\n\n\n\n\n/__\n_ 终极炸弹 （就这么俗）\n_/\nclass UltraBomb implements SuperModuleInterface\n\\{\n    public function activate(array $target)\n    \\{\n        // 这只是个例子。。具体自行脑补\n    \\}\n\\}\n</code></pre><p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>\n<pre><code>class Superman\n\\{\n    protected $module;\n\n\n\n\n\npublic function __construct(SuperModuleInterface $module)\n\\{\n    $this-&amp;gt;module = $module\n\\}\n</code></pre><p>}</p>\n<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 SuperModuleInterface 接口的实现。否则就会提示错误。</p>\n<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超<br>人更容易变多，我们也不怕怪兽啦！</p>\n<p><em>现在有人疑惑了，你要讲的 依赖注入 呢？</em></p>\n<p><em>其实，上面讲的内容，正是依赖注入。</em></p>\n<p>什么叫做 依赖注入？</p>\n<p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new<br>的），而是由外部以参数或其他形式注入的，都属于 依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>\n<pre><code>// 超能力模组\n$superModule = new XPower;\n\n\n\n\n// 初始化一个超人，并注入一个超能力模组依赖\n$superMan = new Superman($superModule);\n</code></pre><p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……</p>\n<h2 id=\"更为先进的工厂-——-IoC-容器！\"><a href=\"#更为先进的工厂-——-IoC-容器！\" class=\"headerlink\" title=\"更为先进的工厂 —— IoC 容器！\"></a>更为先进的工厂 —— IoC 容器！</h2><p>刚刚列了一段代码：</p>\n<pre><code>$superModule = new XPower;\n\n\n\n\n$superMan = new Superman($superModule);\n</code></pre><p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>\n<p><em>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</em></p>\n<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，<br>工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。</p>\n<pre><code>class Container\n\\{\n    protected $binds;\n\n\n\n\n\nprotected $instances;\n\npublic function bind($abstract, $concrete)\n\\{\n    if ($concrete instanceof Closure) \\{\n        $this-&amp;gt;binds[$abstract] = $concrete;\n    \\} else \\{\n        $this-&amp;gt;instances[$abstract] = $concrete;\n    \\}\n\\}\n\npublic function make($abstract, $parameters = [])\n\\{\n   if (isset($this-&amp;gt;instances[$abstract])) \\{\n        return $this-&amp;gt;instances[$abstract];\n   \\}\n\n   array_unshift($parameters, $this);\n\n   return call_user_func_array($this-&amp;gt;binds[$abstract], $parameters);\n\\}\n</code></pre><p>}</p>\n<p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！</p>\n<pre><code>// 创建一个容器（后面称作超级工厂）\n$container = new Container;\n\n\n\n\n// 向该 超级工厂 添加 超人 的生产脚本\n$container-&gt;bind(&apos;superman&apos;, function($container, $moduleName) \\{\n    return new Superman($container-&gt;make($moduleName));\n\\});\n\n\n\n\n// 向该 超级工厂 添加 超能力模组 的生产脚本\n$container-&gt;bind(&apos;xpower&apos;, function($container) \\{\n    return new XPower;\n\\});\n\n\n\n\n// 同上\n$container-&gt;bind(&apos;ultrabomb&apos;, function($container) \\{\n    return new UltraBomb;\n\\});\n\n\n\n\n// **_*_****_*_****_* 华丽丽的分割线 _****_*_****_*_*******\n// 开始启动生产\n$superman_1 = $container-&gt;make(&apos;superman&apos;, &apos;xpower&apos;);\n$superman_2 = $container-&gt;make(&apos;superman&apos;, &apos;ultrabomb&apos;);\n$superman_3 = $container-&gt;make(&apos;superman&apos;, &apos;xpower&apos;);\n// ...随意添加\n</code></pre><p>看到没？通过最初的 绑定（bind） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人<br>与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名<br>函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（make） 操作被调用执行时，才会触发。</p>\n<p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p>\n<p><em>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC<br>容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel<br>框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。</em></p>\n<p><em>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 反射（Reflection） 实现的，恰好的，php 完美的支持反射机制！关于反射，php<br>官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！</em></p>\n<p><em><a href=\"http://php.net/manual/zh/book.reflection.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/book.reflection.php</a></em></p>\n<p>现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是<br>哦 ！</p>\n<h1 id=\"回归正常世界。我们开始重新审视-laravel-的核心。\"><a href=\"#回归正常世界。我们开始重新审视-laravel-的核心。\" class=\"headerlink\" title=\"回归正常世界。我们开始重新审视 laravel 的核心。\"></a>回归正常世界。我们开始重新审视 laravel 的核心。</h1><p>现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p>\n<p>可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如Route（路由）、Eloquent<br>ORM（数据库 ORM 组件）、Request and<br>Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel<br>的服务容器负责的。</p>\n<p>我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：</p>\n<pre><code>Route::get(&apos;/&apos;, function() \\{\n    // bla bla bla...\n\\});\n</code></pre><p>实际上， Route 类被定义在这个命名空间：Illuminate\\Routing\\Router，文件vendor/laravel/framework/sr<br>c/Illuminate/Routing/Router.php。</p>\n<p>我们通过打开发现，这个类的这一系列方法，如 get，post，any 等都不是静态（static）方法，这是怎么一回事儿？不要急，我们继续。</p>\n<h2 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h2><p>我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。</p>\n<p>对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel<br>称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是<br>服务提供者（ServiceProvider）。</p>\n<p><em>虽然，绑定一个类到容器不一定非要通过 服务提供者（ServiceProvider） 。</em></p>\n<p><em>但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，laravel<br>将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的 服务提供者。</em><br><em>服务提供者主要分为两个部分，register（注册） 和 boot（引导、初始化），具体参考文档。register<br>负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 boot 部分。</em></p>\n<h2 id=\"Facade\"><a href=\"#Facade\" class=\"headerlink\" title=\"Facade\"></a>Facade</h2><p>我们现在解答之前关于 Route 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法__callSta<br>tic，并将该静态方法映射到真正的方法上。</p>\n<p>我们使用的 Route 类实际上是 Illuminate\\Support\\Facades\\Route 通过 class_alias() 函数创造的 别名<br>而已，这个类被定义在文件<br>vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php。</p>\n<p>我们打开文件一看……诶？怎么只有这么简单的一段代码呢？</p>\n<pre><code>&lt;?php namespace Illuminate\\\\Support\\\\Facades;\n\n\n\n\n/__\n_ @see \\\\Illuminate\\\\Routing\\\\Router\n_/\nclass Route extends Facade \\{\n\n\n\n\n\n/**\n* Get the registered name of the component.\n*\n* @return string\n*/\nprotected static function getFacadeAccessor()\n\\{\n    return &apos;router&apos;;\n\\}\n</code></pre><p>}</p>\n<p>其实仔细看，会发现这个类继承了一个叫做 Facade 的类，到这里谜底差不多要解开了。</p>\n<p>上述简单的定义中，我们看到了 getFacadeAccessor 方法返回了一个 route，这是什么意思呢？事实上，这个值被一个<br>ServiceProvider 注册过，大家应该知道注册了个什么，当然是那个真正的路由类！</p>\n<p><em>有人会问，Facade<br>是怎么实现的。我并不想说得太细，一个是我懒，另一个原因就是，自己发现一些东西更容易理解，并不容易忘记。很多细节我已经说了，建议大家自行去研究。</em></p>\n<p>至此，我们已经讲的差不多了。</p>\n<h1 id=\"和平！我们该总结总结了！\"><a href=\"#和平！我们该总结总结了！\" class=\"headerlink\" title=\"和平！我们该总结总结了！\"></a>和平！我们该总结总结了！</h1><p>无论如何，世界和平了。</p>\n<p>这里要总结的内容就是，其实很多事情并不复杂，怕的是复杂的理论内容。我觉得很多东西一旦想通也就那么回事儿。很多人觉得 laravel<br>这不好那不好、这里难哪里难，我只能说，laravel 的确不是一流和优秀的框架，说 laravel 是一流、优秀的框架的人，不是 laravel<br>的粉丝那么就是跟风炒作。Laravel 最大的特点和优秀之处就是使用了很多 php 比较新（实际上并不新）的概念和技术（也就一堆语法糖）而已。因此<br>laravel 的确符合一个适宜学习的框架。Laravel 的构思的确和其他框架有很大不同，这也要求学习他的人必须熟练 php，并 基础扎实！如果你觉得学<br>laravel 框架十分困难，那么原因只有一个：你 php 基础不好。</p>\n<p>另外，善于利用命名空间和面向对象的诸多特性，去追寻一些东西，你会发现，原来这一切这么容易。</p>\n","excerpt":"","more":"<p>原文地址：<a href=\"https://www.insp.top/learn-laravel-container\">https://www.insp.top/learn-laravel-container</a></p>\n<p>转注：本文详细介绍了依赖注入以及Laravel IoC容器的原理，深入浅出，十分容易让人理解。</p>\n<p><strong>控制反转(IoC)</strong>：由外部负责其依赖需求的行为</p>\n<p><strong>依赖注入(DI)</strong>：只要不是由内部生产，而是由外部以参数或其他形式注入的，都属于依赖注入</p>\n<p><em>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是<br>文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦”<br>、“依赖注入（DI）”。本文就从这里开始。</em></p>\n<h1 id=\"IoC-容器，-laravel-的核心\"><a href=\"#IoC-容器，-laravel-的核心\" class=\"headerlink\" title=\"IoC 容器， laravel 的核心\"></a>IoC 容器， laravel 的核心</h1><p>Laravel 的核心就是一个 IoC 容器，根据文档，称其为“服务容器”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概<br>念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>\n<p>本文一大半内容都是通过举例来让读者去理解什么是 IoC（控制反转） 和 DI（依赖注入），通过理解这些概念，来更加深入。更多关于 laravel<br>服务容器的用法建议阅读文档即可。</p>\n<h1 id=\"IoC-容器诞生的故事\"><a href=\"#IoC-容器诞生的故事\" class=\"headerlink\" title=\"IoC 容器诞生的故事\"></a>IoC 容器诞生的故事</h1><p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>\n<h2 id=\"超人和超能力，依赖的产生！\"><a href=\"#超人和超能力，依赖的产生！\" class=\"headerlink\" title=\"超人和超能力，依赖的产生！\"></a>超人和超能力，依赖的产生！</h2><p>面向对象编程，有以下几样东西无时不刻的接触：接口、类还有对象。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为<br>一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>\n<p><em>怪物横行的世界，总归需要点超级人物来摆平。</em></p>\n<p>我们把一个“超人”作为一个类，</p>\n<pre><code>class Superman \\{\\}\n</code></pre><p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方<br>法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>\n<pre><code>class Power \\{\n    /*_\n    * 能力值\n    _/\n    protected $ability;\n\n\n\n\n\n/**\n* 能力范围或距离\n*/\nprotected $range;\n\npublic function __construct($ability, $range)\n\\{\n    $this-&amp;gt;ability = $ability;\n    $this-&amp;gt;range = $range;\n\\}\n</code></pre><p>}</p>\n<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct()\n\\{\n    $this-&amp;gt;power = new Power(999, 100);\n\\}\n</code></pre><p>}</p>\n<p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>\n<p><em>所谓“依赖”，就是“我若依赖你，少了你就没有我”。</em></p>\n<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎<br>样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>\n<h2 id=\"一堆乱麻-——-可怕的依赖\"><a href=\"#一堆乱麻-——-可怕的依赖\" class=\"headerlink\" title=\"一堆乱麻 —— 可怕的依赖\"></a>一堆乱麻 —— 可怕的依赖</h2><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现<br>在进行修改，我们假设超人可以有以下多种超能力：</p>\n<ul>\n<li>飞行，属性有：飞行速度、持续飞行时间</li>\n<li>蛮力，属性有：力量值</li>\n<li>能量弹，属性有：伤害值、射击距离、同时射击个数<br>我们创建了如下类：</li>\n</ul>\n<pre><code>class Flight\n\\{\n    protected $speed;\n    protected $holdtime;\n    public function __construct($speed, $holdtime) \\{\\}\n\\}\n\n\n\n\nclass Force\n\\{\n    protected $force;\n    public function __construct($force) \\{\\}\n\\}\n\n\n\n\nclass Shot\n\\{\n    protected $atk;\n    protected $range;\n    protected $limit;\n    public function **construct($atk, $range, $limit) \\{\\}\n\\}\n</code></pre><p><em>为了省事儿我没有详细写出 *</em>construct() 这个构造函数的全部，只写了需要传递的参数。</p>\n<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下：</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct()\n\\{\n    $this-&amp;gt;power = new Fight(9, 100);\n    // $this-&amp;gt;power = new Force(45);\n    // $this-&amp;gt;power = new Shot(99, 50, 2);\n    /*\n    $this-&amp;gt;power = array(\n        new Force(45),\n        new Shot(99, 50, 2)\n    );\n    */\n\\}\n</code></pre><p>}</p>\n<p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 新的<br>超能力，或者需要 变更 超能力的方法，我们必须 重新改造<br>超人。换句话说就是，改变超能力的同时，我还得重新制造个超人。效率太低了！新超人还没创造完成世界早已被毁灭。</p>\n<p><em>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来<br>过了。</em></p>\n<p>对，就是这样的。</p>\n<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为<br>“模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组”<br>满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “控制反转（IoC）”。</p>\n<h2 id=\"工厂模式，依赖转移！\"><a href=\"#工厂模式，依赖转移！\" class=\"headerlink\" title=\"工厂模式，依赖转移！\"></a>工厂模式，依赖转移！</h2><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>\n<p><em>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式：<br>工厂模式。</em></p>\n<p>工厂模式，顾名思义，就是一个类所以依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “工厂模式”。</p>\n<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>\n<pre><code>class SuperModuleFactory\n\\{\n    public function makeModule($moduleName, $options)\n    \\{\n       switch ($moduleName) \\{\n           case &apos;Fight&apos;: return new Fight($options[0], $options[1]);\n           case &apos;Force&apos;: return new Force($options[0]);\n           case &apos;Shot&apos;: return new Shot($options[0], $options[1], $options[2]);\n       \\}\n    \\}\n\\}\n</code></pre><p>这时候，超人 创建之初就可以使用这个工厂！</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct()\n\\{\n    // 初始化工厂\n    $factory = new SuperModuleFactory;\n\n    // 通过工厂提供的方法制造需要的模块\n    $this-&amp;gt;power = $factory-&amp;gt;makeModule(&apos;Fight&apos;, [9, 100]);\n    // $this-&amp;gt;power = $factory-&amp;gt;makeModule(&apos;Force&apos;, [45]);\n    // $this-&amp;gt;power = $factory-&amp;gt;makeModule(&apos;Shot&apos;, [99, 50, 2]);\n    /*\n    $this-&amp;gt;power = array(\n        $factory-&amp;gt;makeModule(&apos;Force&apos;, [45]),\n        $factory-&amp;gt;makeModule(&apos;Shot&apos;, [99, 50, 2])\n    );\n    */\n\\}\n</code></pre><p>}</p>\n<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 new<br>关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>\n<pre><code>class Superman\n\\{\n    protected $power;\n\n\n\n\n\npublic function __construct(array $modules)\n\\{\n    // 初始化工厂\n    $factory = new SuperModuleFactory;\n\n    // 通过工厂提供的方法制造需要的模块\n    foreach ($modules as $moduleName =&amp;gt; $moduleOptions) \\{\n        $this-&amp;gt;power[] = $factory-&amp;gt;makeModule($moduleName, $moduleOptions);\n    \\}\n\\}\n</code></pre><p>}</p>\n<p>// 创建超人 $superman = new Superman([ ‘Fight’ =&gt; [9, 100], ‘Shot’ =&gt; [99, 50, 2]<br>]);</p>\n<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改<br>SuperModuleFactory 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>\n<h2 id=\"再进一步！IoC-容器的重要组成-——-依赖注入！\"><a href=\"#再进一步！IoC-容器的重要组成-——-依赖注入！\" class=\"headerlink\" title=\"再进一步！IoC 容器的重要组成 —— 依赖注入！\"></a>再进一步！IoC 容器的重要组成 —— 依赖注入！</h2><p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂”<br>的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂”<br>的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>\n<p><em>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不<br>够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 依赖注入 ，这里就先夸大一下工厂模式的缺陷咯。</em></p>\n<p>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>\n<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 ——<br>由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：</p>\n<pre><code>class SuperModuleFactory\n\\{\n    public function makeModule($moduleName, $options)\n    \\{\n       switch ($moduleName) \\{\n            case &apos;Fight&apos;: return new Fight($options[0], $options[1]);\n            case &apos;Force&apos;: return new Force($options[0]);\n            case &apos;Shot&apos;: return new Shot($options[0], $options[1], $options[2]);\n            // case &apos;more&apos;: .......\n            // case &apos;and more&apos;: .......\n            // case &apos;and more&apos;: .......\n            // case &apos;oh no! its too many!&apos;: .......\n        \\}\n    \\}\n\\}\n</code></pre><p>看到没。。。噩梦般的感受！</p>\n<p><em>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</em></p>\n<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是<br>对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。</p>\n<pre><code>interface SuperModuleInterface\n\\{\n    /**\n    * 超能力激活方法\n    _\n    * 任何一个超能力都得有该方法，并拥有一个参数\n    _@param array $target 针对目标，可以是一个或多个，自己或他人\n    */\n    public function activate(array $target);\n\\}\n</code></pre><p><em>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</em></p>\n<p><em>其实，这就是 php 中 接口（ interface ） 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C#<br>之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 对象（object）<br>本身是由他的模板或者原型 —— 类 （class） ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（c<br>lass），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</em></p>\n<p><em>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</em></p>\n<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：</p>\n<pre><code>/**\n_ X-超能量\n_/\nclass XPower implements SuperModuleInterface\n\\{\n    public function activate(array $target)\n    \\{\n        // 这只是个例子。。具体自行脑补\n    \\}\n\\}\n\n\n\n\n/__\n_ 终极炸弹 （就这么俗）\n_/\nclass UltraBomb implements SuperModuleInterface\n\\{\n    public function activate(array $target)\n    \\{\n        // 这只是个例子。。具体自行脑补\n    \\}\n\\}\n</code></pre><p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>\n<pre><code>class Superman\n\\{\n    protected $module;\n\n\n\n\n\npublic function __construct(SuperModuleInterface $module)\n\\{\n    $this-&amp;gt;module = $module\n\\}\n</code></pre><p>}</p>\n<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 SuperModuleInterface 接口的实现。否则就会提示错误。</p>\n<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超<br>人更容易变多，我们也不怕怪兽啦！</p>\n<p><em>现在有人疑惑了，你要讲的 依赖注入 呢？</em></p>\n<p><em>其实，上面讲的内容，正是依赖注入。</em></p>\n<p>什么叫做 依赖注入？</p>\n<p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 __construct 中通过工厂方法、自行手动 new<br>的），而是由外部以参数或其他形式注入的，都属于 依赖注入（DI） 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>\n<pre><code>// 超能力模组\n$superModule = new XPower;\n\n\n\n\n// 初始化一个超人，并注入一个超能力模组依赖\n$superMan = new Superman($superModule);\n</code></pre><p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……</p>\n<h2 id=\"更为先进的工厂-——-IoC-容器！\"><a href=\"#更为先进的工厂-——-IoC-容器！\" class=\"headerlink\" title=\"更为先进的工厂 —— IoC 容器！\"></a>更为先进的工厂 —— IoC 容器！</h2><p>刚刚列了一段代码：</p>\n<pre><code>$superModule = new XPower;\n\n\n\n\n$superMan = new Superman($superModule);\n</code></pre><p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>\n<p><em>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</em></p>\n<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，<br>工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— IoC 容器。</p>\n<pre><code>class Container\n\\{\n    protected $binds;\n\n\n\n\n\nprotected $instances;\n\npublic function bind($abstract, $concrete)\n\\{\n    if ($concrete instanceof Closure) \\{\n        $this-&amp;gt;binds[$abstract] = $concrete;\n    \\} else \\{\n        $this-&amp;gt;instances[$abstract] = $concrete;\n    \\}\n\\}\n\npublic function make($abstract, $parameters = [])\n\\{\n   if (isset($this-&amp;gt;instances[$abstract])) \\{\n        return $this-&amp;gt;instances[$abstract];\n   \\}\n\n   array_unshift($parameters, $this);\n\n   return call_user_func_array($this-&amp;gt;binds[$abstract], $parameters);\n\\}\n</code></pre><p>}</p>\n<p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！</p>\n<pre><code>// 创建一个容器（后面称作超级工厂）\n$container = new Container;\n\n\n\n\n// 向该 超级工厂 添加 超人 的生产脚本\n$container-&gt;bind(&apos;superman&apos;, function($container, $moduleName) \\{\n    return new Superman($container-&gt;make($moduleName));\n\\});\n\n\n\n\n// 向该 超级工厂 添加 超能力模组 的生产脚本\n$container-&gt;bind(&apos;xpower&apos;, function($container) \\{\n    return new XPower;\n\\});\n\n\n\n\n// 同上\n$container-&gt;bind(&apos;ultrabomb&apos;, function($container) \\{\n    return new UltraBomb;\n\\});\n\n\n\n\n// **_*_****_*_****_* 华丽丽的分割线 _****_*_****_*_*******\n// 开始启动生产\n$superman_1 = $container-&gt;make(&apos;superman&apos;, &apos;xpower&apos;);\n$superman_2 = $container-&gt;make(&apos;superman&apos;, &apos;ultrabomb&apos;);\n$superman_3 = $container-&gt;make(&apos;superman&apos;, &apos;xpower&apos;);\n// ...随意添加\n</code></pre><p>看到没？通过最初的 绑定（bind） 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人<br>与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名<br>函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 生产（make） 操作被调用执行时，才会触发。</p>\n<p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p>\n<p><em>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC<br>容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel<br>框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。</em></p>\n<p><em>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 反射（Reflection） 实现的，恰好的，php 完美的支持反射机制！关于反射，php<br>官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！</em></p>\n<p><em><a href=\"http://php.net/manual/zh/book.reflection.php\">http://php.net/manual/zh/book.reflection.php</a></em></p>\n<p>现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是<br>哦 ！</p>\n<h1 id=\"回归正常世界。我们开始重新审视-laravel-的核心。\"><a href=\"#回归正常世界。我们开始重新审视-laravel-的核心。\" class=\"headerlink\" title=\"回归正常世界。我们开始重新审视 laravel 的核心。\"></a>回归正常世界。我们开始重新审视 laravel 的核心。</h1><p>现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p>\n<p>可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如Route（路由）、Eloquent<br>ORM（数据库 ORM 组件）、Request and<br>Response（请求和响应）等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel<br>的服务容器负责的。</p>\n<p>我们以大家最常见的 Route 类作为例子。大家可能经常见到路由定义是这样的：</p>\n<pre><code>Route::get(&apos;/&apos;, function() \\{\n    // bla bla bla...\n\\});\n</code></pre><p>实际上， Route 类被定义在这个命名空间：Illuminate\\Routing\\Router，文件vendor/laravel/framework/sr<br>c/Illuminate/Routing/Router.php。</p>\n<p>我们通过打开发现，这个类的这一系列方法，如 get，post，any 等都不是静态（static）方法，这是怎么一回事儿？不要急，我们继续。</p>\n<h2 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h2><p>我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。</p>\n<p>对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel<br>称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是<br>服务提供者（ServiceProvider）。</p>\n<p><em>虽然，绑定一个类到容器不一定非要通过 服务提供者（ServiceProvider） 。</em></p>\n<p><em>但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，laravel<br>将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的 服务提供者。</em><br><em>服务提供者主要分为两个部分，register（注册） 和 boot（引导、初始化），具体参考文档。register<br>负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 boot 部分。</em></p>\n<h2 id=\"Facade\"><a href=\"#Facade\" class=\"headerlink\" title=\"Facade\"></a>Facade</h2><p>我们现在解答之前关于 Route 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法__callSta<br>tic，并将该静态方法映射到真正的方法上。</p>\n<p>我们使用的 Route 类实际上是 Illuminate\\Support\\Facades\\Route 通过 class_alias() 函数创造的 别名<br>而已，这个类被定义在文件<br>vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php。</p>\n<p>我们打开文件一看……诶？怎么只有这么简单的一段代码呢？</p>\n<pre><code>&lt;?php namespace Illuminate\\\\Support\\\\Facades;\n\n\n\n\n/__\n_ @see \\\\Illuminate\\\\Routing\\\\Router\n_/\nclass Route extends Facade \\{\n\n\n\n\n\n/**\n* Get the registered name of the component.\n*\n* @return string\n*/\nprotected static function getFacadeAccessor()\n\\{\n    return &apos;router&apos;;\n\\}\n</code></pre><p>}</p>\n<p>其实仔细看，会发现这个类继承了一个叫做 Facade 的类，到这里谜底差不多要解开了。</p>\n<p>上述简单的定义中，我们看到了 getFacadeAccessor 方法返回了一个 route，这是什么意思呢？事实上，这个值被一个<br>ServiceProvider 注册过，大家应该知道注册了个什么，当然是那个真正的路由类！</p>\n<p><em>有人会问，Facade<br>是怎么实现的。我并不想说得太细，一个是我懒，另一个原因就是，自己发现一些东西更容易理解，并不容易忘记。很多细节我已经说了，建议大家自行去研究。</em></p>\n<p>至此，我们已经讲的差不多了。</p>\n<h1 id=\"和平！我们该总结总结了！\"><a href=\"#和平！我们该总结总结了！\" class=\"headerlink\" title=\"和平！我们该总结总结了！\"></a>和平！我们该总结总结了！</h1><p>无论如何，世界和平了。</p>\n<p>这里要总结的内容就是，其实很多事情并不复杂，怕的是复杂的理论内容。我觉得很多东西一旦想通也就那么回事儿。很多人觉得 laravel<br>这不好那不好、这里难哪里难，我只能说，laravel 的确不是一流和优秀的框架，说 laravel 是一流、优秀的框架的人，不是 laravel<br>的粉丝那么就是跟风炒作。Laravel 最大的特点和优秀之处就是使用了很多 php 比较新（实际上并不新）的概念和技术（也就一堆语法糖）而已。因此<br>laravel 的确符合一个适宜学习的框架。Laravel 的构思的确和其他框架有很大不同，这也要求学习他的人必须熟练 php，并 基础扎实！如果你觉得学<br>laravel 框架十分困难，那么原因只有一个：你 php 基础不好。</p>\n<p>另外，善于利用命名空间和面向对象的诸多特性，去追寻一些东西，你会发现，原来这一切这么容易。</p>\n"},{"title":"[转]各种License","date":"2014-12-25T12:48:49.000Z","_content":"原文地址：<http://segmentfault.com/blog/lpgray/1190000002397061?utm_source=weibo&ut\nm_medium=shareLink&utm_campaign=socialShare>\n\n_还记得第一次看到CC协议的时候，我惊叹道：世界上竟有如此可爱的协议。之后渐渐融入了开源的世界，了解了更多类似的协议，我个人非常尊重别人的知识，所以可以看到\n在我的博客里面每一篇文章，凡是有借鉴别人的，我一定把别人的文章链接放在文章开始处，以显示对对方的尊重，另外，我的博客完全采用CC协议，转载必须注明出处。以下\n是该文章的内容。_\n\n![](http://zysmedia.qiniudn.com/license.jpg)\n\n最近想搞一个个人小项目，比较在意版权问题，平时在github上经常看到其他人的项目有各种License，却一直没明白过，今天查阅了一些软件License方面\n的资料，在此记录一下。\n\n## 什么是License？\n\nLicense并不意味着你对你的产品放弃了著作权，一旦你使用了License，则表示你授权给他人以约定的形式来使用你的产品。\n\n## 几种常用License\n\n### GPL (GNU General Public License)\n\nGNU General Public License （GPL）的可能是开源项目最常用的许可证。GPL赋予和保证了开源项目开发者广泛的权利。\n\n> 它允许用户合法复制，分发和修改软件，甚至在改良版本上收取费用，但必须要写明GPL License，而且要告诉客户原始版本。\n\n### LGPL\n\n还有另一个GNU License：GNU Lesser General Public License （LGPL）。比起GPL它授予的权限较少。一般来说，L\nGPL比较适合连接到非GPL或者非开源文件的库文件。由于GPL的规定，使用到部分GPL代码的软件，必须也使用GPL，开发人员不能使用GPL来开发收费软件或者\n专有软件。\n\n> LGPL不要求使用与部分代码相同的 License。\n\n### BSD\n\nBSD License与其他自由软件License相比，如GPL，限制更少。但是请注意到BSD License两种版本之间的差别：New BSD\nLicense/Modified BSD License 和Simplified BSD License/FreeBSD\nLicense。它们两者都是于GPL兼容的自由软件License。\n\n#### New BSD License\n\nNew BSD License (”3-clause license”) 可以用于任何作为版权声明和保证许可的免责声明的目的，可以通过无限长的再分发来得以维\n持，也就是说如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协\n议。它还有一个特殊限制条款，不用特别的许可就是限制使用派生工作的工作者名字，也就是说不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。\n\n> New BSD License和Simplified BSD License的主要区别是，后者忽略了非认可条款。\n\n### MIT\n\nMIT是和BSD一样宽松的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源\n代码发布的。\n\n>   * 你可以修改、复制和使用\n\n>   * 你可以出售\n\n>   * 但必须附带MIT授权协议\n\n### Mozilla Public License 1.1 (MPL)\n\nMPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，，它要求基于这种软件得修改无偿贡献版权给该软件。这样\n，围绕该软件得所有代码得版权都集中在发起开发人得手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。\n\n> 商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。\n\n### CDDL\n\nCDDL（Common Development and Distribution License，通用开发与销售许可）开源协议，是MPL（Mozilla\nPublic License）的扩展协议，它允许公共版权使用，无专利费，并提供专利保护，可集成于商业软件中，允许自行发布许可。\n\n> 商业软件可以使用，也可以修改CDDL协议的代码。\n\n### Apache License\n\nApache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布\n(作为开源或商业软件)。\n\n>   * 需要给代码的用户一份Apache License\n\n>   * 在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明\n\n>   * 如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache\nLicense。你可以在Notice中增加自己的许可，但不可以表现为对Apache License构成更改\n\n>   * 商业软件可以使用，也可以修改使用Apache协议的代码\n\n### Eclipse Public License\n\nEPL是一个与CPL相类似的许可证，任何扩展自Eclipse源码的代码也必须是开源的\n\n### Creative Commons（CC）\n\nCreative Commons（CC）的许可证不太开放源代码授权，它们通常用于设计项目。\nCC许可证有着宽广的定义，每个定义都会授予一定的权利。它有四个基本部分，可以单独或者组合使用。\n\n>   * 作者必须是作品的原创者。 除此之外，作品可以修改，分发，复制和以其他方式使用\n\n>   * 工作可以修改，分发等等，但必须在一个许可证下\n\n>   * 可以修改，分发等，但不用于商业目的。 关于什么是“商业”，说法比较含糊（没有提供明确的定义），因此您可能需要在自己的项目中澄清这一点\n\n>   * 禁止修改，这意味着您可以复制和分发许可工作，但你不能以任何方式修改，或在原有的基础开发\n\n>   * 商业软件的使用要遵从CC协议的具体规定，最严格的许可证将是“署名，非商业，不能修改”的授权。这意味着你可以自由共享的工作，但不能改变它，你必须把\n它归功于原创者\n\n### Common Public License 1.0\n\n  1. 明确了专利授权。一般的开源软件都明确源代码的版权人将自己的修改权、复制权等版权权利向公众许可，但保留署名权，而Common许可证在此基础上还明确假如源代码中含有专利权，源代码专利权人将复制、使用的专有权利向公众许可。\n  2. 规定可以将源代码及修改过的源代码与其他类型的不受本许可证约束的代码结合，以新产品的形式发布，只要其中经该许可证获得的源代码及修改过的源代码能按该许可证的要求发布即可。\n  3. 细化了该许可证终止的情形，包括发生专利侵权诉讼。\n  4. 明确了一个独立承担责任的原则，就是假如按该许可证使用源代码的使用者将获得的源代码应用于商业使用，那么他就要对在商业应用中出现的由于使用该源代码程序而产生的侵权诉讼承担完全责任。这一条规定是比较特殊的，绝大多数开源软件许可证都不这么要求。\n  5. 商业软件可以使用，也可以修改Common协议的代码，但要承担代码产生的侵权责任。\n","source":"_posts/license.md","raw":"---\ntitle: \"[转]各种License\"\ndate: 2014-12-25 20:48:49\ncategories: 编程之路\n---\n原文地址：<http://segmentfault.com/blog/lpgray/1190000002397061?utm_source=weibo&ut\nm_medium=shareLink&utm_campaign=socialShare>\n\n_还记得第一次看到CC协议的时候，我惊叹道：世界上竟有如此可爱的协议。之后渐渐融入了开源的世界，了解了更多类似的协议，我个人非常尊重别人的知识，所以可以看到\n在我的博客里面每一篇文章，凡是有借鉴别人的，我一定把别人的文章链接放在文章开始处，以显示对对方的尊重，另外，我的博客完全采用CC协议，转载必须注明出处。以下\n是该文章的内容。_\n\n![](http://zysmedia.qiniudn.com/license.jpg)\n\n最近想搞一个个人小项目，比较在意版权问题，平时在github上经常看到其他人的项目有各种License，却一直没明白过，今天查阅了一些软件License方面\n的资料，在此记录一下。\n\n## 什么是License？\n\nLicense并不意味着你对你的产品放弃了著作权，一旦你使用了License，则表示你授权给他人以约定的形式来使用你的产品。\n\n## 几种常用License\n\n### GPL (GNU General Public License)\n\nGNU General Public License （GPL）的可能是开源项目最常用的许可证。GPL赋予和保证了开源项目开发者广泛的权利。\n\n> 它允许用户合法复制，分发和修改软件，甚至在改良版本上收取费用，但必须要写明GPL License，而且要告诉客户原始版本。\n\n### LGPL\n\n还有另一个GNU License：GNU Lesser General Public License （LGPL）。比起GPL它授予的权限较少。一般来说，L\nGPL比较适合连接到非GPL或者非开源文件的库文件。由于GPL的规定，使用到部分GPL代码的软件，必须也使用GPL，开发人员不能使用GPL来开发收费软件或者\n专有软件。\n\n> LGPL不要求使用与部分代码相同的 License。\n\n### BSD\n\nBSD License与其他自由软件License相比，如GPL，限制更少。但是请注意到BSD License两种版本之间的差别：New BSD\nLicense/Modified BSD License 和Simplified BSD License/FreeBSD\nLicense。它们两者都是于GPL兼容的自由软件License。\n\n#### New BSD License\n\nNew BSD License (”3-clause license”) 可以用于任何作为版权声明和保证许可的免责声明的目的，可以通过无限长的再分发来得以维\n持，也就是说如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协\n议。它还有一个特殊限制条款，不用特别的许可就是限制使用派生工作的工作者名字，也就是说不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。\n\n> New BSD License和Simplified BSD License的主要区别是，后者忽略了非认可条款。\n\n### MIT\n\nMIT是和BSD一样宽松的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源\n代码发布的。\n\n>   * 你可以修改、复制和使用\n\n>   * 你可以出售\n\n>   * 但必须附带MIT授权协议\n\n### Mozilla Public License 1.1 (MPL)\n\nMPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，，它要求基于这种软件得修改无偿贡献版权给该软件。这样\n，围绕该软件得所有代码得版权都集中在发起开发人得手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。\n\n> 商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。\n\n### CDDL\n\nCDDL（Common Development and Distribution License，通用开发与销售许可）开源协议，是MPL（Mozilla\nPublic License）的扩展协议，它允许公共版权使用，无专利费，并提供专利保护，可集成于商业软件中，允许自行发布许可。\n\n> 商业软件可以使用，也可以修改CDDL协议的代码。\n\n### Apache License\n\nApache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布\n(作为开源或商业软件)。\n\n>   * 需要给代码的用户一份Apache License\n\n>   * 在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明\n\n>   * 如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache\nLicense。你可以在Notice中增加自己的许可，但不可以表现为对Apache License构成更改\n\n>   * 商业软件可以使用，也可以修改使用Apache协议的代码\n\n### Eclipse Public License\n\nEPL是一个与CPL相类似的许可证，任何扩展自Eclipse源码的代码也必须是开源的\n\n### Creative Commons（CC）\n\nCreative Commons（CC）的许可证不太开放源代码授权，它们通常用于设计项目。\nCC许可证有着宽广的定义，每个定义都会授予一定的权利。它有四个基本部分，可以单独或者组合使用。\n\n>   * 作者必须是作品的原创者。 除此之外，作品可以修改，分发，复制和以其他方式使用\n\n>   * 工作可以修改，分发等等，但必须在一个许可证下\n\n>   * 可以修改，分发等，但不用于商业目的。 关于什么是“商业”，说法比较含糊（没有提供明确的定义），因此您可能需要在自己的项目中澄清这一点\n\n>   * 禁止修改，这意味着您可以复制和分发许可工作，但你不能以任何方式修改，或在原有的基础开发\n\n>   * 商业软件的使用要遵从CC协议的具体规定，最严格的许可证将是“署名，非商业，不能修改”的授权。这意味着你可以自由共享的工作，但不能改变它，你必须把\n它归功于原创者\n\n### Common Public License 1.0\n\n  1. 明确了专利授权。一般的开源软件都明确源代码的版权人将自己的修改权、复制权等版权权利向公众许可，但保留署名权，而Common许可证在此基础上还明确假如源代码中含有专利权，源代码专利权人将复制、使用的专有权利向公众许可。\n  2. 规定可以将源代码及修改过的源代码与其他类型的不受本许可证约束的代码结合，以新产品的形式发布，只要其中经该许可证获得的源代码及修改过的源代码能按该许可证的要求发布即可。\n  3. 细化了该许可证终止的情形，包括发生专利侵权诉讼。\n  4. 明确了一个独立承担责任的原则，就是假如按该许可证使用源代码的使用者将获得的源代码应用于商业使用，那么他就要对在商业应用中出现的由于使用该源代码程序而产生的侵权诉讼承担完全责任。这一条规定是比较特殊的，绝大多数开源软件许可证都不这么要求。\n  5. 商业软件可以使用，也可以修改Common协议的代码，但要承担代码产生的侵权责任。\n","slug":"license","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2paj002w9vnzpd4bujr0","content":"<p>原文地址：<a href=\"http://segmentfault.com/blog/lpgray/1190000002397061?utm_source=weibo&amp;ut\nm_medium=shareLink&amp;utm_campaign=socialShare\" target=\"_blank\" rel=\"external\">http://segmentfault.com/blog/lpgray/1190000002397061?utm_source=weibo&amp;ut\nm_medium=shareLink&amp;utm_campaign=socialShare</a></p>\n<p><em>还记得第一次看到CC协议的时候，我惊叹道：世界上竟有如此可爱的协议。之后渐渐融入了开源的世界，了解了更多类似的协议，我个人非常尊重别人的知识，所以可以看到<br>在我的博客里面每一篇文章，凡是有借鉴别人的，我一定把别人的文章链接放在文章开始处，以显示对对方的尊重，另外，我的博客完全采用CC协议，转载必须注明出处。以下<br>是该文章的内容。</em></p>\n<p><img src=\"http://zysmedia.qiniudn.com/license.jpg\" alt=\"\"></p>\n<p>最近想搞一个个人小项目，比较在意版权问题，平时在github上经常看到其他人的项目有各种License，却一直没明白过，今天查阅了一些软件License方面<br>的资料，在此记录一下。</p>\n<h2 id=\"什么是License？\"><a href=\"#什么是License？\" class=\"headerlink\" title=\"什么是License？\"></a>什么是License？</h2><p>License并不意味着你对你的产品放弃了著作权，一旦你使用了License，则表示你授权给他人以约定的形式来使用你的产品。</p>\n<h2 id=\"几种常用License\"><a href=\"#几种常用License\" class=\"headerlink\" title=\"几种常用License\"></a>几种常用License</h2><h3 id=\"GPL-GNU-General-Public-License\"><a href=\"#GPL-GNU-General-Public-License\" class=\"headerlink\" title=\"GPL (GNU General Public License)\"></a>GPL (GNU General Public License)</h3><p>GNU General Public License （GPL）的可能是开源项目最常用的许可证。GPL赋予和保证了开源项目开发者广泛的权利。</p>\n<blockquote>\n<p>它允许用户合法复制，分发和修改软件，甚至在改良版本上收取费用，但必须要写明GPL License，而且要告诉客户原始版本。</p>\n</blockquote>\n<h3 id=\"LGPL\"><a href=\"#LGPL\" class=\"headerlink\" title=\"LGPL\"></a>LGPL</h3><p>还有另一个GNU License：GNU Lesser General Public License （LGPL）。比起GPL它授予的权限较少。一般来说，L<br>GPL比较适合连接到非GPL或者非开源文件的库文件。由于GPL的规定，使用到部分GPL代码的软件，必须也使用GPL，开发人员不能使用GPL来开发收费软件或者<br>专有软件。</p>\n<blockquote>\n<p>LGPL不要求使用与部分代码相同的 License。</p>\n</blockquote>\n<h3 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h3><p>BSD License与其他自由软件License相比，如GPL，限制更少。但是请注意到BSD License两种版本之间的差别：New BSD<br>License/Modified BSD License 和Simplified BSD License/FreeBSD<br>License。它们两者都是于GPL兼容的自由软件License。</p>\n<h4 id=\"New-BSD-License\"><a href=\"#New-BSD-License\" class=\"headerlink\" title=\"New BSD License\"></a>New BSD License</h4><p>New BSD License (”3-clause license”) 可以用于任何作为版权声明和保证许可的免责声明的目的，可以通过无限长的再分发来得以维<br>持，也就是说如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协<br>议。它还有一个特殊限制条款，不用特别的许可就是限制使用派生工作的工作者名字，也就是说不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</p>\n<blockquote>\n<p>New BSD License和Simplified BSD License的主要区别是，后者忽略了非认可条款。</p>\n</blockquote>\n<h3 id=\"MIT\"><a href=\"#MIT\" class=\"headerlink\" title=\"MIT\"></a>MIT</h3><p>MIT是和BSD一样宽松的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源<br>代码发布的。</p>\n<blockquote>\n<ul>\n<li><p>你可以修改、复制和使用</p>\n</li>\n<li><p>你可以出售</p>\n</li>\n<li><p>但必须附带MIT授权协议</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Mozilla-Public-License-1-1-MPL\"><a href=\"#Mozilla-Public-License-1-1-MPL\" class=\"headerlink\" title=\"Mozilla Public License 1.1 (MPL)\"></a>Mozilla Public License 1.1 (MPL)</h3><p>MPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，，它要求基于这种软件得修改无偿贡献版权给该软件。这样<br>，围绕该软件得所有代码得版权都集中在发起开发人得手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。</p>\n<blockquote>\n<p>商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。</p>\n</blockquote>\n<h3 id=\"CDDL\"><a href=\"#CDDL\" class=\"headerlink\" title=\"CDDL\"></a>CDDL</h3><p>CDDL（Common Development and Distribution License，通用开发与销售许可）开源协议，是MPL（Mozilla<br>Public License）的扩展协议，它允许公共版权使用，无专利费，并提供专利保护，可集成于商业软件中，允许自行发布许可。</p>\n<blockquote>\n<p>商业软件可以使用，也可以修改CDDL协议的代码。</p>\n</blockquote>\n<h3 id=\"Apache-License\"><a href=\"#Apache-License\" class=\"headerlink\" title=\"Apache License\"></a>Apache License</h3><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布<br>(作为开源或商业软件)。</p>\n<blockquote>\n<ul>\n<li><p>需要给代码的用户一份Apache License</p>\n</li>\n<li><p>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明</p>\n</li>\n<li><p>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache<br>License。你可以在Notice中增加自己的许可，但不可以表现为对Apache License构成更改</p>\n</li>\n<li><p>商业软件可以使用，也可以修改使用Apache协议的代码</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Eclipse-Public-License\"><a href=\"#Eclipse-Public-License\" class=\"headerlink\" title=\"Eclipse Public License\"></a>Eclipse Public License</h3><p>EPL是一个与CPL相类似的许可证，任何扩展自Eclipse源码的代码也必须是开源的</p>\n<h3 id=\"Creative-Commons（CC）\"><a href=\"#Creative-Commons（CC）\" class=\"headerlink\" title=\"Creative Commons（CC）\"></a>Creative Commons（CC）</h3><p>Creative Commons（CC）的许可证不太开放源代码授权，它们通常用于设计项目。<br>CC许可证有着宽广的定义，每个定义都会授予一定的权利。它有四个基本部分，可以单独或者组合使用。</p>\n<blockquote>\n<ul>\n<li><p>作者必须是作品的原创者。 除此之外，作品可以修改，分发，复制和以其他方式使用</p>\n</li>\n<li><p>工作可以修改，分发等等，但必须在一个许可证下</p>\n</li>\n<li><p>可以修改，分发等，但不用于商业目的。 关于什么是“商业”，说法比较含糊（没有提供明确的定义），因此您可能需要在自己的项目中澄清这一点</p>\n</li>\n<li><p>禁止修改，这意味着您可以复制和分发许可工作，但你不能以任何方式修改，或在原有的基础开发</p>\n</li>\n<li><p>商业软件的使用要遵从CC协议的具体规定，最严格的许可证将是“署名，非商业，不能修改”的授权。这意味着你可以自由共享的工作，但不能改变它，你必须把<br>它归功于原创者</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Common-Public-License-1-0\"><a href=\"#Common-Public-License-1-0\" class=\"headerlink\" title=\"Common Public License 1.0\"></a>Common Public License 1.0</h3><ol>\n<li>明确了专利授权。一般的开源软件都明确源代码的版权人将自己的修改权、复制权等版权权利向公众许可，但保留署名权，而Common许可证在此基础上还明确假如源代码中含有专利权，源代码专利权人将复制、使用的专有权利向公众许可。</li>\n<li>规定可以将源代码及修改过的源代码与其他类型的不受本许可证约束的代码结合，以新产品的形式发布，只要其中经该许可证获得的源代码及修改过的源代码能按该许可证的要求发布即可。</li>\n<li>细化了该许可证终止的情形，包括发生专利侵权诉讼。</li>\n<li>明确了一个独立承担责任的原则，就是假如按该许可证使用源代码的使用者将获得的源代码应用于商业使用，那么他就要对在商业应用中出现的由于使用该源代码程序而产生的侵权诉讼承担完全责任。这一条规定是比较特殊的，绝大多数开源软件许可证都不这么要求。</li>\n<li>商业软件可以使用，也可以修改Common协议的代码，但要承担代码产生的侵权责任。</li>\n</ol>\n","excerpt":"","more":"<p>原文地址：<a href=\"http://segmentfault.com/blog/lpgray/1190000002397061?utm_source=weibo&amp;ut\nm_medium=shareLink&amp;utm_campaign=socialShare\">http://segmentfault.com/blog/lpgray/1190000002397061?utm_source=weibo&amp;ut\nm_medium=shareLink&amp;utm_campaign=socialShare</a></p>\n<p><em>还记得第一次看到CC协议的时候，我惊叹道：世界上竟有如此可爱的协议。之后渐渐融入了开源的世界，了解了更多类似的协议，我个人非常尊重别人的知识，所以可以看到<br>在我的博客里面每一篇文章，凡是有借鉴别人的，我一定把别人的文章链接放在文章开始处，以显示对对方的尊重，另外，我的博客完全采用CC协议，转载必须注明出处。以下<br>是该文章的内容。</em></p>\n<p><img src=\"http://zysmedia.qiniudn.com/license.jpg\" alt=\"\"></p>\n<p>最近想搞一个个人小项目，比较在意版权问题，平时在github上经常看到其他人的项目有各种License，却一直没明白过，今天查阅了一些软件License方面<br>的资料，在此记录一下。</p>\n<h2 id=\"什么是License？\"><a href=\"#什么是License？\" class=\"headerlink\" title=\"什么是License？\"></a>什么是License？</h2><p>License并不意味着你对你的产品放弃了著作权，一旦你使用了License，则表示你授权给他人以约定的形式来使用你的产品。</p>\n<h2 id=\"几种常用License\"><a href=\"#几种常用License\" class=\"headerlink\" title=\"几种常用License\"></a>几种常用License</h2><h3 id=\"GPL-GNU-General-Public-License\"><a href=\"#GPL-GNU-General-Public-License\" class=\"headerlink\" title=\"GPL (GNU General Public License)\"></a>GPL (GNU General Public License)</h3><p>GNU General Public License （GPL）的可能是开源项目最常用的许可证。GPL赋予和保证了开源项目开发者广泛的权利。</p>\n<blockquote>\n<p>它允许用户合法复制，分发和修改软件，甚至在改良版本上收取费用，但必须要写明GPL License，而且要告诉客户原始版本。</p>\n</blockquote>\n<h3 id=\"LGPL\"><a href=\"#LGPL\" class=\"headerlink\" title=\"LGPL\"></a>LGPL</h3><p>还有另一个GNU License：GNU Lesser General Public License （LGPL）。比起GPL它授予的权限较少。一般来说，L<br>GPL比较适合连接到非GPL或者非开源文件的库文件。由于GPL的规定，使用到部分GPL代码的软件，必须也使用GPL，开发人员不能使用GPL来开发收费软件或者<br>专有软件。</p>\n<blockquote>\n<p>LGPL不要求使用与部分代码相同的 License。</p>\n</blockquote>\n<h3 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h3><p>BSD License与其他自由软件License相比，如GPL，限制更少。但是请注意到BSD License两种版本之间的差别：New BSD<br>License/Modified BSD License 和Simplified BSD License/FreeBSD<br>License。它们两者都是于GPL兼容的自由软件License。</p>\n<h4 id=\"New-BSD-License\"><a href=\"#New-BSD-License\" class=\"headerlink\" title=\"New BSD License\"></a>New BSD License</h4><p>New BSD License (”3-clause license”) 可以用于任何作为版权声明和保证许可的免责声明的目的，可以通过无限长的再分发来得以维<br>持，也就是说如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协<br>议。它还有一个特殊限制条款，不用特别的许可就是限制使用派生工作的工作者名字，也就是说不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</p>\n<blockquote>\n<p>New BSD License和Simplified BSD License的主要区别是，后者忽略了非认可条款。</p>\n</blockquote>\n<h3 id=\"MIT\"><a href=\"#MIT\" class=\"headerlink\" title=\"MIT\"></a>MIT</h3><p>MIT是和BSD一样宽松的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源<br>代码发布的。</p>\n<blockquote>\n<ul>\n<li><p>你可以修改、复制和使用</p>\n</li>\n<li><p>你可以出售</p>\n</li>\n<li><p>但必须附带MIT授权协议</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Mozilla-Public-License-1-1-MPL\"><a href=\"#Mozilla-Public-License-1-1-MPL\" class=\"headerlink\" title=\"Mozilla Public License 1.1 (MPL)\"></a>Mozilla Public License 1.1 (MPL)</h3><p>MPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。这种授权维护了商业软件的利益，，它要求基于这种软件得修改无偿贡献版权给该软件。这样<br>，围绕该软件得所有代码得版权都集中在发起开发人得手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。</p>\n<blockquote>\n<p>商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。</p>\n</blockquote>\n<h3 id=\"CDDL\"><a href=\"#CDDL\" class=\"headerlink\" title=\"CDDL\"></a>CDDL</h3><p>CDDL（Common Development and Distribution License，通用开发与销售许可）开源协议，是MPL（Mozilla<br>Public License）的扩展协议，它允许公共版权使用，无专利费，并提供专利保护，可集成于商业软件中，允许自行发布许可。</p>\n<blockquote>\n<p>商业软件可以使用，也可以修改CDDL协议的代码。</p>\n</blockquote>\n<h3 id=\"Apache-License\"><a href=\"#Apache-License\" class=\"headerlink\" title=\"Apache License\"></a>Apache License</h3><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布<br>(作为开源或商业软件)。</p>\n<blockquote>\n<ul>\n<li><p>需要给代码的用户一份Apache License</p>\n</li>\n<li><p>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明</p>\n</li>\n<li><p>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache<br>License。你可以在Notice中增加自己的许可，但不可以表现为对Apache License构成更改</p>\n</li>\n<li><p>商业软件可以使用，也可以修改使用Apache协议的代码</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Eclipse-Public-License\"><a href=\"#Eclipse-Public-License\" class=\"headerlink\" title=\"Eclipse Public License\"></a>Eclipse Public License</h3><p>EPL是一个与CPL相类似的许可证，任何扩展自Eclipse源码的代码也必须是开源的</p>\n<h3 id=\"Creative-Commons（CC）\"><a href=\"#Creative-Commons（CC）\" class=\"headerlink\" title=\"Creative Commons（CC）\"></a>Creative Commons（CC）</h3><p>Creative Commons（CC）的许可证不太开放源代码授权，它们通常用于设计项目。<br>CC许可证有着宽广的定义，每个定义都会授予一定的权利。它有四个基本部分，可以单独或者组合使用。</p>\n<blockquote>\n<ul>\n<li><p>作者必须是作品的原创者。 除此之外，作品可以修改，分发，复制和以其他方式使用</p>\n</li>\n<li><p>工作可以修改，分发等等，但必须在一个许可证下</p>\n</li>\n<li><p>可以修改，分发等，但不用于商业目的。 关于什么是“商业”，说法比较含糊（没有提供明确的定义），因此您可能需要在自己的项目中澄清这一点</p>\n</li>\n<li><p>禁止修改，这意味着您可以复制和分发许可工作，但你不能以任何方式修改，或在原有的基础开发</p>\n</li>\n<li><p>商业软件的使用要遵从CC协议的具体规定，最严格的许可证将是“署名，非商业，不能修改”的授权。这意味着你可以自由共享的工作，但不能改变它，你必须把<br>它归功于原创者</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Common-Public-License-1-0\"><a href=\"#Common-Public-License-1-0\" class=\"headerlink\" title=\"Common Public License 1.0\"></a>Common Public License 1.0</h3><ol>\n<li>明确了专利授权。一般的开源软件都明确源代码的版权人将自己的修改权、复制权等版权权利向公众许可，但保留署名权，而Common许可证在此基础上还明确假如源代码中含有专利权，源代码专利权人将复制、使用的专有权利向公众许可。</li>\n<li>规定可以将源代码及修改过的源代码与其他类型的不受本许可证约束的代码结合，以新产品的形式发布，只要其中经该许可证获得的源代码及修改过的源代码能按该许可证的要求发布即可。</li>\n<li>细化了该许可证终止的情形，包括发生专利侵权诉讼。</li>\n<li>明确了一个独立承担责任的原则，就是假如按该许可证使用源代码的使用者将获得的源代码应用于商业使用，那么他就要对在商业应用中出现的由于使用该源代码程序而产生的侵权诉讼承担完全责任。这一条规定是比较特殊的，绝大多数开源软件许可证都不这么要求。</li>\n<li>商业软件可以使用，也可以修改Common协议的代码，但要承担代码产生的侵权责任。</li>\n</ol>\n"},{"title":"Linux暴力破解RAR，ZIP，7Z压缩包","date":"2014-02-21T16:26:43.000Z","_content":"封面图片来自Pixabay\n\n这里使用的软件名称叫rarcrack,其官方主页：<http://rarcrack.sourceforge.net/>\n\n该软件用于暴力破解压缩文件的密码，但仅支持RAR, ZIP,\n7Z这三种类型，其特点是可以使用多线程而且可以暂停与继续(会在当前目录生成一个xml文件，里面显示了正在尝试的一个密码)。\n\n### 安装方法\n\n首先从官网下载安装包，然后执行如下命令  \n$ tar -xjf rarcrack-0.2.tar.bz2  \n$ cd rarcrack-0.2.tar.bz2  \n$ make  \n$ make install\n\n### 使用方法\n\nrarcrack 文件名 [–threads thread_num] [–type rar|zip|7z]\n\n该软件还自带了测试样例，该目录内，执行`rarcrack test.rar --threads 4 --type\nrar`，等待一会儿即可得到结果，其密码是`100`。\n\n如果要改变尝试的位置可以直接打开xml，修改当前密码那一行即可。\n\n如果出现如下错误：  \ngcc -pthread rarcrack.c`xml2-config --libs --cflags`-O2 -o rarcrack  \n/bin/sh: 1: xml2-config: not found  \nIn file included from rarcrack.c:21:0:  \nrarcrack.h:25:48: 致命错误： libxml/xmlmemory.h：没有那个文件或目录  \n编译中断。  \nmake: *** [all] 错误 1\n\n则执行：`sudo apt-get install libxml2-dev libxslt-dev`\n","source":"_posts/linux-brute-force-rar-zip-7z.md","raw":"---\ntitle: \"Linux暴力破解RAR，ZIP，7Z压缩包\"\ndate: 2014-02-22 00:26:43\ncategories: 编程之路\n---\n封面图片来自Pixabay\n\n这里使用的软件名称叫rarcrack,其官方主页：<http://rarcrack.sourceforge.net/>\n\n该软件用于暴力破解压缩文件的密码，但仅支持RAR, ZIP,\n7Z这三种类型，其特点是可以使用多线程而且可以暂停与继续(会在当前目录生成一个xml文件，里面显示了正在尝试的一个密码)。\n\n### 安装方法\n\n首先从官网下载安装包，然后执行如下命令  \n$ tar -xjf rarcrack-0.2.tar.bz2  \n$ cd rarcrack-0.2.tar.bz2  \n$ make  \n$ make install\n\n### 使用方法\n\nrarcrack 文件名 [–threads thread_num] [–type rar|zip|7z]\n\n该软件还自带了测试样例，该目录内，执行`rarcrack test.rar --threads 4 --type\nrar`，等待一会儿即可得到结果，其密码是`100`。\n\n如果要改变尝试的位置可以直接打开xml，修改当前密码那一行即可。\n\n如果出现如下错误：  \ngcc -pthread rarcrack.c`xml2-config --libs --cflags`-O2 -o rarcrack  \n/bin/sh: 1: xml2-config: not found  \nIn file included from rarcrack.c:21:0:  \nrarcrack.h:25:48: 致命错误： libxml/xmlmemory.h：没有那个文件或目录  \n编译中断。  \nmake: *** [all] 错误 1\n\n则执行：`sudo apt-get install libxml2-dev libxslt-dev`\n","slug":"linux-brute-force-rar-zip-7z","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pam002y9vnz09q3m6tn","content":"<p>封面图片来自Pixabay</p>\n<p>这里使用的软件名称叫rarcrack,其官方主页：<a href=\"http://rarcrack.sourceforge.net/\" target=\"_blank\" rel=\"external\">http://rarcrack.sourceforge.net/</a></p>\n<p>该软件用于暴力破解压缩文件的密码，但仅支持RAR, ZIP,<br>7Z这三种类型，其特点是可以使用多线程而且可以暂停与继续(会在当前目录生成一个xml文件，里面显示了正在尝试的一个密码)。</p>\n<h3 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h3><p>首先从官网下载安装包，然后执行如下命令<br>$ tar -xjf rarcrack-0.2.tar.bz2<br>$ cd rarcrack-0.2.tar.bz2<br>$ make<br>$ make install</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>rarcrack 文件名 [–threads thread_num] [–type rar|zip|7z]</p>\n<p>该软件还自带了测试样例，该目录内，执行<code>rarcrack test.rar --threads 4 --type\nrar</code>，等待一会儿即可得到结果，其密码是<code>100</code>。</p>\n<p>如果要改变尝试的位置可以直接打开xml，修改当前密码那一行即可。</p>\n<p>如果出现如下错误：<br>gcc -pthread rarcrack.c<code>xml2-config --libs --cflags</code>-O2 -o rarcrack<br>/bin/sh: 1: xml2-config: not found<br>In file included from rarcrack.c:21:0:<br>rarcrack.h:25:48: 致命错误： libxml/xmlmemory.h：没有那个文件或目录<br>编译中断。<br>make: <em>*</em> [all] 错误 1</p>\n<p>则执行：<code>sudo apt-get install libxml2-dev libxslt-dev</code></p>\n","excerpt":"","more":"<p>封面图片来自Pixabay</p>\n<p>这里使用的软件名称叫rarcrack,其官方主页：<a href=\"http://rarcrack.sourceforge.net/\">http://rarcrack.sourceforge.net/</a></p>\n<p>该软件用于暴力破解压缩文件的密码，但仅支持RAR, ZIP,<br>7Z这三种类型，其特点是可以使用多线程而且可以暂停与继续(会在当前目录生成一个xml文件，里面显示了正在尝试的一个密码)。</p>\n<h3 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h3><p>首先从官网下载安装包，然后执行如下命令<br>$ tar -xjf rarcrack-0.2.tar.bz2<br>$ cd rarcrack-0.2.tar.bz2<br>$ make<br>$ make install</p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>rarcrack 文件名 [–threads thread_num] [–type rar|zip|7z]</p>\n<p>该软件还自带了测试样例，该目录内，执行<code>rarcrack test.rar --threads 4 --type\nrar</code>，等待一会儿即可得到结果，其密码是<code>100</code>。</p>\n<p>如果要改变尝试的位置可以直接打开xml，修改当前密码那一行即可。</p>\n<p>如果出现如下错误：<br>gcc -pthread rarcrack.c<code>xml2-config --libs --cflags</code>-O2 -o rarcrack<br>/bin/sh: 1: xml2-config: not found<br>In file included from rarcrack.c:21:0:<br>rarcrack.h:25:48: 致命错误： libxml/xmlmemory.h：没有那个文件或目录<br>编译中断。<br>make: <em>*</em> [all] 错误 1</p>\n<p>则执行：<code>sudo apt-get install libxml2-dev libxslt-dev</code></p>\n"},{"title":"项目成员使用eclipse的Git插件进行版本管理的流程(基于coding.net)","date":"2014-09-13T06:32:19.000Z","_content":"这才是第一个项目，没想到就遇到这么多问题。这次的主要问题就是和小组成员分管不同的模块，但是每次进行迭代的时候都得把代码传过来传过去，而且虽然是不同的模块，但\n难免会遇到修改同一个文件的问题，这时候不仅要自习地去寻找哪些文件有改动，还要去判断小组中其它成员改动的意图，还有就是小组中其它成员上网条件堪忧，只能用手机流\n量进行上传下载，这样就造成了时间成本和物质成本的浪费。就目前来说，我们没有搭建SVN的条件，而且我本人也是非常推崇Git的，其与SVN的区别在这里就不详解了\n，这里主要就是介绍一下eclipse中EGit插件的用法。\n\n# 1.确认安装\n\n最新的Eclipse IDE应该都自带了EGIT插件的，可以在首选项里面查看：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_0.jpg)  \n\n# 2.全局配置\n\n在这里点击“Add Entry”里面输入在encoding.net申请的帐号的邮箱和用户名(如果是其它网站就换其它网站的帐号就行了)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_1.jpg)  \n\n### 3.克隆远程分支到本地\n\n菜单栏--窗口-->打开透视图-->Git Repository Exploring，在该视图里选择Clone a Git\nrepository或者点击上面的克隆按钮都可：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_2.jpg)  \n然后会出现如下设置界面  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_3.jpg)  \n其中URI就是项目的地址，可以从coding.net网站上该仓库的“代码”选项处获得，输入URI，会自动获得Host和Repository path，而下面\n的User和Password则是该网站的用户名和密码，注意Connection的协议设置，git网站一般提供https和ssh两种方式，端口都是默认端口，这\n里不用写。\n\n这里点击下一步就会提示选择哪个分支(master就是默认的主分支)，选择你需要的分支点击下一步  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_4.jpg)  \n接下来就是项目在本地的一些设置  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_5.jpg)  \n这里可以设置保存的目录，远程分支的名字(默认为origin)，因为我们克隆的就是一个工程，所以可以选择“Import all existing\nprojects after clone finishes”，那么就会在下载完成后直接导入其中的工程(需要注意的是下载的地方不要放在工作空间里，不然不会导入\n或导入失败)。最后在工作空间中就有该项目了：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_6.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_7.jpg)  \n可以看到git项目和其它项目不一样的是，凡是git会记录更改的文件或文件夹右下角都有一个圆柱体的东西。\n\n# 4.对本地内容进行更改\n\n下面尝试一下对本地内容进行修改然后提交的过程。\n当更改了本地内容过后，需要在项目名称上，右键-->team-->commit将当前的更改提交到本地的上传任务中去(此时并没有上传到远程)  \n其中，“Commit message”可以写上你本次的提交信息，注意，提交信息也很重要，可以方便以后查看本次提交主要是提交了什么东西，查看你在这次提交中都做\n了些什么，还可以让团队中其它成员大致了解其中的更改。 下面的Author和Committer默认即可 在下面的Files列表框里面就是选择本次需要提交的文件\n，需要注意的是git会自动列出本次所有更改过的文件，只需要上传更改过的文件就行了。下面点击\"Commit and\nPush\"(也可点击Commit再用push)![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-\ncoding-net_8.jpg)其中有一串奇怪的数字“6656cfcb”就是本次提交的commit\nid(相当于版本号，方便以后进行回退的操作)，此时在coding.net上面就可以看到刚才的提交了，此时还可在“代码”页面查看刚刚的文件是否已经完成了更改  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_9.jpg)  \n\n# 5.提交合并求\n\n当完成一个功能或者模块时，需要进行项目迭代，这时候就要向项目领导人提交合并请求，合并请求可以直接在网页端完成  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_10.jpg)  \n先新建合并请求，注意源分支是你更改的分支，目标分支则是你要把你更改的分支合并到哪里去，这里就是master分支，即主分支。 merge\nrequest标题和内容表示你提交本次合并请求的标题和内容，标题就写明你完成了什么，内容可以详细说明一下你做了什么。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_11.jpg)  \n要想看到自己改动的地方，可以通过最下面的改动明细查看，其中改动的地方用红色标识，红色的在本次提交中被替换成了绿色部分的内容  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_12.jpg)  \n最后点击“提交”\n\n此时，项目负责人那里会收到一封邮件(这功能挺贴心的)提示有了新的提交请求，OK，我只要点击同意合并就算完成了。\n","source":"_posts/eclipse-git-coding-net.md","raw":"---\ntitle: \"项目成员使用eclipse的Git插件进行版本管理的流程(基于coding.net)\"\ndate: 2014-09-13 14:32:19\ncategories: 编程之路\n---\n这才是第一个项目，没想到就遇到这么多问题。这次的主要问题就是和小组成员分管不同的模块，但是每次进行迭代的时候都得把代码传过来传过去，而且虽然是不同的模块，但\n难免会遇到修改同一个文件的问题，这时候不仅要自习地去寻找哪些文件有改动，还要去判断小组中其它成员改动的意图，还有就是小组中其它成员上网条件堪忧，只能用手机流\n量进行上传下载，这样就造成了时间成本和物质成本的浪费。就目前来说，我们没有搭建SVN的条件，而且我本人也是非常推崇Git的，其与SVN的区别在这里就不详解了\n，这里主要就是介绍一下eclipse中EGit插件的用法。\n\n# 1.确认安装\n\n最新的Eclipse IDE应该都自带了EGIT插件的，可以在首选项里面查看：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_0.jpg)  \n\n# 2.全局配置\n\n在这里点击“Add Entry”里面输入在encoding.net申请的帐号的邮箱和用户名(如果是其它网站就换其它网站的帐号就行了)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_1.jpg)  \n\n### 3.克隆远程分支到本地\n\n菜单栏--窗口-->打开透视图-->Git Repository Exploring，在该视图里选择Clone a Git\nrepository或者点击上面的克隆按钮都可：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_2.jpg)  \n然后会出现如下设置界面  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_3.jpg)  \n其中URI就是项目的地址，可以从coding.net网站上该仓库的“代码”选项处获得，输入URI，会自动获得Host和Repository path，而下面\n的User和Password则是该网站的用户名和密码，注意Connection的协议设置，git网站一般提供https和ssh两种方式，端口都是默认端口，这\n里不用写。\n\n这里点击下一步就会提示选择哪个分支(master就是默认的主分支)，选择你需要的分支点击下一步  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_4.jpg)  \n接下来就是项目在本地的一些设置  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_5.jpg)  \n这里可以设置保存的目录，远程分支的名字(默认为origin)，因为我们克隆的就是一个工程，所以可以选择“Import all existing\nprojects after clone finishes”，那么就会在下载完成后直接导入其中的工程(需要注意的是下载的地方不要放在工作空间里，不然不会导入\n或导入失败)。最后在工作空间中就有该项目了：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_6.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_7.jpg)  \n可以看到git项目和其它项目不一样的是，凡是git会记录更改的文件或文件夹右下角都有一个圆柱体的东西。\n\n# 4.对本地内容进行更改\n\n下面尝试一下对本地内容进行修改然后提交的过程。\n当更改了本地内容过后，需要在项目名称上，右键-->team-->commit将当前的更改提交到本地的上传任务中去(此时并没有上传到远程)  \n其中，“Commit message”可以写上你本次的提交信息，注意，提交信息也很重要，可以方便以后查看本次提交主要是提交了什么东西，查看你在这次提交中都做\n了些什么，还可以让团队中其它成员大致了解其中的更改。 下面的Author和Committer默认即可 在下面的Files列表框里面就是选择本次需要提交的文件\n，需要注意的是git会自动列出本次所有更改过的文件，只需要上传更改过的文件就行了。下面点击\"Commit and\nPush\"(也可点击Commit再用push)![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-\ncoding-net_8.jpg)其中有一串奇怪的数字“6656cfcb”就是本次提交的commit\nid(相当于版本号，方便以后进行回退的操作)，此时在coding.net上面就可以看到刚才的提交了，此时还可在“代码”页面查看刚刚的文件是否已经完成了更改  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_9.jpg)  \n\n# 5.提交合并求\n\n当完成一个功能或者模块时，需要进行项目迭代，这时候就要向项目领导人提交合并请求，合并请求可以直接在网页端完成  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_10.jpg)  \n先新建合并请求，注意源分支是你更改的分支，目标分支则是你要把你更改的分支合并到哪里去，这里就是master分支，即主分支。 merge\nrequest标题和内容表示你提交本次合并请求的标题和内容，标题就写明你完成了什么，内容可以详细说明一下你做了什么。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_11.jpg)  \n要想看到自己改动的地方，可以通过最下面的改动明细查看，其中改动的地方用红色标识，红色的在本次提交中被替换成了绿色部分的内容  \n![](http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_12.jpg)  \n最后点击“提交”\n\n此时，项目负责人那里会收到一封邮件(这功能挺贴心的)提示有了新的提交请求，OK，我只要点击同意合并就算完成了。\n","slug":"eclipse-git-coding-net","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pan00309vnzqa8ygsyi","content":"<p>这才是第一个项目，没想到就遇到这么多问题。这次的主要问题就是和小组成员分管不同的模块，但是每次进行迭代的时候都得把代码传过来传过去，而且虽然是不同的模块，但<br>难免会遇到修改同一个文件的问题，这时候不仅要自习地去寻找哪些文件有改动，还要去判断小组中其它成员改动的意图，还有就是小组中其它成员上网条件堪忧，只能用手机流<br>量进行上传下载，这样就造成了时间成本和物质成本的浪费。就目前来说，我们没有搭建SVN的条件，而且我本人也是非常推崇Git的，其与SVN的区别在这里就不详解了<br>，这里主要就是介绍一下eclipse中EGit插件的用法。</p>\n<h1 id=\"1-确认安装\"><a href=\"#1-确认安装\" class=\"headerlink\" title=\"1.确认安装\"></a>1.确认安装</h1><p>最新的Eclipse IDE应该都自带了EGIT插件的，可以在首选项里面查看：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_0.jpg\" alt=\"\">  </p>\n<h1 id=\"2-全局配置\"><a href=\"#2-全局配置\" class=\"headerlink\" title=\"2.全局配置\"></a>2.全局配置</h1><p>在这里点击“Add Entry”里面输入在encoding.net申请的帐号的邮箱和用户名(如果是其它网站就换其它网站的帐号就行了)<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_1.jpg\" alt=\"\">  </p>\n<h3 id=\"3-克隆远程分支到本地\"><a href=\"#3-克隆远程分支到本地\" class=\"headerlink\" title=\"3.克隆远程分支到本地\"></a>3.克隆远程分支到本地</h3><p>菜单栏–窗口–&gt;打开透视图–&gt;Git Repository Exploring，在该视图里选择Clone a Git<br>repository或者点击上面的克隆按钮都可：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_2.jpg\" alt=\"\"><br>然后会出现如下设置界面  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_3.jpg\" alt=\"\"><br>其中URI就是项目的地址，可以从coding.net网站上该仓库的“代码”选项处获得，输入URI，会自动获得Host和Repository path，而下面<br>的User和Password则是该网站的用户名和密码，注意Connection的协议设置，git网站一般提供https和ssh两种方式，端口都是默认端口，这<br>里不用写。</p>\n<p>这里点击下一步就会提示选择哪个分支(master就是默认的主分支)，选择你需要的分支点击下一步<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_4.jpg\" alt=\"\"><br>接下来就是项目在本地的一些设置<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_5.jpg\" alt=\"\"><br>这里可以设置保存的目录，远程分支的名字(默认为origin)，因为我们克隆的就是一个工程，所以可以选择“Import all existing<br>projects after clone finishes”，那么就会在下载完成后直接导入其中的工程(需要注意的是下载的地方不要放在工作空间里，不然不会导入<br>或导入失败)。最后在工作空间中就有该项目了：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_6.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_7.jpg\" alt=\"\"><br>可以看到git项目和其它项目不一样的是，凡是git会记录更改的文件或文件夹右下角都有一个圆柱体的东西。</p>\n<h1 id=\"4-对本地内容进行更改\"><a href=\"#4-对本地内容进行更改\" class=\"headerlink\" title=\"4.对本地内容进行更改\"></a>4.对本地内容进行更改</h1><p>下面尝试一下对本地内容进行修改然后提交的过程。<br>当更改了本地内容过后，需要在项目名称上，右键–&gt;team–&gt;commit将当前的更改提交到本地的上传任务中去(此时并没有上传到远程)<br>其中，“Commit message”可以写上你本次的提交信息，注意，提交信息也很重要，可以方便以后查看本次提交主要是提交了什么东西，查看你在这次提交中都做<br>了些什么，还可以让团队中其它成员大致了解其中的更改。 下面的Author和Committer默认即可 在下面的Files列表框里面就是选择本次需要提交的文件<br>，需要注意的是git会自动列出本次所有更改过的文件，只需要上传更改过的文件就行了。下面点击”Commit and<br>Push”(也可点击Commit再用push)<img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-\ncoding-net_8.jpg\" alt=\"\">其中有一串奇怪的数字“6656cfcb”就是本次提交的commit<br>id(相当于版本号，方便以后进行回退的操作)，此时在coding.net上面就可以看到刚才的提交了，此时还可在“代码”页面查看刚刚的文件是否已经完成了更改<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_9.jpg\" alt=\"\">  </p>\n<h1 id=\"5-提交合并求\"><a href=\"#5-提交合并求\" class=\"headerlink\" title=\"5.提交合并求\"></a>5.提交合并求</h1><p>当完成一个功能或者模块时，需要进行项目迭代，这时候就要向项目领导人提交合并请求，合并请求可以直接在网页端完成<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_10.jpg\" alt=\"\"><br>先新建合并请求，注意源分支是你更改的分支，目标分支则是你要把你更改的分支合并到哪里去，这里就是master分支，即主分支。 merge<br>request标题和内容表示你提交本次合并请求的标题和内容，标题就写明你完成了什么，内容可以详细说明一下你做了什么。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_11.jpg\" alt=\"\"><br>要想看到自己改动的地方，可以通过最下面的改动明细查看，其中改动的地方用红色标识，红色的在本次提交中被替换成了绿色部分的内容<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_12.jpg\" alt=\"\"><br>最后点击“提交”</p>\n<p>此时，项目负责人那里会收到一封邮件(这功能挺贴心的)提示有了新的提交请求，OK，我只要点击同意合并就算完成了。</p>\n","excerpt":"","more":"<p>这才是第一个项目，没想到就遇到这么多问题。这次的主要问题就是和小组成员分管不同的模块，但是每次进行迭代的时候都得把代码传过来传过去，而且虽然是不同的模块，但<br>难免会遇到修改同一个文件的问题，这时候不仅要自习地去寻找哪些文件有改动，还要去判断小组中其它成员改动的意图，还有就是小组中其它成员上网条件堪忧，只能用手机流<br>量进行上传下载，这样就造成了时间成本和物质成本的浪费。就目前来说，我们没有搭建SVN的条件，而且我本人也是非常推崇Git的，其与SVN的区别在这里就不详解了<br>，这里主要就是介绍一下eclipse中EGit插件的用法。</p>\n<h1 id=\"1-确认安装\"><a href=\"#1-确认安装\" class=\"headerlink\" title=\"1.确认安装\"></a>1.确认安装</h1><p>最新的Eclipse IDE应该都自带了EGIT插件的，可以在首选项里面查看：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_0.jpg\" alt=\"\">  </p>\n<h1 id=\"2-全局配置\"><a href=\"#2-全局配置\" class=\"headerlink\" title=\"2.全局配置\"></a>2.全局配置</h1><p>在这里点击“Add Entry”里面输入在encoding.net申请的帐号的邮箱和用户名(如果是其它网站就换其它网站的帐号就行了)<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_1.jpg\" alt=\"\">  </p>\n<h3 id=\"3-克隆远程分支到本地\"><a href=\"#3-克隆远程分支到本地\" class=\"headerlink\" title=\"3.克隆远程分支到本地\"></a>3.克隆远程分支到本地</h3><p>菜单栏–窗口–&gt;打开透视图–&gt;Git Repository Exploring，在该视图里选择Clone a Git<br>repository或者点击上面的克隆按钮都可：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_2.jpg\" alt=\"\"><br>然后会出现如下设置界面  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_3.jpg\" alt=\"\"><br>其中URI就是项目的地址，可以从coding.net网站上该仓库的“代码”选项处获得，输入URI，会自动获得Host和Repository path，而下面<br>的User和Password则是该网站的用户名和密码，注意Connection的协议设置，git网站一般提供https和ssh两种方式，端口都是默认端口，这<br>里不用写。</p>\n<p>这里点击下一步就会提示选择哪个分支(master就是默认的主分支)，选择你需要的分支点击下一步<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_4.jpg\" alt=\"\"><br>接下来就是项目在本地的一些设置<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_5.jpg\" alt=\"\"><br>这里可以设置保存的目录，远程分支的名字(默认为origin)，因为我们克隆的就是一个工程，所以可以选择“Import all existing<br>projects after clone finishes”，那么就会在下载完成后直接导入其中的工程(需要注意的是下载的地方不要放在工作空间里，不然不会导入<br>或导入失败)。最后在工作空间中就有该项目了：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_6.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_7.jpg\" alt=\"\"><br>可以看到git项目和其它项目不一样的是，凡是git会记录更改的文件或文件夹右下角都有一个圆柱体的东西。</p>\n<h1 id=\"4-对本地内容进行更改\"><a href=\"#4-对本地内容进行更改\" class=\"headerlink\" title=\"4.对本地内容进行更改\"></a>4.对本地内容进行更改</h1><p>下面尝试一下对本地内容进行修改然后提交的过程。<br>当更改了本地内容过后，需要在项目名称上，右键–&gt;team–&gt;commit将当前的更改提交到本地的上传任务中去(此时并没有上传到远程)<br>其中，“Commit message”可以写上你本次的提交信息，注意，提交信息也很重要，可以方便以后查看本次提交主要是提交了什么东西，查看你在这次提交中都做<br>了些什么，还可以让团队中其它成员大致了解其中的更改。 下面的Author和Committer默认即可 在下面的Files列表框里面就是选择本次需要提交的文件<br>，需要注意的是git会自动列出本次所有更改过的文件，只需要上传更改过的文件就行了。下面点击”Commit and<br>Push”(也可点击Commit再用push)<img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-\ncoding-net_8.jpg\" alt=\"\">其中有一串奇怪的数字“6656cfcb”就是本次提交的commit<br>id(相当于版本号，方便以后进行回退的操作)，此时在coding.net上面就可以看到刚才的提交了，此时还可在“代码”页面查看刚刚的文件是否已经完成了更改<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_9.jpg\" alt=\"\">  </p>\n<h1 id=\"5-提交合并求\"><a href=\"#5-提交合并求\" class=\"headerlink\" title=\"5.提交合并求\"></a>5.提交合并求</h1><p>当完成一个功能或者模块时，需要进行项目迭代，这时候就要向项目领导人提交合并请求，合并请求可以直接在网页端完成<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_10.jpg\" alt=\"\"><br>先新建合并请求，注意源分支是你更改的分支，目标分支则是你要把你更改的分支合并到哪里去，这里就是master分支，即主分支。 merge<br>request标题和内容表示你提交本次合并请求的标题和内容，标题就写明你完成了什么，内容可以详细说明一下你做了什么。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_11.jpg\" alt=\"\"><br>要想看到自己改动的地方，可以通过最下面的改动明细查看，其中改动的地方用红色标识，红色的在本次提交中被替换成了绿色部分的内容<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/eclipse-git-coding-net_12.jpg\" alt=\"\"><br>最后点击“提交”</p>\n<p>此时，项目负责人那里会收到一封邮件(这功能挺贴心的)提示有了新的提交请求，OK，我只要点击同意合并就算完成了。</p>\n"},{"title":"Linux+goagent+Chrome配置教程","date":"2014-05-16T15:13:29.000Z","_content":"本教程来源于[goagent项目](https://code.google.com/p/goagent)  \n具体步骤如下：\n\n1.申请Google App Engine并创建appid，由于我早已经申请好，所以就不再赘述，详细申请过程上面那个网站上有的\n\n2.下载最新版的goagent并解压，就在刚才那网站上面下载\n\n3.编辑local/proxy.ini，把其中的appid = goagent，password = 你的密码\n中的goagent改成你之前申请的应用的appid\n\n\n4.安装依赖：\n\nsudo apt-get install python-dev python-greenlet python-gevent python-vte\npython-openssl python-crypto python-appindicator  \n网站上说要安装gevent1.0其实用apt安装已经是1.0了，所以不用做那一步了5.上传  \n在解压后的server目录下执行python uploader.zip\n\n6.运行客户端  \n在local目录下赋予proxy.py可执行权限`chmod +x proxy.py`，然后就可以双击执行了，运行过程中请不要关闭\n\n7.设置为开机启动  \n就在这个local目录下执行  \n`python addto-startup.py`\n\n8.安装浏览器插件  \n在谷歌应用中心搜索`Proxy SwitchySharp`并安装\n\n9.配置Proxy SwitchySharp插件：  \n选项 -> 导入/导出 -> 从文件恢复 -> local目录下的SwitchyOptions.bak -> 确认\n\n10.安装证书：进入谷歌浏览器的设置 -> 高级设置 -> HTTPS/SSL的管理证书选项 -> 进到授权中心 -> 点击导入 ->\n选择local文件夹里面的CA.crt -> 此时会弹出一个选项框，将该框的三种信任方式都勾选上然后确定\n\n10.终于完成了，现在在浏览器上面的switchsharp插件选择GoaGent代理，然后推特和facebook等应该都能正常访问了，别忘了关注我的twit\nter：[豪翔天下](<https://twitter.com/haofly>)\n\n\n\n封面图片来自Pixebay\n","source":"_posts/linux-goa gent-chrome.md","raw":"---\ntitle: \"Linux+goagent+Chrome配置教程\"\ndate: 2014-05-16 23:13:29\ncategories: 编程之路\n---\n本教程来源于[goagent项目](https://code.google.com/p/goagent)  \n具体步骤如下：\n\n1.申请Google App Engine并创建appid，由于我早已经申请好，所以就不再赘述，详细申请过程上面那个网站上有的\n\n2.下载最新版的goagent并解压，就在刚才那网站上面下载\n\n3.编辑local/proxy.ini，把其中的appid = goagent，password = 你的密码\n中的goagent改成你之前申请的应用的appid\n\n\n4.安装依赖：\n\nsudo apt-get install python-dev python-greenlet python-gevent python-vte\npython-openssl python-crypto python-appindicator  \n网站上说要安装gevent1.0其实用apt安装已经是1.0了，所以不用做那一步了5.上传  \n在解压后的server目录下执行python uploader.zip\n\n6.运行客户端  \n在local目录下赋予proxy.py可执行权限`chmod +x proxy.py`，然后就可以双击执行了，运行过程中请不要关闭\n\n7.设置为开机启动  \n就在这个local目录下执行  \n`python addto-startup.py`\n\n8.安装浏览器插件  \n在谷歌应用中心搜索`Proxy SwitchySharp`并安装\n\n9.配置Proxy SwitchySharp插件：  \n选项 -> 导入/导出 -> 从文件恢复 -> local目录下的SwitchyOptions.bak -> 确认\n\n10.安装证书：进入谷歌浏览器的设置 -> 高级设置 -> HTTPS/SSL的管理证书选项 -> 进到授权中心 -> 点击导入 ->\n选择local文件夹里面的CA.crt -> 此时会弹出一个选项框，将该框的三种信任方式都勾选上然后确定\n\n10.终于完成了，现在在浏览器上面的switchsharp插件选择GoaGent代理，然后推特和facebook等应该都能正常访问了，别忘了关注我的twit\nter：[豪翔天下](<https://twitter.com/haofly>)\n\n\n\n封面图片来自Pixebay\n","slug":"linux-goa gent-chrome","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pay00329vnzsgquo8nh","content":"<p>本教程来源于<a href=\"https://code.google.com/p/goagent\" target=\"_blank\" rel=\"external\">goagent项目</a><br>具体步骤如下：</p>\n<p>1.申请Google App Engine并创建appid，由于我早已经申请好，所以就不再赘述，详细申请过程上面那个网站上有的</p>\n<p>2.下载最新版的goagent并解压，就在刚才那网站上面下载</p>\n<p>3.编辑local/proxy.ini，把其中的appid = goagent，password = 你的密码<br>中的goagent改成你之前申请的应用的appid</p>\n<p>4.安装依赖：</p>\n<p>sudo apt-get install python-dev python-greenlet python-gevent python-vte<br>python-openssl python-crypto python-appindicator<br>网站上说要安装gevent1.0其实用apt安装已经是1.0了，所以不用做那一步了5.上传<br>在解压后的server目录下执行python uploader.zip</p>\n<p>6.运行客户端<br>在local目录下赋予proxy.py可执行权限<code>chmod +x proxy.py</code>，然后就可以双击执行了，运行过程中请不要关闭</p>\n<p>7.设置为开机启动<br>就在这个local目录下执行<br><code>python addto-startup.py</code></p>\n<p>8.安装浏览器插件<br>在谷歌应用中心搜索<code>Proxy SwitchySharp</code>并安装</p>\n<p>9.配置Proxy SwitchySharp插件：<br>选项 -&gt; 导入/导出 -&gt; 从文件恢复 -&gt; local目录下的SwitchyOptions.bak -&gt; 确认</p>\n<p>10.安装证书：进入谷歌浏览器的设置 -&gt; 高级设置 -&gt; HTTPS/SSL的管理证书选项 -&gt; 进到授权中心 -&gt; 点击导入 -&gt;<br>选择local文件夹里面的CA.crt -&gt; 此时会弹出一个选项框，将该框的三种信任方式都勾选上然后确定</p>\n<p>10.终于完成了，现在在浏览器上面的switchsharp插件选择GoaGent代理，然后推特和facebook等应该都能正常访问了，别忘了关注我的twit<br>ter：<a href=\"https://twitter.com/haofly\" target=\"_blank\" rel=\"external\">豪翔天下</a></p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>本教程来源于<a href=\"https://code.google.com/p/goagent\">goagent项目</a><br>具体步骤如下：</p>\n<p>1.申请Google App Engine并创建appid，由于我早已经申请好，所以就不再赘述，详细申请过程上面那个网站上有的</p>\n<p>2.下载最新版的goagent并解压，就在刚才那网站上面下载</p>\n<p>3.编辑local/proxy.ini，把其中的appid = goagent，password = 你的密码<br>中的goagent改成你之前申请的应用的appid</p>\n<p>4.安装依赖：</p>\n<p>sudo apt-get install python-dev python-greenlet python-gevent python-vte<br>python-openssl python-crypto python-appindicator<br>网站上说要安装gevent1.0其实用apt安装已经是1.0了，所以不用做那一步了5.上传<br>在解压后的server目录下执行python uploader.zip</p>\n<p>6.运行客户端<br>在local目录下赋予proxy.py可执行权限<code>chmod +x proxy.py</code>，然后就可以双击执行了，运行过程中请不要关闭</p>\n<p>7.设置为开机启动<br>就在这个local目录下执行<br><code>python addto-startup.py</code></p>\n<p>8.安装浏览器插件<br>在谷歌应用中心搜索<code>Proxy SwitchySharp</code>并安装</p>\n<p>9.配置Proxy SwitchySharp插件：<br>选项 -&gt; 导入/导出 -&gt; 从文件恢复 -&gt; local目录下的SwitchyOptions.bak -&gt; 确认</p>\n<p>10.安装证书：进入谷歌浏览器的设置 -&gt; 高级设置 -&gt; HTTPS/SSL的管理证书选项 -&gt; 进到授权中心 -&gt; 点击导入 -&gt;<br>选择local文件夹里面的CA.crt -&gt; 此时会弹出一个选项框，将该框的三种信任方式都勾选上然后确定</p>\n<p>10.终于完成了，现在在浏览器上面的switchsharp插件选择GoaGent代理，然后推特和facebook等应该都能正常访问了，别忘了关注我的twit<br>ter：<a href=\"https://twitter.com/haofly\">豪翔天下</a></p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"《慢慢来，一切都来得及》——心慢下来，行动才能快起来","date":"2014-08-25T15:57:16.000Z","_content":"作者：meiya\n\n当时买这本书的时候并不知道这本书只是作者的一部文集，并不是光在写”慢慢来“的，虽然购买书的初衷和内容不一样，但这本书确实让我对作者meiya感到非常的仰慕。\n一个80后的女生(当然比我大，我应该喊姐的)，在城市里孤独地奋斗着，并且面对任何的困难挫折，都能独自勇敢地面对，还能如此乐观地享受着生活给她的一切。很多男生\n都做不到，但她一个”弱女子“就做到了。我也看过一些写给女生的书，但书中很多都是以自己的价值观来给别人引路，但meiya不一样，她觉得即使是”坐在宝马车里”的\n女人也有快乐的可能，每个人，无论男女，都有自己的幸福标准，我们不能指定统一的标准来评判。有些书也叫他们一定要去成为女强人，但都错误地会意成了好强的女人，me\niya不是，她喜欢独立自主，喜欢自己去面对困难，对未来的男友她抱有期望，但她更喜欢当下的生活。\n\n书中共分为四章：\n\n梦，要实现\n\n痛，要转换\n\n病，要痊愈\n\n爱，要学习\n\n通过这四个方面的实践，我们会学会“允许自己慢慢来，才能重新上路“。认真的过好每天，认真的对待生命。《慢慢来，一切都来得及》既教会了我慢，也教会了我快。很多教\n我们克服拖延症方法的书都是一个一个讲方法，但没有哪本书像这样**让我们的梦想来支撑我们改变那些坏习惯，现在就去行动，梦想很美好，但如果一直都只是想，那它就永\n远是一个梦。**\n\n我还想赞扬一下这本书的文笔。meiya的语言既有女汉子的尖锐，也有淑女搬的气质。从我面的语录中就可以看出来，和很多的励志类书籍里面的语句不一样的是，meiy\na的话更有地气，更加让人觉得亲切。\n\n语录：\n\n**与其说我们害怕成为普通人，还不如说害怕生活，害怕找不到一种自己喜欢的方式去度过人生，害怕不知道什么才是自己想要的生活。**\n\n**我怕来不及去做自己想做的事，我怕来不及去实现自己的梦想，我怕来不及拥有我渴望得到的。**\n\n**做你所爱的事，爱你所做的事**\n\n**对于很多像我一样缺乏独立思考能力，又不懂得借鉴他人历史教训的人，只有亲身经历过，才能知道自己想要什么样的生活，就算不知道自己到底想要的是怎样的生活，也至少能明白自己不想要怎样的生活**\n\n**真正的强者是能再人生的旅途中蜕变为只对自己心声负责的达人**\n\n**饭要一口口地吃，路要一步步地走**\n\n**你想中奖那至少该买一张彩票；你想生个孩子遗传自己优良的基因，有对象的前提下你至少需要系辛苦干上几次吧；你想梦想成真那首先该为梦想行动起来，做点什么吧！**\n\n**人，必须选择一种生活方式并有勇气坚持下去**\n\n**当你忘了自己的过去/满意自己的现在/漠视自己的未来/你就站在了生活的最高处**\n\n**等到万事俱备再出发，东风依然不会来**\n\n**最棒的爱情是共同见证彼此的成长，包含物质上和精神上的，这样的感情经得起生活的琐碎与磨砺，经得起时间的考验和岁月的凉薄，对抗得了人生的虚无**\n\n**很多情侣恋爱多年最后没有结婚而是分手了，很多时候是因为没有抓住想结婚那股子冲动**\n\n**我们做事情只要有必要条件就可以行动了，不必等到充分必要条件都满足**\n\n**有多少爱可以重来？这世上有成千上万种爱，但从没有一种爱可以重来。有多少青春可以从来？这世上有成千上万种青春，但从没有一种青春可以重来**\n\n**Just do it, anything is possible**\n\n**有时候我觉得如果我没找到命中注定的那个人，不管我有多成功都没意义**\n\n**人是因为把一件事情干得越来越好才越来越有兴趣，并不是单单对什么感兴趣才干得好的**\n\n**我们所能做得最正确的选择就是选择一种活在当下的态度，认可自己的选择是当下能够做出的最好的选择，只有到那时，我们将不再为选择而苦恼**\n\n**不成熟的爱是：“我爱你，因为我需要你。“而成熟的爱是：”我需要你，因为我爱你。“**\n\n**爱情是婚姻的开始，而不是以条件作为婚姻的开始**\n\n**你为啥不自己奋斗成为有钱人，然后找个男朋友，让他下半辈子不用奋斗，衣食无忧？**\n\n**也许，当某一天我们真正做到不再恐惧平凡；不再恐惧失去自由，与他人缔结联系；不再希望通过追寻得不到的东西来确认自己的存在，证明自己的能力；不再自卑，不再懦弱，能够强大到承担起另一个生命的责任；能够做到对自己的选择满意，活在当下，珍惜眼前，我们就会得到我们想要的，我们得到的就是我们所爱的，我们所爱的也正是我们得到的。**\n\n封面图片来自Pixebay\n","source":"_posts/manmanlai.md","raw":"---\ntitle: \"《慢慢来，一切都来得及》——心慢下来，行动才能快起来\"\ndate: 2014-08-25 23:57:16\ncategories: 韦编三绝\n---\n作者：meiya\n\n当时买这本书的时候并不知道这本书只是作者的一部文集，并不是光在写”慢慢来“的，虽然购买书的初衷和内容不一样，但这本书确实让我对作者meiya感到非常的仰慕。\n一个80后的女生(当然比我大，我应该喊姐的)，在城市里孤独地奋斗着，并且面对任何的困难挫折，都能独自勇敢地面对，还能如此乐观地享受着生活给她的一切。很多男生\n都做不到，但她一个”弱女子“就做到了。我也看过一些写给女生的书，但书中很多都是以自己的价值观来给别人引路，但meiya不一样，她觉得即使是”坐在宝马车里”的\n女人也有快乐的可能，每个人，无论男女，都有自己的幸福标准，我们不能指定统一的标准来评判。有些书也叫他们一定要去成为女强人，但都错误地会意成了好强的女人，me\niya不是，她喜欢独立自主，喜欢自己去面对困难，对未来的男友她抱有期望，但她更喜欢当下的生活。\n\n书中共分为四章：\n\n梦，要实现\n\n痛，要转换\n\n病，要痊愈\n\n爱，要学习\n\n通过这四个方面的实践，我们会学会“允许自己慢慢来，才能重新上路“。认真的过好每天，认真的对待生命。《慢慢来，一切都来得及》既教会了我慢，也教会了我快。很多教\n我们克服拖延症方法的书都是一个一个讲方法，但没有哪本书像这样**让我们的梦想来支撑我们改变那些坏习惯，现在就去行动，梦想很美好，但如果一直都只是想，那它就永\n远是一个梦。**\n\n我还想赞扬一下这本书的文笔。meiya的语言既有女汉子的尖锐，也有淑女搬的气质。从我面的语录中就可以看出来，和很多的励志类书籍里面的语句不一样的是，meiy\na的话更有地气，更加让人觉得亲切。\n\n语录：\n\n**与其说我们害怕成为普通人，还不如说害怕生活，害怕找不到一种自己喜欢的方式去度过人生，害怕不知道什么才是自己想要的生活。**\n\n**我怕来不及去做自己想做的事，我怕来不及去实现自己的梦想，我怕来不及拥有我渴望得到的。**\n\n**做你所爱的事，爱你所做的事**\n\n**对于很多像我一样缺乏独立思考能力，又不懂得借鉴他人历史教训的人，只有亲身经历过，才能知道自己想要什么样的生活，就算不知道自己到底想要的是怎样的生活，也至少能明白自己不想要怎样的生活**\n\n**真正的强者是能再人生的旅途中蜕变为只对自己心声负责的达人**\n\n**饭要一口口地吃，路要一步步地走**\n\n**你想中奖那至少该买一张彩票；你想生个孩子遗传自己优良的基因，有对象的前提下你至少需要系辛苦干上几次吧；你想梦想成真那首先该为梦想行动起来，做点什么吧！**\n\n**人，必须选择一种生活方式并有勇气坚持下去**\n\n**当你忘了自己的过去/满意自己的现在/漠视自己的未来/你就站在了生活的最高处**\n\n**等到万事俱备再出发，东风依然不会来**\n\n**最棒的爱情是共同见证彼此的成长，包含物质上和精神上的，这样的感情经得起生活的琐碎与磨砺，经得起时间的考验和岁月的凉薄，对抗得了人生的虚无**\n\n**很多情侣恋爱多年最后没有结婚而是分手了，很多时候是因为没有抓住想结婚那股子冲动**\n\n**我们做事情只要有必要条件就可以行动了，不必等到充分必要条件都满足**\n\n**有多少爱可以重来？这世上有成千上万种爱，但从没有一种爱可以重来。有多少青春可以从来？这世上有成千上万种青春，但从没有一种青春可以重来**\n\n**Just do it, anything is possible**\n\n**有时候我觉得如果我没找到命中注定的那个人，不管我有多成功都没意义**\n\n**人是因为把一件事情干得越来越好才越来越有兴趣，并不是单单对什么感兴趣才干得好的**\n\n**我们所能做得最正确的选择就是选择一种活在当下的态度，认可自己的选择是当下能够做出的最好的选择，只有到那时，我们将不再为选择而苦恼**\n\n**不成熟的爱是：“我爱你，因为我需要你。“而成熟的爱是：”我需要你，因为我爱你。“**\n\n**爱情是婚姻的开始，而不是以条件作为婚姻的开始**\n\n**你为啥不自己奋斗成为有钱人，然后找个男朋友，让他下半辈子不用奋斗，衣食无忧？**\n\n**也许，当某一天我们真正做到不再恐惧平凡；不再恐惧失去自由，与他人缔结联系；不再希望通过追寻得不到的东西来确认自己的存在，证明自己的能力；不再自卑，不再懦弱，能够强大到承担起另一个生命的责任；能够做到对自己的选择满意，活在当下，珍惜眼前，我们就会得到我们想要的，我们得到的就是我们所爱的，我们所爱的也正是我们得到的。**\n\n封面图片来自Pixebay\n","slug":"manmanlai","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pb300349vnzdxttysxb","content":"<p>作者：meiya</p>\n<p>当时买这本书的时候并不知道这本书只是作者的一部文集，并不是光在写”慢慢来“的，虽然购买书的初衷和内容不一样，但这本书确实让我对作者meiya感到非常的仰慕。<br>一个80后的女生(当然比我大，我应该喊姐的)，在城市里孤独地奋斗着，并且面对任何的困难挫折，都能独自勇敢地面对，还能如此乐观地享受着生活给她的一切。很多男生<br>都做不到，但她一个”弱女子“就做到了。我也看过一些写给女生的书，但书中很多都是以自己的价值观来给别人引路，但meiya不一样，她觉得即使是”坐在宝马车里”的<br>女人也有快乐的可能，每个人，无论男女，都有自己的幸福标准，我们不能指定统一的标准来评判。有些书也叫他们一定要去成为女强人，但都错误地会意成了好强的女人，me<br>iya不是，她喜欢独立自主，喜欢自己去面对困难，对未来的男友她抱有期望，但她更喜欢当下的生活。</p>\n<p>书中共分为四章：</p>\n<p>梦，要实现</p>\n<p>痛，要转换</p>\n<p>病，要痊愈</p>\n<p>爱，要学习</p>\n<p>通过这四个方面的实践，我们会学会“允许自己慢慢来，才能重新上路“。认真的过好每天，认真的对待生命。《慢慢来，一切都来得及》既教会了我慢，也教会了我快。很多教<br>我们克服拖延症方法的书都是一个一个讲方法，但没有哪本书像这样<strong>让我们的梦想来支撑我们改变那些坏习惯，现在就去行动，梦想很美好，但如果一直都只是想，那它就永<br>远是一个梦。</strong></p>\n<p>我还想赞扬一下这本书的文笔。meiya的语言既有女汉子的尖锐，也有淑女搬的气质。从我面的语录中就可以看出来，和很多的励志类书籍里面的语句不一样的是，meiy<br>a的话更有地气，更加让人觉得亲切。</p>\n<p>语录：</p>\n<p><strong>与其说我们害怕成为普通人，还不如说害怕生活，害怕找不到一种自己喜欢的方式去度过人生，害怕不知道什么才是自己想要的生活。</strong></p>\n<p><strong>我怕来不及去做自己想做的事，我怕来不及去实现自己的梦想，我怕来不及拥有我渴望得到的。</strong></p>\n<p><strong>做你所爱的事，爱你所做的事</strong></p>\n<p><strong>对于很多像我一样缺乏独立思考能力，又不懂得借鉴他人历史教训的人，只有亲身经历过，才能知道自己想要什么样的生活，就算不知道自己到底想要的是怎样的生活，也至少能明白自己不想要怎样的生活</strong></p>\n<p><strong>真正的强者是能再人生的旅途中蜕变为只对自己心声负责的达人</strong></p>\n<p><strong>饭要一口口地吃，路要一步步地走</strong></p>\n<p><strong>你想中奖那至少该买一张彩票；你想生个孩子遗传自己优良的基因，有对象的前提下你至少需要系辛苦干上几次吧；你想梦想成真那首先该为梦想行动起来，做点什么吧！</strong></p>\n<p><strong>人，必须选择一种生活方式并有勇气坚持下去</strong></p>\n<p><strong>当你忘了自己的过去/满意自己的现在/漠视自己的未来/你就站在了生活的最高处</strong></p>\n<p><strong>等到万事俱备再出发，东风依然不会来</strong></p>\n<p><strong>最棒的爱情是共同见证彼此的成长，包含物质上和精神上的，这样的感情经得起生活的琐碎与磨砺，经得起时间的考验和岁月的凉薄，对抗得了人生的虚无</strong></p>\n<p><strong>很多情侣恋爱多年最后没有结婚而是分手了，很多时候是因为没有抓住想结婚那股子冲动</strong></p>\n<p><strong>我们做事情只要有必要条件就可以行动了，不必等到充分必要条件都满足</strong></p>\n<p><strong>有多少爱可以重来？这世上有成千上万种爱，但从没有一种爱可以重来。有多少青春可以从来？这世上有成千上万种青春，但从没有一种青春可以重来</strong></p>\n<p><strong>Just do it, anything is possible</strong></p>\n<p><strong>有时候我觉得如果我没找到命中注定的那个人，不管我有多成功都没意义</strong></p>\n<p><strong>人是因为把一件事情干得越来越好才越来越有兴趣，并不是单单对什么感兴趣才干得好的</strong></p>\n<p><strong>我们所能做得最正确的选择就是选择一种活在当下的态度，认可自己的选择是当下能够做出的最好的选择，只有到那时，我们将不再为选择而苦恼</strong></p>\n<p><strong>不成熟的爱是：“我爱你，因为我需要你。“而成熟的爱是：”我需要你，因为我爱你。“</strong></p>\n<p><strong>爱情是婚姻的开始，而不是以条件作为婚姻的开始</strong></p>\n<p><strong>你为啥不自己奋斗成为有钱人，然后找个男朋友，让他下半辈子不用奋斗，衣食无忧？</strong></p>\n<p><strong>也许，当某一天我们真正做到不再恐惧平凡；不再恐惧失去自由，与他人缔结联系；不再希望通过追寻得不到的东西来确认自己的存在，证明自己的能力；不再自卑，不再懦弱，能够强大到承担起另一个生命的责任；能够做到对自己的选择满意，活在当下，珍惜眼前，我们就会得到我们想要的，我们得到的就是我们所爱的，我们所爱的也正是我们得到的。</strong></p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>作者：meiya</p>\n<p>当时买这本书的时候并不知道这本书只是作者的一部文集，并不是光在写”慢慢来“的，虽然购买书的初衷和内容不一样，但这本书确实让我对作者meiya感到非常的仰慕。<br>一个80后的女生(当然比我大，我应该喊姐的)，在城市里孤独地奋斗着，并且面对任何的困难挫折，都能独自勇敢地面对，还能如此乐观地享受着生活给她的一切。很多男生<br>都做不到，但她一个”弱女子“就做到了。我也看过一些写给女生的书，但书中很多都是以自己的价值观来给别人引路，但meiya不一样，她觉得即使是”坐在宝马车里”的<br>女人也有快乐的可能，每个人，无论男女，都有自己的幸福标准，我们不能指定统一的标准来评判。有些书也叫他们一定要去成为女强人，但都错误地会意成了好强的女人，me<br>iya不是，她喜欢独立自主，喜欢自己去面对困难，对未来的男友她抱有期望，但她更喜欢当下的生活。</p>\n<p>书中共分为四章：</p>\n<p>梦，要实现</p>\n<p>痛，要转换</p>\n<p>病，要痊愈</p>\n<p>爱，要学习</p>\n<p>通过这四个方面的实践，我们会学会“允许自己慢慢来，才能重新上路“。认真的过好每天，认真的对待生命。《慢慢来，一切都来得及》既教会了我慢，也教会了我快。很多教<br>我们克服拖延症方法的书都是一个一个讲方法，但没有哪本书像这样<strong>让我们的梦想来支撑我们改变那些坏习惯，现在就去行动，梦想很美好，但如果一直都只是想，那它就永<br>远是一个梦。</strong></p>\n<p>我还想赞扬一下这本书的文笔。meiya的语言既有女汉子的尖锐，也有淑女搬的气质。从我面的语录中就可以看出来，和很多的励志类书籍里面的语句不一样的是，meiy<br>a的话更有地气，更加让人觉得亲切。</p>\n<p>语录：</p>\n<p><strong>与其说我们害怕成为普通人，还不如说害怕生活，害怕找不到一种自己喜欢的方式去度过人生，害怕不知道什么才是自己想要的生活。</strong></p>\n<p><strong>我怕来不及去做自己想做的事，我怕来不及去实现自己的梦想，我怕来不及拥有我渴望得到的。</strong></p>\n<p><strong>做你所爱的事，爱你所做的事</strong></p>\n<p><strong>对于很多像我一样缺乏独立思考能力，又不懂得借鉴他人历史教训的人，只有亲身经历过，才能知道自己想要什么样的生活，就算不知道自己到底想要的是怎样的生活，也至少能明白自己不想要怎样的生活</strong></p>\n<p><strong>真正的强者是能再人生的旅途中蜕变为只对自己心声负责的达人</strong></p>\n<p><strong>饭要一口口地吃，路要一步步地走</strong></p>\n<p><strong>你想中奖那至少该买一张彩票；你想生个孩子遗传自己优良的基因，有对象的前提下你至少需要系辛苦干上几次吧；你想梦想成真那首先该为梦想行动起来，做点什么吧！</strong></p>\n<p><strong>人，必须选择一种生活方式并有勇气坚持下去</strong></p>\n<p><strong>当你忘了自己的过去/满意自己的现在/漠视自己的未来/你就站在了生活的最高处</strong></p>\n<p><strong>等到万事俱备再出发，东风依然不会来</strong></p>\n<p><strong>最棒的爱情是共同见证彼此的成长，包含物质上和精神上的，这样的感情经得起生活的琐碎与磨砺，经得起时间的考验和岁月的凉薄，对抗得了人生的虚无</strong></p>\n<p><strong>很多情侣恋爱多年最后没有结婚而是分手了，很多时候是因为没有抓住想结婚那股子冲动</strong></p>\n<p><strong>我们做事情只要有必要条件就可以行动了，不必等到充分必要条件都满足</strong></p>\n<p><strong>有多少爱可以重来？这世上有成千上万种爱，但从没有一种爱可以重来。有多少青春可以从来？这世上有成千上万种青春，但从没有一种青春可以重来</strong></p>\n<p><strong>Just do it, anything is possible</strong></p>\n<p><strong>有时候我觉得如果我没找到命中注定的那个人，不管我有多成功都没意义</strong></p>\n<p><strong>人是因为把一件事情干得越来越好才越来越有兴趣，并不是单单对什么感兴趣才干得好的</strong></p>\n<p><strong>我们所能做得最正确的选择就是选择一种活在当下的态度，认可自己的选择是当下能够做出的最好的选择，只有到那时，我们将不再为选择而苦恼</strong></p>\n<p><strong>不成熟的爱是：“我爱你，因为我需要你。“而成熟的爱是：”我需要你，因为我爱你。“</strong></p>\n<p><strong>爱情是婚姻的开始，而不是以条件作为婚姻的开始</strong></p>\n<p><strong>你为啥不自己奋斗成为有钱人，然后找个男朋友，让他下半辈子不用奋斗，衣食无忧？</strong></p>\n<p><strong>也许，当某一天我们真正做到不再恐惧平凡；不再恐惧失去自由，与他人缔结联系；不再希望通过追寻得不到的东西来确认自己的存在，证明自己的能力；不再自卑，不再懦弱，能够强大到承担起另一个生命的责任；能够做到对自己的选择满意，活在当下，珍惜眼前，我们就会得到我们想要的，我们得到的就是我们所爱的，我们所爱的也正是我们得到的。</strong></p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"修改U盘图标","date":"2014-10-30T04:54:14.000Z","_content":"虽然用U盘装过很多次系统了，但昨天突然感觉制作完win7启动盘后，那个图标也太丑了吧。所以毅然决定改了一下，通过这种改动，无论是在什么电脑上都能显示出来的。\n\n# 1.制作图标\n\nU盘的图标其实png, jpg, ico什么类型的都支持的，但是为了美观，最好选择png或ico，我就用的ico，因为这两者会把透明部分真正透明化。至于怎么\n制作ico，可以使用Photoshop修改好了过后保存为png图片，然后在线将png转换为ico格式：[图标在线转换工具](http://www.img2i\nco.net/)\n\n# 2.在U盘根目录新建文件autorun.inf\n\n内容如下：\n\n\n\n    [AutoRun.Amd64]\n    icon=haofly.ico\n\n\n\n\n    [AutoRun]\n    icon=haofly.ico\n\n\n# 3.将图片haofly.ico拷贝到U盘根目录\n\n# 4.结果如下\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/modify-u-disk-logo.png)﻿  \n","source":"_posts/modify-u-disk-logo.md","raw":"---\ntitle: \"修改U盘图标\"\ndate: 2014-10-30 12:54:14\ncategories: 就是爱玩\n---\n虽然用U盘装过很多次系统了，但昨天突然感觉制作完win7启动盘后，那个图标也太丑了吧。所以毅然决定改了一下，通过这种改动，无论是在什么电脑上都能显示出来的。\n\n# 1.制作图标\n\nU盘的图标其实png, jpg, ico什么类型的都支持的，但是为了美观，最好选择png或ico，我就用的ico，因为这两者会把透明部分真正透明化。至于怎么\n制作ico，可以使用Photoshop修改好了过后保存为png图片，然后在线将png转换为ico格式：[图标在线转换工具](http://www.img2i\nco.net/)\n\n# 2.在U盘根目录新建文件autorun.inf\n\n内容如下：\n\n\n\n    [AutoRun.Amd64]\n    icon=haofly.ico\n\n\n\n\n    [AutoRun]\n    icon=haofly.ico\n\n\n# 3.将图片haofly.ico拷贝到U盘根目录\n\n# 4.结果如下\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/modify-u-disk-logo.png)﻿  \n","slug":"modify-u-disk-logo","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pb500369vnzm0a830eh","content":"<p>虽然用U盘装过很多次系统了，但昨天突然感觉制作完win7启动盘后，那个图标也太丑了吧。所以毅然决定改了一下，通过这种改动，无论是在什么电脑上都能显示出来的。</p>\n<h1 id=\"1-制作图标\"><a href=\"#1-制作图标\" class=\"headerlink\" title=\"1.制作图标\"></a>1.制作图标</h1><p>U盘的图标其实png, jpg, ico什么类型的都支持的，但是为了美观，最好选择png或ico，我就用的ico，因为这两者会把透明部分真正透明化。至于怎么<br>制作ico，可以使用Photoshop修改好了过后保存为png图片，然后在线将png转换为ico格式：<a href=\"http://www.img2i\nco.net/\" target=\"_blank\" rel=\"external\">图标在线转换工具</a></p>\n<h1 id=\"2-在U盘根目录新建文件autorun-inf\"><a href=\"#2-在U盘根目录新建文件autorun-inf\" class=\"headerlink\" title=\"2.在U盘根目录新建文件autorun.inf\"></a>2.在U盘根目录新建文件autorun.inf</h1><p>内容如下：</p>\n<pre><code>[AutoRun.Amd64]\nicon=haofly.ico\n\n\n\n\n[AutoRun]\nicon=haofly.ico\n</code></pre><h1 id=\"3-将图片haofly-ico拷贝到U盘根目录\"><a href=\"#3-将图片haofly-ico拷贝到U盘根目录\" class=\"headerlink\" title=\"3.将图片haofly.ico拷贝到U盘根目录\"></a>3.将图片haofly.ico拷贝到U盘根目录</h1><h1 id=\"4-结果如下\"><a href=\"#4-结果如下\" class=\"headerlink\" title=\"4.结果如下\"></a>4.结果如下</h1><p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/modify-u-disk-logo.png\" alt=\"\">﻿  </p>\n","excerpt":"","more":"<p>虽然用U盘装过很多次系统了，但昨天突然感觉制作完win7启动盘后，那个图标也太丑了吧。所以毅然决定改了一下，通过这种改动，无论是在什么电脑上都能显示出来的。</p>\n<h1 id=\"1-制作图标\"><a href=\"#1-制作图标\" class=\"headerlink\" title=\"1.制作图标\"></a>1.制作图标</h1><p>U盘的图标其实png, jpg, ico什么类型的都支持的，但是为了美观，最好选择png或ico，我就用的ico，因为这两者会把透明部分真正透明化。至于怎么<br>制作ico，可以使用Photoshop修改好了过后保存为png图片，然后在线将png转换为ico格式：<a href=\"http://www.img2i\nco.net/\">图标在线转换工具</a></p>\n<h1 id=\"2-在U盘根目录新建文件autorun-inf\"><a href=\"#2-在U盘根目录新建文件autorun-inf\" class=\"headerlink\" title=\"2.在U盘根目录新建文件autorun.inf\"></a>2.在U盘根目录新建文件autorun.inf</h1><p>内容如下：</p>\n<pre><code>[AutoRun.Amd64]\nicon=haofly.ico\n\n\n\n\n[AutoRun]\nicon=haofly.ico\n</code></pre><h1 id=\"3-将图片haofly-ico拷贝到U盘根目录\"><a href=\"#3-将图片haofly-ico拷贝到U盘根目录\" class=\"headerlink\" title=\"3.将图片haofly.ico拷贝到U盘根目录\"></a>3.将图片haofly.ico拷贝到U盘根目录</h1><h1 id=\"4-结果如下\"><a href=\"#4-结果如下\" class=\"headerlink\" title=\"4.结果如下\"></a>4.结果如下</h1><p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/modify-u-disk-logo.png\" alt=\"\">﻿  </p>\n"},{"title":"重邮等高校在Linux下使用openkeeper代替netkeeper连接网络","date":"2014-03-02T07:27:56.000Z","_content":"封面图片来自：Pixabay  \n\n首先下载大神们做好的软件包：[点此下载](http://download.csdn.net/detail/haoxiangtianxia/6982631)（\n其实这里面也有安装说明的），由重邮linux协会以及linux story团队提供  \n重邮BBS地址：<http://bbs.cqupt.edu.cn/nForum/#!article/Unix_Linux/13702>\n\n然后执行以下命令：\n\n1\n\n2\n\n3\n\n4\n\n|\n\ntar -jxv -f openkeeper-cli-1.1.tar.bz2 # 解压缩到当前目录\n\ncd openkeeper-cli-1.1 # 进入目录\n\nls #显示当前目录文件\n\n32 64 build-essential_11.6ubuntu4_amd64.deb README  \n\n---|---  \n\n如果电脑没有安装build-essential需要先安装它，如果有归档管理器，那么双击`build-\nessential_11.6ubuntu4_amd64.deb`即可安装，如果没有或者是你的电脑是32位系统那么就执行`sudo apt-get\ninstall build-essential`即可安装依赖。\n\n\n然后进入进入目录安装，执行：\n\n1\n\n2\n\n3\n\n|\n\ncd 64 # 进入该目录，如果是32位系统请选择32这个文件夹\n\nsudo chmod 777 install.sh # 给install.sh添加可执行权限\n\nsudo ./install.sh # 执行安装命令  \n\n---|---  \n\n这样就安装好了，安装好后，可以使用如下命令进行配置和连接(此时不一定要当前目录的，因为这几个命令已经放到了你的/usr/bin/中去了)：\n\n1\n\n2\n\n3\n\n|\n\nok-config # 配置网络参数，这里会要求输入用户名密码以及网卡(网卡默认eth0)\n\nokok # 这一点与README里介绍的不同，我想是因为这个东西是后人对前人改进了的，以前的版本会每十分钟断一次的\n\nokok-stop # 断开网络  \n\n---|---  \n\n如此，便可以连接外网了。以后开机只需要输入`sudo okok`即可。\n\n如果要连接内网，还要进行如下配置：\n\n点击网络设置，如下图：\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_0.png)  \n\n如果没有该网络管理软件，可执行`sudo apt-get install network-manager-network`安装\n\n然后点击以太网里面的一个选项编辑，出现如下对话框：\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_1.png)  \n\n然后选择”821.X安全性“选项卡，这里输入内网的用户名和密码，然后就可以进入内网了\n\n## openkeeper下载地址\n\n因为打包的时候并没有在所有平台尝试，所以选择最好的\n\n[openkeeper-cli-1.1.tar.gz](http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz \"Link: http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz\" )\n\n[openkeeper-\ncli-1.3.1-noarch.tar.gz](http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.3.1-noarch.tar.gz)\n","source":"_posts/linux-openkeeper-netkeeper.md","raw":"---\ntitle: \"重邮等高校在linux下使用openkeeper代替netkeeper连接网络\"\ndate: 2014-03-02 15:27:56\ncategories: 编程之路\n---\n封面图片来自：Pixabay  \n\n首先下载大神们做好的软件包：[点此下载](http://download.csdn.net/detail/haoxiangtianxia/6982631)（\n其实这里面也有安装说明的），由重邮linux协会以及linux story团队提供  \n重邮BBS地址：<http://bbs.cqupt.edu.cn/nForum/#!article/Unix_Linux/13702>\n\n然后执行以下命令：\n\n1\n\n2\n\n3\n\n4\n\n|\n\ntar -jxv -f openkeeper-cli-1.1.tar.bz2 # 解压缩到当前目录\n\ncd openkeeper-cli-1.1 # 进入目录\n\nls #显示当前目录文件\n\n32 64 build-essential_11.6ubuntu4_amd64.deb README  \n\n---|---  \n\n如果电脑没有安装build-essential需要先安装它，如果有归档管理器，那么双击`build-\nessential_11.6ubuntu4_amd64.deb`即可安装，如果没有或者是你的电脑是32位系统那么就执行`sudo apt-get\ninstall build-essential`即可安装依赖。\n\n\n然后进入进入目录安装，执行：\n\n1\n\n2\n\n3\n\n|\n\ncd 64 # 进入该目录，如果是32位系统请选择32这个文件夹\n\nsudo chmod 777 install.sh # 给install.sh添加可执行权限\n\nsudo ./install.sh # 执行安装命令  \n\n---|---  \n\n这样就安装好了，安装好后，可以使用如下命令进行配置和连接(此时不一定要当前目录的，因为这几个命令已经放到了你的/usr/bin/中去了)：\n\n1\n\n2\n\n3\n\n|\n\nok-config # 配置网络参数，这里会要求输入用户名密码以及网卡(网卡默认eth0)\n\nokok # 这一点与README里介绍的不同，我想是因为这个东西是后人对前人改进了的，以前的版本会每十分钟断一次的\n\nokok-stop # 断开网络  \n\n---|---  \n\n如此，便可以连接外网了。以后开机只需要输入`sudo okok`即可。\n\n如果要连接内网，还要进行如下配置：\n\n点击网络设置，如下图：\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_0.png)  \n\n如果没有该网络管理软件，可执行`sudo apt-get install network-manager-network`安装\n\n然后点击以太网里面的一个选项编辑，出现如下对话框：\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_1.png)  \n\n然后选择”821.X安全性“选项卡，这里输入内网的用户名和密码，然后就可以进入内网了\n\n## openkeeper下载地址\n\n因为打包的时候并没有在所有平台尝试，所以选择最好的\n\n[openkeeper-cli-1.1.tar.gz](http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz \"Link: http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz\" )\n\n[openkeeper-\ncli-1.3.1-noarch.tar.gz](http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.3.1-noarch.tar.gz)\n","slug":"linux-openkeeper-netkeeper","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pb800389vnzlk5hticg","content":"<p>封面图片来自：Pixabay  </p>\n<p>首先下载大神们做好的软件包：<a href=\"http://download.csdn.net/detail/haoxiangtianxia/6982631\" target=\"_blank\" rel=\"external\">点此下载</a>（<br>其实这里面也有安装说明的），由重邮linux协会以及linux story团队提供<br>重邮BBS地址：<a href=\"http://bbs.cqupt.edu.cn/nForum/#!article/Unix_Linux/13702\" target=\"_blank\" rel=\"external\">http://bbs.cqupt.edu.cn/nForum/#!article/Unix_Linux/13702</a></p>\n<p>然后执行以下命令：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>|</p>\n<p>tar -jxv -f openkeeper-cli-1.1.tar.bz2 # 解压缩到当前目录</p>\n<p>cd openkeeper-cli-1.1 # 进入目录</p>\n<p>ls #显示当前目录文件</p>\n<p>32 64 build-essential_11.6ubuntu4_amd64.deb README  </p>\n<p>—|—  </p>\n<p>如果电脑没有安装build-essential需要先安装它，如果有归档管理器，那么双击<code>build-\nessential_11.6ubuntu4_amd64.deb</code>即可安装，如果没有或者是你的电脑是32位系统那么就执行<code>sudo apt-get\ninstall build-essential</code>即可安装依赖。</p>\n<p>然后进入进入目录安装，执行：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>cd 64 # 进入该目录，如果是32位系统请选择32这个文件夹</p>\n<p>sudo chmod 777 install.sh # 给install.sh添加可执行权限</p>\n<p>sudo ./install.sh # 执行安装命令  </p>\n<p>—|—  </p>\n<p>这样就安装好了，安装好后，可以使用如下命令进行配置和连接(此时不一定要当前目录的，因为这几个命令已经放到了你的/usr/bin/中去了)：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>ok-config # 配置网络参数，这里会要求输入用户名密码以及网卡(网卡默认eth0)</p>\n<p>okok # 这一点与README里介绍的不同，我想是因为这个东西是后人对前人改进了的，以前的版本会每十分钟断一次的</p>\n<p>okok-stop # 断开网络  </p>\n<p>—|—  </p>\n<p>如此，便可以连接外网了。以后开机只需要输入<code>sudo okok</code>即可。</p>\n<p>如果要连接内网，还要进行如下配置：</p>\n<p>点击网络设置，如下图：</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_0.png\" alt=\"\">  </p>\n<p>如果没有该网络管理软件，可执行<code>sudo apt-get install network-manager-network</code>安装</p>\n<p>然后点击以太网里面的一个选项编辑，出现如下对话框：</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_1.png\" alt=\"\">  </p>\n<p>然后选择”821.X安全性“选项卡，这里输入内网的用户名和密码，然后就可以进入内网了</p>\n<h2 id=\"openkeeper下载地址\"><a href=\"#openkeeper下载地址\" class=\"headerlink\" title=\"openkeeper下载地址\"></a>openkeeper下载地址</h2><p>因为打包的时候并没有在所有平台尝试，所以选择最好的</p>\n<p><a href=\"http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz\" title=\"Link: http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz\" target=\"_blank\" rel=\"external\">openkeeper-cli-1.1.tar.gz</a></p>\n<p><a href=\"http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.3.1-noarch.tar.gz\" target=\"_blank\" rel=\"external\">openkeeper-<br>cli-1.3.1-noarch.tar.gz</a></p>\n","excerpt":"","more":"<p>封面图片来自：Pixabay  </p>\n<p>首先下载大神们做好的软件包：<a href=\"http://download.csdn.net/detail/haoxiangtianxia/6982631\">点此下载</a>（<br>其实这里面也有安装说明的），由重邮linux协会以及linux story团队提供<br>重邮BBS地址：<a href=\"http://bbs.cqupt.edu.cn/nForum/#!article/Unix_Linux/13702\">http://bbs.cqupt.edu.cn/nForum/#!article/Unix_Linux/13702</a></p>\n<p>然后执行以下命令：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>|</p>\n<p>tar -jxv -f openkeeper-cli-1.1.tar.bz2 # 解压缩到当前目录</p>\n<p>cd openkeeper-cli-1.1 # 进入目录</p>\n<p>ls #显示当前目录文件</p>\n<p>32 64 build-essential_11.6ubuntu4_amd64.deb README  </p>\n<p>—|—  </p>\n<p>如果电脑没有安装build-essential需要先安装它，如果有归档管理器，那么双击<code>build-\nessential_11.6ubuntu4_amd64.deb</code>即可安装，如果没有或者是你的电脑是32位系统那么就执行<code>sudo apt-get\ninstall build-essential</code>即可安装依赖。</p>\n<p>然后进入进入目录安装，执行：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>cd 64 # 进入该目录，如果是32位系统请选择32这个文件夹</p>\n<p>sudo chmod 777 install.sh # 给install.sh添加可执行权限</p>\n<p>sudo ./install.sh # 执行安装命令  </p>\n<p>—|—  </p>\n<p>这样就安装好了，安装好后，可以使用如下命令进行配置和连接(此时不一定要当前目录的，因为这几个命令已经放到了你的/usr/bin/中去了)：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>|</p>\n<p>ok-config # 配置网络参数，这里会要求输入用户名密码以及网卡(网卡默认eth0)</p>\n<p>okok # 这一点与README里介绍的不同，我想是因为这个东西是后人对前人改进了的，以前的版本会每十分钟断一次的</p>\n<p>okok-stop # 断开网络  </p>\n<p>—|—  </p>\n<p>如此，便可以连接外网了。以后开机只需要输入<code>sudo okok</code>即可。</p>\n<p>如果要连接内网，还要进行如下配置：</p>\n<p>点击网络设置，如下图：</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_0.png\" alt=\"\">  </p>\n<p>如果没有该网络管理软件，可执行<code>sudo apt-get install network-manager-network</code>安装</p>\n<p>然后点击以太网里面的一个选项编辑，出现如下对话框：</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/linux-openkeeper-netkeeper_1.png\" alt=\"\">  </p>\n<p>然后选择”821.X安全性“选项卡，这里输入内网的用户名和密码，然后就可以进入内网了</p>\n<h2 id=\"openkeeper下载地址\"><a href=\"#openkeeper下载地址\" class=\"headerlink\" title=\"openkeeper下载地址\"></a>openkeeper下载地址</h2><p>因为打包的时候并没有在所有平台尝试，所以选择最好的</p>\n<p><a href=\"http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz\" title=\"Link: http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.1.tar.gz\">openkeeper-cli-1.1.tar.gz</a></p>\n<p><a href=\"http://7xjhvx.dl1.z0.glb.clouddn.com/openkeeper-\ncli-1.3.1-noarch.tar.gz\">openkeeper-<br>cli-1.3.1-noarch.tar.gz</a></p>\n"},{"title":"Linux命令行查看实时网速","date":"2014-02-10T11:41:02.000Z","_content":"> 封面图片来自：Pixabay\n\n>\n\n> 我们有时候经常会想查看系统的网速，但是又懒得打开那些能够查看网速的应用，那么直接在终端里用命令行查看网速就很想需要了。不过，貌似ubuntu并没有提供类\n似的命令，所以直接写了个shell来实现，具体代码如下：  \nLANG=””  \nwhile true  \ndo  \nup_time1=`ifconfig $1 | grep \"bytes\" | awk '\\{printf $6\\}'`  \ndown_time1=`ifconfig $1 | grep \"bytes\" | awk '\\{print $2\\}'`\n\n>\n\n> sleep 1  \nclear\n\n>\n\n> up_time2=`ifconfig $1 | grep \"bytes\" | awk '\\{print $6\\}'`  \ndown_time2=`ifconfig $1 | grep \"bytes\" | awk '\\{print $2\\}'`\n\n>\n\n> up_time1=$\\{up_time1##bytes:\\}  \nup_time2=$\\{up_time2##bytes:\\}  \ndown_time1=$\\{down_time1##bytes:\\}  \ndown_time2=$\\{down_time2##bytes:\\}\n\n>\n\n> up_time=`expr $up_time2 - $up_time1`  \ndown_time=`expr $down_time2 - $down_time1`  \nup_time=`expr $up_time / 1024`  \ndown_time=`expr $down_time / 1024`\n\n>\n\n> echo 上传速度：$up_time kb/s  \necho 下载速度：$down_time kb/s  \ndone  \n保存该文件为wangsu，并添加可执行的属性，然后执行`./wangsu\nwlan0`(我这里用的是无线网，所以是wlan0,如果是有线网，一般参数是eth0)就会看到实时的网速了。最后执行`sudo cp wangsu\n/usr/sbin/`命令，将文件复制到/usr/sbin目录，以后就可以直接用命令`wangsu wlan0`查看了\n\n相关命令介绍：\n\n[awk命令详解](http://haofly.net/awk/ \"Link: http://haofly.net/awk/\" )\n\n[expr 命令详解](http://haofly.net/expr/ \"Link: http://haofly.net/expr/\" )\n","source":"_posts/linux-watch-network-speed.md","raw":"---\ntitle: \"linux命令行查看实时网速\"\ndate: 2014-02-10 19:41:02\ncategories: 编程之路\n---\n> 封面图片来自：Pixabay\n\n>\n\n> 我们有时候经常会想查看系统的网速，但是又懒得打开那些能够查看网速的应用，那么直接在终端里用命令行查看网速就很想需要了。不过，貌似ubuntu并没有提供类\n似的命令，所以直接写了个shell来实现，具体代码如下：  \nLANG=””  \nwhile true  \ndo  \nup_time1=`ifconfig $1 | grep \"bytes\" | awk '\\{printf $6\\}'`  \ndown_time1=`ifconfig $1 | grep \"bytes\" | awk '\\{print $2\\}'`\n\n>\n\n> sleep 1  \nclear\n\n>\n\n> up_time2=`ifconfig $1 | grep \"bytes\" | awk '\\{print $6\\}'`  \ndown_time2=`ifconfig $1 | grep \"bytes\" | awk '\\{print $2\\}'`\n\n>\n\n> up_time1=$\\{up_time1##bytes:\\}  \nup_time2=$\\{up_time2##bytes:\\}  \ndown_time1=$\\{down_time1##bytes:\\}  \ndown_time2=$\\{down_time2##bytes:\\}\n\n>\n\n> up_time=`expr $up_time2 - $up_time1`  \ndown_time=`expr $down_time2 - $down_time1`  \nup_time=`expr $up_time / 1024`  \ndown_time=`expr $down_time / 1024`\n\n>\n\n> echo 上传速度：$up_time kb/s  \necho 下载速度：$down_time kb/s  \ndone  \n保存该文件为wangsu，并添加可执行的属性，然后执行`./wangsu\nwlan0`(我这里用的是无线网，所以是wlan0,如果是有线网，一般参数是eth0)就会看到实时的网速了。最后执行`sudo cp wangsu\n/usr/sbin/`命令，将文件复制到/usr/sbin目录，以后就可以直接用命令`wangsu wlan0`查看了\n\n相关命令介绍：\n\n[awk命令详解](http://haofly.net/awk/ \"Link: http://haofly.net/awk/\" )\n\n[expr 命令详解](http://haofly.net/expr/ \"Link: http://haofly.net/expr/\" )\n","slug":"linux-watch-network-speed","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pbg003b9vnz6a3gzf29","content":"<blockquote>\n<p>封面图片来自：Pixabay</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>我们有时候经常会想查看系统的网速，但是又懒得打开那些能够查看网速的应用，那么直接在终端里用命令行查看网速就很想需要了。不过，貌似ubuntu并没有提供类<br>似的命令，所以直接写了个shell来实现，具体代码如下：<br>LANG=””<br>while true<br>do<br>up_time1=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{printf $6\\}&#39;</code><br>down_time1=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{print $2\\}&#39;</code></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>sleep 1<br>clear</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>up_time2=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{print $6\\}&#39;</code><br>down_time2=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{print $2\\}&#39;</code></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>up_time1=${up_time1##bytes:}<br>up_time2=${up_time2##bytes:}<br>down_time1=${down_time1##bytes:}<br>down_time2=${down_time2##bytes:}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>up_time=<code>expr $up_time2 - $up_time1</code><br>down_time=<code>expr $down_time2 - $down_time1</code><br>up_time=<code>expr $up_time / 1024</code><br>down_time=<code>expr $down_time / 1024</code></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>echo 上传速度：$up_time kb/s<br>echo 下载速度：$down_time kb/s<br>done<br>保存该文件为wangsu，并添加可执行的属性，然后执行<code>./wangsu\nwlan0</code>(我这里用的是无线网，所以是wlan0,如果是有线网，一般参数是eth0)就会看到实时的网速了。最后执行<code>sudo cp wangsu\n/usr/sbin/</code>命令，将文件复制到/usr/sbin目录，以后就可以直接用命令<code>wangsu wlan0</code>查看了</p>\n</blockquote>\n<p>相关命令介绍：</p>\n<p><a href=\"http://haofly.net/awk/\" title=\"Link: http://haofly.net/awk/\">awk命令详解</a></p>\n<p><a href=\"http://haofly.net/expr/\" title=\"Link: http://haofly.net/expr/\">expr 命令详解</a></p>\n","excerpt":"","more":"<blockquote>\n<p>封面图片来自：Pixabay</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>我们有时候经常会想查看系统的网速，但是又懒得打开那些能够查看网速的应用，那么直接在终端里用命令行查看网速就很想需要了。不过，貌似ubuntu并没有提供类<br>似的命令，所以直接写了个shell来实现，具体代码如下：<br>LANG=””<br>while true<br>do<br>up_time1=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{printf $6\\}&#39;</code><br>down_time1=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{print $2\\}&#39;</code></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>sleep 1<br>clear</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>up_time2=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{print $6\\}&#39;</code><br>down_time2=<code>ifconfig $1 | grep &quot;bytes&quot; | awk &#39;\\{print $2\\}&#39;</code></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>up_time1=${up_time1##bytes:}<br>up_time2=${up_time2##bytes:}<br>down_time1=${down_time1##bytes:}<br>down_time2=${down_time2##bytes:}</p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>up_time=<code>expr $up_time2 - $up_time1</code><br>down_time=<code>expr $down_time2 - $down_time1</code><br>up_time=<code>expr $up_time / 1024</code><br>down_time=<code>expr $down_time / 1024</code></p>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>echo 上传速度：$up_time kb/s<br>echo 下载速度：$down_time kb/s<br>done<br>保存该文件为wangsu，并添加可执行的属性，然后执行<code>./wangsu\nwlan0</code>(我这里用的是无线网，所以是wlan0,如果是有线网，一般参数是eth0)就会看到实时的网速了。最后执行<code>sudo cp wangsu\n/usr/sbin/</code>命令，将文件复制到/usr/sbin目录，以后就可以直接用命令<code>wangsu wlan0</code>查看了</p>\n</blockquote>\n<p>相关命令介绍：</p>\n<p><a href=\"http://haofly.net/awk/\" title=\"Link: http://haofly.net/awk/\">awk命令详解</a></p>\n<p><a href=\"http://haofly.net/expr/\" title=\"Link: http://haofly.net/expr/\">expr 命令详解</a></p>\n"},{"title":"我越来越像《麦田守望者》","date":"2016-02-11T10:30:14.000Z","_content":"\n初看麦田里的守望者，我只看到一个满口脏话，觉得全世界都是傻逼，只有我是最纯洁的一个人。在看之前我并不了解这本书的历史背景，一直觉得这本书可能是90年代后的，不过看了几天后脑海中却始终浮现出一幅很老的画面，就像电视里美国刚开始有摄像机的无声电影一样，所有的人都穿着\"老土\"的服装，那是一个灯红酒绿、社会混乱，所有人都在寻找出路的时代，事实证明我是对的，此书出版于1951年，正是二战后美国的真实写照吧。\n\n“一个不成熟的人的标志是他愿意为了某个理由而轰轰烈烈地死去，而一个成熟的人的标志是他愿意为了某个理由而谦恭地活下去。”这或许是此书最出名的一句话。不敢自谦，不过，正如我一直坚持的价值观一样：人，是可以平凡的。比如爱情，现在的社会本没有历史上那么轰轰烈烈，也不会有什么海枯石烂，最多相隔万里，那也能通过网络时时通讯。说的太多，感觉这段和此书的主题并无多大联系。\n\n第一次接触意识流的小说，觉得有些晦涩，有些不解，但霍尔顿的世界可能每个人都经历过。比如我们的成长，每个人的成长或许都伴随着成年人的不理解，有的人在这过程中练就了挑战世界的本领，而有的人则在反抗的过程中渐渐成长为自己曾经讨厌的人。成长过程中，无论坚持了以我，还是改变了自我，都没有错，最终他们都会走向自己一样的人生，哪怕不是曾经希望的，但一个成年人可能更懂得珍惜现在。不是认命，而是认清了自己。\n\n故事最后的结局也让人们争论不已，我想，霍尔顿现在已经长大了吧，理想被一个一个击破，到底是继续反抗世界还是改变自己，现在他已经知道答案了。\n\n今年过年回家，我仿佛变成了故事里的男主角，愤世嫉俗，以前觉得没什么的事情今年却突然感觉十分愤怒。\n\t\n\t为什么我今年回到家成天就感觉这里活着真累呀，错综复杂的亲戚关系，成天都担心着别人眼中自己的形象，遇到各种不公平待遇却又忍气吞声，明明讨厌的事情却又有各种原因不去拒绝。。。\n这是我2月7日发表的一篇微博，怎么说呢，以前可能觉得这些离自己太远，所以没去在意。但是即将毕业的我，又碰巧在这个节骨眼到了谈婚论嫁的时刻，实在无法适应，只能边骂边去接受自己能接受的。只希望，明天的我，依然是我曾经喜欢的模样。\n","source":"_posts/maitianshouwangzhe.md","raw":"---\ntitle: \"我越来越像《麦田守望者》\"\ndate: 2016-02-11 18:30:14\ncategories: 边走边想\n---\n\n初看麦田里的守望者，我只看到一个满口脏话，觉得全世界都是傻逼，只有我是最纯洁的一个人。在看之前我并不了解这本书的历史背景，一直觉得这本书可能是90年代后的，不过看了几天后脑海中却始终浮现出一幅很老的画面，就像电视里美国刚开始有摄像机的无声电影一样，所有的人都穿着\"老土\"的服装，那是一个灯红酒绿、社会混乱，所有人都在寻找出路的时代，事实证明我是对的，此书出版于1951年，正是二战后美国的真实写照吧。\n\n“一个不成熟的人的标志是他愿意为了某个理由而轰轰烈烈地死去，而一个成熟的人的标志是他愿意为了某个理由而谦恭地活下去。”这或许是此书最出名的一句话。不敢自谦，不过，正如我一直坚持的价值观一样：人，是可以平凡的。比如爱情，现在的社会本没有历史上那么轰轰烈烈，也不会有什么海枯石烂，最多相隔万里，那也能通过网络时时通讯。说的太多，感觉这段和此书的主题并无多大联系。\n\n第一次接触意识流的小说，觉得有些晦涩，有些不解，但霍尔顿的世界可能每个人都经历过。比如我们的成长，每个人的成长或许都伴随着成年人的不理解，有的人在这过程中练就了挑战世界的本领，而有的人则在反抗的过程中渐渐成长为自己曾经讨厌的人。成长过程中，无论坚持了以我，还是改变了自我，都没有错，最终他们都会走向自己一样的人生，哪怕不是曾经希望的，但一个成年人可能更懂得珍惜现在。不是认命，而是认清了自己。\n\n故事最后的结局也让人们争论不已，我想，霍尔顿现在已经长大了吧，理想被一个一个击破，到底是继续反抗世界还是改变自己，现在他已经知道答案了。\n\n今年过年回家，我仿佛变成了故事里的男主角，愤世嫉俗，以前觉得没什么的事情今年却突然感觉十分愤怒。\n\t\n\t为什么我今年回到家成天就感觉这里活着真累呀，错综复杂的亲戚关系，成天都担心着别人眼中自己的形象，遇到各种不公平待遇却又忍气吞声，明明讨厌的事情却又有各种原因不去拒绝。。。\n这是我2月7日发表的一篇微博，怎么说呢，以前可能觉得这些离自己太远，所以没去在意。但是即将毕业的我，又碰巧在这个节骨眼到了谈婚论嫁的时刻，实在无法适应，只能边骂边去接受自己能接受的。只希望，明天的我，依然是我曾经喜欢的模样。\n","slug":"maitianshouwangzhe","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pbl003d9vnzo09ow8h1","content":"<p>初看麦田里的守望者，我只看到一个满口脏话，觉得全世界都是傻逼，只有我是最纯洁的一个人。在看之前我并不了解这本书的历史背景，一直觉得这本书可能是90年代后的，不过看了几天后脑海中却始终浮现出一幅很老的画面，就像电视里美国刚开始有摄像机的无声电影一样，所有的人都穿着”老土”的服装，那是一个灯红酒绿、社会混乱，所有人都在寻找出路的时代，事实证明我是对的，此书出版于1951年，正是二战后美国的真实写照吧。</p>\n<p>“一个不成熟的人的标志是他愿意为了某个理由而轰轰烈烈地死去，而一个成熟的人的标志是他愿意为了某个理由而谦恭地活下去。”这或许是此书最出名的一句话。不敢自谦，不过，正如我一直坚持的价值观一样：人，是可以平凡的。比如爱情，现在的社会本没有历史上那么轰轰烈烈，也不会有什么海枯石烂，最多相隔万里，那也能通过网络时时通讯。说的太多，感觉这段和此书的主题并无多大联系。</p>\n<p>第一次接触意识流的小说，觉得有些晦涩，有些不解，但霍尔顿的世界可能每个人都经历过。比如我们的成长，每个人的成长或许都伴随着成年人的不理解，有的人在这过程中练就了挑战世界的本领，而有的人则在反抗的过程中渐渐成长为自己曾经讨厌的人。成长过程中，无论坚持了以我，还是改变了自我，都没有错，最终他们都会走向自己一样的人生，哪怕不是曾经希望的，但一个成年人可能更懂得珍惜现在。不是认命，而是认清了自己。</p>\n<p>故事最后的结局也让人们争论不已，我想，霍尔顿现在已经长大了吧，理想被一个一个击破，到底是继续反抗世界还是改变自己，现在他已经知道答案了。</p>\n<p>今年过年回家，我仿佛变成了故事里的男主角，愤世嫉俗，以前觉得没什么的事情今年却突然感觉十分愤怒。</p>\n<pre><code>为什么我今年回到家成天就感觉这里活着真累呀，错综复杂的亲戚关系，成天都担心着别人眼中自己的形象，遇到各种不公平待遇却又忍气吞声，明明讨厌的事情却又有各种原因不去拒绝。。。\n</code></pre><p>这是我2月7日发表的一篇微博，怎么说呢，以前可能觉得这些离自己太远，所以没去在意。但是即将毕业的我，又碰巧在这个节骨眼到了谈婚论嫁的时刻，实在无法适应，只能边骂边去接受自己能接受的。只希望，明天的我，依然是我曾经喜欢的模样。</p>\n","excerpt":"","more":"<p>初看麦田里的守望者，我只看到一个满口脏话，觉得全世界都是傻逼，只有我是最纯洁的一个人。在看之前我并不了解这本书的历史背景，一直觉得这本书可能是90年代后的，不过看了几天后脑海中却始终浮现出一幅很老的画面，就像电视里美国刚开始有摄像机的无声电影一样，所有的人都穿着”老土”的服装，那是一个灯红酒绿、社会混乱，所有人都在寻找出路的时代，事实证明我是对的，此书出版于1951年，正是二战后美国的真实写照吧。</p>\n<p>“一个不成熟的人的标志是他愿意为了某个理由而轰轰烈烈地死去，而一个成熟的人的标志是他愿意为了某个理由而谦恭地活下去。”这或许是此书最出名的一句话。不敢自谦，不过，正如我一直坚持的价值观一样：人，是可以平凡的。比如爱情，现在的社会本没有历史上那么轰轰烈烈，也不会有什么海枯石烂，最多相隔万里，那也能通过网络时时通讯。说的太多，感觉这段和此书的主题并无多大联系。</p>\n<p>第一次接触意识流的小说，觉得有些晦涩，有些不解，但霍尔顿的世界可能每个人都经历过。比如我们的成长，每个人的成长或许都伴随着成年人的不理解，有的人在这过程中练就了挑战世界的本领，而有的人则在反抗的过程中渐渐成长为自己曾经讨厌的人。成长过程中，无论坚持了以我，还是改变了自我，都没有错，最终他们都会走向自己一样的人生，哪怕不是曾经希望的，但一个成年人可能更懂得珍惜现在。不是认命，而是认清了自己。</p>\n<p>故事最后的结局也让人们争论不已，我想，霍尔顿现在已经长大了吧，理想被一个一个击破，到底是继续反抗世界还是改变自己，现在他已经知道答案了。</p>\n<p>今年过年回家，我仿佛变成了故事里的男主角，愤世嫉俗，以前觉得没什么的事情今年却突然感觉十分愤怒。</p>\n<pre><code>为什么我今年回到家成天就感觉这里活着真累呀，错综复杂的亲戚关系，成天都担心着别人眼中自己的形象，遇到各种不公平待遇却又忍气吞声，明明讨厌的事情却又有各种原因不去拒绝。。。\n</code></pre><p>这是我2月7日发表的一篇微博，怎么说呢，以前可能觉得这些离自己太远，所以没去在意。但是即将毕业的我，又碰巧在这个节骨眼到了谈婚论嫁的时刻，实在无法适应，只能边骂边去接受自己能接受的。只希望，明天的我，依然是我曾经喜欢的模样。</p>\n"},{"title":"我要我的游戏人生","date":"2010-08-19T06:58:30.000Z","_content":"从小到大，我们为了学习而努力，可我一直不明白是为了什么而学习。\n\n确实，我认为一个正值青春的中学生，绝不应只把学习当作现今的第一要事。\n\n我曾那么羡慕初中生，因为他们是那么的逍遥自在，仿佛只有他们才知道什么是玩儿，于是我满怀期待地进了初中。可当我置身其中时却发现，除了学习压力变大，脱去了几分稚\n气外，仿佛也没什么变化。后来，从电视和书籍上，我发现高中生的生活似乎更加美好，用两个字来形容——精彩。于是我又满怀憧憬地来了高中。\n\n嗯，高中确实不错。\n\n少了父母没完没了的唠叨，可以任由心情去做更多的事；每个月有固定的生活费，也可以忍饥挨饿从中节约出一些钱买自己或别人想要的东西；住校的日子，衣服想什么时候洗就\n什么时候洗。这就是我高中的生活，虽然有点放荡，但我喜欢。\n\n可有的人总让人看不惯。他们有的脑子里只有学习，成天抱着书本，给你压力。我就不明白了，难道只有考上名牌大学才能证明你没有荒废青春吗？你们不觉得你们根本没有体验\n到青春的热烈奔放吗？青春的价值难道只体现在这无休止的学习上吗？\n\n还有的人，认为家长的钱一点儿也不能乱用。唉！家长给我们的确实是他们的血汗钱，可他们的目的在于让我们过得更好。而你却为了钱坏了身体，岂不是更让他们担心吗？再者\n，假如买一些娱乐用品，你能够更有激情地投入到学习生活中，提高学习效率，岂不更好吗？\n\n还有一些人，总是在考差后觉得很对不起父母。天啦！学习究竟是谁的事呀!难道你学习、你奋斗、你活着完全是为了别人？你的父母期望你学习好那是他们的事，而你大可以放\n下这个包袱，为自己努力！\n\n如果让我选择，我宁愿从小成绩就不好。那样现在的压力应该不会那么大吧，也不会那么矛盾地活着，因为我发现现实的规则和我学的总是相反。\n\n我的游戏人生里，我不想做好孩子。所以我要故意让别人看起来有点儿坏。有些人也许会看不起我，说我堕落。我才不管，因为我知道不管学习好不好，不管钱多不多，只要我有\n足够的能力给自己和身边关心我的人带来幸福、快乐，我就很满足了。毕竟，平凡、平庸和伟大，我更愿意做前者！\n\n","source":"_posts/my-game-life.md","raw":"---\ntitle: \"我要我的游戏人生\"\ndate: 2010-08-19 14:58:30\ncategories: 那时年少\n---\n从小到大，我们为了学习而努力，可我一直不明白是为了什么而学习。\n\n确实，我认为一个正值青春的中学生，绝不应只把学习当作现今的第一要事。\n\n我曾那么羡慕初中生，因为他们是那么的逍遥自在，仿佛只有他们才知道什么是玩儿，于是我满怀期待地进了初中。可当我置身其中时却发现，除了学习压力变大，脱去了几分稚\n气外，仿佛也没什么变化。后来，从电视和书籍上，我发现高中生的生活似乎更加美好，用两个字来形容——精彩。于是我又满怀憧憬地来了高中。\n\n嗯，高中确实不错。\n\n少了父母没完没了的唠叨，可以任由心情去做更多的事；每个月有固定的生活费，也可以忍饥挨饿从中节约出一些钱买自己或别人想要的东西；住校的日子，衣服想什么时候洗就\n什么时候洗。这就是我高中的生活，虽然有点放荡，但我喜欢。\n\n可有的人总让人看不惯。他们有的脑子里只有学习，成天抱着书本，给你压力。我就不明白了，难道只有考上名牌大学才能证明你没有荒废青春吗？你们不觉得你们根本没有体验\n到青春的热烈奔放吗？青春的价值难道只体现在这无休止的学习上吗？\n\n还有的人，认为家长的钱一点儿也不能乱用。唉！家长给我们的确实是他们的血汗钱，可他们的目的在于让我们过得更好。而你却为了钱坏了身体，岂不是更让他们担心吗？再者\n，假如买一些娱乐用品，你能够更有激情地投入到学习生活中，提高学习效率，岂不更好吗？\n\n还有一些人，总是在考差后觉得很对不起父母。天啦！学习究竟是谁的事呀!难道你学习、你奋斗、你活着完全是为了别人？你的父母期望你学习好那是他们的事，而你大可以放\n下这个包袱，为自己努力！\n\n如果让我选择，我宁愿从小成绩就不好。那样现在的压力应该不会那么大吧，也不会那么矛盾地活着，因为我发现现实的规则和我学的总是相反。\n\n我的游戏人生里，我不想做好孩子。所以我要故意让别人看起来有点儿坏。有些人也许会看不起我，说我堕落。我才不管，因为我知道不管学习好不好，不管钱多不多，只要我有\n足够的能力给自己和身边关心我的人带来幸福、快乐，我就很满足了。毕竟，平凡、平庸和伟大，我更愿意做前者！\n\n","slug":"my-game-life","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pbo003f9vnz76iqte16","content":"<p>从小到大，我们为了学习而努力，可我一直不明白是为了什么而学习。</p>\n<p>确实，我认为一个正值青春的中学生，绝不应只把学习当作现今的第一要事。</p>\n<p>我曾那么羡慕初中生，因为他们是那么的逍遥自在，仿佛只有他们才知道什么是玩儿，于是我满怀期待地进了初中。可当我置身其中时却发现，除了学习压力变大，脱去了几分稚<br>气外，仿佛也没什么变化。后来，从电视和书籍上，我发现高中生的生活似乎更加美好，用两个字来形容——精彩。于是我又满怀憧憬地来了高中。</p>\n<p>嗯，高中确实不错。</p>\n<p>少了父母没完没了的唠叨，可以任由心情去做更多的事；每个月有固定的生活费，也可以忍饥挨饿从中节约出一些钱买自己或别人想要的东西；住校的日子，衣服想什么时候洗就<br>什么时候洗。这就是我高中的生活，虽然有点放荡，但我喜欢。</p>\n<p>可有的人总让人看不惯。他们有的脑子里只有学习，成天抱着书本，给你压力。我就不明白了，难道只有考上名牌大学才能证明你没有荒废青春吗？你们不觉得你们根本没有体验<br>到青春的热烈奔放吗？青春的价值难道只体现在这无休止的学习上吗？</p>\n<p>还有的人，认为家长的钱一点儿也不能乱用。唉！家长给我们的确实是他们的血汗钱，可他们的目的在于让我们过得更好。而你却为了钱坏了身体，岂不是更让他们担心吗？再者<br>，假如买一些娱乐用品，你能够更有激情地投入到学习生活中，提高学习效率，岂不更好吗？</p>\n<p>还有一些人，总是在考差后觉得很对不起父母。天啦！学习究竟是谁的事呀!难道你学习、你奋斗、你活着完全是为了别人？你的父母期望你学习好那是他们的事，而你大可以放<br>下这个包袱，为自己努力！</p>\n<p>如果让我选择，我宁愿从小成绩就不好。那样现在的压力应该不会那么大吧，也不会那么矛盾地活着，因为我发现现实的规则和我学的总是相反。</p>\n<p>我的游戏人生里，我不想做好孩子。所以我要故意让别人看起来有点儿坏。有些人也许会看不起我，说我堕落。我才不管，因为我知道不管学习好不好，不管钱多不多，只要我有<br>足够的能力给自己和身边关心我的人带来幸福、快乐，我就很满足了。毕竟，平凡、平庸和伟大，我更愿意做前者！</p>\n","excerpt":"","more":"<p>从小到大，我们为了学习而努力，可我一直不明白是为了什么而学习。</p>\n<p>确实，我认为一个正值青春的中学生，绝不应只把学习当作现今的第一要事。</p>\n<p>我曾那么羡慕初中生，因为他们是那么的逍遥自在，仿佛只有他们才知道什么是玩儿，于是我满怀期待地进了初中。可当我置身其中时却发现，除了学习压力变大，脱去了几分稚<br>气外，仿佛也没什么变化。后来，从电视和书籍上，我发现高中生的生活似乎更加美好，用两个字来形容——精彩。于是我又满怀憧憬地来了高中。</p>\n<p>嗯，高中确实不错。</p>\n<p>少了父母没完没了的唠叨，可以任由心情去做更多的事；每个月有固定的生活费，也可以忍饥挨饿从中节约出一些钱买自己或别人想要的东西；住校的日子，衣服想什么时候洗就<br>什么时候洗。这就是我高中的生活，虽然有点放荡，但我喜欢。</p>\n<p>可有的人总让人看不惯。他们有的脑子里只有学习，成天抱着书本，给你压力。我就不明白了，难道只有考上名牌大学才能证明你没有荒废青春吗？你们不觉得你们根本没有体验<br>到青春的热烈奔放吗？青春的价值难道只体现在这无休止的学习上吗？</p>\n<p>还有的人，认为家长的钱一点儿也不能乱用。唉！家长给我们的确实是他们的血汗钱，可他们的目的在于让我们过得更好。而你却为了钱坏了身体，岂不是更让他们担心吗？再者<br>，假如买一些娱乐用品，你能够更有激情地投入到学习生活中，提高学习效率，岂不更好吗？</p>\n<p>还有一些人，总是在考差后觉得很对不起父母。天啦！学习究竟是谁的事呀!难道你学习、你奋斗、你活着完全是为了别人？你的父母期望你学习好那是他们的事，而你大可以放<br>下这个包袱，为自己努力！</p>\n<p>如果让我选择，我宁愿从小成绩就不好。那样现在的压力应该不会那么大吧，也不会那么矛盾地活着，因为我发现现实的规则和我学的总是相反。</p>\n<p>我的游戏人生里，我不想做好孩子。所以我要故意让别人看起来有点儿坏。有些人也许会看不起我，说我堕落。我才不管，因为我知道不管学习好不好，不管钱多不多，只要我有<br>足够的能力给自己和身边关心我的人带来幸福、快乐，我就很满足了。毕竟，平凡、平庸和伟大，我更愿意做前者！</p>\n"},{"title":"《MySQL管理之道》——真正的前沿技术","date":"2014-11-03T07:17:20.000Z","_content":"作者：[贺春旸](http://hcymysql.blog.51cto.com/)\n\n先介绍介绍作者，作者是51CTO技术博客之星，曾任职于中国移动飞信、国内某知名电商，致力于MySQL、Linux等开源技术的研究，现任职于机锋安卓市场，负责\nMySQL性能调优和架构设计。\n\n其实这本书并不是讲什么非常前沿的技术，但是我看过很多的技术书籍以及网上的技术教程，感觉那些技术都是上个世纪的，完全不能用，有些甚至连基本原理都改变了，但国内\n的书市几乎都被这种书填满了，直到这两年，随着开源社区的快速发展，微软、诺基亚的没落，人们(特别是国内的程序员)开始关注起最新的技术，开始向国外吸取精华，哪怕\n是看英文原版，也比等几年后出的中文翻译版要好。并且现在已经有大量的人涌入开源社区，义务进行翻译工作，如果GFVV不加阻挠，相信中国在计算机科学方面一定能快速\n成长到国际先进水平。\n\n本书记述了作者多年以来在MySQL数据库维护上的一些见解以及处理问题的一些方法。当我拿到书本翻开目录的那一霎，顿时感觉买此书绝对值，因为作者完全是按照MyS\nQL5.5来进行讲解的，虽然最新的稳定版5.6已经出来了一两年了，但是目前介绍MySQL的书籍有几本是5.0以上的？很难找到。人们一味地认为，即使软件版本怎\n么发展，很多内部的东西是不会变的，真的不会变吗？或许吧，但随着技术的快速发展，很多编程语言、系统架构都会吸收一些其他软件的优良之处以使自己的性能得到提升，这\n样就难免会有很多使用上必须更改的地方，即使只介绍以前的知识，但那些书籍至少也应该在后续的版本中介绍一下新版本的一些新的功能，哪些地方有改变。在看这本书之前的\n我，一直看的是那些所谓的计算机经典书籍，当然，我必须承认他们确实经典，无论再过多少年，他们依然是经典，但是他们中有很多东西于现在看来确实有些过时了。从本书开\n始，我对技术书籍有了更新的了解，也对如何选择书籍有了更深的领悟(只可意会不可言传，哈哈)。\n\n我一直使用MySQL，虽然没用过Oracle，不好对其发表评论，但就像现在大公司流行去IOE一样，我也深深地觉得他们三家确实太垄断了。现在我也在管理两个服务\n器，因为上次一气之下把服务器重装了系统，导致一些数据没有备份(还好都不重要)，所以现在也开始关注服务器的管理了。本书并不是讲SQL的基本知识，所以适合的读者\n群应该是有一定基础知识并真正管理过MySQL数据库的人。另外，书中提到的大量的实践的知识，就不在这里详述了，已经将其整理到我的MySQL的其他几篇文章中去了\n。\n\nPS：华章的图书虽然纸质上不大好，但整体触觉还是挺爽的。\n","source":"_posts/mysql-guanlizhidao.md","raw":"---\ntitle: \"《MySQL管理之道》——真正的前沿技术\"\ndate: 2014-11-03 15:17:20\ncategories: 韦编三绝\n---\n作者：[贺春旸](http://hcymysql.blog.51cto.com/)\n\n先介绍介绍作者，作者是51CTO技术博客之星，曾任职于中国移动飞信、国内某知名电商，致力于MySQL、Linux等开源技术的研究，现任职于机锋安卓市场，负责\nMySQL性能调优和架构设计。\n\n其实这本书并不是讲什么非常前沿的技术，但是我看过很多的技术书籍以及网上的技术教程，感觉那些技术都是上个世纪的，完全不能用，有些甚至连基本原理都改变了，但国内\n的书市几乎都被这种书填满了，直到这两年，随着开源社区的快速发展，微软、诺基亚的没落，人们(特别是国内的程序员)开始关注起最新的技术，开始向国外吸取精华，哪怕\n是看英文原版，也比等几年后出的中文翻译版要好。并且现在已经有大量的人涌入开源社区，义务进行翻译工作，如果GFVV不加阻挠，相信中国在计算机科学方面一定能快速\n成长到国际先进水平。\n\n本书记述了作者多年以来在MySQL数据库维护上的一些见解以及处理问题的一些方法。当我拿到书本翻开目录的那一霎，顿时感觉买此书绝对值，因为作者完全是按照MyS\nQL5.5来进行讲解的，虽然最新的稳定版5.6已经出来了一两年了，但是目前介绍MySQL的书籍有几本是5.0以上的？很难找到。人们一味地认为，即使软件版本怎\n么发展，很多内部的东西是不会变的，真的不会变吗？或许吧，但随着技术的快速发展，很多编程语言、系统架构都会吸收一些其他软件的优良之处以使自己的性能得到提升，这\n样就难免会有很多使用上必须更改的地方，即使只介绍以前的知识，但那些书籍至少也应该在后续的版本中介绍一下新版本的一些新的功能，哪些地方有改变。在看这本书之前的\n我，一直看的是那些所谓的计算机经典书籍，当然，我必须承认他们确实经典，无论再过多少年，他们依然是经典，但是他们中有很多东西于现在看来确实有些过时了。从本书开\n始，我对技术书籍有了更新的了解，也对如何选择书籍有了更深的领悟(只可意会不可言传，哈哈)。\n\n我一直使用MySQL，虽然没用过Oracle，不好对其发表评论，但就像现在大公司流行去IOE一样，我也深深地觉得他们三家确实太垄断了。现在我也在管理两个服务\n器，因为上次一气之下把服务器重装了系统，导致一些数据没有备份(还好都不重要)，所以现在也开始关注服务器的管理了。本书并不是讲SQL的基本知识，所以适合的读者\n群应该是有一定基础知识并真正管理过MySQL数据库的人。另外，书中提到的大量的实践的知识，就不在这里详述了，已经将其整理到我的MySQL的其他几篇文章中去了\n。\n\nPS：华章的图书虽然纸质上不大好，但整体触觉还是挺爽的。\n","slug":"mysql-guanlizhidao","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pc1003h9vnzh1e5exp3","content":"<p>作者：<a href=\"http://hcymysql.blog.51cto.com/\" target=\"_blank\" rel=\"external\">贺春旸</a></p>\n<p>先介绍介绍作者，作者是51CTO技术博客之星，曾任职于中国移动飞信、国内某知名电商，致力于MySQL、Linux等开源技术的研究，现任职于机锋安卓市场，负责<br>MySQL性能调优和架构设计。</p>\n<p>其实这本书并不是讲什么非常前沿的技术，但是我看过很多的技术书籍以及网上的技术教程，感觉那些技术都是上个世纪的，完全不能用，有些甚至连基本原理都改变了，但国内<br>的书市几乎都被这种书填满了，直到这两年，随着开源社区的快速发展，微软、诺基亚的没落，人们(特别是国内的程序员)开始关注起最新的技术，开始向国外吸取精华，哪怕<br>是看英文原版，也比等几年后出的中文翻译版要好。并且现在已经有大量的人涌入开源社区，义务进行翻译工作，如果GFVV不加阻挠，相信中国在计算机科学方面一定能快速<br>成长到国际先进水平。</p>\n<p>本书记述了作者多年以来在MySQL数据库维护上的一些见解以及处理问题的一些方法。当我拿到书本翻开目录的那一霎，顿时感觉买此书绝对值，因为作者完全是按照MyS<br>QL5.5来进行讲解的，虽然最新的稳定版5.6已经出来了一两年了，但是目前介绍MySQL的书籍有几本是5.0以上的？很难找到。人们一味地认为，即使软件版本怎<br>么发展，很多内部的东西是不会变的，真的不会变吗？或许吧，但随着技术的快速发展，很多编程语言、系统架构都会吸收一些其他软件的优良之处以使自己的性能得到提升，这<br>样就难免会有很多使用上必须更改的地方，即使只介绍以前的知识，但那些书籍至少也应该在后续的版本中介绍一下新版本的一些新的功能，哪些地方有改变。在看这本书之前的<br>我，一直看的是那些所谓的计算机经典书籍，当然，我必须承认他们确实经典，无论再过多少年，他们依然是经典，但是他们中有很多东西于现在看来确实有些过时了。从本书开<br>始，我对技术书籍有了更新的了解，也对如何选择书籍有了更深的领悟(只可意会不可言传，哈哈)。</p>\n<p>我一直使用MySQL，虽然没用过Oracle，不好对其发表评论，但就像现在大公司流行去IOE一样，我也深深地觉得他们三家确实太垄断了。现在我也在管理两个服务<br>器，因为上次一气之下把服务器重装了系统，导致一些数据没有备份(还好都不重要)，所以现在也开始关注服务器的管理了。本书并不是讲SQL的基本知识，所以适合的读者<br>群应该是有一定基础知识并真正管理过MySQL数据库的人。另外，书中提到的大量的实践的知识，就不在这里详述了，已经将其整理到我的MySQL的其他几篇文章中去了<br>。</p>\n<p>PS：华章的图书虽然纸质上不大好，但整体触觉还是挺爽的。</p>\n","excerpt":"","more":"<p>作者：<a href=\"http://hcymysql.blog.51cto.com/\">贺春旸</a></p>\n<p>先介绍介绍作者，作者是51CTO技术博客之星，曾任职于中国移动飞信、国内某知名电商，致力于MySQL、Linux等开源技术的研究，现任职于机锋安卓市场，负责<br>MySQL性能调优和架构设计。</p>\n<p>其实这本书并不是讲什么非常前沿的技术，但是我看过很多的技术书籍以及网上的技术教程，感觉那些技术都是上个世纪的，完全不能用，有些甚至连基本原理都改变了，但国内<br>的书市几乎都被这种书填满了，直到这两年，随着开源社区的快速发展，微软、诺基亚的没落，人们(特别是国内的程序员)开始关注起最新的技术，开始向国外吸取精华，哪怕<br>是看英文原版，也比等几年后出的中文翻译版要好。并且现在已经有大量的人涌入开源社区，义务进行翻译工作，如果GFVV不加阻挠，相信中国在计算机科学方面一定能快速<br>成长到国际先进水平。</p>\n<p>本书记述了作者多年以来在MySQL数据库维护上的一些见解以及处理问题的一些方法。当我拿到书本翻开目录的那一霎，顿时感觉买此书绝对值，因为作者完全是按照MyS<br>QL5.5来进行讲解的，虽然最新的稳定版5.6已经出来了一两年了，但是目前介绍MySQL的书籍有几本是5.0以上的？很难找到。人们一味地认为，即使软件版本怎<br>么发展，很多内部的东西是不会变的，真的不会变吗？或许吧，但随着技术的快速发展，很多编程语言、系统架构都会吸收一些其他软件的优良之处以使自己的性能得到提升，这<br>样就难免会有很多使用上必须更改的地方，即使只介绍以前的知识，但那些书籍至少也应该在后续的版本中介绍一下新版本的一些新的功能，哪些地方有改变。在看这本书之前的<br>我，一直看的是那些所谓的计算机经典书籍，当然，我必须承认他们确实经典，无论再过多少年，他们依然是经典，但是他们中有很多东西于现在看来确实有些过时了。从本书开<br>始，我对技术书籍有了更新的了解，也对如何选择书籍有了更深的领悟(只可意会不可言传，哈哈)。</p>\n<p>我一直使用MySQL，虽然没用过Oracle，不好对其发表评论，但就像现在大公司流行去IOE一样，我也深深地觉得他们三家确实太垄断了。现在我也在管理两个服务<br>器，因为上次一气之下把服务器重装了系统，导致一些数据没有备份(还好都不重要)，所以现在也开始关注服务器的管理了。本书并不是讲SQL的基本知识，所以适合的读者<br>群应该是有一定基础知识并真正管理过MySQL数据库的人。另外，书中提到的大量的实践的知识，就不在这里详述了，已经将其整理到我的MySQL的其他几篇文章中去了<br>。</p>\n<p>PS：华章的图书虽然纸质上不大好，但整体触觉还是挺爽的。</p>\n"},{"title":"大学全记事","date":"2016-02-12T03:57:50.000Z","_content":"人生最后一个寒假，趁着还记得，回忆一下我这四年\n## 大一\n\n- 比规定时间提前来了几天，学校里居然这么少的人。6栋真小，12平米的房间住了四个人。那几天有领导来关怀新生，整栋楼就没几个人，正好他们敲了我的房间，还和领导握了手。后来才知道，她就是大名鼎鼎的是书记\n- 听学长的话，认为大学就该多去争取兼职机会，于是答应帮别人卖被子提成。但是遇到一个人得时候不忍心把被子高价卖给别人，也由于自己脸皮比较薄，所以放弃了\n- 听别人的话，大学得多加社团，报了几个社团，基本上，如果有技术面的都能过，面试都没过，然后就没有然后了。当时不知道还有学生社团这种东西(和学生会的黑社会性质不一样，这个完全是兴趣)，也错过了社团的招新。\n- 下学期的时候参加了C语言考前培训，认识了软件协会会长和副会长，给了我几道题，做好了，然后就跟着他们联系ACM，然后顺利成长的当上了副会长(当时叫我当会长，被我拒绝了)\n- 大学有一次进某个实验室的机会，但我也放弃了，那老师就一个做外挂的\n- 虽然我高三就开始学习C语言，但其实大一那个寒假我才真正学完，才真正学号了她\n- 大一结束那个暑假，学了Python、Delphi、PHP，虽然都只是学了其语法，但也算入门了\n- 我们是大一结束才军训的，厌恶透了\n- 从大一下开始追海贼，也是这个时候入微博\n- 大一暑假，我们一行人准备骑行去西藏，结果，我半途而废，至今是我心里永远的伤疤\n- 对了，就在大一结束就开始写个人博客了\n\n## 大二\n- 当了一年的副会长，认识了很多人，技术也学到了一些，与服务器的第一次亲密接触，从此知道linuxinux server这种神奇的东西，从此会搭建个人网站了，从此走上了运维这条不归路。其实在软协这两年，我一直是想通过一些特殊的培训来帮助大家，提高大家的，不过没想到的是大二大三事情太多了\n- 与软件协会另两位组队参加了重庆市的ACM比赛，不过没获奖，也没什么，至少我还是参加过一次比赛的(PS:别问我获奖队伍那么多为什么我们都没获奖，谁叫他规定每个学校最多三支队伍获奖的)\n- 英语四六级考试都一次过，不过，说真的，每次考完我都觉得差着几百分呢，ps：四级是优\n- 大概是从这一年开始接触微博的，从此完全成了微博控，花费了我大量的时间，不过带给我的启发却是不可估量的，通过微博，我才看到了世界。至少，不用再沉浸在C和C++的海洋里，原来外面的世界还有python，还有node，还有openstack，还有nosql，原来，我们永远也学不完，原来学校教的在外面真的很少能用到\n- 这一年，也是我上自习上得最多的，导致我连续两年拿了奖学金，还拿奖学金买了一把国产机械键盘，那叫一个爽，那叫一个帅\n- 大二下学期，进入了实验室，好吧，我那么晚才进实验室的，可是实验室的老师是一个刚从国外留学回来的，感觉他不怎么了解国内市场和国内的职场。不过，搞研究的老师应该都这样吧。模式识别，几十篇的全英文论文，看得心烦。也因为这次经历，导致我放弃了考研的想法。\n- 放弃考研的那几天，我把以前的书都卖了，还美其名曰破釜沉舟。同时，也没怎么关心学习的事情了，一心钻研自己的技术。\n- 这个学期分专业填志愿，我和以前毅然决然的选择了信安专业，虽然当时我已经不想学信安了，但是毕竟自己以前一直期待这个专业嘛，而且当时的我对选择什么专业已经不以为然了，无论哪个专业我都只会走我自己的路。\n- 20岁生日这天，买了两瓶白酒和几瓶啤酒，在寝室喝，由于没有什么氛围，室友们并不想喝，于是我一个人喝了...反正我是不知道那晚吐了多少次，据说我吐了无数次，翻下了床无数次，多亏了我的室友啊，不过，你们看到我这样都不送我去医院吗...  \n  醉了才知道自己有多么无力，20岁，我写过一篇文章，很伤心，很落寞，觉得自己太失败了，那晚我也仅仅是喝醉了而已，并没有把一切都看开，真正让我看开的，是我现在的女朋友，所以，忘掉一段感情最好的方式就是认真开始一段全新的感情\n- 暑假的时候把qq相册所有的好友的图片抓下来了，这篇博客访问量上万了，而且因为这个，腾讯一个团队老大找过我，不过当时我实在不想去做前端...现在想想，还好没答应，不然怎么找得到女朋友呢\n- 大二刚开始就买了台红米手机，从此入坑，直至现在都还在用着红米系列\n- 大二暑假，我家终于买车了，突然想学车了，然而现在的我已经没时间去学习了\n\n## 大三\n\n- 既然不考研那就得找事儿了，找了一个工作室去练习，其实一直很佩服领导人眼光的(是一位在职百度贴吧大神创业)，但是他是在不懂得如何管理团队，导致大家最后都没什么激情了。而且由于没有项目管理人员，导致项目到最后居然和之前的需求不一致，最后就没让我们做了。在这个项目里面我主要做的是服务器、数据库的搭建与维护，还包括后台PHP程序的开发。虽然最终失败，不过经历过这个项目，我突然对运维感兴趣了，所以现在自然进入了运维开发这个行当。\n- 大三下学期一直在找实习机会，也顺利在期末进入了一个传媒公司实习。实习到过年，同样，也是做的Python后台程序开发以及服务器的维护，也算是有大半年的Python工作经验了。我能说，我来这里一两个月了，团队里的人才知道我是实习生吗，原来人事和技术这么分离呀，原来我真的能胜任工作的。除了工资相对低以外，这个公司绝对是我见过的福利最好的公司，各种假期，中秋国庆连着放了13天，过年同事们都说毕业这么多年，第一次感觉到放寒假了，从2月3号放到23号。年会没人都抢了几百的红包，一人一块猪肉...对了当天我们还一人提一带猪肉去ktv的总统套房...\n- 也正是因为实习，终于我过上了梦寐以求的租房的生活，想吃什么吃什么\n- 也正是因为进了公司，开始大量使用微信了，原来这里又是另外一片天地\n- 大三上学期，我居然挂科了，而且挂这个科的人基本上大学都是只挂了这一科，我只想说这个老师是个奇葩\n- 在大三下学期刚开始就找到了女朋友，从此，每个周末都没有空了...很累但很幸福，对了，她可是我小学同学，隔壁村的哟\n- 大三寒假，140斤，去医院检查，说肝上油太多，快发展成脂肪肝了，从此不敢海吃肥肉了，大三下每天运动，减了十几斤的肉，but，暑假的时候，老婆的菜确实太好吃了...\n- 3月份，我的微博数量超过了1000\n- 8月份，我终于申请到了人生的第一张信用卡，额度6000，写这篇文章的时候，这个月账单8000多\n\n## 大四\n\n- 大四上学期只回去上过一次课，都是找人代的，而且还没挂科，后来想想，要是大一大二就能做到这样该多好呀，但我们学校逼的，我只能呵呵\n- 7月份校招就已经开始，但是我现在完全不像去外地了，只想找一个离家近的工作，好不容易得来的爱情，我不像就这样异地恋，别tm跟我说异地恋是一场考验，不像分开就是不像分开，交往一年，我现在觉得百多公里的距离就是银河那么远了。其实不离开家乡还有一个重要的原因是因为这里朋友多，我好想毕业了能像爱情公寓里面一样，所有的好朋友都能在一起。选择了重庆，自然就选择了猪八戒，好吧，其实我貌似只投过猪八戒。以我当时的能力，我想，在重庆，无论哪个公司应该都能投简历就能上吧，毕竟，我曾经那么努力，就是为了自己以后在选择的时候多一些自由。其实去不去外地，都是自己的选择，有很多人都不理解我，我也不奢求所有人都能理解，反正，你在那里奋斗，我再这里奋斗，大家一起努力嘛，都是自己选择的人生，站着跪着都要走完。\n- 整个上学期都是在之前那个公司实习的...\n- 大四上，我终于用上了苹果电脑，应了一句话，所有linux爱好者在有钱后都会转向mac的，不仅买了rmbp，还买了kindle，终于又开始大量看书的时代了\n- 寒假，报名了学车了，以前我想学的时候他们不然我学，后来他们想让我学的时候我也不想学，现在终于抓紧最后时间学一下吧\n- 大四寒假，二十几年来重庆看到的第一场大雪\n- 这个寒假，爸爸50岁生日，终于能用自己的钱给爸爸买礼物了，一个机械表，信用卡刷爆...\n\n总之，我的大学并没有白过，四年大学生涯，学校没教会我什么，但是我是在这个学校学到了我想学的，也领悟到了我以前我不懂得。比以前更了解自己，这才是大学的意义嘛。\n","source":"_posts/my-university.md","raw":"---\ntitle: \"大学全记事\"\ndate: 2016-02-12 11:57:50\ncategories: 边走边想\n---\n人生最后一个寒假，趁着还记得，回忆一下我这四年\n## 大一\n\n- 比规定时间提前来了几天，学校里居然这么少的人。6栋真小，12平米的房间住了四个人。那几天有领导来关怀新生，整栋楼就没几个人，正好他们敲了我的房间，还和领导握了手。后来才知道，她就是大名鼎鼎的是书记\n- 听学长的话，认为大学就该多去争取兼职机会，于是答应帮别人卖被子提成。但是遇到一个人得时候不忍心把被子高价卖给别人，也由于自己脸皮比较薄，所以放弃了\n- 听别人的话，大学得多加社团，报了几个社团，基本上，如果有技术面的都能过，面试都没过，然后就没有然后了。当时不知道还有学生社团这种东西(和学生会的黑社会性质不一样，这个完全是兴趣)，也错过了社团的招新。\n- 下学期的时候参加了C语言考前培训，认识了软件协会会长和副会长，给了我几道题，做好了，然后就跟着他们联系ACM，然后顺利成长的当上了副会长(当时叫我当会长，被我拒绝了)\n- 大学有一次进某个实验室的机会，但我也放弃了，那老师就一个做外挂的\n- 虽然我高三就开始学习C语言，但其实大一那个寒假我才真正学完，才真正学号了她\n- 大一结束那个暑假，学了Python、Delphi、PHP，虽然都只是学了其语法，但也算入门了\n- 我们是大一结束才军训的，厌恶透了\n- 从大一下开始追海贼，也是这个时候入微博\n- 大一暑假，我们一行人准备骑行去西藏，结果，我半途而废，至今是我心里永远的伤疤\n- 对了，就在大一结束就开始写个人博客了\n\n## 大二\n- 当了一年的副会长，认识了很多人，技术也学到了一些，与服务器的第一次亲密接触，从此知道linuxinux server这种神奇的东西，从此会搭建个人网站了，从此走上了运维这条不归路。其实在软协这两年，我一直是想通过一些特殊的培训来帮助大家，提高大家的，不过没想到的是大二大三事情太多了\n- 与软件协会另两位组队参加了重庆市的ACM比赛，不过没获奖，也没什么，至少我还是参加过一次比赛的(PS:别问我获奖队伍那么多为什么我们都没获奖，谁叫他规定每个学校最多三支队伍获奖的)\n- 英语四六级考试都一次过，不过，说真的，每次考完我都觉得差着几百分呢，ps：四级是优\n- 大概是从这一年开始接触微博的，从此完全成了微博控，花费了我大量的时间，不过带给我的启发却是不可估量的，通过微博，我才看到了世界。至少，不用再沉浸在C和C++的海洋里，原来外面的世界还有python，还有node，还有openstack，还有nosql，原来，我们永远也学不完，原来学校教的在外面真的很少能用到\n- 这一年，也是我上自习上得最多的，导致我连续两年拿了奖学金，还拿奖学金买了一把国产机械键盘，那叫一个爽，那叫一个帅\n- 大二下学期，进入了实验室，好吧，我那么晚才进实验室的，可是实验室的老师是一个刚从国外留学回来的，感觉他不怎么了解国内市场和国内的职场。不过，搞研究的老师应该都这样吧。模式识别，几十篇的全英文论文，看得心烦。也因为这次经历，导致我放弃了考研的想法。\n- 放弃考研的那几天，我把以前的书都卖了，还美其名曰破釜沉舟。同时，也没怎么关心学习的事情了，一心钻研自己的技术。\n- 这个学期分专业填志愿，我和以前毅然决然的选择了信安专业，虽然当时我已经不想学信安了，但是毕竟自己以前一直期待这个专业嘛，而且当时的我对选择什么专业已经不以为然了，无论哪个专业我都只会走我自己的路。\n- 20岁生日这天，买了两瓶白酒和几瓶啤酒，在寝室喝，由于没有什么氛围，室友们并不想喝，于是我一个人喝了...反正我是不知道那晚吐了多少次，据说我吐了无数次，翻下了床无数次，多亏了我的室友啊，不过，你们看到我这样都不送我去医院吗...  \n  醉了才知道自己有多么无力，20岁，我写过一篇文章，很伤心，很落寞，觉得自己太失败了，那晚我也仅仅是喝醉了而已，并没有把一切都看开，真正让我看开的，是我现在的女朋友，所以，忘掉一段感情最好的方式就是认真开始一段全新的感情\n- 暑假的时候把qq相册所有的好友的图片抓下来了，这篇博客访问量上万了，而且因为这个，腾讯一个团队老大找过我，不过当时我实在不想去做前端...现在想想，还好没答应，不然怎么找得到女朋友呢\n- 大二刚开始就买了台红米手机，从此入坑，直至现在都还在用着红米系列\n- 大二暑假，我家终于买车了，突然想学车了，然而现在的我已经没时间去学习了\n\n## 大三\n\n- 既然不考研那就得找事儿了，找了一个工作室去练习，其实一直很佩服领导人眼光的(是一位在职百度贴吧大神创业)，但是他是在不懂得如何管理团队，导致大家最后都没什么激情了。而且由于没有项目管理人员，导致项目到最后居然和之前的需求不一致，最后就没让我们做了。在这个项目里面我主要做的是服务器、数据库的搭建与维护，还包括后台PHP程序的开发。虽然最终失败，不过经历过这个项目，我突然对运维感兴趣了，所以现在自然进入了运维开发这个行当。\n- 大三下学期一直在找实习机会，也顺利在期末进入了一个传媒公司实习。实习到过年，同样，也是做的Python后台程序开发以及服务器的维护，也算是有大半年的Python工作经验了。我能说，我来这里一两个月了，团队里的人才知道我是实习生吗，原来人事和技术这么分离呀，原来我真的能胜任工作的。除了工资相对低以外，这个公司绝对是我见过的福利最好的公司，各种假期，中秋国庆连着放了13天，过年同事们都说毕业这么多年，第一次感觉到放寒假了，从2月3号放到23号。年会没人都抢了几百的红包，一人一块猪肉...对了当天我们还一人提一带猪肉去ktv的总统套房...\n- 也正是因为实习，终于我过上了梦寐以求的租房的生活，想吃什么吃什么\n- 也正是因为进了公司，开始大量使用微信了，原来这里又是另外一片天地\n- 大三上学期，我居然挂科了，而且挂这个科的人基本上大学都是只挂了这一科，我只想说这个老师是个奇葩\n- 在大三下学期刚开始就找到了女朋友，从此，每个周末都没有空了...很累但很幸福，对了，她可是我小学同学，隔壁村的哟\n- 大三寒假，140斤，去医院检查，说肝上油太多，快发展成脂肪肝了，从此不敢海吃肥肉了，大三下每天运动，减了十几斤的肉，but，暑假的时候，老婆的菜确实太好吃了...\n- 3月份，我的微博数量超过了1000\n- 8月份，我终于申请到了人生的第一张信用卡，额度6000，写这篇文章的时候，这个月账单8000多\n\n## 大四\n\n- 大四上学期只回去上过一次课，都是找人代的，而且还没挂科，后来想想，要是大一大二就能做到这样该多好呀，但我们学校逼的，我只能呵呵\n- 7月份校招就已经开始，但是我现在完全不像去外地了，只想找一个离家近的工作，好不容易得来的爱情，我不像就这样异地恋，别tm跟我说异地恋是一场考验，不像分开就是不像分开，交往一年，我现在觉得百多公里的距离就是银河那么远了。其实不离开家乡还有一个重要的原因是因为这里朋友多，我好想毕业了能像爱情公寓里面一样，所有的好朋友都能在一起。选择了重庆，自然就选择了猪八戒，好吧，其实我貌似只投过猪八戒。以我当时的能力，我想，在重庆，无论哪个公司应该都能投简历就能上吧，毕竟，我曾经那么努力，就是为了自己以后在选择的时候多一些自由。其实去不去外地，都是自己的选择，有很多人都不理解我，我也不奢求所有人都能理解，反正，你在那里奋斗，我再这里奋斗，大家一起努力嘛，都是自己选择的人生，站着跪着都要走完。\n- 整个上学期都是在之前那个公司实习的...\n- 大四上，我终于用上了苹果电脑，应了一句话，所有linux爱好者在有钱后都会转向mac的，不仅买了rmbp，还买了kindle，终于又开始大量看书的时代了\n- 寒假，报名了学车了，以前我想学的时候他们不然我学，后来他们想让我学的时候我也不想学，现在终于抓紧最后时间学一下吧\n- 大四寒假，二十几年来重庆看到的第一场大雪\n- 这个寒假，爸爸50岁生日，终于能用自己的钱给爸爸买礼物了，一个机械表，信用卡刷爆...\n\n总之，我的大学并没有白过，四年大学生涯，学校没教会我什么，但是我是在这个学校学到了我想学的，也领悟到了我以前我不懂得。比以前更了解自己，这才是大学的意义嘛。\n","slug":"my-university","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pc5003j9vnzj8fomuuj","content":"<p>人生最后一个寒假，趁着还记得，回忆一下我这四年</p>\n<h2 id=\"大一\"><a href=\"#大一\" class=\"headerlink\" title=\"大一\"></a>大一</h2><ul>\n<li>比规定时间提前来了几天，学校里居然这么少的人。6栋真小，12平米的房间住了四个人。那几天有领导来关怀新生，整栋楼就没几个人，正好他们敲了我的房间，还和领导握了手。后来才知道，她就是大名鼎鼎的是书记</li>\n<li>听学长的话，认为大学就该多去争取兼职机会，于是答应帮别人卖被子提成。但是遇到一个人得时候不忍心把被子高价卖给别人，也由于自己脸皮比较薄，所以放弃了</li>\n<li>听别人的话，大学得多加社团，报了几个社团，基本上，如果有技术面的都能过，面试都没过，然后就没有然后了。当时不知道还有学生社团这种东西(和学生会的黑社会性质不一样，这个完全是兴趣)，也错过了社团的招新。</li>\n<li>下学期的时候参加了C语言考前培训，认识了软件协会会长和副会长，给了我几道题，做好了，然后就跟着他们联系ACM，然后顺利成长的当上了副会长(当时叫我当会长，被我拒绝了)</li>\n<li>大学有一次进某个实验室的机会，但我也放弃了，那老师就一个做外挂的</li>\n<li>虽然我高三就开始学习C语言，但其实大一那个寒假我才真正学完，才真正学号了她</li>\n<li>大一结束那个暑假，学了Python、Delphi、PHP，虽然都只是学了其语法，但也算入门了</li>\n<li>我们是大一结束才军训的，厌恶透了</li>\n<li>从大一下开始追海贼，也是这个时候入微博</li>\n<li>大一暑假，我们一行人准备骑行去西藏，结果，我半途而废，至今是我心里永远的伤疤</li>\n<li>对了，就在大一结束就开始写个人博客了</li>\n</ul>\n<h2 id=\"大二\"><a href=\"#大二\" class=\"headerlink\" title=\"大二\"></a>大二</h2><ul>\n<li>当了一年的副会长，认识了很多人，技术也学到了一些，与服务器的第一次亲密接触，从此知道linuxinux server这种神奇的东西，从此会搭建个人网站了，从此走上了运维这条不归路。其实在软协这两年，我一直是想通过一些特殊的培训来帮助大家，提高大家的，不过没想到的是大二大三事情太多了</li>\n<li>与软件协会另两位组队参加了重庆市的ACM比赛，不过没获奖，也没什么，至少我还是参加过一次比赛的(PS:别问我获奖队伍那么多为什么我们都没获奖，谁叫他规定每个学校最多三支队伍获奖的)</li>\n<li>英语四六级考试都一次过，不过，说真的，每次考完我都觉得差着几百分呢，ps：四级是优</li>\n<li>大概是从这一年开始接触微博的，从此完全成了微博控，花费了我大量的时间，不过带给我的启发却是不可估量的，通过微博，我才看到了世界。至少，不用再沉浸在C和C++的海洋里，原来外面的世界还有python，还有node，还有openstack，还有nosql，原来，我们永远也学不完，原来学校教的在外面真的很少能用到</li>\n<li>这一年，也是我上自习上得最多的，导致我连续两年拿了奖学金，还拿奖学金买了一把国产机械键盘，那叫一个爽，那叫一个帅</li>\n<li>大二下学期，进入了实验室，好吧，我那么晚才进实验室的，可是实验室的老师是一个刚从国外留学回来的，感觉他不怎么了解国内市场和国内的职场。不过，搞研究的老师应该都这样吧。模式识别，几十篇的全英文论文，看得心烦。也因为这次经历，导致我放弃了考研的想法。</li>\n<li>放弃考研的那几天，我把以前的书都卖了，还美其名曰破釜沉舟。同时，也没怎么关心学习的事情了，一心钻研自己的技术。</li>\n<li>这个学期分专业填志愿，我和以前毅然决然的选择了信安专业，虽然当时我已经不想学信安了，但是毕竟自己以前一直期待这个专业嘛，而且当时的我对选择什么专业已经不以为然了，无论哪个专业我都只会走我自己的路。</li>\n<li>20岁生日这天，买了两瓶白酒和几瓶啤酒，在寝室喝，由于没有什么氛围，室友们并不想喝，于是我一个人喝了…反正我是不知道那晚吐了多少次，据说我吐了无数次，翻下了床无数次，多亏了我的室友啊，不过，你们看到我这样都不送我去医院吗…<br>醉了才知道自己有多么无力，20岁，我写过一篇文章，很伤心，很落寞，觉得自己太失败了，那晚我也仅仅是喝醉了而已，并没有把一切都看开，真正让我看开的，是我现在的女朋友，所以，忘掉一段感情最好的方式就是认真开始一段全新的感情</li>\n<li>暑假的时候把qq相册所有的好友的图片抓下来了，这篇博客访问量上万了，而且因为这个，腾讯一个团队老大找过我，不过当时我实在不想去做前端…现在想想，还好没答应，不然怎么找得到女朋友呢</li>\n<li>大二刚开始就买了台红米手机，从此入坑，直至现在都还在用着红米系列</li>\n<li>大二暑假，我家终于买车了，突然想学车了，然而现在的我已经没时间去学习了</li>\n</ul>\n<h2 id=\"大三\"><a href=\"#大三\" class=\"headerlink\" title=\"大三\"></a>大三</h2><ul>\n<li>既然不考研那就得找事儿了，找了一个工作室去练习，其实一直很佩服领导人眼光的(是一位在职百度贴吧大神创业)，但是他是在不懂得如何管理团队，导致大家最后都没什么激情了。而且由于没有项目管理人员，导致项目到最后居然和之前的需求不一致，最后就没让我们做了。在这个项目里面我主要做的是服务器、数据库的搭建与维护，还包括后台PHP程序的开发。虽然最终失败，不过经历过这个项目，我突然对运维感兴趣了，所以现在自然进入了运维开发这个行当。</li>\n<li>大三下学期一直在找实习机会，也顺利在期末进入了一个传媒公司实习。实习到过年，同样，也是做的Python后台程序开发以及服务器的维护，也算是有大半年的Python工作经验了。我能说，我来这里一两个月了，团队里的人才知道我是实习生吗，原来人事和技术这么分离呀，原来我真的能胜任工作的。除了工资相对低以外，这个公司绝对是我见过的福利最好的公司，各种假期，中秋国庆连着放了13天，过年同事们都说毕业这么多年，第一次感觉到放寒假了，从2月3号放到23号。年会没人都抢了几百的红包，一人一块猪肉…对了当天我们还一人提一带猪肉去ktv的总统套房…</li>\n<li>也正是因为实习，终于我过上了梦寐以求的租房的生活，想吃什么吃什么</li>\n<li>也正是因为进了公司，开始大量使用微信了，原来这里又是另外一片天地</li>\n<li>大三上学期，我居然挂科了，而且挂这个科的人基本上大学都是只挂了这一科，我只想说这个老师是个奇葩</li>\n<li>在大三下学期刚开始就找到了女朋友，从此，每个周末都没有空了…很累但很幸福，对了，她可是我小学同学，隔壁村的哟</li>\n<li>大三寒假，140斤，去医院检查，说肝上油太多，快发展成脂肪肝了，从此不敢海吃肥肉了，大三下每天运动，减了十几斤的肉，but，暑假的时候，老婆的菜确实太好吃了…</li>\n<li>3月份，我的微博数量超过了1000</li>\n<li>8月份，我终于申请到了人生的第一张信用卡，额度6000，写这篇文章的时候，这个月账单8000多</li>\n</ul>\n<h2 id=\"大四\"><a href=\"#大四\" class=\"headerlink\" title=\"大四\"></a>大四</h2><ul>\n<li>大四上学期只回去上过一次课，都是找人代的，而且还没挂科，后来想想，要是大一大二就能做到这样该多好呀，但我们学校逼的，我只能呵呵</li>\n<li>7月份校招就已经开始，但是我现在完全不像去外地了，只想找一个离家近的工作，好不容易得来的爱情，我不像就这样异地恋，别tm跟我说异地恋是一场考验，不像分开就是不像分开，交往一年，我现在觉得百多公里的距离就是银河那么远了。其实不离开家乡还有一个重要的原因是因为这里朋友多，我好想毕业了能像爱情公寓里面一样，所有的好朋友都能在一起。选择了重庆，自然就选择了猪八戒，好吧，其实我貌似只投过猪八戒。以我当时的能力，我想，在重庆，无论哪个公司应该都能投简历就能上吧，毕竟，我曾经那么努力，就是为了自己以后在选择的时候多一些自由。其实去不去外地，都是自己的选择，有很多人都不理解我，我也不奢求所有人都能理解，反正，你在那里奋斗，我再这里奋斗，大家一起努力嘛，都是自己选择的人生，站着跪着都要走完。</li>\n<li>整个上学期都是在之前那个公司实习的…</li>\n<li>大四上，我终于用上了苹果电脑，应了一句话，所有linux爱好者在有钱后都会转向mac的，不仅买了rmbp，还买了kindle，终于又开始大量看书的时代了</li>\n<li>寒假，报名了学车了，以前我想学的时候他们不然我学，后来他们想让我学的时候我也不想学，现在终于抓紧最后时间学一下吧</li>\n<li>大四寒假，二十几年来重庆看到的第一场大雪</li>\n<li>这个寒假，爸爸50岁生日，终于能用自己的钱给爸爸买礼物了，一个机械表，信用卡刷爆…</li>\n</ul>\n<p>总之，我的大学并没有白过，四年大学生涯，学校没教会我什么，但是我是在这个学校学到了我想学的，也领悟到了我以前我不懂得。比以前更了解自己，这才是大学的意义嘛。</p>\n","excerpt":"","more":"<p>人生最后一个寒假，趁着还记得，回忆一下我这四年</p>\n<h2 id=\"大一\"><a href=\"#大一\" class=\"headerlink\" title=\"大一\"></a>大一</h2><ul>\n<li>比规定时间提前来了几天，学校里居然这么少的人。6栋真小，12平米的房间住了四个人。那几天有领导来关怀新生，整栋楼就没几个人，正好他们敲了我的房间，还和领导握了手。后来才知道，她就是大名鼎鼎的是书记</li>\n<li>听学长的话，认为大学就该多去争取兼职机会，于是答应帮别人卖被子提成。但是遇到一个人得时候不忍心把被子高价卖给别人，也由于自己脸皮比较薄，所以放弃了</li>\n<li>听别人的话，大学得多加社团，报了几个社团，基本上，如果有技术面的都能过，面试都没过，然后就没有然后了。当时不知道还有学生社团这种东西(和学生会的黑社会性质不一样，这个完全是兴趣)，也错过了社团的招新。</li>\n<li>下学期的时候参加了C语言考前培训，认识了软件协会会长和副会长，给了我几道题，做好了，然后就跟着他们联系ACM，然后顺利成长的当上了副会长(当时叫我当会长，被我拒绝了)</li>\n<li>大学有一次进某个实验室的机会，但我也放弃了，那老师就一个做外挂的</li>\n<li>虽然我高三就开始学习C语言，但其实大一那个寒假我才真正学完，才真正学号了她</li>\n<li>大一结束那个暑假，学了Python、Delphi、PHP，虽然都只是学了其语法，但也算入门了</li>\n<li>我们是大一结束才军训的，厌恶透了</li>\n<li>从大一下开始追海贼，也是这个时候入微博</li>\n<li>大一暑假，我们一行人准备骑行去西藏，结果，我半途而废，至今是我心里永远的伤疤</li>\n<li>对了，就在大一结束就开始写个人博客了</li>\n</ul>\n<h2 id=\"大二\"><a href=\"#大二\" class=\"headerlink\" title=\"大二\"></a>大二</h2><ul>\n<li>当了一年的副会长，认识了很多人，技术也学到了一些，与服务器的第一次亲密接触，从此知道linuxinux server这种神奇的东西，从此会搭建个人网站了，从此走上了运维这条不归路。其实在软协这两年，我一直是想通过一些特殊的培训来帮助大家，提高大家的，不过没想到的是大二大三事情太多了</li>\n<li>与软件协会另两位组队参加了重庆市的ACM比赛，不过没获奖，也没什么，至少我还是参加过一次比赛的(PS:别问我获奖队伍那么多为什么我们都没获奖，谁叫他规定每个学校最多三支队伍获奖的)</li>\n<li>英语四六级考试都一次过，不过，说真的，每次考完我都觉得差着几百分呢，ps：四级是优</li>\n<li>大概是从这一年开始接触微博的，从此完全成了微博控，花费了我大量的时间，不过带给我的启发却是不可估量的，通过微博，我才看到了世界。至少，不用再沉浸在C和C++的海洋里，原来外面的世界还有python，还有node，还有openstack，还有nosql，原来，我们永远也学不完，原来学校教的在外面真的很少能用到</li>\n<li>这一年，也是我上自习上得最多的，导致我连续两年拿了奖学金，还拿奖学金买了一把国产机械键盘，那叫一个爽，那叫一个帅</li>\n<li>大二下学期，进入了实验室，好吧，我那么晚才进实验室的，可是实验室的老师是一个刚从国外留学回来的，感觉他不怎么了解国内市场和国内的职场。不过，搞研究的老师应该都这样吧。模式识别，几十篇的全英文论文，看得心烦。也因为这次经历，导致我放弃了考研的想法。</li>\n<li>放弃考研的那几天，我把以前的书都卖了，还美其名曰破釜沉舟。同时，也没怎么关心学习的事情了，一心钻研自己的技术。</li>\n<li>这个学期分专业填志愿，我和以前毅然决然的选择了信安专业，虽然当时我已经不想学信安了，但是毕竟自己以前一直期待这个专业嘛，而且当时的我对选择什么专业已经不以为然了，无论哪个专业我都只会走我自己的路。</li>\n<li>20岁生日这天，买了两瓶白酒和几瓶啤酒，在寝室喝，由于没有什么氛围，室友们并不想喝，于是我一个人喝了…反正我是不知道那晚吐了多少次，据说我吐了无数次，翻下了床无数次，多亏了我的室友啊，不过，你们看到我这样都不送我去医院吗…<br>醉了才知道自己有多么无力，20岁，我写过一篇文章，很伤心，很落寞，觉得自己太失败了，那晚我也仅仅是喝醉了而已，并没有把一切都看开，真正让我看开的，是我现在的女朋友，所以，忘掉一段感情最好的方式就是认真开始一段全新的感情</li>\n<li>暑假的时候把qq相册所有的好友的图片抓下来了，这篇博客访问量上万了，而且因为这个，腾讯一个团队老大找过我，不过当时我实在不想去做前端…现在想想，还好没答应，不然怎么找得到女朋友呢</li>\n<li>大二刚开始就买了台红米手机，从此入坑，直至现在都还在用着红米系列</li>\n<li>大二暑假，我家终于买车了，突然想学车了，然而现在的我已经没时间去学习了</li>\n</ul>\n<h2 id=\"大三\"><a href=\"#大三\" class=\"headerlink\" title=\"大三\"></a>大三</h2><ul>\n<li>既然不考研那就得找事儿了，找了一个工作室去练习，其实一直很佩服领导人眼光的(是一位在职百度贴吧大神创业)，但是他是在不懂得如何管理团队，导致大家最后都没什么激情了。而且由于没有项目管理人员，导致项目到最后居然和之前的需求不一致，最后就没让我们做了。在这个项目里面我主要做的是服务器、数据库的搭建与维护，还包括后台PHP程序的开发。虽然最终失败，不过经历过这个项目，我突然对运维感兴趣了，所以现在自然进入了运维开发这个行当。</li>\n<li>大三下学期一直在找实习机会，也顺利在期末进入了一个传媒公司实习。实习到过年，同样，也是做的Python后台程序开发以及服务器的维护，也算是有大半年的Python工作经验了。我能说，我来这里一两个月了，团队里的人才知道我是实习生吗，原来人事和技术这么分离呀，原来我真的能胜任工作的。除了工资相对低以外，这个公司绝对是我见过的福利最好的公司，各种假期，中秋国庆连着放了13天，过年同事们都说毕业这么多年，第一次感觉到放寒假了，从2月3号放到23号。年会没人都抢了几百的红包，一人一块猪肉…对了当天我们还一人提一带猪肉去ktv的总统套房…</li>\n<li>也正是因为实习，终于我过上了梦寐以求的租房的生活，想吃什么吃什么</li>\n<li>也正是因为进了公司，开始大量使用微信了，原来这里又是另外一片天地</li>\n<li>大三上学期，我居然挂科了，而且挂这个科的人基本上大学都是只挂了这一科，我只想说这个老师是个奇葩</li>\n<li>在大三下学期刚开始就找到了女朋友，从此，每个周末都没有空了…很累但很幸福，对了，她可是我小学同学，隔壁村的哟</li>\n<li>大三寒假，140斤，去医院检查，说肝上油太多，快发展成脂肪肝了，从此不敢海吃肥肉了，大三下每天运动，减了十几斤的肉，but，暑假的时候，老婆的菜确实太好吃了…</li>\n<li>3月份，我的微博数量超过了1000</li>\n<li>8月份，我终于申请到了人生的第一张信用卡，额度6000，写这篇文章的时候，这个月账单8000多</li>\n</ul>\n<h2 id=\"大四\"><a href=\"#大四\" class=\"headerlink\" title=\"大四\"></a>大四</h2><ul>\n<li>大四上学期只回去上过一次课，都是找人代的，而且还没挂科，后来想想，要是大一大二就能做到这样该多好呀，但我们学校逼的，我只能呵呵</li>\n<li>7月份校招就已经开始，但是我现在完全不像去外地了，只想找一个离家近的工作，好不容易得来的爱情，我不像就这样异地恋，别tm跟我说异地恋是一场考验，不像分开就是不像分开，交往一年，我现在觉得百多公里的距离就是银河那么远了。其实不离开家乡还有一个重要的原因是因为这里朋友多，我好想毕业了能像爱情公寓里面一样，所有的好朋友都能在一起。选择了重庆，自然就选择了猪八戒，好吧，其实我貌似只投过猪八戒。以我当时的能力，我想，在重庆，无论哪个公司应该都能投简历就能上吧，毕竟，我曾经那么努力，就是为了自己以后在选择的时候多一些自由。其实去不去外地，都是自己的选择，有很多人都不理解我，我也不奢求所有人都能理解，反正，你在那里奋斗，我再这里奋斗，大家一起努力嘛，都是自己选择的人生，站着跪着都要走完。</li>\n<li>整个上学期都是在之前那个公司实习的…</li>\n<li>大四上，我终于用上了苹果电脑，应了一句话，所有linux爱好者在有钱后都会转向mac的，不仅买了rmbp，还买了kindle，终于又开始大量看书的时代了</li>\n<li>寒假，报名了学车了，以前我想学的时候他们不然我学，后来他们想让我学的时候我也不想学，现在终于抓紧最后时间学一下吧</li>\n<li>大四寒假，二十几年来重庆看到的第一场大雪</li>\n<li>这个寒假，爸爸50岁生日，终于能用自己的钱给爸爸买礼物了，一个机械表，信用卡刷爆…</li>\n</ul>\n<p>总之，我的大学并没有白过，四年大学生涯，学校没教会我什么，但是我是在这个学校学到了我想学的，也领悟到了我以前我不懂得。比以前更了解自己，这才是大学的意义嘛。</p>\n"},{"title":"Mysql之主从复制","date":"2016-01-05T23:35:43.000Z","_content":"参考地址：<http://369369.blog.51cto.com/319630/790921>  \n原来想要简单地实现MySQL的主从复制其实也是很简单的(\n这里当然不包括服务监控和容错处理啦)\n\n1.要检查主从服务器的MySQL版本，最好版本一致，不然会出现各种问题，特别是，5.5和5.6是不会兼容的  \n\n2.修改两个服务器的mysql配置`vim /etc/my.cnf`\n```\n    [mysqld]\n    log-bin=mysql-bin    // 打开二进制日志\n    server-id=41         // 服务器的唯一ID，为0表示拒绝所有从服务器的连接\n```\n分别修改两个服务器配置然后分别重启\n\n3.主服务器建立账户：这个账户与普通账户不一样，它只能用于主从复制中：  \n```\n    mysql> GRANT REPLICATION SLAVE ON *.* to 'master'@'%' identified by 'mysql';\n```\n4.查看服务器状态\n```\n    mysql> show master status;\n    +------------------+----------+--------------+------------------+-------------------+  \n    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |  \n    +------------------+----------+--------------+------------------+-------------------+  \n    | mysql-bin.000004 |   615261 |              |                  |                   |  \n    +------------------+----------+--------------+------------------+-------------------+  \n    1 row in set (0.00 sec)\n```\n\n需要注意的是，这两个值都得记下来哟\n\n5.将主服务器数据库dump然后导入到从服务器，记下了Position就不用担心dump后新增数据的情况，会自动同步的\n\n6.配置从服务器\n```\n    mysql> change master to master_host='192.168.1.41', master_user='xiaohao', master_password='mysql', master_log_file='mysql-bin.000004', master_log_pos=615261;  // 这里就是刚才的Position\n```\n7.启动从服务器  \n```\n        mysql> start slave;   # 同理，停止用stop slave\n```\n8.查看复制状态  \n```\n        mysql> show slave status\\G  \n    **_*_****_*_****_*_****_*_* 1. row ****_*_****_*_****_*_******  \n                   Slave_IO_State: Waiting for master to send event  \n                      Master_Host: 192.168.1.41  \n                      Master_User: xiaohao  \n                      Master_Port: 3306  \n                    Connect_Retry: 60  \n                  Master_Log_File: mysql-bin.000004  \n              Read_Master_Log_Pos: 652289  \n                   Relay_Log_File: ubuntu-relay-bin.000002  \n                    Relay_Log_Pos: 37345  \n            Relay_Master_Log_File: mysql-bin.000004  \n                 Slave_IO_Running: Yes  \n                Slave_SQL_Running: Yes  \n                  Replicate_Do_DB:\n```\n必须保证Slave_IO_Running和Slave_SQL_Running都为Yes的时候才正确的\n\n# **TroubleShooting：**\n  * 出现错误：Slave SQL for channel '': Slave failed to initialize relay log info structure from the repository, Error_code: 1872  \n是因为relay-log有问题，这时候修改从服务器mysql配置，在[mysqld]中加入relay-log-\nrecovery=1，这样表示，服务器启动之后，删除所有已有的relay日志，重新接收主库的relay日志\n\n  *   \n","source":"_posts/mysql-master-slave.md","raw":"---\ntitle: \"Mysql之主从复制\"\ndate: 2016-01-06 07:35:43\ncategories: 编程之路\n---\n参考地址：<http://369369.blog.51cto.com/319630/790921>  \n原来想要简单地实现MySQL的主从复制其实也是很简单的(\n这里当然不包括服务监控和容错处理啦)\n\n1.要检查主从服务器的MySQL版本，最好版本一致，不然会出现各种问题，特别是，5.5和5.6是不会兼容的  \n\n2.修改两个服务器的mysql配置`vim /etc/my.cnf`\n```\n    [mysqld]\n    log-bin=mysql-bin    // 打开二进制日志\n    server-id=41         // 服务器的唯一ID，为0表示拒绝所有从服务器的连接\n```\n分别修改两个服务器配置然后分别重启\n\n3.主服务器建立账户：这个账户与普通账户不一样，它只能用于主从复制中：  \n```\n    mysql> GRANT REPLICATION SLAVE ON *.* to 'master'@'%' identified by 'mysql';\n```\n4.查看服务器状态\n```\n    mysql> show master status;\n    +------------------+----------+--------------+------------------+-------------------+  \n    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |  \n    +------------------+----------+--------------+------------------+-------------------+  \n    | mysql-bin.000004 |   615261 |              |                  |                   |  \n    +------------------+----------+--------------+------------------+-------------------+  \n    1 row in set (0.00 sec)\n```\n\n需要注意的是，这两个值都得记下来哟\n\n5.将主服务器数据库dump然后导入到从服务器，记下了Position就不用担心dump后新增数据的情况，会自动同步的\n\n6.配置从服务器\n```\n    mysql> change master to master_host='192.168.1.41', master_user='xiaohao', master_password='mysql', master_log_file='mysql-bin.000004', master_log_pos=615261;  // 这里就是刚才的Position\n```\n7.启动从服务器  \n```\n        mysql> start slave;   # 同理，停止用stop slave\n```\n8.查看复制状态  \n```\n        mysql> show slave status\\G  \n    **_*_****_*_****_*_****_*_* 1. row ****_*_****_*_****_*_******  \n                   Slave_IO_State: Waiting for master to send event  \n                      Master_Host: 192.168.1.41  \n                      Master_User: xiaohao  \n                      Master_Port: 3306  \n                    Connect_Retry: 60  \n                  Master_Log_File: mysql-bin.000004  \n              Read_Master_Log_Pos: 652289  \n                   Relay_Log_File: ubuntu-relay-bin.000002  \n                    Relay_Log_Pos: 37345  \n            Relay_Master_Log_File: mysql-bin.000004  \n                 Slave_IO_Running: Yes  \n                Slave_SQL_Running: Yes  \n                  Replicate_Do_DB:\n```\n必须保证Slave_IO_Running和Slave_SQL_Running都为Yes的时候才正确的\n\n# **TroubleShooting：**\n  * 出现错误：Slave SQL for channel '': Slave failed to initialize relay log info structure from the repository, Error_code: 1872  \n是因为relay-log有问题，这时候修改从服务器mysql配置，在[mysqld]中加入relay-log-\nrecovery=1，这样表示，服务器启动之后，删除所有已有的relay日志，重新接收主库的relay日志\n\n  *   \n","slug":"mysql-master-slave","published":1,"updated":"2016-04-13T07:00:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pcb003l9vnzvaanba22","content":"<p>参考地址：<a href=\"http://369369.blog.51cto.com/319630/790921\" target=\"_blank\" rel=\"external\">http://369369.blog.51cto.com/319630/790921</a><br>原来想要简单地实现MySQL的主从复制其实也是很简单的(<br>这里当然不包括服务监控和容错处理啦)</p>\n<p>1.要检查主从服务器的MySQL版本，最好版本一致，不然会出现各种问题，特别是，5.5和5.6是不会兼容的  </p>\n<p>2.修改两个服务器的mysql配置<code>vim /etc/my.cnf</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin    // 打开二进制日志</div><div class=\"line\">server-id=41         // 服务器的唯一ID，为0表示拒绝所有从服务器的连接</div></pre></td></tr></table></figure></p>\n<p>分别修改两个服务器配置然后分别重启</p>\n<p>3.主服务器建立账户：这个账户与普通账户不一样，它只能用于主从复制中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &apos;master&apos;@&apos;%&apos; identified by &apos;mysql&apos;;</div></pre></td></tr></table></figure></p>\n<p>4.查看服务器状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; show master status;</div><div class=\"line\">+------------------+----------+--------------+------------------+-------------------+  </div><div class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |  </div><div class=\"line\">+------------------+----------+--------------+------------------+-------------------+  </div><div class=\"line\">| mysql-bin.000004 |   615261 |              |                  |                   |  </div><div class=\"line\">+------------------+----------+--------------+------------------+-------------------+  </div><div class=\"line\">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，这两个值都得记下来哟</p>\n<p>5.将主服务器数据库dump然后导入到从服务器，记下了Position就不用担心dump后新增数据的情况，会自动同步的</p>\n<p>6.配置从服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; change master to master_host=&apos;192.168.1.41&apos;, master_user=&apos;xiaohao&apos;, master_password=&apos;mysql&apos;, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=615261;  // 这里就是刚才的Position</div></pre></td></tr></table></figure></p>\n<p>7.启动从服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; start slave;   # 同理，停止用stop slave</div></pre></td></tr></table></figure></p>\n<p>8.查看复制状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">    mysql&gt; show slave status\\G  </div><div class=\"line\">**_*_****_*_****_*_****_*_* 1. row ****_*_****_*_****_*_******  </div><div class=\"line\">               Slave_IO_State: Waiting for master to send event  </div><div class=\"line\">                  Master_Host: 192.168.1.41  </div><div class=\"line\">                  Master_User: xiaohao  </div><div class=\"line\">                  Master_Port: 3306  </div><div class=\"line\">                Connect_Retry: 60  </div><div class=\"line\">              Master_Log_File: mysql-bin.000004  </div><div class=\"line\">          Read_Master_Log_Pos: 652289  </div><div class=\"line\">               Relay_Log_File: ubuntu-relay-bin.000002  </div><div class=\"line\">                Relay_Log_Pos: 37345  </div><div class=\"line\">        Relay_Master_Log_File: mysql-bin.000004  </div><div class=\"line\">             Slave_IO_Running: Yes  </div><div class=\"line\">            Slave_SQL_Running: Yes  </div><div class=\"line\">              Replicate_Do_DB:</div></pre></td></tr></table></figure></p>\n<p>必须保证Slave_IO_Running和Slave_SQL_Running都为Yes的时候才正确的</p>\n<h1 id=\"TroubleShooting：\"><a href=\"#TroubleShooting：\" class=\"headerlink\" title=\"TroubleShooting：\"></a><strong>TroubleShooting：</strong></h1><ul>\n<li><p>出现错误：Slave SQL for channel ‘’: Slave failed to initialize relay log info structure from the repository, Error_code: 1872<br>是因为relay-log有问题，这时候修改从服务器mysql配置，在[mysqld]中加入relay-log-<br>recovery=1，这样表示，服务器启动之后，删除所有已有的relay日志，重新接收主库的relay日志</p>\n</li>\n<li></li>\n</ul>\n","excerpt":"","more":"<p>参考地址：<a href=\"http://369369.blog.51cto.com/319630/790921\">http://369369.blog.51cto.com/319630/790921</a><br>原来想要简单地实现MySQL的主从复制其实也是很简单的(<br>这里当然不包括服务监控和容错处理啦)</p>\n<p>1.要检查主从服务器的MySQL版本，最好版本一致，不然会出现各种问题，特别是，5.5和5.6是不会兼容的  </p>\n<p>2.修改两个服务器的mysql配置<code>vim /etc/my.cnf</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin    // 打开二进制日志</div><div class=\"line\">server-id=41         // 服务器的唯一ID，为0表示拒绝所有从服务器的连接</div></pre></td></tr></table></figure></p>\n<p>分别修改两个服务器配置然后分别重启</p>\n<p>3.主服务器建立账户：这个账户与普通账户不一样，它只能用于主从复制中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &apos;master&apos;@&apos;%&apos; identified by &apos;mysql&apos;;</div></pre></td></tr></table></figure></p>\n<p>4.查看服务器状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; show master status;</div><div class=\"line\">+------------------+----------+--------------+------------------+-------------------+  </div><div class=\"line\">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |  </div><div class=\"line\">+------------------+----------+--------------+------------------+-------------------+  </div><div class=\"line\">| mysql-bin.000004 |   615261 |              |                  |                   |  </div><div class=\"line\">+------------------+----------+--------------+------------------+-------------------+  </div><div class=\"line\">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>需要注意的是，这两个值都得记下来哟</p>\n<p>5.将主服务器数据库dump然后导入到从服务器，记下了Position就不用担心dump后新增数据的情况，会自动同步的</p>\n<p>6.配置从服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; change master to master_host=&apos;192.168.1.41&apos;, master_user=&apos;xiaohao&apos;, master_password=&apos;mysql&apos;, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=615261;  // 这里就是刚才的Position</div></pre></td></tr></table></figure></p>\n<p>7.启动从服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; start slave;   # 同理，停止用stop slave</div></pre></td></tr></table></figure></p>\n<p>8.查看复制状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">    mysql&gt; show slave status\\G  </div><div class=\"line\">**_*_****_*_****_*_****_*_* 1. row ****_*_****_*_****_*_******  </div><div class=\"line\">               Slave_IO_State: Waiting for master to send event  </div><div class=\"line\">                  Master_Host: 192.168.1.41  </div><div class=\"line\">                  Master_User: xiaohao  </div><div class=\"line\">                  Master_Port: 3306  </div><div class=\"line\">                Connect_Retry: 60  </div><div class=\"line\">              Master_Log_File: mysql-bin.000004  </div><div class=\"line\">          Read_Master_Log_Pos: 652289  </div><div class=\"line\">               Relay_Log_File: ubuntu-relay-bin.000002  </div><div class=\"line\">                Relay_Log_Pos: 37345  </div><div class=\"line\">        Relay_Master_Log_File: mysql-bin.000004  </div><div class=\"line\">             Slave_IO_Running: Yes  </div><div class=\"line\">            Slave_SQL_Running: Yes  </div><div class=\"line\">              Replicate_Do_DB:</div></pre></td></tr></table></figure></p>\n<p>必须保证Slave_IO_Running和Slave_SQL_Running都为Yes的时候才正确的</p>\n<h1 id=\"TroubleShooting：\"><a href=\"#TroubleShooting：\" class=\"headerlink\" title=\"TroubleShooting：\"></a><strong>TroubleShooting：</strong></h1><ul>\n<li><p>出现错误：Slave SQL for channel ‘’: Slave failed to initialize relay log info structure from the repository, Error_code: 1872<br>是因为relay-log有问题，这时候修改从服务器mysql配置，在[mysqld]中加入relay-log-<br>recovery=1，这样表示，服务器启动之后，删除所有已有的relay日志，重新接收主库的relay日志</p>\n</li>\n<li></li>\n</ul>\n"},{"title":"MySQL冷备份过程","date":"2014-11-04T07:59:41.000Z","_content":"额，这是最简单的备份方式，只需要把mysql的数据文件打包并压缩即可，要恢复的时候再把相应的文件拷过去覆盖就行了。\n\n冷备份实际上是最简单的备份方式(好吧，第一次我就差点把数据库搞崩溃了)，但由于要求停止MySQL服务来进行备份和恢复，并且只能完整备份，所以实用性并不高。\n\n# 备份\n\n首先，进入数据库并找出数据文件存放目录：\n\n\n\n    mysql> show variables like '\\%dir\\%';\n    +-----------------------------------------+----------------------------+\n    | Variable_name                           | Value                      |\n    +-----------------------------------------+----------------------------+\n    | basedir                                 | /usr                       |\n    | binlog_direct_non_transactional_updates | OFF                        |\n    | character_sets_dir                      | /usr/share/mysql/charsets/ |\n    | datadir                                 | /var/lib/mysql/            |\n    | innodb_data_home_dir                    |                            |\n    | innodb_log_group_home_dir               | ./                         |\n    | innodb_max_dirty_pages_pct              | 75                         |\n    | lc_messages_dir                         | /usr/share/mysql/          |\n    | plugin_dir                              | /usr/lib/mysql/plugin/     |\n    | slave_load_tmpdir                       | /tmp                       |\n    | tmpdir                                  | /tmp                       |\n    +-----------------------------------------+----------------------------+\n    11 rows in set (0.00 sec)\n\n数据目录就是datadir的所在位置，即`/var/lib/mysql/`\n\n然后执行：\n\n\n\n    cd /var/lib/                          # 进入其上级目录\n    service mysql stop                    # 关闭mysql服务，这里我其实并没有关闭，但我没有在高                                         数据量下测试过\n    tar jcvf ~/backup.tar.bz2 mysql/      # 打包压缩该目录到根目录\n\n\n#  恢复\n\n执行如下命令即可：\n\n\n\n    cd ~/                           # 进入备份文件的保存目录\n    tar jxvf backup.tar.bz2 mysql/  # 解压\n    gunzip -r mysql/                # 递归解压\n    service mysql stop              # 必须先关闭服务\n    rm -r /var/lib/mysql/           # 删除原目录\n    mv ~/mysql/ /var/lib/           # 把备份的文件移动到/var/lib/里面去替代原来的mysql\n    service mysql start             # 重启mysql服务\n\n需要注意的是恢复过后，就和原来数据库一模一样了，包括所有的修改和帐号密码等信息。\n","source":"_posts/mysql-cold-backup.md","raw":"---\ntitle: \"MySQL冷备份过程\"\ndate: 2014-11-04 15:59:41\ncategories: 编程之路\n---\n额，这是最简单的备份方式，只需要把mysql的数据文件打包并压缩即可，要恢复的时候再把相应的文件拷过去覆盖就行了。\n\n冷备份实际上是最简单的备份方式(好吧，第一次我就差点把数据库搞崩溃了)，但由于要求停止MySQL服务来进行备份和恢复，并且只能完整备份，所以实用性并不高。\n\n# 备份\n\n首先，进入数据库并找出数据文件存放目录：\n\n\n\n    mysql> show variables like '\\%dir\\%';\n    +-----------------------------------------+----------------------------+\n    | Variable_name                           | Value                      |\n    +-----------------------------------------+----------------------------+\n    | basedir                                 | /usr                       |\n    | binlog_direct_non_transactional_updates | OFF                        |\n    | character_sets_dir                      | /usr/share/mysql/charsets/ |\n    | datadir                                 | /var/lib/mysql/            |\n    | innodb_data_home_dir                    |                            |\n    | innodb_log_group_home_dir               | ./                         |\n    | innodb_max_dirty_pages_pct              | 75                         |\n    | lc_messages_dir                         | /usr/share/mysql/          |\n    | plugin_dir                              | /usr/lib/mysql/plugin/     |\n    | slave_load_tmpdir                       | /tmp                       |\n    | tmpdir                                  | /tmp                       |\n    +-----------------------------------------+----------------------------+\n    11 rows in set (0.00 sec)\n\n数据目录就是datadir的所在位置，即`/var/lib/mysql/`\n\n然后执行：\n\n\n\n    cd /var/lib/                          # 进入其上级目录\n    service mysql stop                    # 关闭mysql服务，这里我其实并没有关闭，但我没有在高                                         数据量下测试过\n    tar jcvf ~/backup.tar.bz2 mysql/      # 打包压缩该目录到根目录\n\n\n#  恢复\n\n执行如下命令即可：\n\n\n\n    cd ~/                           # 进入备份文件的保存目录\n    tar jxvf backup.tar.bz2 mysql/  # 解压\n    gunzip -r mysql/                # 递归解压\n    service mysql stop              # 必须先关闭服务\n    rm -r /var/lib/mysql/           # 删除原目录\n    mv ~/mysql/ /var/lib/           # 把备份的文件移动到/var/lib/里面去替代原来的mysql\n    service mysql start             # 重启mysql服务\n\n需要注意的是恢复过后，就和原来数据库一模一样了，包括所有的修改和帐号密码等信息。\n","slug":"mysql-cold-backup","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pch003n9vnzpe6j88vf","content":"<p>额，这是最简单的备份方式，只需要把mysql的数据文件打包并压缩即可，要恢复的时候再把相应的文件拷过去覆盖就行了。</p>\n<p>冷备份实际上是最简单的备份方式(好吧，第一次我就差点把数据库搞崩溃了)，但由于要求停止MySQL服务来进行备份和恢复，并且只能完整备份，所以实用性并不高。</p>\n<h1 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h1><p>首先，进入数据库并找出数据文件存放目录：</p>\n<pre><code>mysql&gt; show variables like &apos;\\%dir\\%&apos;;\n+-----------------------------------------+----------------------------+\n| Variable_name                           | Value                      |\n+-----------------------------------------+----------------------------+\n| basedir                                 | /usr                       |\n| binlog_direct_non_transactional_updates | OFF                        |\n| character_sets_dir                      | /usr/share/mysql/charsets/ |\n| datadir                                 | /var/lib/mysql/            |\n| innodb_data_home_dir                    |                            |\n| innodb_log_group_home_dir               | ./                         |\n| innodb_max_dirty_pages_pct              | 75                         |\n| lc_messages_dir                         | /usr/share/mysql/          |\n| plugin_dir                              | /usr/lib/mysql/plugin/     |\n| slave_load_tmpdir                       | /tmp                       |\n| tmpdir                                  | /tmp                       |\n+-----------------------------------------+----------------------------+\n11 rows in set (0.00 sec)\n</code></pre><p>数据目录就是datadir的所在位置，即<code>/var/lib/mysql/</code></p>\n<p>然后执行：</p>\n<pre><code>cd /var/lib/                          # 进入其上级目录\nservice mysql stop                    # 关闭mysql服务，这里我其实并没有关闭，但我没有在高                                         数据量下测试过\ntar jcvf ~/backup.tar.bz2 mysql/      # 打包压缩该目录到根目录\n</code></pre><h1 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h1><p>执行如下命令即可：</p>\n<pre><code>cd ~/                           # 进入备份文件的保存目录\ntar jxvf backup.tar.bz2 mysql/  # 解压\ngunzip -r mysql/                # 递归解压\nservice mysql stop              # 必须先关闭服务\nrm -r /var/lib/mysql/           # 删除原目录\nmv ~/mysql/ /var/lib/           # 把备份的文件移动到/var/lib/里面去替代原来的mysql\nservice mysql start             # 重启mysql服务\n</code></pre><p>需要注意的是恢复过后，就和原来数据库一模一样了，包括所有的修改和帐号密码等信息。</p>\n","excerpt":"","more":"<p>额，这是最简单的备份方式，只需要把mysql的数据文件打包并压缩即可，要恢复的时候再把相应的文件拷过去覆盖就行了。</p>\n<p>冷备份实际上是最简单的备份方式(好吧，第一次我就差点把数据库搞崩溃了)，但由于要求停止MySQL服务来进行备份和恢复，并且只能完整备份，所以实用性并不高。</p>\n<h1 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h1><p>首先，进入数据库并找出数据文件存放目录：</p>\n<pre><code>mysql&gt; show variables like &apos;\\%dir\\%&apos;;\n+-----------------------------------------+----------------------------+\n| Variable_name                           | Value                      |\n+-----------------------------------------+----------------------------+\n| basedir                                 | /usr                       |\n| binlog_direct_non_transactional_updates | OFF                        |\n| character_sets_dir                      | /usr/share/mysql/charsets/ |\n| datadir                                 | /var/lib/mysql/            |\n| innodb_data_home_dir                    |                            |\n| innodb_log_group_home_dir               | ./                         |\n| innodb_max_dirty_pages_pct              | 75                         |\n| lc_messages_dir                         | /usr/share/mysql/          |\n| plugin_dir                              | /usr/lib/mysql/plugin/     |\n| slave_load_tmpdir                       | /tmp                       |\n| tmpdir                                  | /tmp                       |\n+-----------------------------------------+----------------------------+\n11 rows in set (0.00 sec)\n</code></pre><p>数据目录就是datadir的所在位置，即<code>/var/lib/mysql/</code></p>\n<p>然后执行：</p>\n<pre><code>cd /var/lib/                          # 进入其上级目录\nservice mysql stop                    # 关闭mysql服务，这里我其实并没有关闭，但我没有在高                                         数据量下测试过\ntar jcvf ~/backup.tar.bz2 mysql/      # 打包压缩该目录到根目录\n</code></pre><h1 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h1><p>执行如下命令即可：</p>\n<pre><code>cd ~/                           # 进入备份文件的保存目录\ntar jxvf backup.tar.bz2 mysql/  # 解压\ngunzip -r mysql/                # 递归解压\nservice mysql stop              # 必须先关闭服务\nrm -r /var/lib/mysql/           # 删除原目录\nmv ~/mysql/ /var/lib/           # 把备份的文件移动到/var/lib/里面去替代原来的mysql\nservice mysql start             # 重启mysql服务\n</code></pre><p>需要注意的是恢复过后，就和原来数据库一模一样了，包括所有的修改和帐号密码等信息。</p>\n"},{"title":"MySQL之设计方法","date":"2015-12-10T00:16:46.000Z","_content":"## 关于架构\n\n  * 一般把读取的请求放在缓存(Redis)，而更新请求放在数据库\n\n## 关于索引\n\n  * 数据查询只能用到一个索引，不过这个只是说的是单表查询，联表查询实际上每个表都可以用到其独立的索引\n  * 有些时候索引并不会用到，比如  \nwhere key like 'keyword\\%'：这里可以用到key索引  \nwhere key like '\\%keyword\\%'：这里用不到key的索引\n\n  * 适当建立复合索引：  \n前几天看了“caoz的梦呓”的文章《如何应对并发(1) - 关于数据索引》，理解了建立复合索引所需要考虑的一些东西，顺序不同效率也有很大的不同。  \n'SELECT * FROM user where area = '$area' order by lastlogin desc limit 30;'  \n如果只把area当做索引，那么数据库会把符合这个area的所有结果都拿出来，然后按照lastlogin来进行排序；  \n如果只把lastlogin做为索引，那么数据库会从最后一条开始往前遍历，每条都会对比area，直到数出30条  \n如果lastlogin+area建立符合，和单独lastlogin索引是一样的  \n如果area+lastlogin，把两个字段拼接然后排好序后，看这条SQL在这个数列中查询的提现，所命中的完全是连续的30条，仅仅遍历30条索引即可  \n我最先以为简历复合索引也会是先查找出area，再拿出来排序哟，但其实索引都是预先排好了的，这里就相当于先按照area排序，area相同的再按照lastlog\nin进行排序，这样，只要找到area，然后取前面30条就可以了，就像电话簿一样，先找姓氏，姓氏相同的也会按照名排好序的。\n","source":"_posts/mysql-design-tips.md","raw":"---\ntitle: \"MySQL之设计方法\"\ndate: 2015-12-10 08:16:46\ncategories: 编程之路\n---\n## 关于架构\n\n  * 一般把读取的请求放在缓存(Redis)，而更新请求放在数据库\n\n## 关于索引\n\n  * 数据查询只能用到一个索引，不过这个只是说的是单表查询，联表查询实际上每个表都可以用到其独立的索引\n  * 有些时候索引并不会用到，比如  \nwhere key like 'keyword\\%'：这里可以用到key索引  \nwhere key like '\\%keyword\\%'：这里用不到key的索引\n\n  * 适当建立复合索引：  \n前几天看了“caoz的梦呓”的文章《如何应对并发(1) - 关于数据索引》，理解了建立复合索引所需要考虑的一些东西，顺序不同效率也有很大的不同。  \n'SELECT * FROM user where area = '$area' order by lastlogin desc limit 30;'  \n如果只把area当做索引，那么数据库会把符合这个area的所有结果都拿出来，然后按照lastlogin来进行排序；  \n如果只把lastlogin做为索引，那么数据库会从最后一条开始往前遍历，每条都会对比area，直到数出30条  \n如果lastlogin+area建立符合，和单独lastlogin索引是一样的  \n如果area+lastlogin，把两个字段拼接然后排好序后，看这条SQL在这个数列中查询的提现，所命中的完全是连续的30条，仅仅遍历30条索引即可  \n我最先以为简历复合索引也会是先查找出area，再拿出来排序哟，但其实索引都是预先排好了的，这里就相当于先按照area排序，area相同的再按照lastlog\nin进行排序，这样，只要找到area，然后取前面30条就可以了，就像电话簿一样，先找姓氏，姓氏相同的也会按照名排好序的。\n","slug":"mysql-design-tips","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pcv003p9vnz60towmhx","content":"<h2 id=\"关于架构\"><a href=\"#关于架构\" class=\"headerlink\" title=\"关于架构\"></a>关于架构</h2><ul>\n<li>一般把读取的请求放在缓存(Redis)，而更新请求放在数据库</li>\n</ul>\n<h2 id=\"关于索引\"><a href=\"#关于索引\" class=\"headerlink\" title=\"关于索引\"></a>关于索引</h2><ul>\n<li>数据查询只能用到一个索引，不过这个只是说的是单表查询，联表查询实际上每个表都可以用到其独立的索引</li>\n<li><p>有些时候索引并不会用到，比如<br>where key like ‘keyword\\%’：这里可以用到key索引<br>where key like ‘\\%keyword\\%’：这里用不到key的索引</p>\n</li>\n<li><p>适当建立复合索引：<br>前几天看了“caoz的梦呓”的文章《如何应对并发(1) - 关于数据索引》，理解了建立复合索引所需要考虑的一些东西，顺序不同效率也有很大的不同。<br>‘SELECT * FROM user where area = ‘$area’ order by lastlogin desc limit 30;’<br>如果只把area当做索引，那么数据库会把符合这个area的所有结果都拿出来，然后按照lastlogin来进行排序；<br>如果只把lastlogin做为索引，那么数据库会从最后一条开始往前遍历，每条都会对比area，直到数出30条<br>如果lastlogin+area建立符合，和单独lastlogin索引是一样的<br>如果area+lastlogin，把两个字段拼接然后排好序后，看这条SQL在这个数列中查询的提现，所命中的完全是连续的30条，仅仅遍历30条索引即可<br>我最先以为简历复合索引也会是先查找出area，再拿出来排序哟，但其实索引都是预先排好了的，这里就相当于先按照area排序，area相同的再按照lastlog<br>in进行排序，这样，只要找到area，然后取前面30条就可以了，就像电话簿一样，先找姓氏，姓氏相同的也会按照名排好序的。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于架构\"><a href=\"#关于架构\" class=\"headerlink\" title=\"关于架构\"></a>关于架构</h2><ul>\n<li>一般把读取的请求放在缓存(Redis)，而更新请求放在数据库</li>\n</ul>\n<h2 id=\"关于索引\"><a href=\"#关于索引\" class=\"headerlink\" title=\"关于索引\"></a>关于索引</h2><ul>\n<li>数据查询只能用到一个索引，不过这个只是说的是单表查询，联表查询实际上每个表都可以用到其独立的索引</li>\n<li><p>有些时候索引并不会用到，比如<br>where key like ‘keyword\\%’：这里可以用到key索引<br>where key like ‘\\%keyword\\%’：这里用不到key的索引</p>\n</li>\n<li><p>适当建立复合索引：<br>前几天看了“caoz的梦呓”的文章《如何应对并发(1) - 关于数据索引》，理解了建立复合索引所需要考虑的一些东西，顺序不同效率也有很大的不同。<br>‘SELECT * FROM user where area = ‘$area’ order by lastlogin desc limit 30;’<br>如果只把area当做索引，那么数据库会把符合这个area的所有结果都拿出来，然后按照lastlogin来进行排序；<br>如果只把lastlogin做为索引，那么数据库会从最后一条开始往前遍历，每条都会对比area，直到数出30条<br>如果lastlogin+area建立符合，和单独lastlogin索引是一样的<br>如果area+lastlogin，把两个字段拼接然后排好序后，看这条SQL在这个数列中查询的提现，所命中的完全是连续的30条，仅仅遍历30条索引即可<br>我最先以为简历复合索引也会是先查找出area，再拿出来排序哟，但其实索引都是预先排好了的，这里就相当于先按照area排序，area相同的再按照lastlog<br>in进行排序，这样，只要找到area，然后取前面30条就可以了，就像电话簿一样，先找姓氏，姓氏相同的也会按照名排好序的。</p>\n</li>\n</ul>\n"},{"title":"MySQL数据库升级过程","date":"2016-01-06T00:06:50.000Z","_content":"参考地址：<http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html>  \n不知道为什么很多地方的官网都把一个完整的包打散了，然后完整包和分开的包放在同一级目录里，我也是醉了，最终我还是找到了正确的安装方法。  \n\n  1. MySQL社区版官网下载地址：<http://dev.mysql.com/downloads/mysql/>  \n需要注意的是，一定要下载结尾为.deb-bundle.tar的包，因为它包含了其它分开的包的所有数据\n\n  2. 一步一步执行下列步骤就可以了：  \n\n\n        sudo apt-get install libaio1   // 安装基本的依赖\n    tar -xvf mysql-server_MVER-DVER_CPU.deb-bundle.tar   //解压\n    sudo dpkg -i mysql-common_MVER-DVER_CPU.deb   // 安装common文件\n    dpkg-preconfigure mysql-community-server_MVER-DVER_CPU.deb // 预配置，进行mysql的配置，这时候会要求输入root密码等\n    sudo dpkg -i mysql-community-server_MVER-DVER_CPU.deb    // 安装mysql-server\n    sudo dpkg -i mysql-community-client_MVER-DVER_CPU.deb    // 安装mysql-client\n    sudo dpkg -i libmysqlclient18_MVER-DVER_CPU.deb   // 安装公共库\n\n  3. 收尾  \n\n\n        # 运行兼容检查工具，自动解决不兼容的问题\n    命令行执行mysql_upgrade -uroot -pmysql\n\n\n\n\n    不然可能会出现这些错误：\n    MySQL unknown column 'password_last_changed'\n\n  4. So Easy\n","source":"_posts/mysql-update.md","raw":"---\ntitle: \"MySQL数据库升级过程\"\ndate: 2016-01-06 08:06:50\ncategories: 编程之路\n---\n参考地址：<http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html>  \n不知道为什么很多地方的官网都把一个完整的包打散了，然后完整包和分开的包放在同一级目录里，我也是醉了，最终我还是找到了正确的安装方法。  \n\n  1. MySQL社区版官网下载地址：<http://dev.mysql.com/downloads/mysql/>  \n需要注意的是，一定要下载结尾为.deb-bundle.tar的包，因为它包含了其它分开的包的所有数据\n\n  2. 一步一步执行下列步骤就可以了：  \n\n\n        sudo apt-get install libaio1   // 安装基本的依赖\n    tar -xvf mysql-server_MVER-DVER_CPU.deb-bundle.tar   //解压\n    sudo dpkg -i mysql-common_MVER-DVER_CPU.deb   // 安装common文件\n    dpkg-preconfigure mysql-community-server_MVER-DVER_CPU.deb // 预配置，进行mysql的配置，这时候会要求输入root密码等\n    sudo dpkg -i mysql-community-server_MVER-DVER_CPU.deb    // 安装mysql-server\n    sudo dpkg -i mysql-community-client_MVER-DVER_CPU.deb    // 安装mysql-client\n    sudo dpkg -i libmysqlclient18_MVER-DVER_CPU.deb   // 安装公共库\n\n  3. 收尾  \n\n\n        # 运行兼容检查工具，自动解决不兼容的问题\n    命令行执行mysql_upgrade -uroot -pmysql\n\n\n\n\n    不然可能会出现这些错误：\n    MySQL unknown column 'password_last_changed'\n\n  4. So Easy\n","slug":"mysql-update","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pcx003r9vnz7jrnfctk","content":"<p>参考地址：<a href=\"http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html</a><br>不知道为什么很多地方的官网都把一个完整的包打散了，然后完整包和分开的包放在同一级目录里，我也是醉了，最终我还是找到了正确的安装方法。  </p>\n<ol>\n<li><p>MySQL社区版官网下载地址：<a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/downloads/mysql/</a><br>需要注意的是，一定要下载结尾为.deb-bundle.tar的包，因为它包含了其它分开的包的所有数据</p>\n</li>\n<li><p>一步一步执行下列步骤就可以了：  </p>\n</li>\n</ol>\n<pre><code>    sudo apt-get install libaio1   // 安装基本的依赖\ntar -xvf mysql-server_MVER-DVER_CPU.deb-bundle.tar   //解压\nsudo dpkg -i mysql-common_MVER-DVER_CPU.deb   // 安装common文件\ndpkg-preconfigure mysql-community-server_MVER-DVER_CPU.deb // 预配置，进行mysql的配置，这时候会要求输入root密码等\nsudo dpkg -i mysql-community-server_MVER-DVER_CPU.deb    // 安装mysql-server\nsudo dpkg -i mysql-community-client_MVER-DVER_CPU.deb    // 安装mysql-client\nsudo dpkg -i libmysqlclient18_MVER-DVER_CPU.deb   // 安装公共库\n</code></pre><ol>\n<li>收尾  </li>\n</ol>\n<pre><code>    # 运行兼容检查工具，自动解决不兼容的问题\n命令行执行mysql_upgrade -uroot -pmysql\n\n\n\n\n不然可能会出现这些错误：\nMySQL unknown column &apos;password_last_changed&apos;\n</code></pre><ol>\n<li>So Easy</li>\n</ol>\n","excerpt":"","more":"<p>参考地址：<a href=\"http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html\">http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html</a><br>不知道为什么很多地方的官网都把一个完整的包打散了，然后完整包和分开的包放在同一级目录里，我也是醉了，最终我还是找到了正确的安装方法。  </p>\n<ol>\n<li><p>MySQL社区版官网下载地址：<a href=\"http://dev.mysql.com/downloads/mysql/\">http://dev.mysql.com/downloads/mysql/</a><br>需要注意的是，一定要下载结尾为.deb-bundle.tar的包，因为它包含了其它分开的包的所有数据</p>\n</li>\n<li><p>一步一步执行下列步骤就可以了：  </p>\n</li>\n</ol>\n<pre><code>    sudo apt-get install libaio1   // 安装基本的依赖\ntar -xvf mysql-server_MVER-DVER_CPU.deb-bundle.tar   //解压\nsudo dpkg -i mysql-common_MVER-DVER_CPU.deb   // 安装common文件\ndpkg-preconfigure mysql-community-server_MVER-DVER_CPU.deb // 预配置，进行mysql的配置，这时候会要求输入root密码等\nsudo dpkg -i mysql-community-server_MVER-DVER_CPU.deb    // 安装mysql-server\nsudo dpkg -i mysql-community-client_MVER-DVER_CPU.deb    // 安装mysql-client\nsudo dpkg -i libmysqlclient18_MVER-DVER_CPU.deb   // 安装公共库\n</code></pre><ol>\n<li>收尾  </li>\n</ol>\n<pre><code>    # 运行兼容检查工具，自动解决不兼容的问题\n命令行执行mysql_upgrade -uroot -pmysql\n\n\n\n\n不然可能会出现这些错误：\nMySQL unknown column &apos;password_last_changed&apos;\n</code></pre><ol>\n<li>So Easy</li>\n</ol>\n"},{"title":"MySQL逻辑备份过程","date":"2014-11-04T14:19:36.000Z","_content":"MySQL的逻辑备份是使用mysqldump命令(文本备份，而非二进制备份)来从数据库中提取数据，并将结果写到一个纯文本上，就是我们平常用mysqldmin\n到处的.sql格式的文件，里面是SQL语句。正是如此，逻辑备份可以在MySQL正在运行时执行，并且可以做到不锁表备份(也可以声明锁定)，一般用于数据迁移或者\n数据量很小时。\n\n# 备份\n\n下面的命令是直接在linux的cmd里执行，而不是mysql的shell\n\n\n\n    mysqldump -q --single-transaction -A -u root -p > all.sql # 导出所有数据库到all.sql\n    mysqldump -q --single-transaction -u root -p user > user.sql # 导出user数据库\n    mysqldump -q --single-transaction -u root -p user admin > admin.sql # 导出user数据库里名为admin的表\n    mysqldump -q -d --skip-triggers user admin-u root -p > admin.sql  # 导出user数据库里名为admin的表的结构\n    mysqldump -q -d --skip-triggers user -u root -p > jiego.sql   # 导出user数据库的结构\n\n其中mysqldump的常用参数如下：\n\n\n\n    -B：导出多个数据库\n    -E：把事件events一起导出\n    -R：把存储过程routines一并导出\n    -q：快速模式，不把查询结果显示在终端\n    --default-character-set=utf8：这点很重要，因为大量的数据库默认都会是utf8\n    --flush-logs：生成新的二进制日志文件，主要用于增量备份，恢复数据，增量备份必须加此选项，否则会丢失              数据\n    --lock-all-tables：锁住全局表，会出现写操作等待\n    --single-transaction：设置本次会话隔离级别为REPEATABLE READ，确保本次会话时，不会看到其他会话已提交了的数据\n    --triggers：把触发器一并导出，默认开启了此选项的\n\n**注**：需要注意的是，在5.5之后，mysqldump默认无法备份performance_schema这个数据库，但是可以通过--databases指定名字和--skip-lock-tables的方式来备份，但是不知道为什么，虽然能备份但是还是会给出错误信息。performance_schema是新增的mysql的性能监视引擎，所以我认为不备份也行，本来默认也是关闭的，因为数据库迁移或者恢复的时候可以不用看之前的这些的，有什么问题看系统日志就行了，具体的请参见[官方手册](http://dev.mysql.com/doc/refman/5.5/en/mysqldump.html)。\n\n### 在slave里备份\n\nMySQL5.5之后mysqldump增加了一个参数--dump-\nslave，可以在slave端dump数据，并且可以建立新的slave，可大大降低主服务器的压力。\n\n# 恢复\n\n假设有一个数据库结构的备份文件user.sql，那么可以 在mysql的shell里面执行如下命令\n\n\n\n    create database User;     # 首先得创建一个数据库\n    use User;                 # 选择该数据库\n    source /root/User.sql;    # 导入sql文件\n    show tables;              # 查看是否创建成功\n\n也可以在创建相应数据后后在linux的shell里执行(在外面创建数据库我没找到方法)\n\n\n\n    mysql -u root -p user < user.sql\n","source":"_posts/mysql-logical-backup.md","raw":"---\ntitle: \"MySQL逻辑备份过程\"\ndate: 2014-11-04 22:19:36\ncategories: 编程之路\n---\nMySQL的逻辑备份是使用mysqldump命令(文本备份，而非二进制备份)来从数据库中提取数据，并将结果写到一个纯文本上，就是我们平常用mysqldmin\n到处的.sql格式的文件，里面是SQL语句。正是如此，逻辑备份可以在MySQL正在运行时执行，并且可以做到不锁表备份(也可以声明锁定)，一般用于数据迁移或者\n数据量很小时。\n\n# 备份\n\n下面的命令是直接在linux的cmd里执行，而不是mysql的shell\n\n\n\n    mysqldump -q --single-transaction -A -u root -p > all.sql # 导出所有数据库到all.sql\n    mysqldump -q --single-transaction -u root -p user > user.sql # 导出user数据库\n    mysqldump -q --single-transaction -u root -p user admin > admin.sql # 导出user数据库里名为admin的表\n    mysqldump -q -d --skip-triggers user admin-u root -p > admin.sql  # 导出user数据库里名为admin的表的结构\n    mysqldump -q -d --skip-triggers user -u root -p > jiego.sql   # 导出user数据库的结构\n\n其中mysqldump的常用参数如下：\n\n\n\n    -B：导出多个数据库\n    -E：把事件events一起导出\n    -R：把存储过程routines一并导出\n    -q：快速模式，不把查询结果显示在终端\n    --default-character-set=utf8：这点很重要，因为大量的数据库默认都会是utf8\n    --flush-logs：生成新的二进制日志文件，主要用于增量备份，恢复数据，增量备份必须加此选项，否则会丢失              数据\n    --lock-all-tables：锁住全局表，会出现写操作等待\n    --single-transaction：设置本次会话隔离级别为REPEATABLE READ，确保本次会话时，不会看到其他会话已提交了的数据\n    --triggers：把触发器一并导出，默认开启了此选项的\n\n**注**：需要注意的是，在5.5之后，mysqldump默认无法备份performance_schema这个数据库，但是可以通过--databases指定名字和--skip-lock-tables的方式来备份，但是不知道为什么，虽然能备份但是还是会给出错误信息。performance_schema是新增的mysql的性能监视引擎，所以我认为不备份也行，本来默认也是关闭的，因为数据库迁移或者恢复的时候可以不用看之前的这些的，有什么问题看系统日志就行了，具体的请参见[官方手册](http://dev.mysql.com/doc/refman/5.5/en/mysqldump.html)。\n\n### 在slave里备份\n\nMySQL5.5之后mysqldump增加了一个参数--dump-\nslave，可以在slave端dump数据，并且可以建立新的slave，可大大降低主服务器的压力。\n\n# 恢复\n\n假设有一个数据库结构的备份文件user.sql，那么可以 在mysql的shell里面执行如下命令\n\n\n\n    create database User;     # 首先得创建一个数据库\n    use User;                 # 选择该数据库\n    source /root/User.sql;    # 导入sql文件\n    show tables;              # 查看是否创建成功\n\n也可以在创建相应数据后后在linux的shell里执行(在外面创建数据库我没找到方法)\n\n\n\n    mysql -u root -p user < user.sql\n","slug":"mysql-logical-backup","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pcz003t9vnzwfk2ipbt","content":"<p>MySQL的逻辑备份是使用mysqldump命令(文本备份，而非二进制备份)来从数据库中提取数据，并将结果写到一个纯文本上，就是我们平常用mysqldmin<br>到处的.sql格式的文件，里面是SQL语句。正是如此，逻辑备份可以在MySQL正在运行时执行，并且可以做到不锁表备份(也可以声明锁定)，一般用于数据迁移或者<br>数据量很小时。</p>\n<h1 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h1><p>下面的命令是直接在linux的cmd里执行，而不是mysql的shell</p>\n<pre><code>mysqldump -q --single-transaction -A -u root -p &gt; all.sql # 导出所有数据库到all.sql\nmysqldump -q --single-transaction -u root -p user &gt; user.sql # 导出user数据库\nmysqldump -q --single-transaction -u root -p user admin &gt; admin.sql # 导出user数据库里名为admin的表\nmysqldump -q -d --skip-triggers user admin-u root -p &gt; admin.sql  # 导出user数据库里名为admin的表的结构\nmysqldump -q -d --skip-triggers user -u root -p &gt; jiego.sql   # 导出user数据库的结构\n</code></pre><p>其中mysqldump的常用参数如下：</p>\n<pre><code>-B：导出多个数据库\n-E：把事件events一起导出\n-R：把存储过程routines一并导出\n-q：快速模式，不把查询结果显示在终端\n--default-character-set=utf8：这点很重要，因为大量的数据库默认都会是utf8\n--flush-logs：生成新的二进制日志文件，主要用于增量备份，恢复数据，增量备份必须加此选项，否则会丢失              数据\n--lock-all-tables：锁住全局表，会出现写操作等待\n--single-transaction：设置本次会话隔离级别为REPEATABLE READ，确保本次会话时，不会看到其他会话已提交了的数据\n--triggers：把触发器一并导出，默认开启了此选项的\n</code></pre><p><strong>注</strong>：需要注意的是，在5.5之后，mysqldump默认无法备份performance_schema这个数据库，但是可以通过–databases指定名字和–skip-lock-tables的方式来备份，但是不知道为什么，虽然能备份但是还是会给出错误信息。performance_schema是新增的mysql的性能监视引擎，所以我认为不备份也行，本来默认也是关闭的，因为数据库迁移或者恢复的时候可以不用看之前的这些的，有什么问题看系统日志就行了，具体的请参见<a href=\"http://dev.mysql.com/doc/refman/5.5/en/mysqldump.html\" target=\"_blank\" rel=\"external\">官方手册</a>。</p>\n<h3 id=\"在slave里备份\"><a href=\"#在slave里备份\" class=\"headerlink\" title=\"在slave里备份\"></a>在slave里备份</h3><p>MySQL5.5之后mysqldump增加了一个参数–dump-<br>slave，可以在slave端dump数据，并且可以建立新的slave，可大大降低主服务器的压力。</p>\n<h1 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h1><p>假设有一个数据库结构的备份文件user.sql，那么可以 在mysql的shell里面执行如下命令</p>\n<pre><code>create database User;     # 首先得创建一个数据库\nuse User;                 # 选择该数据库\nsource /root/User.sql;    # 导入sql文件\nshow tables;              # 查看是否创建成功\n</code></pre><p>也可以在创建相应数据后后在linux的shell里执行(在外面创建数据库我没找到方法)</p>\n<pre><code>mysql -u root -p user &lt; user.sql\n</code></pre>","excerpt":"","more":"<p>MySQL的逻辑备份是使用mysqldump命令(文本备份，而非二进制备份)来从数据库中提取数据，并将结果写到一个纯文本上，就是我们平常用mysqldmin<br>到处的.sql格式的文件，里面是SQL语句。正是如此，逻辑备份可以在MySQL正在运行时执行，并且可以做到不锁表备份(也可以声明锁定)，一般用于数据迁移或者<br>数据量很小时。</p>\n<h1 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h1><p>下面的命令是直接在linux的cmd里执行，而不是mysql的shell</p>\n<pre><code>mysqldump -q --single-transaction -A -u root -p &gt; all.sql # 导出所有数据库到all.sql\nmysqldump -q --single-transaction -u root -p user &gt; user.sql # 导出user数据库\nmysqldump -q --single-transaction -u root -p user admin &gt; admin.sql # 导出user数据库里名为admin的表\nmysqldump -q -d --skip-triggers user admin-u root -p &gt; admin.sql  # 导出user数据库里名为admin的表的结构\nmysqldump -q -d --skip-triggers user -u root -p &gt; jiego.sql   # 导出user数据库的结构\n</code></pre><p>其中mysqldump的常用参数如下：</p>\n<pre><code>-B：导出多个数据库\n-E：把事件events一起导出\n-R：把存储过程routines一并导出\n-q：快速模式，不把查询结果显示在终端\n--default-character-set=utf8：这点很重要，因为大量的数据库默认都会是utf8\n--flush-logs：生成新的二进制日志文件，主要用于增量备份，恢复数据，增量备份必须加此选项，否则会丢失              数据\n--lock-all-tables：锁住全局表，会出现写操作等待\n--single-transaction：设置本次会话隔离级别为REPEATABLE READ，确保本次会话时，不会看到其他会话已提交了的数据\n--triggers：把触发器一并导出，默认开启了此选项的\n</code></pre><p><strong>注</strong>：需要注意的是，在5.5之后，mysqldump默认无法备份performance_schema这个数据库，但是可以通过–databases指定名字和–skip-lock-tables的方式来备份，但是不知道为什么，虽然能备份但是还是会给出错误信息。performance_schema是新增的mysql的性能监视引擎，所以我认为不备份也行，本来默认也是关闭的，因为数据库迁移或者恢复的时候可以不用看之前的这些的，有什么问题看系统日志就行了，具体的请参见<a href=\"http://dev.mysql.com/doc/refman/5.5/en/mysqldump.html\">官方手册</a>。</p>\n<h3 id=\"在slave里备份\"><a href=\"#在slave里备份\" class=\"headerlink\" title=\"在slave里备份\"></a>在slave里备份</h3><p>MySQL5.5之后mysqldump增加了一个参数–dump-<br>slave，可以在slave端dump数据，并且可以建立新的slave，可大大降低主服务器的压力。</p>\n<h1 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h1><p>假设有一个数据库结构的备份文件user.sql，那么可以 在mysql的shell里面执行如下命令</p>\n<pre><code>create database User;     # 首先得创建一个数据库\nuse User;                 # 选择该数据库\nsource /root/User.sql;    # 导入sql文件\nshow tables;              # 查看是否创建成功\n</code></pre><p>也可以在创建相应数据后后在linux的shell里执行(在外面创建数据库我没找到方法)</p>\n<pre><code>mysql -u root -p user &lt; user.sql\n</code></pre>"},{"title":"MySQL之调优方法","date":"2015-12-10T00:25:34.000Z","_content":"  * 数据库分析调优步骤  \n\n\n        1.将sql语句记录下来\n    2.看查询更新的比例(如果太多，可以抽样查看)\n    3.看最多查询的数据表有哪些，最多更新的数据表有哪些\n    4.看最多查询的数据表最多查询的SQL是什么样子的，最多更新的数据表最多执行的SQL语句是怎样的，算出各自每秒的请求频率\n    5.关键分析，最多查询的SQL，基于同一主键查询的比例多不多(看能不能缓存化)\n    6.应对大翻页的问题，其实是不需要精确的返回结果数的，像淘宝这些都不会超过100页的\n\n\n\n  * 数据库配置：  \n\n\n        innodb_read_io_threads/innodb_write_io_threads：这两个参数指Innodb数据库读写的IO进程数，默认为4\n\n  * 慢查询日志：  \n\n\n        # 开启慢查询\n    > show variables like 'slow_query_log'   # 查看是否开起慢查询\n    > set global slow_query_log_file = ''\n    > set global log_queries_not_using_indexes = on\n    > set global long_query_time = 1\n\n  * 分库分表  \n表的垂直拆分：把原来一个有很多列的表拆分成多个表，解决了表宽的问题，通常，把不常用的字段单独存放到一个表中，大字段单独存放，一起使用的字段一起存放\n\n  * 语句分析：使用explan查询SQL的执行计划\n  * 其它工具  \n\n\n        Mysqldumpslow：慢查询日志的分析工具\n","source":"_posts/mysql-optimization.md","raw":"---\ntitle: \"MySQL之调优方法\"\ndate: 2015-12-10 08:25:34\ncategories: 编程之路\n---\n  * 数据库分析调优步骤  \n\n\n        1.将sql语句记录下来\n    2.看查询更新的比例(如果太多，可以抽样查看)\n    3.看最多查询的数据表有哪些，最多更新的数据表有哪些\n    4.看最多查询的数据表最多查询的SQL是什么样子的，最多更新的数据表最多执行的SQL语句是怎样的，算出各自每秒的请求频率\n    5.关键分析，最多查询的SQL，基于同一主键查询的比例多不多(看能不能缓存化)\n    6.应对大翻页的问题，其实是不需要精确的返回结果数的，像淘宝这些都不会超过100页的\n\n\n\n  * 数据库配置：  \n\n\n        innodb_read_io_threads/innodb_write_io_threads：这两个参数指Innodb数据库读写的IO进程数，默认为4\n\n  * 慢查询日志：  \n\n\n        # 开启慢查询\n    > show variables like 'slow_query_log'   # 查看是否开起慢查询\n    > set global slow_query_log_file = ''\n    > set global log_queries_not_using_indexes = on\n    > set global long_query_time = 1\n\n  * 分库分表  \n表的垂直拆分：把原来一个有很多列的表拆分成多个表，解决了表宽的问题，通常，把不常用的字段单独存放到一个表中，大字段单独存放，一起使用的字段一起存放\n\n  * 语句分析：使用explan查询SQL的执行计划\n  * 其它工具  \n\n\n        Mysqldumpslow：慢查询日志的分析工具\n","slug":"mysql-optimization","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pd4003v9vnzu3a9qws9","content":"<ul>\n<li>数据库分析调优步骤  </li>\n</ul>\n<pre><code>    1.将sql语句记录下来\n2.看查询更新的比例(如果太多，可以抽样查看)\n3.看最多查询的数据表有哪些，最多更新的数据表有哪些\n4.看最多查询的数据表最多查询的SQL是什么样子的，最多更新的数据表最多执行的SQL语句是怎样的，算出各自每秒的请求频率\n5.关键分析，最多查询的SQL，基于同一主键查询的比例多不多(看能不能缓存化)\n6.应对大翻页的问题，其实是不需要精确的返回结果数的，像淘宝这些都不会超过100页的\n</code></pre><ul>\n<li>数据库配置：  </li>\n</ul>\n<pre><code>innodb_read_io_threads/innodb_write_io_threads：这两个参数指Innodb数据库读写的IO进程数，默认为4\n</code></pre><ul>\n<li>慢查询日志：  </li>\n</ul>\n<pre><code>    # 开启慢查询\n&gt; show variables like &apos;slow_query_log&apos;   # 查看是否开起慢查询\n&gt; set global slow_query_log_file = &apos;&apos;\n&gt; set global log_queries_not_using_indexes = on\n&gt; set global long_query_time = 1\n</code></pre><ul>\n<li><p>分库分表<br>表的垂直拆分：把原来一个有很多列的表拆分成多个表，解决了表宽的问题，通常，把不常用的字段单独存放到一个表中，大字段单独存放，一起使用的字段一起存放</p>\n</li>\n<li><p>语句分析：使用explan查询SQL的执行计划</p>\n</li>\n<li>其它工具  </li>\n</ul>\n<pre><code>Mysqldumpslow：慢查询日志的分析工具\n</code></pre>","excerpt":"","more":"<ul>\n<li>数据库分析调优步骤  </li>\n</ul>\n<pre><code>    1.将sql语句记录下来\n2.看查询更新的比例(如果太多，可以抽样查看)\n3.看最多查询的数据表有哪些，最多更新的数据表有哪些\n4.看最多查询的数据表最多查询的SQL是什么样子的，最多更新的数据表最多执行的SQL语句是怎样的，算出各自每秒的请求频率\n5.关键分析，最多查询的SQL，基于同一主键查询的比例多不多(看能不能缓存化)\n6.应对大翻页的问题，其实是不需要精确的返回结果数的，像淘宝这些都不会超过100页的\n</code></pre><ul>\n<li>数据库配置：  </li>\n</ul>\n<pre><code>innodb_read_io_threads/innodb_write_io_threads：这两个参数指Innodb数据库读写的IO进程数，默认为4\n</code></pre><ul>\n<li>慢查询日志：  </li>\n</ul>\n<pre><code>    # 开启慢查询\n&gt; show variables like &apos;slow_query_log&apos;   # 查看是否开起慢查询\n&gt; set global slow_query_log_file = &apos;&apos;\n&gt; set global log_queries_not_using_indexes = on\n&gt; set global long_query_time = 1\n</code></pre><ul>\n<li><p>分库分表<br>表的垂直拆分：把原来一个有很多列的表拆分成多个表，解决了表宽的问题，通常，把不常用的字段单独存放到一个表中，大字段单独存放，一起使用的字段一起存放</p>\n</li>\n<li><p>语句分析：使用explan查询SQL的执行计划</p>\n</li>\n<li>其它工具  </li>\n</ul>\n<pre><code>Mysqldumpslow：慢查询日志的分析工具\n</code></pre>"},{"title":"MySQL数据库目录存放位置迁移","date":"2015-12-17T04:29:11.000Z","_content":"迁移MySQL的数据库目录，其实并不难呀  \n\n  1. 查看MySQL数据存放目录  \n\n\n        > show variables like '\\%dir\\%';\n    datadir的值就是mysql当前的存放目录，默认是/usr/local/mysql/data\n\n  2. 进行迁移  \n\n\n        service mysqld stop\n    cp -r /usr/local/mysql/data/*  /path/to/mypath\n\n  3. 修改配置  \n\n\n        chown mysql:mysql -R /path/to/mypath\n\n\n\n\n    # 修改/etc/my.cnf文件和/etc/init.d/mysqld文件，\n\n\n\n\n    将datadir的值更改为新目录\n\n  4. 重启服务  \n\n\n        service mysqld start\n\n﻿  \n","source":"_posts/mysql-migration.md","raw":"---\ntitle: \"MySQL数据库目录存放位置迁移\"\ndate: 2015-12-17 12:29:11\ncategories: 编程之路\n---\n迁移MySQL的数据库目录，其实并不难呀  \n\n  1. 查看MySQL数据存放目录  \n\n\n        > show variables like '\\%dir\\%';\n    datadir的值就是mysql当前的存放目录，默认是/usr/local/mysql/data\n\n  2. 进行迁移  \n\n\n        service mysqld stop\n    cp -r /usr/local/mysql/data/*  /path/to/mypath\n\n  3. 修改配置  \n\n\n        chown mysql:mysql -R /path/to/mypath\n\n\n\n\n    # 修改/etc/my.cnf文件和/etc/init.d/mysqld文件，\n\n\n\n\n    将datadir的值更改为新目录\n\n  4. 重启服务  \n\n\n        service mysqld start\n\n﻿  \n","slug":"mysql-migration","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pdb003x9vnzbqbxlqco","content":"<p>迁移MySQL的数据库目录，其实并不难呀  </p>\n<ol>\n<li>查看MySQL数据存放目录  </li>\n</ol>\n<pre><code>    &gt; show variables like &apos;\\%dir\\%&apos;;\ndatadir的值就是mysql当前的存放目录，默认是/usr/local/mysql/data\n</code></pre><ol>\n<li>进行迁移  </li>\n</ol>\n<pre><code>    service mysqld stop\ncp -r /usr/local/mysql/data/*  /path/to/mypath\n</code></pre><ol>\n<li>修改配置  </li>\n</ol>\n<pre><code>    chown mysql:mysql -R /path/to/mypath\n\n\n\n\n# 修改/etc/my.cnf文件和/etc/init.d/mysqld文件，\n\n\n\n\n将datadir的值更改为新目录\n</code></pre><ol>\n<li>重启服务  </li>\n</ol>\n<pre><code>service mysqld start\n</code></pre><p>﻿  </p>\n","excerpt":"","more":"<p>迁移MySQL的数据库目录，其实并不难呀  </p>\n<ol>\n<li>查看MySQL数据存放目录  </li>\n</ol>\n<pre><code>    &gt; show variables like &apos;\\%dir\\%&apos;;\ndatadir的值就是mysql当前的存放目录，默认是/usr/local/mysql/data\n</code></pre><ol>\n<li>进行迁移  </li>\n</ol>\n<pre><code>    service mysqld stop\ncp -r /usr/local/mysql/data/*  /path/to/mypath\n</code></pre><ol>\n<li>修改配置  </li>\n</ol>\n<pre><code>    chown mysql:mysql -R /path/to/mypath\n\n\n\n\n# 修改/etc/my.cnf文件和/etc/init.d/mysqld文件，\n\n\n\n\n将datadir的值更改为新目录\n</code></pre><ol>\n<li>重启服务  </li>\n</ol>\n<pre><code>service mysqld start\n</code></pre><p>﻿  </p>\n"},{"title":"[转]一蓑烟雨任平生：奈良鹿丸的人生观","date":"2015-04-18T13:54:49.000Z","_content":"原文地址：<http://movie.douban.com/review/2877890/>  \n\n奈良鹿丸那段很经典的独白，恐怕是每个鹿丸迷都能背下来的：\n\n“我本来想过着随便当个忍者，随便赚点钱……然后和不美又不丑的女人结婚，生两个小孩，第一个是女孩，第二个是男孩……等长女儿结婚，儿子也能够独当一面的时候，就从\n忍者的工作退休……之后，每天过着下将棋或围棋的悠闲隐居生活……然后比自己的老婆还要早老死……我就是想过这种生活……”\n\n鹿丸在《火影忍者》中本应是个不起眼的人物。模样不算帅，也不算丑；气质不算酷，也不算俗；武力不算强，也不算弱；出场不算少，也不算多。总之，不管从哪边算起，都不\n是一个出头椽子。在木叶忍者的合影中，是一个拿放大镜才能找到的人。就是这样一个人物，在很多人气调查中，都排进了前五名。\n\n鹿丸在《火影忍者》里有一个很特别的地方，就是他的人生观，也就是我们在上边引用的那一段。这个人生观既不高尚，也不低俗，却是鹿丸向往的，也是很多鹿丸迷喜欢他的重\n要原因。\n\n《火影忍者》这部动画片，一个重要课题就是，人生意义的追寻。几乎每场较大的战斗，敌我双方都会回顾生命的历程，探讨人生的意义。就像古雅典城里，哲学家们的论战一样\n，人生观论战中输了的人，最终战斗也会输。《火影忍者》表面上看，是一场场忍者之间的对决；实际上，是一场场人生哲学的较量。就像TVB的时装剧一样，经常通过警察、\n律师、厨师等特定职业，来探讨人生观；在《火影忍者》中，一个个忍者，就是一个个人生观的载体。很多忍者都背负着这个沉重的课题，甚至包括，以“食为天”的秋道丁次，\n也曾经为生活的意义烦恼过。\n\n鹿丸则不然，几乎没有和别人探讨过人生观的问题。因为他已经有了一个，不需要太大努力，就能实现的人生目标。在这个问题上，鹿丸并不困惑。\n\n不像漩涡鸣人那样整天风风火火的，也不像宇智波佐助那样整天装帅耍酷，鹿丸始终给人一种从容的感觉。这种从容，来自于他对自己人生观的深信不疑。像鸣人、佐助、大蛇丸\n那样，整天把人生观挂在嘴边的人，实际上，对自己的人生观并无十分把握；否则，就不会逢人便宣讲、证明自己的人生观。当然，也正是因为这样，他们才能成为主角人物，观\n众在他们的矛盾和成长中，得到共鸣。\n\n鹿丸另一个受欢迎之处，就是他给人的安全感。我们设想一下，一个由鹿丸带队的小组，和一个由鸣人带队的小组，显然前者更能给人安全感。这种安全感来自于鹿丸强烈的责任\n感。在追回佐助的任务中，临出发的时候，鹿丸给队员们说了一段话：\n\n“佐助跟我没有很深的交情，我也不喜欢这个人。但佐助也是木叶的忍者，是我们的同伴。所以我们要拼命把他救出来，这是我们木叶的风格。并且，虽然我的性格这样，但也不\n会在这件事上怕麻烦。因为我的行为关系到你们的性命。”\n\n说到责任感，就要说到鹿丸的另一个经典口头禅：\n\n“真麻烦……”\n\n对于责任，鹿丸是能躲就躲，即使是中忍考试这样“催人奋发”的大事，也是被鸣人一把推下看台，强行参加考试。从这一集的标题《云彩真是好啊……干劲zero的男人》，\n即可以看出鹿丸的避世心态。\n\n不过，避世不等于逃避责任。就像在追回佐助的任务中，临出发时，鹿丸给队员们说的那段话一样。鹿丸的嫌麻烦心态，意味着不愿意在没把握的情况下，轻率地承担责任；而一\n旦承担了责任，就要信守承诺。\n\n我们更常见的是，因为一时的激情，盲目承担下了工作、婚姻、朋友的责任。当激情过后，遇到困难时，便开始推三阻四，这才是俗人逃避责任的心态。\n\n《世说新语》里有一个华歆和王朗的故事：\n\n“华歆、王朗俱乘船避难，有一人欲依附，歆辄难之。朗曰：“幸尚宽，何为不可？”后贼追至，王欲舍所携人。歆曰：“本所以疑，正为此耳。\n既已纳其自托，宁可以急相弃邪？”遂携拯如初。世以此定华、王之优劣。”\n\n《谱叙》中也记载了华歆另外一件类似的事：\n\n“歆少以高行显名。避西京之乱，与同志郑泰等六七人，间步出武关。道遇一丈夫独行，原得俱，皆哀欲许之。歆独曰：“不可。今已在危险之中，祸福患害，义犹一也。无故受\n人，不知其义。既以受之，若有进退，可中弃乎！”众不忍，卒与俱行。此丈夫中道堕井，皆欲弃之。歆曰：“已与俱矣，弃之不义。”相率共还出之，而后别去。众乃大义之。\n”\n\n华歆能够在评估自己的实际情况后，作出正确决定，即这个责任承担不起。之后，这两个责任被王朗和郑泰等人强加在头上。既然承担了责任，就要承担到底，这是君子所为；而\n王朗、郑泰之流，在这两件事上，只不过是“拍脑袋决策，拍胸脯保证，拍屁股就走”的俗人。\n\n当第一天坐在新办公室的时候，当爱人偎依在自己胸膛的时候，当在酒桌上拍着胸脯对朋友说：“这事儿交给我”的时候，用《火影忍者》中的人生观来说，许下承诺的一刻，总\n有一种“被认可”的快感。但不要忘了，这也意味着背负上了新的责任，很多时候，我们没有能力承担这个责任，或不愿意为此去努力，我们只想享受那一刻“被认可”的快感。\n\n想想看，如果鹿丸像大蛇丸那样，完全没有责任感，只靠那不高尚，也不低俗的人生理想，很难产生如此强烈的人格魅力。\n\n因此，鹿丸淡泊的人生观不是理想主义的写照，而是一个基于现实主义的理想。\n\n喜欢鹿丸，就要像他那样，找到自己深信不疑的人生理想，并为自己所承担的责任而努力。\n","source":"_posts/nailiangluwan.md","raw":"---\ntitle: \"[转]一蓑烟雨任平生：奈良鹿丸的人生观\"\ndate: 2015-04-18 21:54:49\ncategories: 韦编三绝\n---\n原文地址：<http://movie.douban.com/review/2877890/>  \n\n奈良鹿丸那段很经典的独白，恐怕是每个鹿丸迷都能背下来的：\n\n“我本来想过着随便当个忍者，随便赚点钱……然后和不美又不丑的女人结婚，生两个小孩，第一个是女孩，第二个是男孩……等长女儿结婚，儿子也能够独当一面的时候，就从\n忍者的工作退休……之后，每天过着下将棋或围棋的悠闲隐居生活……然后比自己的老婆还要早老死……我就是想过这种生活……”\n\n鹿丸在《火影忍者》中本应是个不起眼的人物。模样不算帅，也不算丑；气质不算酷，也不算俗；武力不算强，也不算弱；出场不算少，也不算多。总之，不管从哪边算起，都不\n是一个出头椽子。在木叶忍者的合影中，是一个拿放大镜才能找到的人。就是这样一个人物，在很多人气调查中，都排进了前五名。\n\n鹿丸在《火影忍者》里有一个很特别的地方，就是他的人生观，也就是我们在上边引用的那一段。这个人生观既不高尚，也不低俗，却是鹿丸向往的，也是很多鹿丸迷喜欢他的重\n要原因。\n\n《火影忍者》这部动画片，一个重要课题就是，人生意义的追寻。几乎每场较大的战斗，敌我双方都会回顾生命的历程，探讨人生的意义。就像古雅典城里，哲学家们的论战一样\n，人生观论战中输了的人，最终战斗也会输。《火影忍者》表面上看，是一场场忍者之间的对决；实际上，是一场场人生哲学的较量。就像TVB的时装剧一样，经常通过警察、\n律师、厨师等特定职业，来探讨人生观；在《火影忍者》中，一个个忍者，就是一个个人生观的载体。很多忍者都背负着这个沉重的课题，甚至包括，以“食为天”的秋道丁次，\n也曾经为生活的意义烦恼过。\n\n鹿丸则不然，几乎没有和别人探讨过人生观的问题。因为他已经有了一个，不需要太大努力，就能实现的人生目标。在这个问题上，鹿丸并不困惑。\n\n不像漩涡鸣人那样整天风风火火的，也不像宇智波佐助那样整天装帅耍酷，鹿丸始终给人一种从容的感觉。这种从容，来自于他对自己人生观的深信不疑。像鸣人、佐助、大蛇丸\n那样，整天把人生观挂在嘴边的人，实际上，对自己的人生观并无十分把握；否则，就不会逢人便宣讲、证明自己的人生观。当然，也正是因为这样，他们才能成为主角人物，观\n众在他们的矛盾和成长中，得到共鸣。\n\n鹿丸另一个受欢迎之处，就是他给人的安全感。我们设想一下，一个由鹿丸带队的小组，和一个由鸣人带队的小组，显然前者更能给人安全感。这种安全感来自于鹿丸强烈的责任\n感。在追回佐助的任务中，临出发的时候，鹿丸给队员们说了一段话：\n\n“佐助跟我没有很深的交情，我也不喜欢这个人。但佐助也是木叶的忍者，是我们的同伴。所以我们要拼命把他救出来，这是我们木叶的风格。并且，虽然我的性格这样，但也不\n会在这件事上怕麻烦。因为我的行为关系到你们的性命。”\n\n说到责任感，就要说到鹿丸的另一个经典口头禅：\n\n“真麻烦……”\n\n对于责任，鹿丸是能躲就躲，即使是中忍考试这样“催人奋发”的大事，也是被鸣人一把推下看台，强行参加考试。从这一集的标题《云彩真是好啊……干劲zero的男人》，\n即可以看出鹿丸的避世心态。\n\n不过，避世不等于逃避责任。就像在追回佐助的任务中，临出发时，鹿丸给队员们说的那段话一样。鹿丸的嫌麻烦心态，意味着不愿意在没把握的情况下，轻率地承担责任；而一\n旦承担了责任，就要信守承诺。\n\n我们更常见的是，因为一时的激情，盲目承担下了工作、婚姻、朋友的责任。当激情过后，遇到困难时，便开始推三阻四，这才是俗人逃避责任的心态。\n\n《世说新语》里有一个华歆和王朗的故事：\n\n“华歆、王朗俱乘船避难，有一人欲依附，歆辄难之。朗曰：“幸尚宽，何为不可？”后贼追至，王欲舍所携人。歆曰：“本所以疑，正为此耳。\n既已纳其自托，宁可以急相弃邪？”遂携拯如初。世以此定华、王之优劣。”\n\n《谱叙》中也记载了华歆另外一件类似的事：\n\n“歆少以高行显名。避西京之乱，与同志郑泰等六七人，间步出武关。道遇一丈夫独行，原得俱，皆哀欲许之。歆独曰：“不可。今已在危险之中，祸福患害，义犹一也。无故受\n人，不知其义。既以受之，若有进退，可中弃乎！”众不忍，卒与俱行。此丈夫中道堕井，皆欲弃之。歆曰：“已与俱矣，弃之不义。”相率共还出之，而后别去。众乃大义之。\n”\n\n华歆能够在评估自己的实际情况后，作出正确决定，即这个责任承担不起。之后，这两个责任被王朗和郑泰等人强加在头上。既然承担了责任，就要承担到底，这是君子所为；而\n王朗、郑泰之流，在这两件事上，只不过是“拍脑袋决策，拍胸脯保证，拍屁股就走”的俗人。\n\n当第一天坐在新办公室的时候，当爱人偎依在自己胸膛的时候，当在酒桌上拍着胸脯对朋友说：“这事儿交给我”的时候，用《火影忍者》中的人生观来说，许下承诺的一刻，总\n有一种“被认可”的快感。但不要忘了，这也意味着背负上了新的责任，很多时候，我们没有能力承担这个责任，或不愿意为此去努力，我们只想享受那一刻“被认可”的快感。\n\n想想看，如果鹿丸像大蛇丸那样，完全没有责任感，只靠那不高尚，也不低俗的人生理想，很难产生如此强烈的人格魅力。\n\n因此，鹿丸淡泊的人生观不是理想主义的写照，而是一个基于现实主义的理想。\n\n喜欢鹿丸，就要像他那样，找到自己深信不疑的人生理想，并为自己所承担的责任而努力。\n","slug":"nailiangluwan","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pdf003z9vnzf1bz8dhf","content":"<p>原文地址：<a href=\"http://movie.douban.com/review/2877890/\" target=\"_blank\" rel=\"external\">http://movie.douban.com/review/2877890/</a>  </p>\n<p>奈良鹿丸那段很经典的独白，恐怕是每个鹿丸迷都能背下来的：</p>\n<p>“我本来想过着随便当个忍者，随便赚点钱……然后和不美又不丑的女人结婚，生两个小孩，第一个是女孩，第二个是男孩……等长女儿结婚，儿子也能够独当一面的时候，就从<br>忍者的工作退休……之后，每天过着下将棋或围棋的悠闲隐居生活……然后比自己的老婆还要早老死……我就是想过这种生活……”</p>\n<p>鹿丸在《火影忍者》中本应是个不起眼的人物。模样不算帅，也不算丑；气质不算酷，也不算俗；武力不算强，也不算弱；出场不算少，也不算多。总之，不管从哪边算起，都不<br>是一个出头椽子。在木叶忍者的合影中，是一个拿放大镜才能找到的人。就是这样一个人物，在很多人气调查中，都排进了前五名。</p>\n<p>鹿丸在《火影忍者》里有一个很特别的地方，就是他的人生观，也就是我们在上边引用的那一段。这个人生观既不高尚，也不低俗，却是鹿丸向往的，也是很多鹿丸迷喜欢他的重<br>要原因。</p>\n<p>《火影忍者》这部动画片，一个重要课题就是，人生意义的追寻。几乎每场较大的战斗，敌我双方都会回顾生命的历程，探讨人生的意义。就像古雅典城里，哲学家们的论战一样<br>，人生观论战中输了的人，最终战斗也会输。《火影忍者》表面上看，是一场场忍者之间的对决；实际上，是一场场人生哲学的较量。就像TVB的时装剧一样，经常通过警察、<br>律师、厨师等特定职业，来探讨人生观；在《火影忍者》中，一个个忍者，就是一个个人生观的载体。很多忍者都背负着这个沉重的课题，甚至包括，以“食为天”的秋道丁次，<br>也曾经为生活的意义烦恼过。</p>\n<p>鹿丸则不然，几乎没有和别人探讨过人生观的问题。因为他已经有了一个，不需要太大努力，就能实现的人生目标。在这个问题上，鹿丸并不困惑。</p>\n<p>不像漩涡鸣人那样整天风风火火的，也不像宇智波佐助那样整天装帅耍酷，鹿丸始终给人一种从容的感觉。这种从容，来自于他对自己人生观的深信不疑。像鸣人、佐助、大蛇丸<br>那样，整天把人生观挂在嘴边的人，实际上，对自己的人生观并无十分把握；否则，就不会逢人便宣讲、证明自己的人生观。当然，也正是因为这样，他们才能成为主角人物，观<br>众在他们的矛盾和成长中，得到共鸣。</p>\n<p>鹿丸另一个受欢迎之处，就是他给人的安全感。我们设想一下，一个由鹿丸带队的小组，和一个由鸣人带队的小组，显然前者更能给人安全感。这种安全感来自于鹿丸强烈的责任<br>感。在追回佐助的任务中，临出发的时候，鹿丸给队员们说了一段话：</p>\n<p>“佐助跟我没有很深的交情，我也不喜欢这个人。但佐助也是木叶的忍者，是我们的同伴。所以我们要拼命把他救出来，这是我们木叶的风格。并且，虽然我的性格这样，但也不<br>会在这件事上怕麻烦。因为我的行为关系到你们的性命。”</p>\n<p>说到责任感，就要说到鹿丸的另一个经典口头禅：</p>\n<p>“真麻烦……”</p>\n<p>对于责任，鹿丸是能躲就躲，即使是中忍考试这样“催人奋发”的大事，也是被鸣人一把推下看台，强行参加考试。从这一集的标题《云彩真是好啊……干劲zero的男人》，<br>即可以看出鹿丸的避世心态。</p>\n<p>不过，避世不等于逃避责任。就像在追回佐助的任务中，临出发时，鹿丸给队员们说的那段话一样。鹿丸的嫌麻烦心态，意味着不愿意在没把握的情况下，轻率地承担责任；而一<br>旦承担了责任，就要信守承诺。</p>\n<p>我们更常见的是，因为一时的激情，盲目承担下了工作、婚姻、朋友的责任。当激情过后，遇到困难时，便开始推三阻四，这才是俗人逃避责任的心态。</p>\n<p>《世说新语》里有一个华歆和王朗的故事：</p>\n<p>“华歆、王朗俱乘船避难，有一人欲依附，歆辄难之。朗曰：“幸尚宽，何为不可？”后贼追至，王欲舍所携人。歆曰：“本所以疑，正为此耳。<br>既已纳其自托，宁可以急相弃邪？”遂携拯如初。世以此定华、王之优劣。”</p>\n<p>《谱叙》中也记载了华歆另外一件类似的事：</p>\n<p>“歆少以高行显名。避西京之乱，与同志郑泰等六七人，间步出武关。道遇一丈夫独行，原得俱，皆哀欲许之。歆独曰：“不可。今已在危险之中，祸福患害，义犹一也。无故受<br>人，不知其义。既以受之，若有进退，可中弃乎！”众不忍，卒与俱行。此丈夫中道堕井，皆欲弃之。歆曰：“已与俱矣，弃之不义。”相率共还出之，而后别去。众乃大义之。<br>”</p>\n<p>华歆能够在评估自己的实际情况后，作出正确决定，即这个责任承担不起。之后，这两个责任被王朗和郑泰等人强加在头上。既然承担了责任，就要承担到底，这是君子所为；而<br>王朗、郑泰之流，在这两件事上，只不过是“拍脑袋决策，拍胸脯保证，拍屁股就走”的俗人。</p>\n<p>当第一天坐在新办公室的时候，当爱人偎依在自己胸膛的时候，当在酒桌上拍着胸脯对朋友说：“这事儿交给我”的时候，用《火影忍者》中的人生观来说，许下承诺的一刻，总<br>有一种“被认可”的快感。但不要忘了，这也意味着背负上了新的责任，很多时候，我们没有能力承担这个责任，或不愿意为此去努力，我们只想享受那一刻“被认可”的快感。</p>\n<p>想想看，如果鹿丸像大蛇丸那样，完全没有责任感，只靠那不高尚，也不低俗的人生理想，很难产生如此强烈的人格魅力。</p>\n<p>因此，鹿丸淡泊的人生观不是理想主义的写照，而是一个基于现实主义的理想。</p>\n<p>喜欢鹿丸，就要像他那样，找到自己深信不疑的人生理想，并为自己所承担的责任而努力。</p>\n","excerpt":"","more":"<p>原文地址：<a href=\"http://movie.douban.com/review/2877890/\">http://movie.douban.com/review/2877890/</a>  </p>\n<p>奈良鹿丸那段很经典的独白，恐怕是每个鹿丸迷都能背下来的：</p>\n<p>“我本来想过着随便当个忍者，随便赚点钱……然后和不美又不丑的女人结婚，生两个小孩，第一个是女孩，第二个是男孩……等长女儿结婚，儿子也能够独当一面的时候，就从<br>忍者的工作退休……之后，每天过着下将棋或围棋的悠闲隐居生活……然后比自己的老婆还要早老死……我就是想过这种生活……”</p>\n<p>鹿丸在《火影忍者》中本应是个不起眼的人物。模样不算帅，也不算丑；气质不算酷，也不算俗；武力不算强，也不算弱；出场不算少，也不算多。总之，不管从哪边算起，都不<br>是一个出头椽子。在木叶忍者的合影中，是一个拿放大镜才能找到的人。就是这样一个人物，在很多人气调查中，都排进了前五名。</p>\n<p>鹿丸在《火影忍者》里有一个很特别的地方，就是他的人生观，也就是我们在上边引用的那一段。这个人生观既不高尚，也不低俗，却是鹿丸向往的，也是很多鹿丸迷喜欢他的重<br>要原因。</p>\n<p>《火影忍者》这部动画片，一个重要课题就是，人生意义的追寻。几乎每场较大的战斗，敌我双方都会回顾生命的历程，探讨人生的意义。就像古雅典城里，哲学家们的论战一样<br>，人生观论战中输了的人，最终战斗也会输。《火影忍者》表面上看，是一场场忍者之间的对决；实际上，是一场场人生哲学的较量。就像TVB的时装剧一样，经常通过警察、<br>律师、厨师等特定职业，来探讨人生观；在《火影忍者》中，一个个忍者，就是一个个人生观的载体。很多忍者都背负着这个沉重的课题，甚至包括，以“食为天”的秋道丁次，<br>也曾经为生活的意义烦恼过。</p>\n<p>鹿丸则不然，几乎没有和别人探讨过人生观的问题。因为他已经有了一个，不需要太大努力，就能实现的人生目标。在这个问题上，鹿丸并不困惑。</p>\n<p>不像漩涡鸣人那样整天风风火火的，也不像宇智波佐助那样整天装帅耍酷，鹿丸始终给人一种从容的感觉。这种从容，来自于他对自己人生观的深信不疑。像鸣人、佐助、大蛇丸<br>那样，整天把人生观挂在嘴边的人，实际上，对自己的人生观并无十分把握；否则，就不会逢人便宣讲、证明自己的人生观。当然，也正是因为这样，他们才能成为主角人物，观<br>众在他们的矛盾和成长中，得到共鸣。</p>\n<p>鹿丸另一个受欢迎之处，就是他给人的安全感。我们设想一下，一个由鹿丸带队的小组，和一个由鸣人带队的小组，显然前者更能给人安全感。这种安全感来自于鹿丸强烈的责任<br>感。在追回佐助的任务中，临出发的时候，鹿丸给队员们说了一段话：</p>\n<p>“佐助跟我没有很深的交情，我也不喜欢这个人。但佐助也是木叶的忍者，是我们的同伴。所以我们要拼命把他救出来，这是我们木叶的风格。并且，虽然我的性格这样，但也不<br>会在这件事上怕麻烦。因为我的行为关系到你们的性命。”</p>\n<p>说到责任感，就要说到鹿丸的另一个经典口头禅：</p>\n<p>“真麻烦……”</p>\n<p>对于责任，鹿丸是能躲就躲，即使是中忍考试这样“催人奋发”的大事，也是被鸣人一把推下看台，强行参加考试。从这一集的标题《云彩真是好啊……干劲zero的男人》，<br>即可以看出鹿丸的避世心态。</p>\n<p>不过，避世不等于逃避责任。就像在追回佐助的任务中，临出发时，鹿丸给队员们说的那段话一样。鹿丸的嫌麻烦心态，意味着不愿意在没把握的情况下，轻率地承担责任；而一<br>旦承担了责任，就要信守承诺。</p>\n<p>我们更常见的是，因为一时的激情，盲目承担下了工作、婚姻、朋友的责任。当激情过后，遇到困难时，便开始推三阻四，这才是俗人逃避责任的心态。</p>\n<p>《世说新语》里有一个华歆和王朗的故事：</p>\n<p>“华歆、王朗俱乘船避难，有一人欲依附，歆辄难之。朗曰：“幸尚宽，何为不可？”后贼追至，王欲舍所携人。歆曰：“本所以疑，正为此耳。<br>既已纳其自托，宁可以急相弃邪？”遂携拯如初。世以此定华、王之优劣。”</p>\n<p>《谱叙》中也记载了华歆另外一件类似的事：</p>\n<p>“歆少以高行显名。避西京之乱，与同志郑泰等六七人，间步出武关。道遇一丈夫独行，原得俱，皆哀欲许之。歆独曰：“不可。今已在危险之中，祸福患害，义犹一也。无故受<br>人，不知其义。既以受之，若有进退，可中弃乎！”众不忍，卒与俱行。此丈夫中道堕井，皆欲弃之。歆曰：“已与俱矣，弃之不义。”相率共还出之，而后别去。众乃大义之。<br>”</p>\n<p>华歆能够在评估自己的实际情况后，作出正确决定，即这个责任承担不起。之后，这两个责任被王朗和郑泰等人强加在头上。既然承担了责任，就要承担到底，这是君子所为；而<br>王朗、郑泰之流，在这两件事上，只不过是“拍脑袋决策，拍胸脯保证，拍屁股就走”的俗人。</p>\n<p>当第一天坐在新办公室的时候，当爱人偎依在自己胸膛的时候，当在酒桌上拍着胸脯对朋友说：“这事儿交给我”的时候，用《火影忍者》中的人生观来说，许下承诺的一刻，总<br>有一种“被认可”的快感。但不要忘了，这也意味着背负上了新的责任，很多时候，我们没有能力承担这个责任，或不愿意为此去努力，我们只想享受那一刻“被认可”的快感。</p>\n<p>想想看，如果鹿丸像大蛇丸那样，完全没有责任感，只靠那不高尚，也不低俗的人生理想，很难产生如此强烈的人格魅力。</p>\n<p>因此，鹿丸淡泊的人生观不是理想主义的写照，而是一个基于现实主义的理想。</p>\n<p>喜欢鹿丸，就要像他那样，找到自己深信不疑的人生理想，并为自己所承担的责任而努力。</p>\n"},{"title":"《逆袭大学》——传给IT学子的正能量","date":"2014-10-07T01:45:24.000Z","_content":"我从没见过任何一个大学老师有如此的教育心态。我也只是一等书生，还未进入社会，但是对贺利坚这种老师，我也非常喜欢的。我母亲总是叫我要么当官、要么学医、要么从教\n，为什么？因为这两个职位在他们看来是最赚钱的。每次面对他们的说法，我只能以呵呵面对，当官我不会当贪官，学医我不会收贿赂，从教我不会只教学生读书，如果要我当老\n师，我一定会去当大学老师，因为大学老师不用担心学生的升学考试，可以全身心的教育学生该怎么做人，而不是该怎么应付考试。\n\n本书基本上是摘录整理自[贺老师的CSDN博客](http://blog.csdn.net/sxhelijian/)语言很朴实，和网上很多的说教型文章不一样的\n是，该书几乎全是干货。虽然说是写给计算机学子看的，但是我认为其他任何专业，任何学生，任何老师都值得去一看。详细的介绍可以看作者自己的[《走在<逆袭大学>的征\n途上》](http://blog.csdn.net/sxhelijian/article/details/21276999)。此书真的是有满满的正能量，在大\n学，我们迷茫过，踌躇过，退缩过，有的女生也因性别问题困扰过，看完此书，我们总会找到自己解决困难的方法。\n\n我在大二下学期看了两边此书，因为大二下学期是我心态变化最大的一个学期。刚开始时，我一心想要考研，但当实验室的老师给我看了几篇论文过后，我果断放弃了。没错，论\n文是全英文的，很多地方都看不懂，但是这不是我放弃的原因，我绝不可能因为一点点的困难就轻言放弃的，其主要原因是经过跟随实验室老师的几个月学习，并且询问了一些研\n究生，我了解了一些研究生的生活。在研究生早期(我这里所说的是爱学习的研究生)，基本上是看理论，看论文，后期就和本科生一样了，去实习，找工作。我不喜欢这样的生\n活，我不大喜欢看理论，我更喜欢用代码来敲出新的东西，哪怕他功能并不强大，哪怕他用户极少，但我也能从中获得足够多的满足感。当然，或许我还是图样图森破，但是谁又\n能肯定我不是对的呢？我也不能肯定，但我想试试，我有自己的忍道！之后我就打算去工作，但过了没几天我就决定去创业了。那时候想了很久，其实我一直有一个很好的朋友在\n等着我一起创业，就等我一个答复了，而我，终于答应了他。决定创业后，我又把此书看了一遍，依然受益匪浅。\n\n书中有很多观点我是十分赞同的(摘抄了一部分在语录部分)。贺老师鼓励我们关心国家大事，这几天，香港问题非常尖锐，但是国内的媒体集体失声，大陆人士基本上无从知晓\n，只能从CCAV里面获知只言片语，不过那能信吗？每次有这种事情的时候我都是在微博上先看到，然后我就会去twitter或者facebook里面查询是否属实，最\n后再去草榴等网站看看人们的评论，有时候转发一下微博，当然，生活在这样的环境里，为了不被查水表，也只能小声地发几句言了。但我至少会去关心，会因为深灰上的某些不\n公感到愤怒，其他人呢。\n\n另外一个观点，大学最重要是要学到什么？我认为，大学最重要的是要学会学习。这里所说的学习不是普通的按照课本，按照老师的要求来学习，如果真那样，那我们和专业院校\n又有什么区别。首先我们要学会自我学习，现在我都大三了，但进入大学这么久，学校就只教了C语言(不是谭浩强的，但我觉得那本教材连谭浩强都不如)，幸好，我经常浏览\n一些开放的论坛和微博等，对新技术新知识了解了很多，所以自己自学了很多东西，C++/MySQL/Python等。另外，跟重要的，我建立了自我学习的意识，不仅仅\n是计算机相关的专业知识，还要学习一些人文知识和其他学科的知识，在Coursera上面我已经获得了三个Statement of\nFinished，虽然只是完成证明，但我都是认真学习了的，在Coursera上不适合做专业的学习，所以学习人文课程就非常好。\n\n最后享受大学最后两年吧！\n\n语录\n\n**如果不是感到迷茫，就不知道突破；如果不是克服迷茫的过程，就找不到自信。**\n\n**现在的大学，谈个人理想、民族命运的声音渐微，上大学被视为谋生、当官、发财的途径和资本，而有些立志从事实业，担负民族振兴职责的学子常常遭到鄙视。大学应该是“追求学问的地方，而非资格养成之所”。**\n\n**享受自由的大学是需要资格的。陷入迷茫，只因为不能享受这份曾经渴望的自由。**\n\n**大学的精彩在于自学，这不是指自己一个人闷头去学，而是一种有帮助的自学，一种到处都可以借力的自主性学习，只不过，帮助你的力量需要自己去发现。**\n\n**学编程不拘于语言，学语言不限于平台。**\n\n**练出的功夫不只是体现在拳脚上，而是无论哪里发力，使什么样的兵器，丹田之气都能随之跟进。**\n\n**会学习意味着会根据自身的基础和主客观条件，去极化、调控和评价学习。**  \n**会学习意味着会利用最少的时间、尽量少的经历，以最快的速度获取尽可能多的知识和技能。**  \n**会学习意味着会自己把握学习的重点，不满足于只获取某种知识，而是重点掌握思维过程和方法。**  \n**会学习意味着会把所学知识应用到生产和社会需要的实践中去。**\n\n**课内学习主要保证抽象能力的发展，而在课外自主的学习中，让实践成为主流，朝着打开个人经验的方向，安排出有效的学习。**\n\n**最有效的办法谁都知道，那就是找到学习、生活该有的节奏，稳定地行动，坚定地前进。**\n\n**没有自学，不是大学。**\n\n**教是为了不教。**\n\n**大学所能给予的只是成长。大学，从某种意义上讲，本来就不是要用来做什么的。只有摆脱附加在其上的各种功利的期望，才能够获得与心灵成长、能力增长一致的学习。**\n\n**在我理想的大学中，同学们的学习将是这样的：接受着一项专业教育，由学校系统地传授者专业知识，接受着一种“正规”的训练，另一方面，学生能够根据自己的兴趣和感觉自由地拓展，拓展的内容有的是和现有“系统”相关的，有的完全是”节外生枝“。如此形成的是每个人个性的系统。这是大学里最有生命力的独特风景。**\n\n**吃多了拉是队列，吃多了吐就是栈。**\n\n**20岁的人对30岁的事不用纠结，20岁不用将别人30岁遇到的困扰当作理由而退缩。**\n\n**计算机是如此重要，因为不能把它只留给男人去做！**\n\n**兴趣本来是前行中最好的老师，但现在也是为逃避现实，不去努力找到的最好的理由和借口。**\n\n**一个要面对现实的人，必须原谅过去在自己身上发生的一切，要有这种大度。**\n\n**以兴趣为理由放慢前行的脚步是对青春的一种亵渎，兴趣很重要但其作用并没有大到成为决定性的和唯一的因素。**\n\n**因项目决定人如何参加。————————————————————这也是我认为的**\n\n**”开发经验“不是”工作经验“，他们似乎更在乎有个借口，将那些读了几年死书的人挡在门外。**\n\n**大一大二是夯实基础和开阔视野期，大三大四是目标实现期。大二结束大三开始的那段时间确定目标，而目标中必须明确主要的应用方向。**\n\n**大一不知道自己不知道，大二知道自己不知道，大三不知道自己知道，而大四知道自己知道。**\n\n**在年少轻狂之时想别人不敢想的，做别人不敢做的 ，实在是一件幸运的事，这也成就了许多追梦人。做了却没有达到是正常的，但不敢想不敢做，无论何时都是一种遗憾。即使这个梦想没有实现，努力也会积淀下来，成为新的能量来源。**\n\n**有人将迷茫常挂在嘴上，任由该做的事情一拖再拖，这样的迷茫，就是一个借口！**\n\n**坚决前行，就是给知道一个机会。**\n\n**给予求学越多的功利，意味着越多的走样，其中的失望也会越大。**\n\n**面对一次次“裸考”不过，还要调侃高中只会考试，大学连考试也不会了的大学生，我不作评论。**\n\n**有效的学习是根本，学有所成是核心，外在的东西可以有，内在的东西不可少。**\n\n**让这种奋斗来得更坚决一些，不要为自己暂时不能拥有的而纠结，不必为我们不屑的丑陋现实而低头，我们就用读书人的方式面对浮躁的社会。**\n\n**在进取的方向上，选择了做草根，就是要向泥土的深处钻，这是作为草根应该选择的方向。**\n\n**其实，我们那没有战斗力的爹将你送到这个平台已经付出了很多的努力了。二代们总是吸引人眼球的，个别无能的二代总得造出点什么来告诉人们他的存在。**\n\n**许多人对精神世界失去了兴趣，又在对物质的追求中迷失了方向。**\n\n**写作，是让一个人活得更明白的方法。**\n\n**有勇气来改变可以改变的事情，有胸怀来接收不可改变的事情，有智慧来分辨两者的不同。——李开复。**\n\n**上大学，并不是每个人成才成长的必经之路，但大学却的确是一个值得经历的阶段，这和毕业证无关，和找工作或许有关，也许无关。其实很多人把“知识改变命运”想成了“大学改变命运”。“大学改变命运”是一个绝对的伪命题，但有些人就迷信这个。 **\n\n封面图片来自Pixebay\n","source":"_posts/nixidaxue.md","raw":"---\ntitle: \"《逆袭大学》——传给IT学子的正能量\"\ndate: 2014-10-07 09:45:24\ncategories: 韦编三绝\n---\n我从没见过任何一个大学老师有如此的教育心态。我也只是一等书生，还未进入社会，但是对贺利坚这种老师，我也非常喜欢的。我母亲总是叫我要么当官、要么学医、要么从教\n，为什么？因为这两个职位在他们看来是最赚钱的。每次面对他们的说法，我只能以呵呵面对，当官我不会当贪官，学医我不会收贿赂，从教我不会只教学生读书，如果要我当老\n师，我一定会去当大学老师，因为大学老师不用担心学生的升学考试，可以全身心的教育学生该怎么做人，而不是该怎么应付考试。\n\n本书基本上是摘录整理自[贺老师的CSDN博客](http://blog.csdn.net/sxhelijian/)语言很朴实，和网上很多的说教型文章不一样的\n是，该书几乎全是干货。虽然说是写给计算机学子看的，但是我认为其他任何专业，任何学生，任何老师都值得去一看。详细的介绍可以看作者自己的[《走在<逆袭大学>的征\n途上》](http://blog.csdn.net/sxhelijian/article/details/21276999)。此书真的是有满满的正能量，在大\n学，我们迷茫过，踌躇过，退缩过，有的女生也因性别问题困扰过，看完此书，我们总会找到自己解决困难的方法。\n\n我在大二下学期看了两边此书，因为大二下学期是我心态变化最大的一个学期。刚开始时，我一心想要考研，但当实验室的老师给我看了几篇论文过后，我果断放弃了。没错，论\n文是全英文的，很多地方都看不懂，但是这不是我放弃的原因，我绝不可能因为一点点的困难就轻言放弃的，其主要原因是经过跟随实验室老师的几个月学习，并且询问了一些研\n究生，我了解了一些研究生的生活。在研究生早期(我这里所说的是爱学习的研究生)，基本上是看理论，看论文，后期就和本科生一样了，去实习，找工作。我不喜欢这样的生\n活，我不大喜欢看理论，我更喜欢用代码来敲出新的东西，哪怕他功能并不强大，哪怕他用户极少，但我也能从中获得足够多的满足感。当然，或许我还是图样图森破，但是谁又\n能肯定我不是对的呢？我也不能肯定，但我想试试，我有自己的忍道！之后我就打算去工作，但过了没几天我就决定去创业了。那时候想了很久，其实我一直有一个很好的朋友在\n等着我一起创业，就等我一个答复了，而我，终于答应了他。决定创业后，我又把此书看了一遍，依然受益匪浅。\n\n书中有很多观点我是十分赞同的(摘抄了一部分在语录部分)。贺老师鼓励我们关心国家大事，这几天，香港问题非常尖锐，但是国内的媒体集体失声，大陆人士基本上无从知晓\n，只能从CCAV里面获知只言片语，不过那能信吗？每次有这种事情的时候我都是在微博上先看到，然后我就会去twitter或者facebook里面查询是否属实，最\n后再去草榴等网站看看人们的评论，有时候转发一下微博，当然，生活在这样的环境里，为了不被查水表，也只能小声地发几句言了。但我至少会去关心，会因为深灰上的某些不\n公感到愤怒，其他人呢。\n\n另外一个观点，大学最重要是要学到什么？我认为，大学最重要的是要学会学习。这里所说的学习不是普通的按照课本，按照老师的要求来学习，如果真那样，那我们和专业院校\n又有什么区别。首先我们要学会自我学习，现在我都大三了，但进入大学这么久，学校就只教了C语言(不是谭浩强的，但我觉得那本教材连谭浩强都不如)，幸好，我经常浏览\n一些开放的论坛和微博等，对新技术新知识了解了很多，所以自己自学了很多东西，C++/MySQL/Python等。另外，跟重要的，我建立了自我学习的意识，不仅仅\n是计算机相关的专业知识，还要学习一些人文知识和其他学科的知识，在Coursera上面我已经获得了三个Statement of\nFinished，虽然只是完成证明，但我都是认真学习了的，在Coursera上不适合做专业的学习，所以学习人文课程就非常好。\n\n最后享受大学最后两年吧！\n\n语录\n\n**如果不是感到迷茫，就不知道突破；如果不是克服迷茫的过程，就找不到自信。**\n\n**现在的大学，谈个人理想、民族命运的声音渐微，上大学被视为谋生、当官、发财的途径和资本，而有些立志从事实业，担负民族振兴职责的学子常常遭到鄙视。大学应该是“追求学问的地方，而非资格养成之所”。**\n\n**享受自由的大学是需要资格的。陷入迷茫，只因为不能享受这份曾经渴望的自由。**\n\n**大学的精彩在于自学，这不是指自己一个人闷头去学，而是一种有帮助的自学，一种到处都可以借力的自主性学习，只不过，帮助你的力量需要自己去发现。**\n\n**学编程不拘于语言，学语言不限于平台。**\n\n**练出的功夫不只是体现在拳脚上，而是无论哪里发力，使什么样的兵器，丹田之气都能随之跟进。**\n\n**会学习意味着会根据自身的基础和主客观条件，去极化、调控和评价学习。**  \n**会学习意味着会利用最少的时间、尽量少的经历，以最快的速度获取尽可能多的知识和技能。**  \n**会学习意味着会自己把握学习的重点，不满足于只获取某种知识，而是重点掌握思维过程和方法。**  \n**会学习意味着会把所学知识应用到生产和社会需要的实践中去。**\n\n**课内学习主要保证抽象能力的发展，而在课外自主的学习中，让实践成为主流，朝着打开个人经验的方向，安排出有效的学习。**\n\n**最有效的办法谁都知道，那就是找到学习、生活该有的节奏，稳定地行动，坚定地前进。**\n\n**没有自学，不是大学。**\n\n**教是为了不教。**\n\n**大学所能给予的只是成长。大学，从某种意义上讲，本来就不是要用来做什么的。只有摆脱附加在其上的各种功利的期望，才能够获得与心灵成长、能力增长一致的学习。**\n\n**在我理想的大学中，同学们的学习将是这样的：接受着一项专业教育，由学校系统地传授者专业知识，接受着一种“正规”的训练，另一方面，学生能够根据自己的兴趣和感觉自由地拓展，拓展的内容有的是和现有“系统”相关的，有的完全是”节外生枝“。如此形成的是每个人个性的系统。这是大学里最有生命力的独特风景。**\n\n**吃多了拉是队列，吃多了吐就是栈。**\n\n**20岁的人对30岁的事不用纠结，20岁不用将别人30岁遇到的困扰当作理由而退缩。**\n\n**计算机是如此重要，因为不能把它只留给男人去做！**\n\n**兴趣本来是前行中最好的老师，但现在也是为逃避现实，不去努力找到的最好的理由和借口。**\n\n**一个要面对现实的人，必须原谅过去在自己身上发生的一切，要有这种大度。**\n\n**以兴趣为理由放慢前行的脚步是对青春的一种亵渎，兴趣很重要但其作用并没有大到成为决定性的和唯一的因素。**\n\n**因项目决定人如何参加。————————————————————这也是我认为的**\n\n**”开发经验“不是”工作经验“，他们似乎更在乎有个借口，将那些读了几年死书的人挡在门外。**\n\n**大一大二是夯实基础和开阔视野期，大三大四是目标实现期。大二结束大三开始的那段时间确定目标，而目标中必须明确主要的应用方向。**\n\n**大一不知道自己不知道，大二知道自己不知道，大三不知道自己知道，而大四知道自己知道。**\n\n**在年少轻狂之时想别人不敢想的，做别人不敢做的 ，实在是一件幸运的事，这也成就了许多追梦人。做了却没有达到是正常的，但不敢想不敢做，无论何时都是一种遗憾。即使这个梦想没有实现，努力也会积淀下来，成为新的能量来源。**\n\n**有人将迷茫常挂在嘴上，任由该做的事情一拖再拖，这样的迷茫，就是一个借口！**\n\n**坚决前行，就是给知道一个机会。**\n\n**给予求学越多的功利，意味着越多的走样，其中的失望也会越大。**\n\n**面对一次次“裸考”不过，还要调侃高中只会考试，大学连考试也不会了的大学生，我不作评论。**\n\n**有效的学习是根本，学有所成是核心，外在的东西可以有，内在的东西不可少。**\n\n**让这种奋斗来得更坚决一些，不要为自己暂时不能拥有的而纠结，不必为我们不屑的丑陋现实而低头，我们就用读书人的方式面对浮躁的社会。**\n\n**在进取的方向上，选择了做草根，就是要向泥土的深处钻，这是作为草根应该选择的方向。**\n\n**其实，我们那没有战斗力的爹将你送到这个平台已经付出了很多的努力了。二代们总是吸引人眼球的，个别无能的二代总得造出点什么来告诉人们他的存在。**\n\n**许多人对精神世界失去了兴趣，又在对物质的追求中迷失了方向。**\n\n**写作，是让一个人活得更明白的方法。**\n\n**有勇气来改变可以改变的事情，有胸怀来接收不可改变的事情，有智慧来分辨两者的不同。——李开复。**\n\n**上大学，并不是每个人成才成长的必经之路，但大学却的确是一个值得经历的阶段，这和毕业证无关，和找工作或许有关，也许无关。其实很多人把“知识改变命运”想成了“大学改变命运”。“大学改变命运”是一个绝对的伪命题，但有些人就迷信这个。 **\n\n封面图片来自Pixebay\n","slug":"nixidaxue","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pdh00419vnzqh99dmh5","content":"<p>我从没见过任何一个大学老师有如此的教育心态。我也只是一等书生，还未进入社会，但是对贺利坚这种老师，我也非常喜欢的。我母亲总是叫我要么当官、要么学医、要么从教<br>，为什么？因为这两个职位在他们看来是最赚钱的。每次面对他们的说法，我只能以呵呵面对，当官我不会当贪官，学医我不会收贿赂，从教我不会只教学生读书，如果要我当老<br>师，我一定会去当大学老师，因为大学老师不用担心学生的升学考试，可以全身心的教育学生该怎么做人，而不是该怎么应付考试。</p>\n<p>本书基本上是摘录整理自<a href=\"http://blog.csdn.net/sxhelijian/\" target=\"_blank\" rel=\"external\">贺老师的CSDN博客</a>语言很朴实，和网上很多的说教型文章不一样的<br>是，该书几乎全是干货。虽然说是写给计算机学子看的，但是我认为其他任何专业，任何学生，任何老师都值得去一看。详细的介绍可以看作者自己的<a href=\"http://blog.csdn.net/sxhelijian/article/details/21276999\" target=\"_blank\" rel=\"external\">《走在&lt;逆袭大学&gt;的征<br>途上》</a>。此书真的是有满满的正能量，在大<br>学，我们迷茫过，踌躇过，退缩过，有的女生也因性别问题困扰过，看完此书，我们总会找到自己解决困难的方法。</p>\n<p>我在大二下学期看了两边此书，因为大二下学期是我心态变化最大的一个学期。刚开始时，我一心想要考研，但当实验室的老师给我看了几篇论文过后，我果断放弃了。没错，论<br>文是全英文的，很多地方都看不懂，但是这不是我放弃的原因，我绝不可能因为一点点的困难就轻言放弃的，其主要原因是经过跟随实验室老师的几个月学习，并且询问了一些研<br>究生，我了解了一些研究生的生活。在研究生早期(我这里所说的是爱学习的研究生)，基本上是看理论，看论文，后期就和本科生一样了，去实习，找工作。我不喜欢这样的生<br>活，我不大喜欢看理论，我更喜欢用代码来敲出新的东西，哪怕他功能并不强大，哪怕他用户极少，但我也能从中获得足够多的满足感。当然，或许我还是图样图森破，但是谁又<br>能肯定我不是对的呢？我也不能肯定，但我想试试，我有自己的忍道！之后我就打算去工作，但过了没几天我就决定去创业了。那时候想了很久，其实我一直有一个很好的朋友在<br>等着我一起创业，就等我一个答复了，而我，终于答应了他。决定创业后，我又把此书看了一遍，依然受益匪浅。</p>\n<p>书中有很多观点我是十分赞同的(摘抄了一部分在语录部分)。贺老师鼓励我们关心国家大事，这几天，香港问题非常尖锐，但是国内的媒体集体失声，大陆人士基本上无从知晓<br>，只能从CCAV里面获知只言片语，不过那能信吗？每次有这种事情的时候我都是在微博上先看到，然后我就会去twitter或者facebook里面查询是否属实，最<br>后再去草榴等网站看看人们的评论，有时候转发一下微博，当然，生活在这样的环境里，为了不被查水表，也只能小声地发几句言了。但我至少会去关心，会因为深灰上的某些不<br>公感到愤怒，其他人呢。</p>\n<p>另外一个观点，大学最重要是要学到什么？我认为，大学最重要的是要学会学习。这里所说的学习不是普通的按照课本，按照老师的要求来学习，如果真那样，那我们和专业院校<br>又有什么区别。首先我们要学会自我学习，现在我都大三了，但进入大学这么久，学校就只教了C语言(不是谭浩强的，但我觉得那本教材连谭浩强都不如)，幸好，我经常浏览<br>一些开放的论坛和微博等，对新技术新知识了解了很多，所以自己自学了很多东西，C++/MySQL/Python等。另外，跟重要的，我建立了自我学习的意识，不仅仅<br>是计算机相关的专业知识，还要学习一些人文知识和其他学科的知识，在Coursera上面我已经获得了三个Statement of<br>Finished，虽然只是完成证明，但我都是认真学习了的，在Coursera上不适合做专业的学习，所以学习人文课程就非常好。</p>\n<p>最后享受大学最后两年吧！</p>\n<p>语录</p>\n<p><strong>如果不是感到迷茫，就不知道突破；如果不是克服迷茫的过程，就找不到自信。</strong></p>\n<p><strong>现在的大学，谈个人理想、民族命运的声音渐微，上大学被视为谋生、当官、发财的途径和资本，而有些立志从事实业，担负民族振兴职责的学子常常遭到鄙视。大学应该是“追求学问的地方，而非资格养成之所”。</strong></p>\n<p><strong>享受自由的大学是需要资格的。陷入迷茫，只因为不能享受这份曾经渴望的自由。</strong></p>\n<p><strong>大学的精彩在于自学，这不是指自己一个人闷头去学，而是一种有帮助的自学，一种到处都可以借力的自主性学习，只不过，帮助你的力量需要自己去发现。</strong></p>\n<p><strong>学编程不拘于语言，学语言不限于平台。</strong></p>\n<p><strong>练出的功夫不只是体现在拳脚上，而是无论哪里发力，使什么样的兵器，丹田之气都能随之跟进。</strong></p>\n<p><strong>会学习意味着会根据自身的基础和主客观条件，去极化、调控和评价学习。</strong><br><strong>会学习意味着会利用最少的时间、尽量少的经历，以最快的速度获取尽可能多的知识和技能。</strong><br><strong>会学习意味着会自己把握学习的重点，不满足于只获取某种知识，而是重点掌握思维过程和方法。</strong><br><strong>会学习意味着会把所学知识应用到生产和社会需要的实践中去。</strong></p>\n<p><strong>课内学习主要保证抽象能力的发展，而在课外自主的学习中，让实践成为主流，朝着打开个人经验的方向，安排出有效的学习。</strong></p>\n<p><strong>最有效的办法谁都知道，那就是找到学习、生活该有的节奏，稳定地行动，坚定地前进。</strong></p>\n<p><strong>没有自学，不是大学。</strong></p>\n<p><strong>教是为了不教。</strong></p>\n<p><strong>大学所能给予的只是成长。大学，从某种意义上讲，本来就不是要用来做什么的。只有摆脱附加在其上的各种功利的期望，才能够获得与心灵成长、能力增长一致的学习。</strong></p>\n<p><strong>在我理想的大学中，同学们的学习将是这样的：接受着一项专业教育，由学校系统地传授者专业知识，接受着一种“正规”的训练，另一方面，学生能够根据自己的兴趣和感觉自由地拓展，拓展的内容有的是和现有“系统”相关的，有的完全是”节外生枝“。如此形成的是每个人个性的系统。这是大学里最有生命力的独特风景。</strong></p>\n<p><strong>吃多了拉是队列，吃多了吐就是栈。</strong></p>\n<p><strong>20岁的人对30岁的事不用纠结，20岁不用将别人30岁遇到的困扰当作理由而退缩。</strong></p>\n<p><strong>计算机是如此重要，因为不能把它只留给男人去做！</strong></p>\n<p><strong>兴趣本来是前行中最好的老师，但现在也是为逃避现实，不去努力找到的最好的理由和借口。</strong></p>\n<p><strong>一个要面对现实的人，必须原谅过去在自己身上发生的一切，要有这种大度。</strong></p>\n<p><strong>以兴趣为理由放慢前行的脚步是对青春的一种亵渎，兴趣很重要但其作用并没有大到成为决定性的和唯一的因素。</strong></p>\n<p><strong>因项目决定人如何参加。————————————————————这也是我认为的</strong></p>\n<p><strong>”开发经验“不是”工作经验“，他们似乎更在乎有个借口，将那些读了几年死书的人挡在门外。</strong></p>\n<p><strong>大一大二是夯实基础和开阔视野期，大三大四是目标实现期。大二结束大三开始的那段时间确定目标，而目标中必须明确主要的应用方向。</strong></p>\n<p><strong>大一不知道自己不知道，大二知道自己不知道，大三不知道自己知道，而大四知道自己知道。</strong></p>\n<p><strong>在年少轻狂之时想别人不敢想的，做别人不敢做的 ，实在是一件幸运的事，这也成就了许多追梦人。做了却没有达到是正常的，但不敢想不敢做，无论何时都是一种遗憾。即使这个梦想没有实现，努力也会积淀下来，成为新的能量来源。</strong></p>\n<p><strong>有人将迷茫常挂在嘴上，任由该做的事情一拖再拖，这样的迷茫，就是一个借口！</strong></p>\n<p><strong>坚决前行，就是给知道一个机会。</strong></p>\n<p><strong>给予求学越多的功利，意味着越多的走样，其中的失望也会越大。</strong></p>\n<p><strong>面对一次次“裸考”不过，还要调侃高中只会考试，大学连考试也不会了的大学生，我不作评论。</strong></p>\n<p><strong>有效的学习是根本，学有所成是核心，外在的东西可以有，内在的东西不可少。</strong></p>\n<p><strong>让这种奋斗来得更坚决一些，不要为自己暂时不能拥有的而纠结，不必为我们不屑的丑陋现实而低头，我们就用读书人的方式面对浮躁的社会。</strong></p>\n<p><strong>在进取的方向上，选择了做草根，就是要向泥土的深处钻，这是作为草根应该选择的方向。</strong></p>\n<p><strong>其实，我们那没有战斗力的爹将你送到这个平台已经付出了很多的努力了。二代们总是吸引人眼球的，个别无能的二代总得造出点什么来告诉人们他的存在。</strong></p>\n<p><strong>许多人对精神世界失去了兴趣，又在对物质的追求中迷失了方向。</strong></p>\n<p><strong>写作，是让一个人活得更明白的方法。</strong></p>\n<p><strong>有勇气来改变可以改变的事情，有胸怀来接收不可改变的事情，有智慧来分辨两者的不同。——李开复。</strong></p>\n<p><strong>上大学，并不是每个人成才成长的必经之路，但大学却的确是一个值得经历的阶段，这和毕业证无关，和找工作或许有关，也许无关。其实很多人把“知识改变命运”想成了“大学改变命运”。“大学改变命运”是一个绝对的伪命题，但有些人就迷信这个。 </strong></p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>我从没见过任何一个大学老师有如此的教育心态。我也只是一等书生，还未进入社会，但是对贺利坚这种老师，我也非常喜欢的。我母亲总是叫我要么当官、要么学医、要么从教<br>，为什么？因为这两个职位在他们看来是最赚钱的。每次面对他们的说法，我只能以呵呵面对，当官我不会当贪官，学医我不会收贿赂，从教我不会只教学生读书，如果要我当老<br>师，我一定会去当大学老师，因为大学老师不用担心学生的升学考试，可以全身心的教育学生该怎么做人，而不是该怎么应付考试。</p>\n<p>本书基本上是摘录整理自<a href=\"http://blog.csdn.net/sxhelijian/\">贺老师的CSDN博客</a>语言很朴实，和网上很多的说教型文章不一样的<br>是，该书几乎全是干货。虽然说是写给计算机学子看的，但是我认为其他任何专业，任何学生，任何老师都值得去一看。详细的介绍可以看作者自己的<a href=\"http://blog.csdn.net/sxhelijian/article/details/21276999\">《走在&lt;逆袭大学&gt;的征<br>途上》</a>。此书真的是有满满的正能量，在大<br>学，我们迷茫过，踌躇过，退缩过，有的女生也因性别问题困扰过，看完此书，我们总会找到自己解决困难的方法。</p>\n<p>我在大二下学期看了两边此书，因为大二下学期是我心态变化最大的一个学期。刚开始时，我一心想要考研，但当实验室的老师给我看了几篇论文过后，我果断放弃了。没错，论<br>文是全英文的，很多地方都看不懂，但是这不是我放弃的原因，我绝不可能因为一点点的困难就轻言放弃的，其主要原因是经过跟随实验室老师的几个月学习，并且询问了一些研<br>究生，我了解了一些研究生的生活。在研究生早期(我这里所说的是爱学习的研究生)，基本上是看理论，看论文，后期就和本科生一样了，去实习，找工作。我不喜欢这样的生<br>活，我不大喜欢看理论，我更喜欢用代码来敲出新的东西，哪怕他功能并不强大，哪怕他用户极少，但我也能从中获得足够多的满足感。当然，或许我还是图样图森破，但是谁又<br>能肯定我不是对的呢？我也不能肯定，但我想试试，我有自己的忍道！之后我就打算去工作，但过了没几天我就决定去创业了。那时候想了很久，其实我一直有一个很好的朋友在<br>等着我一起创业，就等我一个答复了，而我，终于答应了他。决定创业后，我又把此书看了一遍，依然受益匪浅。</p>\n<p>书中有很多观点我是十分赞同的(摘抄了一部分在语录部分)。贺老师鼓励我们关心国家大事，这几天，香港问题非常尖锐，但是国内的媒体集体失声，大陆人士基本上无从知晓<br>，只能从CCAV里面获知只言片语，不过那能信吗？每次有这种事情的时候我都是在微博上先看到，然后我就会去twitter或者facebook里面查询是否属实，最<br>后再去草榴等网站看看人们的评论，有时候转发一下微博，当然，生活在这样的环境里，为了不被查水表，也只能小声地发几句言了。但我至少会去关心，会因为深灰上的某些不<br>公感到愤怒，其他人呢。</p>\n<p>另外一个观点，大学最重要是要学到什么？我认为，大学最重要的是要学会学习。这里所说的学习不是普通的按照课本，按照老师的要求来学习，如果真那样，那我们和专业院校<br>又有什么区别。首先我们要学会自我学习，现在我都大三了，但进入大学这么久，学校就只教了C语言(不是谭浩强的，但我觉得那本教材连谭浩强都不如)，幸好，我经常浏览<br>一些开放的论坛和微博等，对新技术新知识了解了很多，所以自己自学了很多东西，C++/MySQL/Python等。另外，跟重要的，我建立了自我学习的意识，不仅仅<br>是计算机相关的专业知识，还要学习一些人文知识和其他学科的知识，在Coursera上面我已经获得了三个Statement of<br>Finished，虽然只是完成证明，但我都是认真学习了的，在Coursera上不适合做专业的学习，所以学习人文课程就非常好。</p>\n<p>最后享受大学最后两年吧！</p>\n<p>语录</p>\n<p><strong>如果不是感到迷茫，就不知道突破；如果不是克服迷茫的过程，就找不到自信。</strong></p>\n<p><strong>现在的大学，谈个人理想、民族命运的声音渐微，上大学被视为谋生、当官、发财的途径和资本，而有些立志从事实业，担负民族振兴职责的学子常常遭到鄙视。大学应该是“追求学问的地方，而非资格养成之所”。</strong></p>\n<p><strong>享受自由的大学是需要资格的。陷入迷茫，只因为不能享受这份曾经渴望的自由。</strong></p>\n<p><strong>大学的精彩在于自学，这不是指自己一个人闷头去学，而是一种有帮助的自学，一种到处都可以借力的自主性学习，只不过，帮助你的力量需要自己去发现。</strong></p>\n<p><strong>学编程不拘于语言，学语言不限于平台。</strong></p>\n<p><strong>练出的功夫不只是体现在拳脚上，而是无论哪里发力，使什么样的兵器，丹田之气都能随之跟进。</strong></p>\n<p><strong>会学习意味着会根据自身的基础和主客观条件，去极化、调控和评价学习。</strong><br><strong>会学习意味着会利用最少的时间、尽量少的经历，以最快的速度获取尽可能多的知识和技能。</strong><br><strong>会学习意味着会自己把握学习的重点，不满足于只获取某种知识，而是重点掌握思维过程和方法。</strong><br><strong>会学习意味着会把所学知识应用到生产和社会需要的实践中去。</strong></p>\n<p><strong>课内学习主要保证抽象能力的发展，而在课外自主的学习中，让实践成为主流，朝着打开个人经验的方向，安排出有效的学习。</strong></p>\n<p><strong>最有效的办法谁都知道，那就是找到学习、生活该有的节奏，稳定地行动，坚定地前进。</strong></p>\n<p><strong>没有自学，不是大学。</strong></p>\n<p><strong>教是为了不教。</strong></p>\n<p><strong>大学所能给予的只是成长。大学，从某种意义上讲，本来就不是要用来做什么的。只有摆脱附加在其上的各种功利的期望，才能够获得与心灵成长、能力增长一致的学习。</strong></p>\n<p><strong>在我理想的大学中，同学们的学习将是这样的：接受着一项专业教育，由学校系统地传授者专业知识，接受着一种“正规”的训练，另一方面，学生能够根据自己的兴趣和感觉自由地拓展，拓展的内容有的是和现有“系统”相关的，有的完全是”节外生枝“。如此形成的是每个人个性的系统。这是大学里最有生命力的独特风景。</strong></p>\n<p><strong>吃多了拉是队列，吃多了吐就是栈。</strong></p>\n<p><strong>20岁的人对30岁的事不用纠结，20岁不用将别人30岁遇到的困扰当作理由而退缩。</strong></p>\n<p><strong>计算机是如此重要，因为不能把它只留给男人去做！</strong></p>\n<p><strong>兴趣本来是前行中最好的老师，但现在也是为逃避现实，不去努力找到的最好的理由和借口。</strong></p>\n<p><strong>一个要面对现实的人，必须原谅过去在自己身上发生的一切，要有这种大度。</strong></p>\n<p><strong>以兴趣为理由放慢前行的脚步是对青春的一种亵渎，兴趣很重要但其作用并没有大到成为决定性的和唯一的因素。</strong></p>\n<p><strong>因项目决定人如何参加。————————————————————这也是我认为的</strong></p>\n<p><strong>”开发经验“不是”工作经验“，他们似乎更在乎有个借口，将那些读了几年死书的人挡在门外。</strong></p>\n<p><strong>大一大二是夯实基础和开阔视野期，大三大四是目标实现期。大二结束大三开始的那段时间确定目标，而目标中必须明确主要的应用方向。</strong></p>\n<p><strong>大一不知道自己不知道，大二知道自己不知道，大三不知道自己知道，而大四知道自己知道。</strong></p>\n<p><strong>在年少轻狂之时想别人不敢想的，做别人不敢做的 ，实在是一件幸运的事，这也成就了许多追梦人。做了却没有达到是正常的，但不敢想不敢做，无论何时都是一种遗憾。即使这个梦想没有实现，努力也会积淀下来，成为新的能量来源。</strong></p>\n<p><strong>有人将迷茫常挂在嘴上，任由该做的事情一拖再拖，这样的迷茫，就是一个借口！</strong></p>\n<p><strong>坚决前行，就是给知道一个机会。</strong></p>\n<p><strong>给予求学越多的功利，意味着越多的走样，其中的失望也会越大。</strong></p>\n<p><strong>面对一次次“裸考”不过，还要调侃高中只会考试，大学连考试也不会了的大学生，我不作评论。</strong></p>\n<p><strong>有效的学习是根本，学有所成是核心，外在的东西可以有，内在的东西不可少。</strong></p>\n<p><strong>让这种奋斗来得更坚决一些，不要为自己暂时不能拥有的而纠结，不必为我们不屑的丑陋现实而低头，我们就用读书人的方式面对浮躁的社会。</strong></p>\n<p><strong>在进取的方向上，选择了做草根，就是要向泥土的深处钻，这是作为草根应该选择的方向。</strong></p>\n<p><strong>其实，我们那没有战斗力的爹将你送到这个平台已经付出了很多的努力了。二代们总是吸引人眼球的，个别无能的二代总得造出点什么来告诉人们他的存在。</strong></p>\n<p><strong>许多人对精神世界失去了兴趣，又在对物质的追求中迷失了方向。</strong></p>\n<p><strong>写作，是让一个人活得更明白的方法。</strong></p>\n<p><strong>有勇气来改变可以改变的事情，有胸怀来接收不可改变的事情，有智慧来分辨两者的不同。——李开复。</strong></p>\n<p><strong>上大学，并不是每个人成才成长的必经之路，但大学却的确是一个值得经历的阶段，这和毕业证无关，和找工作或许有关，也许无关。其实很多人把“知识改变命运”想成了“大学改变命运”。“大学改变命运”是一个绝对的伪命题，但有些人就迷信这个。 </strong></p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"Nginx + 多Apache 做反向代理实现负载均衡并设置二级域名","date":"2014-10-23T00:03:02.000Z","_content":"参考文章：[http://blog.csdn.net/yanggd1987/article/details/31375573\n](http://blog.csdn.net/yanggd1987/article/details/31375573)\n<http://www.oschina.net/question/56436_109188>\n\n在网上找了几天时间，发现网上的方法都有一定的局限性，因为我想要的是在同一台服务器上实现一个nginx做反向代理到多个apache(再一次感叹网上好多教程的落\n后和千篇一律)。这里再次记录本次的配置过程。\n\n环境：Ubuntu14.04 server + nginx(1.4.6) + apache2(2.4.7)\n目的：使用nginx做代理，分别代理到apache的四个监听端口8080/8081/8082/8083 优点：Nginx可应付高并发，使用Proxy做代理效\n率也较高，占用资源少，再使用apache处理后端，也更稳定，现在一般的做法是是用nginx处理前端，apache处理后端，我这里暂时全部交由apache处理\n。当然，我这里都是在同一台服务器上做的，除了减少单个apache的并发处理数量，对性能来说并没有显著的提升。\n\n### 1.安装nginx和apache2\n\n安装到没什么好说的，直接`apt-get`安装即可。\n\n### 2.修改nginx的配置文件/etc/nginx/nginx.etc\n\n在http字段(就是那个大括号里面)添加如下内容：\n\n\n\n    upstream balance\\{\n        server localhost:8080;\n        server localhost:8081;\n        server localhost:8082;\n        server localhost:8083;\n    \\}\n\n\n\n\n    server\\{\n        listen 80;\n        server_name haofly.net;\n        localhost /\\{\n            proxy_pass http://balance;\n        \\}\n    \\}\n\n其中nginx是让upstream里面的各个IP/端口实现轮询访问，研究一下nginx的配置文件，还可以对轮询访问加上一些限制条件，比如轮训机制、权值分配等\n，这里不做详述。\n\n需要注意的是如果是二级域名，那么upstream里面的server依然写成`localhost:port`的形式，而不用去写什么二级域名，二级域名在apac\nhe的配置文件里面定义，nginx会直接将那些都传给它的。\n\n### 3.修改apache的配置文件\n\n主配置文件`/etc/apache2/apache2.conf`，在#ServerRoot\n\"/etc/apache\"下添加一行指明ServerName，例如：\n\n\n\n    #ServerRoot \"/etc/apache2\"\n    ServerName haofly.net\n\n虚拟目录配置文件(这就相当于为apache多开了几个线程，就好像是有多个apache在同时工作一样) `vim /etc/apache2/sites-\navailable/000-default.conf`(这是默认的那个80端口的配置文件)，只需要把里面的80端口改为8080即可。然后再新建几个配置文件\n`vim /etc/apache2/sites-available/proxy01.conf`内容如下：\n\n\n\n    <VirtualHost *:8081>\n        ServerAdmin localhost:8081\n        DocumentRoot /var/www/html\n\n\n\n\n\n    ErrorLog $\\{APACHE_LOG_DIR\\}/error.log\n    CustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n\n\n</VIrtualHost>\n\n8082端口的配置文件proxy02.conf只需要把端口改为8082即可，另外为方便测试，我们需要把8083端口的配置文件特殊化一下，`vim\n/etc/apache2/sites-available/proxy03.conf`，内容如下：\n\n\n\n    <VirtualHost *:8083>\n        ServerAdmin localhost:8083\n        DocumentRoot /var/www/test\n\n\n\n\n\n    ErrorLog $\\{APACHE_LOG_DIR\\}/error.log\n    CustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n\n\n</VIrtualHost>\n\n其实只是修改了DocumentRoot，使它指向/var/www/test，这样就方便测试了，在/var/www/test下新建一个文件`vim\n/var/www/test/index.html`，内容如下\n\n\n\n    <html>\n     hehe\n    </html>\n\n在把配置文件链接到`/etc/apache2/sites-available`文件夹：\n\n\n\n    cd ../sites-enabled\n    sudo ln -s ../sites-available/proxy01.conf\n    sudo ln -s ../sites-available/proxy02.conf\n    sudo ln -s ../sites-available/proxy03.conf\n\n最后再修改apache的端口文件`vim /etc/apache2/ports.conf`，把Listen *80修改为：\n\n\n\n    Listen 8080\n    Listen 8081\n    Listen 8082\n    Listen 8083\n\n###  4.测试\n\n首先检查配置文件是否有语法错误\n\n\n\n    nginx -t\n    apachectl -t\n\n如果都OK，就可以重启了：\n\n\n\n    service apache2 restart\n    service nginx stop\n    service nginx start\n\n然后在浏览器输入上面的Servername，即http://haofly.net，多刷新几次，就会发现，有时候出现的是apache的界面，有时候出现的是te\nst下那个hehe界面。\n\n### 5.nginx添加二级域名\n\n比apache简单多了，我这里不仅添加了二级域名，并且也实现了一个反向代理，在/etc/nginx/nginx.conf里面的http里面添加一个upstr\neam和一个server即可：\n\n\n\n    upstream \\{\n       server localhost:8084;\n    \\}\n    server \\{\n        server_name aa.hostname.com;\n        listen               80;\n        location / \\{\n          proxy_pass http://er;\n          proxy_redirect default;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection $http_connection;\n        \\}\n    \\}\n\n然后就像[Linux使用虚拟主机设置一、二级域名和虚拟目录](http://haofly.net/linuxvirtualhost/ \"Link:\nhttp://haofly.net/linuxvirtualhost/\" ) 那样设置apache即可。\n","source":"_posts/nginx-multi-apache-load-balance.md","raw":"---\ntitle: \"nginx + 多apache 做反向代理实现负载均衡并设置二级域名\"\ndate: 2014-10-23 08:03:02\ncategories: 编程之路\n---\n参考文章：[http://blog.csdn.net/yanggd1987/article/details/31375573\n](http://blog.csdn.net/yanggd1987/article/details/31375573)\n<http://www.oschina.net/question/56436_109188>\n\n在网上找了几天时间，发现网上的方法都有一定的局限性，因为我想要的是在同一台服务器上实现一个nginx做反向代理到多个apache(再一次感叹网上好多教程的落\n后和千篇一律)。这里再次记录本次的配置过程。\n\n环境：Ubuntu14.04 server + nginx(1.4.6) + apache2(2.4.7)\n目的：使用nginx做代理，分别代理到apache的四个监听端口8080/8081/8082/8083 优点：Nginx可应付高并发，使用Proxy做代理效\n率也较高，占用资源少，再使用apache处理后端，也更稳定，现在一般的做法是是用nginx处理前端，apache处理后端，我这里暂时全部交由apache处理\n。当然，我这里都是在同一台服务器上做的，除了减少单个apache的并发处理数量，对性能来说并没有显著的提升。\n\n### 1.安装nginx和apache2\n\n安装到没什么好说的，直接`apt-get`安装即可。\n\n### 2.修改nginx的配置文件/etc/nginx/nginx.etc\n\n在http字段(就是那个大括号里面)添加如下内容：\n\n\n\n    upstream balance\\{\n        server localhost:8080;\n        server localhost:8081;\n        server localhost:8082;\n        server localhost:8083;\n    \\}\n\n\n\n\n    server\\{\n        listen 80;\n        server_name haofly.net;\n        localhost /\\{\n            proxy_pass http://balance;\n        \\}\n    \\}\n\n其中nginx是让upstream里面的各个IP/端口实现轮询访问，研究一下nginx的配置文件，还可以对轮询访问加上一些限制条件，比如轮训机制、权值分配等\n，这里不做详述。\n\n需要注意的是如果是二级域名，那么upstream里面的server依然写成`localhost:port`的形式，而不用去写什么二级域名，二级域名在apac\nhe的配置文件里面定义，nginx会直接将那些都传给它的。\n\n### 3.修改apache的配置文件\n\n主配置文件`/etc/apache2/apache2.conf`，在#ServerRoot\n\"/etc/apache\"下添加一行指明ServerName，例如：\n\n\n\n    #ServerRoot \"/etc/apache2\"\n    ServerName haofly.net\n\n虚拟目录配置文件(这就相当于为apache多开了几个线程，就好像是有多个apache在同时工作一样) `vim /etc/apache2/sites-\navailable/000-default.conf`(这是默认的那个80端口的配置文件)，只需要把里面的80端口改为8080即可。然后再新建几个配置文件\n`vim /etc/apache2/sites-available/proxy01.conf`内容如下：\n\n\n\n    <VirtualHost *:8081>\n        ServerAdmin localhost:8081\n        DocumentRoot /var/www/html\n\n\n\n\n\n    ErrorLog $\\{APACHE_LOG_DIR\\}/error.log\n    CustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n\n\n</VIrtualHost>\n\n8082端口的配置文件proxy02.conf只需要把端口改为8082即可，另外为方便测试，我们需要把8083端口的配置文件特殊化一下，`vim\n/etc/apache2/sites-available/proxy03.conf`，内容如下：\n\n\n\n    <VirtualHost *:8083>\n        ServerAdmin localhost:8083\n        DocumentRoot /var/www/test\n\n\n\n\n\n    ErrorLog $\\{APACHE_LOG_DIR\\}/error.log\n    CustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n\n\n</VIrtualHost>\n\n其实只是修改了DocumentRoot，使它指向/var/www/test，这样就方便测试了，在/var/www/test下新建一个文件`vim\n/var/www/test/index.html`，内容如下\n\n\n\n    <html>\n     hehe\n    </html>\n\n在把配置文件链接到`/etc/apache2/sites-available`文件夹：\n\n\n\n    cd ../sites-enabled\n    sudo ln -s ../sites-available/proxy01.conf\n    sudo ln -s ../sites-available/proxy02.conf\n    sudo ln -s ../sites-available/proxy03.conf\n\n最后再修改apache的端口文件`vim /etc/apache2/ports.conf`，把Listen *80修改为：\n\n\n\n    Listen 8080\n    Listen 8081\n    Listen 8082\n    Listen 8083\n\n###  4.测试\n\n首先检查配置文件是否有语法错误\n\n\n\n    nginx -t\n    apachectl -t\n\n如果都OK，就可以重启了：\n\n\n\n    service apache2 restart\n    service nginx stop\n    service nginx start\n\n然后在浏览器输入上面的Servername，即http://haofly.net，多刷新几次，就会发现，有时候出现的是apache的界面，有时候出现的是te\nst下那个hehe界面。\n\n### 5.nginx添加二级域名\n\n比apache简单多了，我这里不仅添加了二级域名，并且也实现了一个反向代理，在/etc/nginx/nginx.conf里面的http里面添加一个upstr\neam和一个server即可：\n\n\n\n    upstream \\{\n       server localhost:8084;\n    \\}\n    server \\{\n        server_name aa.hostname.com;\n        listen               80;\n        location / \\{\n          proxy_pass http://er;\n          proxy_redirect default;\n          proxy_set_header Upgrade $http_upgrade;\n          proxy_set_header Connection $http_connection;\n        \\}\n    \\}\n\n然后就像[Linux使用虚拟主机设置一、二级域名和虚拟目录](http://haofly.net/linuxvirtualhost/ \"Link:\nhttp://haofly.net/linuxvirtualhost/\" ) 那样设置apache即可。\n","slug":"nginx-multi-apache-load-balance","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pdp00439vnzu6m49284","content":"<p>参考文章：<a href=\"http://blog.csdn.net/yanggd1987/article/details/31375573\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/yanggd1987/article/details/31375573\n</a><br><a href=\"http://www.oschina.net/question/56436_109188\" target=\"_blank\" rel=\"external\">http://www.oschina.net/question/56436_109188</a></p>\n<p>在网上找了几天时间，发现网上的方法都有一定的局限性，因为我想要的是在同一台服务器上实现一个nginx做反向代理到多个apache(再一次感叹网上好多教程的落<br>后和千篇一律)。这里再次记录本次的配置过程。</p>\n<p>环境：Ubuntu14.04 server + nginx(1.4.6) + apache2(2.4.7)<br>目的：使用nginx做代理，分别代理到apache的四个监听端口8080/8081/8082/8083 优点：Nginx可应付高并发，使用Proxy做代理效<br>率也较高，占用资源少，再使用apache处理后端，也更稳定，现在一般的做法是是用nginx处理前端，apache处理后端，我这里暂时全部交由apache处理<br>。当然，我这里都是在同一台服务器上做的，除了减少单个apache的并发处理数量，对性能来说并没有显著的提升。</p>\n<h3 id=\"1-安装nginx和apache2\"><a href=\"#1-安装nginx和apache2\" class=\"headerlink\" title=\"1.安装nginx和apache2\"></a>1.安装nginx和apache2</h3><p>安装到没什么好说的，直接<code>apt-get</code>安装即可。</p>\n<h3 id=\"2-修改nginx的配置文件-etc-nginx-nginx-etc\"><a href=\"#2-修改nginx的配置文件-etc-nginx-nginx-etc\" class=\"headerlink\" title=\"2.修改nginx的配置文件/etc/nginx/nginx.etc\"></a>2.修改nginx的配置文件/etc/nginx/nginx.etc</h3><p>在http字段(就是那个大括号里面)添加如下内容：</p>\n<pre><code>upstream balance\\{\n    server localhost:8080;\n    server localhost:8081;\n    server localhost:8082;\n    server localhost:8083;\n\\}\n\n\n\n\nserver\\{\n    listen 80;\n    server_name haofly.net;\n    localhost /\\{\n        proxy_pass http://balance;\n    \\}\n\\}\n</code></pre><p>其中nginx是让upstream里面的各个IP/端口实现轮询访问，研究一下nginx的配置文件，还可以对轮询访问加上一些限制条件，比如轮训机制、权值分配等<br>，这里不做详述。</p>\n<p>需要注意的是如果是二级域名，那么upstream里面的server依然写成<code>localhost:port</code>的形式，而不用去写什么二级域名，二级域名在apac<br>he的配置文件里面定义，nginx会直接将那些都传给它的。</p>\n<h3 id=\"3-修改apache的配置文件\"><a href=\"#3-修改apache的配置文件\" class=\"headerlink\" title=\"3.修改apache的配置文件\"></a>3.修改apache的配置文件</h3><p>主配置文件<code>/etc/apache2/apache2.conf</code>，在#ServerRoot<br>“/etc/apache”下添加一行指明ServerName，例如：</p>\n<pre><code>#ServerRoot &quot;/etc/apache2&quot;\nServerName haofly.net\n</code></pre><p>虚拟目录配置文件(这就相当于为apache多开了几个线程，就好像是有多个apache在同时工作一样) <code>vim /etc/apache2/sites-\navailable/000-default.conf</code>(这是默认的那个80端口的配置文件)，只需要把里面的80端口改为8080即可。然后再新建几个配置文件<br><code>vim /etc/apache2/sites-available/proxy01.conf</code>内容如下：</p>\n<pre><code>&lt;VirtualHost *:8081&gt;\n    ServerAdmin localhost:8081\n    DocumentRoot /var/www/html\n\n\n\n\n\nErrorLog $\\{APACHE_LOG_DIR\\}/error.log\nCustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n</code></pre><p></p>\n<p>8082端口的配置文件proxy02.conf只需要把端口改为8082即可，另外为方便测试，我们需要把8083端口的配置文件特殊化一下，<code>vim\n/etc/apache2/sites-available/proxy03.conf</code>，内容如下：</p>\n<pre><code>&lt;VirtualHost *:8083&gt;\n    ServerAdmin localhost:8083\n    DocumentRoot /var/www/test\n\n\n\n\n\nErrorLog $\\{APACHE_LOG_DIR\\}/error.log\nCustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n</code></pre><p></p>\n<p>其实只是修改了DocumentRoot，使它指向/var/www/test，这样就方便测试了，在/var/www/test下新建一个文件<code>vim\n/var/www/test/index.html</code>，内容如下</p>\n<pre><code>&lt;html&gt;\n hehe\n&lt;/html&gt;\n</code></pre><p>在把配置文件链接到<code>/etc/apache2/sites-available</code>文件夹：</p>\n<pre><code>cd ../sites-enabled\nsudo ln -s ../sites-available/proxy01.conf\nsudo ln -s ../sites-available/proxy02.conf\nsudo ln -s ../sites-available/proxy03.conf\n</code></pre><p>最后再修改apache的端口文件<code>vim /etc/apache2/ports.conf</code>，把Listen *80修改为：</p>\n<pre><code>Listen 8080\nListen 8081\nListen 8082\nListen 8083\n</code></pre><h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><p>首先检查配置文件是否有语法错误</p>\n<pre><code>nginx -t\napachectl -t\n</code></pre><p>如果都OK，就可以重启了：</p>\n<pre><code>service apache2 restart\nservice nginx stop\nservice nginx start\n</code></pre><p>然后在浏览器输入上面的Servername，即<a href=\"http://haofly.net，多刷新几次，就会发现，有时候出现的是apache的界面，有时候出现的是te\" target=\"_blank\" rel=\"external\">http://haofly.net，多刷新几次，就会发现，有时候出现的是apache的界面，有时候出现的是te</a><br>st下那个hehe界面。</p>\n<h3 id=\"5-nginx添加二级域名\"><a href=\"#5-nginx添加二级域名\" class=\"headerlink\" title=\"5.nginx添加二级域名\"></a>5.nginx添加二级域名</h3><p>比apache简单多了，我这里不仅添加了二级域名，并且也实现了一个反向代理，在/etc/nginx/nginx.conf里面的http里面添加一个upstr<br>eam和一个server即可：</p>\n<pre><code>upstream \\{\n   server localhost:8084;\n\\}\nserver \\{\n    server_name aa.hostname.com;\n    listen               80;\n    location / \\{\n      proxy_pass http://er;\n      proxy_redirect default;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $http_connection;\n    \\}\n\\}\n</code></pre><p>然后就像<a href=\"http://haofly.net/linuxvirtualhost/\" title=\"Link:\nhttp://haofly.net/linuxvirtualhost/\">Linux使用虚拟主机设置一、二级域名和虚拟目录</a> 那样设置apache即可。</p>\n","excerpt":"","more":"<p>参考文章：<a href=\"http://blog.csdn.net/yanggd1987/article/details/31375573\">http://blog.csdn.net/yanggd1987/article/details/31375573\n</a><br><a href=\"http://www.oschina.net/question/56436_109188\">http://www.oschina.net/question/56436_109188</a></p>\n<p>在网上找了几天时间，发现网上的方法都有一定的局限性，因为我想要的是在同一台服务器上实现一个nginx做反向代理到多个apache(再一次感叹网上好多教程的落<br>后和千篇一律)。这里再次记录本次的配置过程。</p>\n<p>环境：Ubuntu14.04 server + nginx(1.4.6) + apache2(2.4.7)<br>目的：使用nginx做代理，分别代理到apache的四个监听端口8080/8081/8082/8083 优点：Nginx可应付高并发，使用Proxy做代理效<br>率也较高，占用资源少，再使用apache处理后端，也更稳定，现在一般的做法是是用nginx处理前端，apache处理后端，我这里暂时全部交由apache处理<br>。当然，我这里都是在同一台服务器上做的，除了减少单个apache的并发处理数量，对性能来说并没有显著的提升。</p>\n<h3 id=\"1-安装nginx和apache2\"><a href=\"#1-安装nginx和apache2\" class=\"headerlink\" title=\"1.安装nginx和apache2\"></a>1.安装nginx和apache2</h3><p>安装到没什么好说的，直接<code>apt-get</code>安装即可。</p>\n<h3 id=\"2-修改nginx的配置文件-etc-nginx-nginx-etc\"><a href=\"#2-修改nginx的配置文件-etc-nginx-nginx-etc\" class=\"headerlink\" title=\"2.修改nginx的配置文件/etc/nginx/nginx.etc\"></a>2.修改nginx的配置文件/etc/nginx/nginx.etc</h3><p>在http字段(就是那个大括号里面)添加如下内容：</p>\n<pre><code>upstream balance\\{\n    server localhost:8080;\n    server localhost:8081;\n    server localhost:8082;\n    server localhost:8083;\n\\}\n\n\n\n\nserver\\{\n    listen 80;\n    server_name haofly.net;\n    localhost /\\{\n        proxy_pass http://balance;\n    \\}\n\\}\n</code></pre><p>其中nginx是让upstream里面的各个IP/端口实现轮询访问，研究一下nginx的配置文件，还可以对轮询访问加上一些限制条件，比如轮训机制、权值分配等<br>，这里不做详述。</p>\n<p>需要注意的是如果是二级域名，那么upstream里面的server依然写成<code>localhost:port</code>的形式，而不用去写什么二级域名，二级域名在apac<br>he的配置文件里面定义，nginx会直接将那些都传给它的。</p>\n<h3 id=\"3-修改apache的配置文件\"><a href=\"#3-修改apache的配置文件\" class=\"headerlink\" title=\"3.修改apache的配置文件\"></a>3.修改apache的配置文件</h3><p>主配置文件<code>/etc/apache2/apache2.conf</code>，在#ServerRoot<br>“/etc/apache”下添加一行指明ServerName，例如：</p>\n<pre><code>#ServerRoot &quot;/etc/apache2&quot;\nServerName haofly.net\n</code></pre><p>虚拟目录配置文件(这就相当于为apache多开了几个线程，就好像是有多个apache在同时工作一样) <code>vim /etc/apache2/sites-\navailable/000-default.conf</code>(这是默认的那个80端口的配置文件)，只需要把里面的80端口改为8080即可。然后再新建几个配置文件<br><code>vim /etc/apache2/sites-available/proxy01.conf</code>内容如下：</p>\n<pre><code>&lt;VirtualHost *:8081&gt;\n    ServerAdmin localhost:8081\n    DocumentRoot /var/www/html\n\n\n\n\n\nErrorLog $\\{APACHE_LOG_DIR\\}/error.log\nCustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n</code></pre><p></VIrtualHost></p>\n<p>8082端口的配置文件proxy02.conf只需要把端口改为8082即可，另外为方便测试，我们需要把8083端口的配置文件特殊化一下，<code>vim\n/etc/apache2/sites-available/proxy03.conf</code>，内容如下：</p>\n<pre><code>&lt;VirtualHost *:8083&gt;\n    ServerAdmin localhost:8083\n    DocumentRoot /var/www/test\n\n\n\n\n\nErrorLog $\\{APACHE_LOG_DIR\\}/error.log\nCustomLog $\\{APACHE_LOG_DIR\\}/access.log combined\n</code></pre><p></VIrtualHost></p>\n<p>其实只是修改了DocumentRoot，使它指向/var/www/test，这样就方便测试了，在/var/www/test下新建一个文件<code>vim\n/var/www/test/index.html</code>，内容如下</p>\n<pre><code>&lt;html&gt;\n hehe\n&lt;/html&gt;\n</code></pre><p>在把配置文件链接到<code>/etc/apache2/sites-available</code>文件夹：</p>\n<pre><code>cd ../sites-enabled\nsudo ln -s ../sites-available/proxy01.conf\nsudo ln -s ../sites-available/proxy02.conf\nsudo ln -s ../sites-available/proxy03.conf\n</code></pre><p>最后再修改apache的端口文件<code>vim /etc/apache2/ports.conf</code>，把Listen *80修改为：</p>\n<pre><code>Listen 8080\nListen 8081\nListen 8082\nListen 8083\n</code></pre><h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h3><p>首先检查配置文件是否有语法错误</p>\n<pre><code>nginx -t\napachectl -t\n</code></pre><p>如果都OK，就可以重启了：</p>\n<pre><code>service apache2 restart\nservice nginx stop\nservice nginx start\n</code></pre><p>然后在浏览器输入上面的Servername，即<a href=\"http://haofly.net，多刷新几次，就会发现，有时候出现的是apache的界面，有时候出现的是te\">http://haofly.net，多刷新几次，就会发现，有时候出现的是apache的界面，有时候出现的是te</a><br>st下那个hehe界面。</p>\n<h3 id=\"5-nginx添加二级域名\"><a href=\"#5-nginx添加二级域名\" class=\"headerlink\" title=\"5.nginx添加二级域名\"></a>5.nginx添加二级域名</h3><p>比apache简单多了，我这里不仅添加了二级域名，并且也实现了一个反向代理，在/etc/nginx/nginx.conf里面的http里面添加一个upstr<br>eam和一个server即可：</p>\n<pre><code>upstream \\{\n   server localhost:8084;\n\\}\nserver \\{\n    server_name aa.hostname.com;\n    listen               80;\n    location / \\{\n      proxy_pass http://er;\n      proxy_redirect default;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $http_connection;\n    \\}\n\\}\n</code></pre><p>然后就像<a href=\"http://haofly.net/linuxvirtualhost/\" title=\"Link:\nhttp://haofly.net/linuxvirtualhost/\">Linux使用虚拟主机设置一、二级域名和虚拟目录</a> 那样设置apache即可。</p>\n"},{"title":"MySQL Source命令批量导入数据库及乱码问题的解决","date":"2014-11-09T07:49:56.000Z","_content":"参考：<http://www.111cn.net/database/mysql/46646.htm>\n\n近日老板给了我一个数据库，让我学学人家是怎么设计的，之前从来没有导入过别人的数据库，期间遇到一些问题，特记录如下：\n\n# 1.批量导入问题\n\n首先老板给我的文件不是一个单独的sql文件而是一张一张单独的表对应的sql文件，加起来好几十个，我可不想一个一个的导入，所以到网上找到了一个比较方便的方法：\n\n首先，要知道有一种sql文件是这样的：\n\n\n\n    source file1.sql;\n    source file2.sql;\n    srouce file3.sql;\n    ...\n\n如果再用source命令执行这个文件的话就可以实现批量导入功能，但是怎么能直接获取全部文件名呢(由于source命令是在mysql shell里执行的，所以\n要用绝对路径)，这是可以用管道了(linux下用ls，windows下用dir)。首先可以把所有sql文件放到一个文件夹内(如果同名就重命名，没有关系的)。\n然后在cmd里执行\n\n\n\n    dir foldername /b/od/s > all.sql\n\n这条命令会列出foldername文件夹内的所有子文件的绝对路径并将结果输出到all.sql文件内。然后用文本编辑器打开该sql文件，用替换工具，将每一行替\n换为\n\n\n\n    source 绝对路径;\n\n的形式并保存。然后在MySQL里执行\n\n\n\n    source all.sql的绝对路径\n\n这样就能完全导入了。\n\n# 2.导入乱码的问题\n\n出现乱码肯定是中文乱码，但是，虽然你把MySQL默认编码设置为utf8并且把数据库设置为utf8但依然无法避免人家导出时不用utf8的情况，我应该就是碰到这\n么一个问题了，所以下次自己用命令导出的时候一定要设置编码：\n\n\n\n    mysqldump -uroot -pmysql --default-character-set=utf8 database > xxxx.sql\n\n而如果遇到别人的数据库导入乱码的时候就需要把所有东西全部设置为utf8就可以彻底解决问题了：\n\n\n\n    SET character_set_client = utf8;\n    SET character_set_connection = utf8;\n    SET character_set_database = utf8;\n    SET character_set_results = utf8;\n    SET character_set_server = utf8;\n    SET collation_connection = utf8_bin;\n    SET collation_database = utf8_bin;\n    SET collation_server = utf8_bin;\n\n\n\n\n    # 然后再导入\n\n\n\n\n    source all.sql\n","source":"_posts/mysql-source-messy-code.md","raw":"---\ntitle: \"MySQL source命令批量导入数据库及乱码问题的解决\"\ndate: 2014-11-09 15:49:56\ncategories: 编程之路\n---\n参考：<http://www.111cn.net/database/mysql/46646.htm>\n\n近日老板给了我一个数据库，让我学学人家是怎么设计的，之前从来没有导入过别人的数据库，期间遇到一些问题，特记录如下：\n\n# 1.批量导入问题\n\n首先老板给我的文件不是一个单独的sql文件而是一张一张单独的表对应的sql文件，加起来好几十个，我可不想一个一个的导入，所以到网上找到了一个比较方便的方法：\n\n首先，要知道有一种sql文件是这样的：\n\n\n\n    source file1.sql;\n    source file2.sql;\n    srouce file3.sql;\n    ...\n\n如果再用source命令执行这个文件的话就可以实现批量导入功能，但是怎么能直接获取全部文件名呢(由于source命令是在mysql shell里执行的，所以\n要用绝对路径)，这是可以用管道了(linux下用ls，windows下用dir)。首先可以把所有sql文件放到一个文件夹内(如果同名就重命名，没有关系的)。\n然后在cmd里执行\n\n\n\n    dir foldername /b/od/s > all.sql\n\n这条命令会列出foldername文件夹内的所有子文件的绝对路径并将结果输出到all.sql文件内。然后用文本编辑器打开该sql文件，用替换工具，将每一行替\n换为\n\n\n\n    source 绝对路径;\n\n的形式并保存。然后在MySQL里执行\n\n\n\n    source all.sql的绝对路径\n\n这样就能完全导入了。\n\n# 2.导入乱码的问题\n\n出现乱码肯定是中文乱码，但是，虽然你把MySQL默认编码设置为utf8并且把数据库设置为utf8但依然无法避免人家导出时不用utf8的情况，我应该就是碰到这\n么一个问题了，所以下次自己用命令导出的时候一定要设置编码：\n\n\n\n    mysqldump -uroot -pmysql --default-character-set=utf8 database > xxxx.sql\n\n而如果遇到别人的数据库导入乱码的时候就需要把所有东西全部设置为utf8就可以彻底解决问题了：\n\n\n\n    SET character_set_client = utf8;\n    SET character_set_connection = utf8;\n    SET character_set_database = utf8;\n    SET character_set_results = utf8;\n    SET character_set_server = utf8;\n    SET collation_connection = utf8_bin;\n    SET collation_database = utf8_bin;\n    SET collation_server = utf8_bin;\n\n\n\n\n    # 然后再导入\n\n\n\n\n    source all.sql\n","slug":"mysql-source-messy-code","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pdx00459vnzdsuw20s0","content":"<p>参考：<a href=\"http://www.111cn.net/database/mysql/46646.htm\" target=\"_blank\" rel=\"external\">http://www.111cn.net/database/mysql/46646.htm</a></p>\n<p>近日老板给了我一个数据库，让我学学人家是怎么设计的，之前从来没有导入过别人的数据库，期间遇到一些问题，特记录如下：</p>\n<h1 id=\"1-批量导入问题\"><a href=\"#1-批量导入问题\" class=\"headerlink\" title=\"1.批量导入问题\"></a>1.批量导入问题</h1><p>首先老板给我的文件不是一个单独的sql文件而是一张一张单独的表对应的sql文件，加起来好几十个，我可不想一个一个的导入，所以到网上找到了一个比较方便的方法：</p>\n<p>首先，要知道有一种sql文件是这样的：</p>\n<pre><code>source file1.sql;\nsource file2.sql;\nsrouce file3.sql;\n...\n</code></pre><p>如果再用source命令执行这个文件的话就可以实现批量导入功能，但是怎么能直接获取全部文件名呢(由于source命令是在mysql shell里执行的，所以<br>要用绝对路径)，这是可以用管道了(linux下用ls，windows下用dir)。首先可以把所有sql文件放到一个文件夹内(如果同名就重命名，没有关系的)。<br>然后在cmd里执行</p>\n<pre><code>dir foldername /b/od/s &gt; all.sql\n</code></pre><p>这条命令会列出foldername文件夹内的所有子文件的绝对路径并将结果输出到all.sql文件内。然后用文本编辑器打开该sql文件，用替换工具，将每一行替<br>换为</p>\n<pre><code>source 绝对路径;\n</code></pre><p>的形式并保存。然后在MySQL里执行</p>\n<pre><code>source all.sql的绝对路径\n</code></pre><p>这样就能完全导入了。</p>\n<h1 id=\"2-导入乱码的问题\"><a href=\"#2-导入乱码的问题\" class=\"headerlink\" title=\"2.导入乱码的问题\"></a>2.导入乱码的问题</h1><p>出现乱码肯定是中文乱码，但是，虽然你把MySQL默认编码设置为utf8并且把数据库设置为utf8但依然无法避免人家导出时不用utf8的情况，我应该就是碰到这<br>么一个问题了，所以下次自己用命令导出的时候一定要设置编码：</p>\n<pre><code>mysqldump -uroot -pmysql --default-character-set=utf8 database &gt; xxxx.sql\n</code></pre><p>而如果遇到别人的数据库导入乱码的时候就需要把所有东西全部设置为utf8就可以彻底解决问题了：</p>\n<pre><code>SET character_set_client = utf8;\nSET character_set_connection = utf8;\nSET character_set_database = utf8;\nSET character_set_results = utf8;\nSET character_set_server = utf8;\nSET collation_connection = utf8_bin;\nSET collation_database = utf8_bin;\nSET collation_server = utf8_bin;\n\n\n\n\n# 然后再导入\n\n\n\n\nsource all.sql\n</code></pre>","excerpt":"","more":"<p>参考：<a href=\"http://www.111cn.net/database/mysql/46646.htm\">http://www.111cn.net/database/mysql/46646.htm</a></p>\n<p>近日老板给了我一个数据库，让我学学人家是怎么设计的，之前从来没有导入过别人的数据库，期间遇到一些问题，特记录如下：</p>\n<h1 id=\"1-批量导入问题\"><a href=\"#1-批量导入问题\" class=\"headerlink\" title=\"1.批量导入问题\"></a>1.批量导入问题</h1><p>首先老板给我的文件不是一个单独的sql文件而是一张一张单独的表对应的sql文件，加起来好几十个，我可不想一个一个的导入，所以到网上找到了一个比较方便的方法：</p>\n<p>首先，要知道有一种sql文件是这样的：</p>\n<pre><code>source file1.sql;\nsource file2.sql;\nsrouce file3.sql;\n...\n</code></pre><p>如果再用source命令执行这个文件的话就可以实现批量导入功能，但是怎么能直接获取全部文件名呢(由于source命令是在mysql shell里执行的，所以<br>要用绝对路径)，这是可以用管道了(linux下用ls，windows下用dir)。首先可以把所有sql文件放到一个文件夹内(如果同名就重命名，没有关系的)。<br>然后在cmd里执行</p>\n<pre><code>dir foldername /b/od/s &gt; all.sql\n</code></pre><p>这条命令会列出foldername文件夹内的所有子文件的绝对路径并将结果输出到all.sql文件内。然后用文本编辑器打开该sql文件，用替换工具，将每一行替<br>换为</p>\n<pre><code>source 绝对路径;\n</code></pre><p>的形式并保存。然后在MySQL里执行</p>\n<pre><code>source all.sql的绝对路径\n</code></pre><p>这样就能完全导入了。</p>\n<h1 id=\"2-导入乱码的问题\"><a href=\"#2-导入乱码的问题\" class=\"headerlink\" title=\"2.导入乱码的问题\"></a>2.导入乱码的问题</h1><p>出现乱码肯定是中文乱码，但是，虽然你把MySQL默认编码设置为utf8并且把数据库设置为utf8但依然无法避免人家导出时不用utf8的情况，我应该就是碰到这<br>么一个问题了，所以下次自己用命令导出的时候一定要设置编码：</p>\n<pre><code>mysqldump -uroot -pmysql --default-character-set=utf8 database &gt; xxxx.sql\n</code></pre><p>而如果遇到别人的数据库导入乱码的时候就需要把所有东西全部设置为utf8就可以彻底解决问题了：</p>\n<pre><code>SET character_set_client = utf8;\nSET character_set_connection = utf8;\nSET character_set_database = utf8;\nSET character_set_results = utf8;\nSET character_set_server = utf8;\nSET collation_connection = utf8_bin;\nSET collation_database = utf8_bin;\nSET collation_server = utf8_bin;\n\n\n\n\n# 然后再导入\n\n\n\n\nsource all.sql\n</code></pre>"},{"title":"《你的孤独，虽败犹荣》——孤独是什么","date":"2015-05-03T13:31:59.000Z","_content":"此书和刘同两年前的《谁的青春不迷茫》的风格不同，此书通过几十个身边的小人物来展现人生各个时期的孤独，以独有的价值观去从普通人不一样的角度看问题。或许是我刚开\n始谈恋爱，所以感觉突然忘了以前的那种孤独感，即使是有朋友也会有一个人的孤独。以前我一直想，要看自己是不是一个孤独的人，就要看自己一个人行走在安静或嘈杂的环境\n下能否进入自己的内心而不被外界干扰。\n\n现在玩儿的最好的一堆朋友就是初中的那群朋友，大概有十个左右，我们每年过年都会聚餐，不只一次，如果可以，寒假每天都会一起上街吃烧烤，这样的日子每年都会有，我到\n不担心会失去，因为家乡那个小镇，逛过去逛过来都是这几个朋友。初识孤独的感觉大概是从高中开始，和初中朋友分开过后，我独自一人跑到隔壁县去上学，每个月只能和他们\n见一次，我高中的时候最喜欢一个人跑到公园的池边看往来的人群，那时候的孤独，不是没朋友，而是，能说心里话的人都不在身边。那时候很流行一句话：“越长大越孤单”。\n是啊，我们渐渐长大，很多朋友都因为空间的隔离而渐行渐远，曾经的朋友会因为各自新的朋友的不同而渐渐产生隔阂，虽然朋友一生一起走，那些日子不再有，但一声朋友，就\n绝对是一辈子的事。\n\n今年大三，暑假就开始实习了，这是迈向未来生活重要的一步，也是以后生活的开端。一直都很憧憬，以后所有朋友都在身边的场景，正如本书所说：“在一个毫无生机的城市里\n，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。”那样的感觉肯定很好，和他们在夜市里唱歌，遥想未来，每个月拿着微薄的工资也能每天开\n开心心快快乐乐的，那绝对是人生最美好的时光。\n\n其实我现在还处于“为赋新词强说愁”的状态，呵呵，人生，很精彩，未来很美好，尽力成为我能成为的人吧。很庆幸，二十几岁了，我还在为梦想奋斗。\n\n**经典语录：**\n\n_也许能力不够，所以至今不能真正满足自己内心的愿望。也许足够幼稚，所以至今仍会用这一招骗骗自己。_\n\n_还记得十年前那个期待见识这个世界的少年吗？你还认得出这是你十年后想成为的那个风尘仆仆的大叔吗？_\n\n_当初你不愿听的歌，总有一天会为一个人而听。当初你不愿品尝的食物，总有一天会为一个人去品尝。对于你，也一定会有一个人愿意陪你看你想看的电影，去所有你想去的地\n方，看所有你写过的日记。你不爱人，人不爱你，不是报应，只是时间问题。_\n\n_我们没有成为我们曾以为的，我们成为了我们能成为的。_\n\n_在一个毫无生机的城市里，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。_\n\n_所有因为某人而让自己生气的事情，一定要说出来。不说的话，自己越想就越生气。说出来之后，自己踏实了，对方就会变得不踏实。如果心里因人不爽，最好的办法就是说出\n来告诉对方。一来自己不会再纠结，二来可以让对方纠结，三来如果对方并不因此纠结，就证明对方压根儿不在意你，那你又何必要为不在意你的人影响自己的心情。有话就说的\n人不是直肠子，而是不会让自己辛苦的透明人。_\n\n_一个男人的帅来自于他的性格，一个男人的魅力来自于他的自知，一个男人的强大来自于他对自己的苟刻。_\n\n_你的过去我来不及参与，你的未来我奉陪到底。_\n\n_你以为做的一切都是为了身边最亲近的人，后来你才知道最亲近的人最需要你做的只是你在身边。_\n\n_大多数人不会在同一个地方工作一辈子，大多数人也不会在同一个岗位做一辈子，我们所有的累积都是为了给人生最后的那个位置打一个稳定的根基，所以每个获取经验的机会\n都显得尤为重要。如果所有人工作时间都一样，工作质量拼的就是纯粹的智商和情商，你看了看自己在镜子中的样子——完全没有任何一点男一号的气质啊，不在后天努力，就只\n能成为这出人生剧中的路人甲乙丙丁了。_\n","source":"_posts/nidegudu,suibaiyourong.md","raw":"---\ntitle: \"《你的孤独，虽败犹荣》——孤独是什么\"\ndate: 2015-05-03 21:31:59\ncategories: 韦编三绝\n---\n此书和刘同两年前的《谁的青春不迷茫》的风格不同，此书通过几十个身边的小人物来展现人生各个时期的孤独，以独有的价值观去从普通人不一样的角度看问题。或许是我刚开\n始谈恋爱，所以感觉突然忘了以前的那种孤独感，即使是有朋友也会有一个人的孤独。以前我一直想，要看自己是不是一个孤独的人，就要看自己一个人行走在安静或嘈杂的环境\n下能否进入自己的内心而不被外界干扰。\n\n现在玩儿的最好的一堆朋友就是初中的那群朋友，大概有十个左右，我们每年过年都会聚餐，不只一次，如果可以，寒假每天都会一起上街吃烧烤，这样的日子每年都会有，我到\n不担心会失去，因为家乡那个小镇，逛过去逛过来都是这几个朋友。初识孤独的感觉大概是从高中开始，和初中朋友分开过后，我独自一人跑到隔壁县去上学，每个月只能和他们\n见一次，我高中的时候最喜欢一个人跑到公园的池边看往来的人群，那时候的孤独，不是没朋友，而是，能说心里话的人都不在身边。那时候很流行一句话：“越长大越孤单”。\n是啊，我们渐渐长大，很多朋友都因为空间的隔离而渐行渐远，曾经的朋友会因为各自新的朋友的不同而渐渐产生隔阂，虽然朋友一生一起走，那些日子不再有，但一声朋友，就\n绝对是一辈子的事。\n\n今年大三，暑假就开始实习了，这是迈向未来生活重要的一步，也是以后生活的开端。一直都很憧憬，以后所有朋友都在身边的场景，正如本书所说：“在一个毫无生机的城市里\n，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。”那样的感觉肯定很好，和他们在夜市里唱歌，遥想未来，每个月拿着微薄的工资也能每天开\n开心心快快乐乐的，那绝对是人生最美好的时光。\n\n其实我现在还处于“为赋新词强说愁”的状态，呵呵，人生，很精彩，未来很美好，尽力成为我能成为的人吧。很庆幸，二十几岁了，我还在为梦想奋斗。\n\n**经典语录：**\n\n_也许能力不够，所以至今不能真正满足自己内心的愿望。也许足够幼稚，所以至今仍会用这一招骗骗自己。_\n\n_还记得十年前那个期待见识这个世界的少年吗？你还认得出这是你十年后想成为的那个风尘仆仆的大叔吗？_\n\n_当初你不愿听的歌，总有一天会为一个人而听。当初你不愿品尝的食物，总有一天会为一个人去品尝。对于你，也一定会有一个人愿意陪你看你想看的电影，去所有你想去的地\n方，看所有你写过的日记。你不爱人，人不爱你，不是报应，只是时间问题。_\n\n_我们没有成为我们曾以为的，我们成为了我们能成为的。_\n\n_在一个毫无生机的城市里，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。_\n\n_所有因为某人而让自己生气的事情，一定要说出来。不说的话，自己越想就越生气。说出来之后，自己踏实了，对方就会变得不踏实。如果心里因人不爽，最好的办法就是说出\n来告诉对方。一来自己不会再纠结，二来可以让对方纠结，三来如果对方并不因此纠结，就证明对方压根儿不在意你，那你又何必要为不在意你的人影响自己的心情。有话就说的\n人不是直肠子，而是不会让自己辛苦的透明人。_\n\n_一个男人的帅来自于他的性格，一个男人的魅力来自于他的自知，一个男人的强大来自于他对自己的苟刻。_\n\n_你的过去我来不及参与，你的未来我奉陪到底。_\n\n_你以为做的一切都是为了身边最亲近的人，后来你才知道最亲近的人最需要你做的只是你在身边。_\n\n_大多数人不会在同一个地方工作一辈子，大多数人也不会在同一个岗位做一辈子，我们所有的累积都是为了给人生最后的那个位置打一个稳定的根基，所以每个获取经验的机会\n都显得尤为重要。如果所有人工作时间都一样，工作质量拼的就是纯粹的智商和情商，你看了看自己在镜子中的样子——完全没有任何一点男一号的气质啊，不在后天努力，就只\n能成为这出人生剧中的路人甲乙丙丁了。_\n","slug":"nidegudu,suibaiyourong","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pe200479vnzglk8sz3n","content":"<p>此书和刘同两年前的《谁的青春不迷茫》的风格不同，此书通过几十个身边的小人物来展现人生各个时期的孤独，以独有的价值观去从普通人不一样的角度看问题。或许是我刚开<br>始谈恋爱，所以感觉突然忘了以前的那种孤独感，即使是有朋友也会有一个人的孤独。以前我一直想，要看自己是不是一个孤独的人，就要看自己一个人行走在安静或嘈杂的环境<br>下能否进入自己的内心而不被外界干扰。</p>\n<p>现在玩儿的最好的一堆朋友就是初中的那群朋友，大概有十个左右，我们每年过年都会聚餐，不只一次，如果可以，寒假每天都会一起上街吃烧烤，这样的日子每年都会有，我到<br>不担心会失去，因为家乡那个小镇，逛过去逛过来都是这几个朋友。初识孤独的感觉大概是从高中开始，和初中朋友分开过后，我独自一人跑到隔壁县去上学，每个月只能和他们<br>见一次，我高中的时候最喜欢一个人跑到公园的池边看往来的人群，那时候的孤独，不是没朋友，而是，能说心里话的人都不在身边。那时候很流行一句话：“越长大越孤单”。<br>是啊，我们渐渐长大，很多朋友都因为空间的隔离而渐行渐远，曾经的朋友会因为各自新的朋友的不同而渐渐产生隔阂，虽然朋友一生一起走，那些日子不再有，但一声朋友，就<br>绝对是一辈子的事。</p>\n<p>今年大三，暑假就开始实习了，这是迈向未来生活重要的一步，也是以后生活的开端。一直都很憧憬，以后所有朋友都在身边的场景，正如本书所说：“在一个毫无生机的城市里<br>，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。”那样的感觉肯定很好，和他们在夜市里唱歌，遥想未来，每个月拿着微薄的工资也能每天开<br>开心心快快乐乐的，那绝对是人生最美好的时光。</p>\n<p>其实我现在还处于“为赋新词强说愁”的状态，呵呵，人生，很精彩，未来很美好，尽力成为我能成为的人吧。很庆幸，二十几岁了，我还在为梦想奋斗。</p>\n<p><strong>经典语录：</strong></p>\n<p><em>也许能力不够，所以至今不能真正满足自己内心的愿望。也许足够幼稚，所以至今仍会用这一招骗骗自己。</em></p>\n<p><em>还记得十年前那个期待见识这个世界的少年吗？你还认得出这是你十年后想成为的那个风尘仆仆的大叔吗？</em></p>\n<p><em>当初你不愿听的歌，总有一天会为一个人而听。当初你不愿品尝的食物，总有一天会为一个人去品尝。对于你，也一定会有一个人愿意陪你看你想看的电影，去所有你想去的地<br>方，看所有你写过的日记。你不爱人，人不爱你，不是报应，只是时间问题。</em></p>\n<p><em>我们没有成为我们曾以为的，我们成为了我们能成为的。</em></p>\n<p><em>在一个毫无生机的城市里，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。</em></p>\n<p><em>所有因为某人而让自己生气的事情，一定要说出来。不说的话，自己越想就越生气。说出来之后，自己踏实了，对方就会变得不踏实。如果心里因人不爽，最好的办法就是说出<br>来告诉对方。一来自己不会再纠结，二来可以让对方纠结，三来如果对方并不因此纠结，就证明对方压根儿不在意你，那你又何必要为不在意你的人影响自己的心情。有话就说的<br>人不是直肠子，而是不会让自己辛苦的透明人。</em></p>\n<p><em>一个男人的帅来自于他的性格，一个男人的魅力来自于他的自知，一个男人的强大来自于他对自己的苟刻。</em></p>\n<p><em>你的过去我来不及参与，你的未来我奉陪到底。</em></p>\n<p><em>你以为做的一切都是为了身边最亲近的人，后来你才知道最亲近的人最需要你做的只是你在身边。</em></p>\n<p><em>大多数人不会在同一个地方工作一辈子，大多数人也不会在同一个岗位做一辈子，我们所有的累积都是为了给人生最后的那个位置打一个稳定的根基，所以每个获取经验的机会<br>都显得尤为重要。如果所有人工作时间都一样，工作质量拼的就是纯粹的智商和情商，你看了看自己在镜子中的样子——完全没有任何一点男一号的气质啊，不在后天努力，就只<br>能成为这出人生剧中的路人甲乙丙丁了。</em></p>\n","excerpt":"","more":"<p>此书和刘同两年前的《谁的青春不迷茫》的风格不同，此书通过几十个身边的小人物来展现人生各个时期的孤独，以独有的价值观去从普通人不一样的角度看问题。或许是我刚开<br>始谈恋爱，所以感觉突然忘了以前的那种孤独感，即使是有朋友也会有一个人的孤独。以前我一直想，要看自己是不是一个孤独的人，就要看自己一个人行走在安静或嘈杂的环境<br>下能否进入自己的内心而不被外界干扰。</p>\n<p>现在玩儿的最好的一堆朋友就是初中的那群朋友，大概有十个左右，我们每年过年都会聚餐，不只一次，如果可以，寒假每天都会一起上街吃烧烤，这样的日子每年都会有，我到<br>不担心会失去，因为家乡那个小镇，逛过去逛过来都是这几个朋友。初识孤独的感觉大概是从高中开始，和初中朋友分开过后，我独自一人跑到隔壁县去上学，每个月只能和他们<br>见一次，我高中的时候最喜欢一个人跑到公园的池边看往来的人群，那时候的孤独，不是没朋友，而是，能说心里话的人都不在身边。那时候很流行一句话：“越长大越孤单”。<br>是啊，我们渐渐长大，很多朋友都因为空间的隔离而渐行渐远，曾经的朋友会因为各自新的朋友的不同而渐渐产生隔阂，虽然朋友一生一起走，那些日子不再有，但一声朋友，就<br>绝对是一辈子的事。</p>\n<p>今年大三，暑假就开始实习了，这是迈向未来生活重要的一步，也是以后生活的开端。一直都很憧憬，以后所有朋友都在身边的场景，正如本书所说：“在一个毫无生机的城市里<br>，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。”那样的感觉肯定很好，和他们在夜市里唱歌，遥想未来，每个月拿着微薄的工资也能每天开<br>开心心快快乐乐的，那绝对是人生最美好的时光。</p>\n<p>其实我现在还处于“为赋新词强说愁”的状态，呵呵，人生，很精彩，未来很美好，尽力成为我能成为的人吧。很庆幸，二十几岁了，我还在为梦想奋斗。</p>\n<p><strong>经典语录：</strong></p>\n<p><em>也许能力不够，所以至今不能真正满足自己内心的愿望。也许足够幼稚，所以至今仍会用这一招骗骗自己。</em></p>\n<p><em>还记得十年前那个期待见识这个世界的少年吗？你还认得出这是你十年后想成为的那个风尘仆仆的大叔吗？</em></p>\n<p><em>当初你不愿听的歌，总有一天会为一个人而听。当初你不愿品尝的食物，总有一天会为一个人去品尝。对于你，也一定会有一个人愿意陪你看你想看的电影，去所有你想去的地<br>方，看所有你写过的日记。你不爱人，人不爱你，不是报应，只是时间问题。</em></p>\n<p><em>我们没有成为我们曾以为的，我们成为了我们能成为的。</em></p>\n<p><em>在一个毫无生机的城市里，有一群朋友最大的好处就是，随时随地能够为任何一个理由团聚庆功、畅想未来。</em></p>\n<p><em>所有因为某人而让自己生气的事情，一定要说出来。不说的话，自己越想就越生气。说出来之后，自己踏实了，对方就会变得不踏实。如果心里因人不爽，最好的办法就是说出<br>来告诉对方。一来自己不会再纠结，二来可以让对方纠结，三来如果对方并不因此纠结，就证明对方压根儿不在意你，那你又何必要为不在意你的人影响自己的心情。有话就说的<br>人不是直肠子，而是不会让自己辛苦的透明人。</em></p>\n<p><em>一个男人的帅来自于他的性格，一个男人的魅力来自于他的自知，一个男人的强大来自于他对自己的苟刻。</em></p>\n<p><em>你的过去我来不及参与，你的未来我奉陪到底。</em></p>\n<p><em>你以为做的一切都是为了身边最亲近的人，后来你才知道最亲近的人最需要你做的只是你在身边。</em></p>\n<p><em>大多数人不会在同一个地方工作一辈子，大多数人也不会在同一个岗位做一辈子，我们所有的累积都是为了给人生最后的那个位置打一个稳定的根基，所以每个获取经验的机会<br>都显得尤为重要。如果所有人工作时间都一样，工作质量拼的就是纯粹的智商和情商，你看了看自己在镜子中的样子——完全没有任何一点男一号的气质啊，不在后天努力，就只<br>能成为这出人生剧中的路人甲乙丙丁了。</em></p>\n"},{"title":"现在才明白","date":"2009-07-13T13:34:22.000Z","_content":"现在才明白，如果只付出爱，但却得不到爱，那还不如不爱。就像现在这样，听着情歌，只觉得好听，而不会有其它想法。好久没有这样的感觉了，真爽！抛弃爱，一个人在路上\n拼搏，真自由，真洒脱！也许只有这样才能抛下感情包袱，全心全意地投入实现梦想的旅途中！\n\n——最早发表在QQ空间\n\n","source":"_posts/now-know.md","raw":"---\ntitle: \"现在才明白\"\ndate: 2009-07-13 21:34:22\ncategories: 那时年少\n---\n现在才明白，如果只付出爱，但却得不到爱，那还不如不爱。就像现在这样，听着情歌，只觉得好听，而不会有其它想法。好久没有这样的感觉了，真爽！抛弃爱，一个人在路上\n拼搏，真自由，真洒脱！也许只有这样才能抛下感情包袱，全心全意地投入实现梦想的旅途中！\n\n——最早发表在QQ空间\n\n","slug":"now-know","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pea00499vnzyy4lifij","content":"<p>现在才明白，如果只付出爱，但却得不到爱，那还不如不爱。就像现在这样，听着情歌，只觉得好听，而不会有其它想法。好久没有这样的感觉了，真爽！抛弃爱，一个人在路上<br>拼搏，真自由，真洒脱！也许只有这样才能抛下感情包袱，全心全意地投入实现梦想的旅途中！</p>\n<p>——最早发表在QQ空间</p>\n","excerpt":"","more":"<p>现在才明白，如果只付出爱，但却得不到爱，那还不如不爱。就像现在这样，听着情歌，只觉得好听，而不会有其它想法。好久没有这样的感觉了，真爽！抛弃爱，一个人在路上<br>拼搏，真自由，真洒脱！也许只有这样才能抛下感情包袱，全心全意地投入实现梦想的旅途中！</p>\n<p>——最早发表在QQ空间</p>\n"},{"title":"OAuth和SSO","date":"2016-06-16T06:08:00.000Z","_content":"参考[理解OAuth 2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n\n目前网络上的数据传输普遍基于HTTP/HTTPS，然而，他们都是无状态的协议，也就是说你本次的请求与下一次的请求是毫无关系的，为了使得我们能够保存用户的状态，于是诞生了cookie，诞生了session，诞生了token，当然，这三者的概念其实都差不多，总体思想就是，在第一次请求过后，给用户生成唯一的一个标识，用户在下一次请求时，携带这个标识，这样服务端就能通过它来判断用户的状态以及合法性。\n\n注意: OAuth确实增加了安全性，但是也增加了应用的复杂性，对于安全要求没那么高的应用，依然可以使用简单的加密算法进行双向加解密认证。\n\n## OAuth\nOAuth主要用于社会化登录，仅仅需要一个系统来存储用户的信息，其他的系统或者第三方系统均可以使用，其他系统不需要维护自己的用户系统，免去了用户注册账号的麻烦，并且用户的密码等重要信息都集中保存在信任方，提高了安全性。\n\n根据阮一峰的博客，客户端获取授权有以下几种认证方式:\n\n1. 授权码模式（authorization code）: 是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n2. 简化模式（implicit）: 不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了\"授权码\"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。\n3. 密码模式（resource owner password credentials）:用户向客户端提供自己的用户名和密码。客户端使用这些信息，向\"服务商提供商\"索要授权。\n4. 客户端模式（client credentials）:指客户端以自己的名义，而不是以用户的名义，向\"服务提供商\"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求\"服务提供商\"提供服务，其实不存在授权问题。\n\n![举个例子](http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-1.png)\n具体流程(感觉不用图也能说清楚呀):\n\n1. 第三方站点获取未授权的Request Token\n2. 获取用户授权的Request Token\n3. 用授权的Request Token换取Access Token\n4. 通过Access Token访问该用户的资源\n\n另外，对于客户端的每一次获取token的请求，都对应着一定的权限，比如微博的第三方认证，通常仅有获取用户基本信息的权限，或者如github的权限就更加详细一点，包括获取基本信息，公开库的访问权限和私有库的访问权限(github的认证请求权限使用的是`X-OAuth-Scopes`作为参数放在请求头部，例如`user`，表示能获取用户的所有信息，而`user.email`则表示只能获取用户的邮箱)。\n\n对于第三方应用，仅需要维护token的值，一般来说，有一种用户基本信息表，多张token存储表对应着多个公开应用。例如接入了微博的第三方可以有这么一张表: (id, user_id, weibo_id, weibo_access_token, weibo_expires)\n\n注: 社会化登录的回调地址(callback_url)与返回地址(next)的区别，回调地址指用户点击第三方登录过后，由资源服务器回调到的地址，而返回地址则是用户欲访问的地址，一般为应用自己的首页，但也有可能是用户直接知道url后想去的地址，这时候可以在请求的时候带上next参数，然后由资源服务器原样返回过去。\n\n最后，几乎所有关于OAuth的文章都会遗漏的一点，那就是资源服务器和认证服务器之间的认证。当访问者获取了token过后，向资源服务器发送请求时，资源服务器肯定会向认证服务器验证这个token的合法性，这也是一个很危险的步骤，在实际项目中，我将token与访问者的appkey一起进行认证，并且作为认证服务器同样要对资源服务器的认证请求一起认证。具体可参考[stackoverflow](http://stackoverflow.com/questions/12296017/how-to-validate-an-oauth-2-0-access-token-for-a-resource-server)\n\n## SSO(单点登录)\n解决的是跨域的用户校验问题，常用于一个公司内部有多个子网站，然后提供统一的登录，一个站点登录过后其他站点不用重复登录。多用于存在多个子系统的公司。\n具体流程:\n1. 用户请求任意一个子站的login页面\n2. 用户输入用户名密码，子站将它传递给认证中心SSO Server\n3. SSO Server验证成功后\n\n虽然SSO和OAuth是不一样的东西，但是我认为SSO只是OAuth的一种简化模式，可以归为OAuth的一类。通常由于子系统的域名不一样，不方便设置各自的cookie，于是这里又有两种解决方案:\n\n1. 使用公共加解密函数进行双向加解密(加密字符串直接放在GET请求中)\n2. 同样使用公共的加解密函数，但是是使用JSOPN解决跨域问题(用户登录子应用时，会带上父应用域名下的cookie访问父应用提供的JSONP接口，父应用验证登录状态，最后返回加密后的用户信息)\n\n例如，本人在一个项目中所使用的认证流程:\n\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-2.png)\n\n## 签名算法的设计\n\n无论是OAuth或是SSO都涉及到认证的过程，一般都不推荐使用可逆的加密算法，而使用单向的加密算法，只要双方对数据进行加密后的结果一致就表示该请求是合法的。参考网上很多的签名算法，最后总结了一下使用最广也是最安全的一种签名算法步骤:\n\n1. 将请求的参数转换为'key=value'形式的字符串，如: \"k1=v1\", \"k2=v2\"\n2. 将格式化后的字符串以字典升序进行排序，然后拼接在一起，如: \"k1=v1k2=v2\"\n3. 在拼接后的字符串的前后加上Secret Key，如：\"keyk1=v1k2=v2key\"\n4. 对拼接后的字符串进行MD5加密得到最终的结果\n\n### Python实现\n\n```python\nimport hashlib\ndef apiSign(parameters, secret):\n\tkeys = list(parameters.keys())\n\tkeys.sort()\n\n\tparameters_str = \"%s%s%s\" % (\n\t\tsecret,\n\t\tstr().join('%s%s' % (key, parameters[key]) for key in keys),\n\t\tsecret)\n\treturn hashlib.md5(parameters_str.encode('utf8')).hexdigest()j\n```\n\n### PHP实现\n\n```php\nfunction apiSign($parameters, $secret)\n{\n\t$str = '';\n\n\tif (gettype($parameters) === 'array') {\n\t\tksort($parameters);\n\t\tforeach ($parameters as $k => $v) {\n\t\t\t$str .= $k.$v;\n\t\t}\n\t} elseif (gettype($parameters) === 'string') {\n\t\t$str = $parameters;\n\t} else {\n\t\treturn false;\n\t}\n\t$str = $secret.$str.$secret;\n\t\n\treturn md5($str);\n}\n```\n\n### Java实现\n\n```java\nprivate static String apiSign(List<NameValuePair> nvps) throws NoSuchAlgorithmException, IOException {\n    List<String> nvs = Lists.newArrayList();\n    for (NameValuePair nvp: nvps) {\n        boolean noSignValue = nvp == null || nvp.getValue() == null ||\n                SIGN_EXCEPTIONS.contains(nvp.getName());\n        if (noSignValue) continue;\n        nvs.add(String.format(\"%s=%s\", nvp.getName(), nvp.getValue()));\n    }\n    Collections.sort(nvs);\n    StringBuilder sb = new StringBuilder();\n    for (String nv: nvs) sb.append(String.format(\"%s\", nv));\n    String encodeSource = String.format(\"%s%s\", sb.toString(), APP_SECRET);\n    return MD5Util.MD5Encode(encodeSource, ENCRYPT_CHARSET).toLowerCase();\n}\n```\n\n","source":"_posts/oauth-and-sso.md","raw":"---\ntitle: \"OAuth和SSO\"\ndate: 2016-06-16 14:08:00\ncategories: 编程之路\n---\n参考[理解OAuth 2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)\n\n目前网络上的数据传输普遍基于HTTP/HTTPS，然而，他们都是无状态的协议，也就是说你本次的请求与下一次的请求是毫无关系的，为了使得我们能够保存用户的状态，于是诞生了cookie，诞生了session，诞生了token，当然，这三者的概念其实都差不多，总体思想就是，在第一次请求过后，给用户生成唯一的一个标识，用户在下一次请求时，携带这个标识，这样服务端就能通过它来判断用户的状态以及合法性。\n\n注意: OAuth确实增加了安全性，但是也增加了应用的复杂性，对于安全要求没那么高的应用，依然可以使用简单的加密算法进行双向加解密认证。\n\n## OAuth\nOAuth主要用于社会化登录，仅仅需要一个系统来存储用户的信息，其他的系统或者第三方系统均可以使用，其他系统不需要维护自己的用户系统，免去了用户注册账号的麻烦，并且用户的密码等重要信息都集中保存在信任方，提高了安全性。\n\n根据阮一峰的博客，客户端获取授权有以下几种认证方式:\n\n1. 授权码模式（authorization code）: 是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与\"服务提供商\"的认证服务器进行互动。\n2. 简化模式（implicit）: 不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了\"授权码\"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。\n3. 密码模式（resource owner password credentials）:用户向客户端提供自己的用户名和密码。客户端使用这些信息，向\"服务商提供商\"索要授权。\n4. 客户端模式（client credentials）:指客户端以自己的名义，而不是以用户的名义，向\"服务提供商\"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求\"服务提供商\"提供服务，其实不存在授权问题。\n\n![举个例子](http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-1.png)\n具体流程(感觉不用图也能说清楚呀):\n\n1. 第三方站点获取未授权的Request Token\n2. 获取用户授权的Request Token\n3. 用授权的Request Token换取Access Token\n4. 通过Access Token访问该用户的资源\n\n另外，对于客户端的每一次获取token的请求，都对应着一定的权限，比如微博的第三方认证，通常仅有获取用户基本信息的权限，或者如github的权限就更加详细一点，包括获取基本信息，公开库的访问权限和私有库的访问权限(github的认证请求权限使用的是`X-OAuth-Scopes`作为参数放在请求头部，例如`user`，表示能获取用户的所有信息，而`user.email`则表示只能获取用户的邮箱)。\n\n对于第三方应用，仅需要维护token的值，一般来说，有一种用户基本信息表，多张token存储表对应着多个公开应用。例如接入了微博的第三方可以有这么一张表: (id, user_id, weibo_id, weibo_access_token, weibo_expires)\n\n注: 社会化登录的回调地址(callback_url)与返回地址(next)的区别，回调地址指用户点击第三方登录过后，由资源服务器回调到的地址，而返回地址则是用户欲访问的地址，一般为应用自己的首页，但也有可能是用户直接知道url后想去的地址，这时候可以在请求的时候带上next参数，然后由资源服务器原样返回过去。\n\n最后，几乎所有关于OAuth的文章都会遗漏的一点，那就是资源服务器和认证服务器之间的认证。当访问者获取了token过后，向资源服务器发送请求时，资源服务器肯定会向认证服务器验证这个token的合法性，这也是一个很危险的步骤，在实际项目中，我将token与访问者的appkey一起进行认证，并且作为认证服务器同样要对资源服务器的认证请求一起认证。具体可参考[stackoverflow](http://stackoverflow.com/questions/12296017/how-to-validate-an-oauth-2-0-access-token-for-a-resource-server)\n\n## SSO(单点登录)\n解决的是跨域的用户校验问题，常用于一个公司内部有多个子网站，然后提供统一的登录，一个站点登录过后其他站点不用重复登录。多用于存在多个子系统的公司。\n具体流程:\n1. 用户请求任意一个子站的login页面\n2. 用户输入用户名密码，子站将它传递给认证中心SSO Server\n3. SSO Server验证成功后\n\n虽然SSO和OAuth是不一样的东西，但是我认为SSO只是OAuth的一种简化模式，可以归为OAuth的一类。通常由于子系统的域名不一样，不方便设置各自的cookie，于是这里又有两种解决方案:\n\n1. 使用公共加解密函数进行双向加解密(加密字符串直接放在GET请求中)\n2. 同样使用公共的加解密函数，但是是使用JSOPN解决跨域问题(用户登录子应用时，会带上父应用域名下的cookie访问父应用提供的JSONP接口，父应用验证登录状态，最后返回加密后的用户信息)\n\n例如，本人在一个项目中所使用的认证流程:\n\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-2.png)\n\n## 签名算法的设计\n\n无论是OAuth或是SSO都涉及到认证的过程，一般都不推荐使用可逆的加密算法，而使用单向的加密算法，只要双方对数据进行加密后的结果一致就表示该请求是合法的。参考网上很多的签名算法，最后总结了一下使用最广也是最安全的一种签名算法步骤:\n\n1. 将请求的参数转换为'key=value'形式的字符串，如: \"k1=v1\", \"k2=v2\"\n2. 将格式化后的字符串以字典升序进行排序，然后拼接在一起，如: \"k1=v1k2=v2\"\n3. 在拼接后的字符串的前后加上Secret Key，如：\"keyk1=v1k2=v2key\"\n4. 对拼接后的字符串进行MD5加密得到最终的结果\n\n### Python实现\n\n```python\nimport hashlib\ndef apiSign(parameters, secret):\n\tkeys = list(parameters.keys())\n\tkeys.sort()\n\n\tparameters_str = \"%s%s%s\" % (\n\t\tsecret,\n\t\tstr().join('%s%s' % (key, parameters[key]) for key in keys),\n\t\tsecret)\n\treturn hashlib.md5(parameters_str.encode('utf8')).hexdigest()j\n```\n\n### PHP实现\n\n```php\nfunction apiSign($parameters, $secret)\n{\n\t$str = '';\n\n\tif (gettype($parameters) === 'array') {\n\t\tksort($parameters);\n\t\tforeach ($parameters as $k => $v) {\n\t\t\t$str .= $k.$v;\n\t\t}\n\t} elseif (gettype($parameters) === 'string') {\n\t\t$str = $parameters;\n\t} else {\n\t\treturn false;\n\t}\n\t$str = $secret.$str.$secret;\n\t\n\treturn md5($str);\n}\n```\n\n### Java实现\n\n```java\nprivate static String apiSign(List<NameValuePair> nvps) throws NoSuchAlgorithmException, IOException {\n    List<String> nvs = Lists.newArrayList();\n    for (NameValuePair nvp: nvps) {\n        boolean noSignValue = nvp == null || nvp.getValue() == null ||\n                SIGN_EXCEPTIONS.contains(nvp.getName());\n        if (noSignValue) continue;\n        nvs.add(String.format(\"%s=%s\", nvp.getName(), nvp.getValue()));\n    }\n    Collections.sort(nvs);\n    StringBuilder sb = new StringBuilder();\n    for (String nv: nvs) sb.append(String.format(\"%s\", nv));\n    String encodeSource = String.format(\"%s%s\", sb.toString(), APP_SECRET);\n    return MD5Util.MD5Encode(encodeSource, ENCRYPT_CHARSET).toLowerCase();\n}\n```\n\n","slug":"oauth-and-sso","published":1,"updated":"2016-08-04T12:55:34.000Z","_id":"cir3l2ped004b9vnzun4rxc6w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"external\">理解OAuth 2.0</a></p>\n<p>目前网络上的数据传输普遍基于HTTP/HTTPS，然而，他们都是无状态的协议，也就是说你本次的请求与下一次的请求是毫无关系的，为了使得我们能够保存用户的状态，于是诞生了cookie，诞生了session，诞生了token，当然，这三者的概念其实都差不多，总体思想就是，在第一次请求过后，给用户生成唯一的一个标识，用户在下一次请求时，携带这个标识，这样服务端就能通过它来判断用户的状态以及合法性。</p>\n<p>注意: OAuth确实增加了安全性，但是也增加了应用的复杂性，对于安全要求没那么高的应用，依然可以使用简单的加密算法进行双向加解密认证。</p>\n<h2 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h2><p>OAuth主要用于社会化登录，仅仅需要一个系统来存储用户的信息，其他的系统或者第三方系统均可以使用，其他系统不需要维护自己的用户系统，免去了用户注册账号的麻烦，并且用户的密码等重要信息都集中保存在信任方，提高了安全性。</p>\n<p>根据阮一峰的博客，客户端获取授权有以下几种认证方式:</p>\n<ol>\n<li>授权码模式（authorization code）: 是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。</li>\n<li>简化模式（implicit）: 不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</li>\n<li>密码模式（resource owner password credentials）:用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。</li>\n<li>客户端模式（client credentials）:指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</li>\n</ol>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-1.png\" alt=\"举个例子\"><br>具体流程(感觉不用图也能说清楚呀):</p>\n<ol>\n<li>第三方站点获取未授权的Request Token</li>\n<li>获取用户授权的Request Token</li>\n<li>用授权的Request Token换取Access Token</li>\n<li>通过Access Token访问该用户的资源</li>\n</ol>\n<p>另外，对于客户端的每一次获取token的请求，都对应着一定的权限，比如微博的第三方认证，通常仅有获取用户基本信息的权限，或者如github的权限就更加详细一点，包括获取基本信息，公开库的访问权限和私有库的访问权限(github的认证请求权限使用的是<code>X-OAuth-Scopes</code>作为参数放在请求头部，例如<code>user</code>，表示能获取用户的所有信息，而<code>user.email</code>则表示只能获取用户的邮箱)。</p>\n<p>对于第三方应用，仅需要维护token的值，一般来说，有一种用户基本信息表，多张token存储表对应着多个公开应用。例如接入了微博的第三方可以有这么一张表: (id, user_id, weibo_id, weibo_access_token, weibo_expires)</p>\n<p>注: 社会化登录的回调地址(callback_url)与返回地址(next)的区别，回调地址指用户点击第三方登录过后，由资源服务器回调到的地址，而返回地址则是用户欲访问的地址，一般为应用自己的首页，但也有可能是用户直接知道url后想去的地址，这时候可以在请求的时候带上next参数，然后由资源服务器原样返回过去。</p>\n<p>最后，几乎所有关于OAuth的文章都会遗漏的一点，那就是资源服务器和认证服务器之间的认证。当访问者获取了token过后，向资源服务器发送请求时，资源服务器肯定会向认证服务器验证这个token的合法性，这也是一个很危险的步骤，在实际项目中，我将token与访问者的appkey一起进行认证，并且作为认证服务器同样要对资源服务器的认证请求一起认证。具体可参考<a href=\"http://stackoverflow.com/questions/12296017/how-to-validate-an-oauth-2-0-access-token-for-a-resource-server\" target=\"_blank\" rel=\"external\">stackoverflow</a></p>\n<h2 id=\"SSO-单点登录\"><a href=\"#SSO-单点登录\" class=\"headerlink\" title=\"SSO(单点登录)\"></a>SSO(单点登录)</h2><p>解决的是跨域的用户校验问题，常用于一个公司内部有多个子网站，然后提供统一的登录，一个站点登录过后其他站点不用重复登录。多用于存在多个子系统的公司。<br>具体流程:</p>\n<ol>\n<li>用户请求任意一个子站的login页面</li>\n<li>用户输入用户名密码，子站将它传递给认证中心SSO Server</li>\n<li>SSO Server验证成功后</li>\n</ol>\n<p>虽然SSO和OAuth是不一样的东西，但是我认为SSO只是OAuth的一种简化模式，可以归为OAuth的一类。通常由于子系统的域名不一样，不方便设置各自的cookie，于是这里又有两种解决方案:</p>\n<ol>\n<li>使用公共加解密函数进行双向加解密(加密字符串直接放在GET请求中)</li>\n<li>同样使用公共的加解密函数，但是是使用JSOPN解决跨域问题(用户登录子应用时，会带上父应用域名下的cookie访问父应用提供的JSONP接口，父应用验证登录状态，最后返回加密后的用户信息)</li>\n</ol>\n<p>例如，本人在一个项目中所使用的认证流程:</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-2.png\" alt=\"图片\"></p>\n<h2 id=\"签名算法的设计\"><a href=\"#签名算法的设计\" class=\"headerlink\" title=\"签名算法的设计\"></a>签名算法的设计</h2><p>无论是OAuth或是SSO都涉及到认证的过程，一般都不推荐使用可逆的加密算法，而使用单向的加密算法，只要双方对数据进行加密后的结果一致就表示该请求是合法的。参考网上很多的签名算法，最后总结了一下使用最广也是最安全的一种签名算法步骤:</p>\n<ol>\n<li>将请求的参数转换为’key=value’形式的字符串，如: “k1=v1”, “k2=v2”</li>\n<li>将格式化后的字符串以字典升序进行排序，然后拼接在一起，如: “k1=v1k2=v2”</li>\n<li>在拼接后的字符串的前后加上Secret Key，如：”keyk1=v1k2=v2key”</li>\n<li>对拼接后的字符串进行MD5加密得到最终的结果</li>\n</ol>\n<h3 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> hashlib</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apiSign</span><span class=\"params\">(parameters, secret)</span>:</span></div><div class=\"line\">\tkeys = list(parameters.keys())</div><div class=\"line\">\tkeys.sort()</div><div class=\"line\"></div><div class=\"line\">\tparameters_str = <span class=\"string\">\"%s%s%s\"</span> % (</div><div class=\"line\">\t\tsecret,</div><div class=\"line\">\t\tstr().join(<span class=\"string\">'%s%s'</span> % (key, parameters[key]) <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> keys),</div><div class=\"line\">\t\tsecret)</div><div class=\"line\">\t<span class=\"keyword\">return</span> hashlib.md5(parameters_str.encode(<span class=\"string\">'utf8'</span>)).hexdigest()j</div></pre></td></tr></table></figure>\n<h3 id=\"PHP实现\"><a href=\"#PHP实现\" class=\"headerlink\" title=\"PHP实现\"></a>PHP实现</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apiSign</span><span class=\"params\">($parameters, $secret)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t$str = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (gettype($parameters) === <span class=\"string\">'array'</span>) &#123;</div><div class=\"line\">\t\tksort($parameters);</div><div class=\"line\">\t\t<span class=\"keyword\">foreach</span> ($parameters <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</div><div class=\"line\">\t\t\t$str .= $k.$v;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">elseif</span> (gettype($parameters) === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">\t\t$str = $parameters;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t$str = $secret.$str.$secret;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> md5($str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Java实现\"><a href=\"#Java实现\" class=\"headerlink\" title=\"Java实现\"></a>Java实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">apiSign</span><span class=\"params\">(List&lt;NameValuePair&gt; nvps)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException </span>&#123;</div><div class=\"line\">    List&lt;String&gt; nvs = Lists.newArrayList();</div><div class=\"line\">    <span class=\"keyword\">for</span> (NameValuePair nvp: nvps) &#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> noSignValue = nvp == <span class=\"keyword\">null</span> || nvp.getValue() == <span class=\"keyword\">null</span> ||</div><div class=\"line\">                SIGN_EXCEPTIONS.contains(nvp.getName());</div><div class=\"line\">        <span class=\"keyword\">if</span> (noSignValue) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        nvs.add(String.format(<span class=\"string\">\"%s=%s\"</span>, nvp.getName(), nvp.getValue()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    Collections.sort(nvs);</div><div class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">for</span> (String nv: nvs) sb.append(String.format(<span class=\"string\">\"%s\"</span>, nv));</div><div class=\"line\">    String encodeSource = String.format(<span class=\"string\">\"%s%s\"</span>, sb.toString(), APP_SECRET);</div><div class=\"line\">    <span class=\"keyword\">return</span> MD5Util.MD5Encode(encodeSource, ENCRYPT_CHARSET).toLowerCase();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>参考<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">理解OAuth 2.0</a></p>\n<p>目前网络上的数据传输普遍基于HTTP/HTTPS，然而，他们都是无状态的协议，也就是说你本次的请求与下一次的请求是毫无关系的，为了使得我们能够保存用户的状态，于是诞生了cookie，诞生了session，诞生了token，当然，这三者的概念其实都差不多，总体思想就是，在第一次请求过后，给用户生成唯一的一个标识，用户在下一次请求时，携带这个标识，这样服务端就能通过它来判断用户的状态以及合法性。</p>\n<p>注意: OAuth确实增加了安全性，但是也增加了应用的复杂性，对于安全要求没那么高的应用，依然可以使用简单的加密算法进行双向加解密认证。</p>\n<h2 id=\"OAuth\"><a href=\"#OAuth\" class=\"headerlink\" title=\"OAuth\"></a>OAuth</h2><p>OAuth主要用于社会化登录，仅仅需要一个系统来存储用户的信息，其他的系统或者第三方系统均可以使用，其他系统不需要维护自己的用户系统，免去了用户注册账号的麻烦，并且用户的密码等重要信息都集中保存在信任方，提高了安全性。</p>\n<p>根据阮一峰的博客，客户端获取授权有以下几种认证方式:</p>\n<ol>\n<li>授权码模式（authorization code）: 是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。</li>\n<li>简化模式（implicit）: 不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</li>\n<li>密码模式（resource owner password credentials）:用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。</li>\n<li>客户端模式（client credentials）:指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</li>\n</ol>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-1.png\" alt=\"举个例子\"><br>具体流程(感觉不用图也能说清楚呀):</p>\n<ol>\n<li>第三方站点获取未授权的Request Token</li>\n<li>获取用户授权的Request Token</li>\n<li>用授权的Request Token换取Access Token</li>\n<li>通过Access Token访问该用户的资源</li>\n</ol>\n<p>另外，对于客户端的每一次获取token的请求，都对应着一定的权限，比如微博的第三方认证，通常仅有获取用户基本信息的权限，或者如github的权限就更加详细一点，包括获取基本信息，公开库的访问权限和私有库的访问权限(github的认证请求权限使用的是<code>X-OAuth-Scopes</code>作为参数放在请求头部，例如<code>user</code>，表示能获取用户的所有信息，而<code>user.email</code>则表示只能获取用户的邮箱)。</p>\n<p>对于第三方应用，仅需要维护token的值，一般来说，有一种用户基本信息表，多张token存储表对应着多个公开应用。例如接入了微博的第三方可以有这么一张表: (id, user_id, weibo_id, weibo_access_token, weibo_expires)</p>\n<p>注: 社会化登录的回调地址(callback_url)与返回地址(next)的区别，回调地址指用户点击第三方登录过后，由资源服务器回调到的地址，而返回地址则是用户欲访问的地址，一般为应用自己的首页，但也有可能是用户直接知道url后想去的地址，这时候可以在请求的时候带上next参数，然后由资源服务器原样返回过去。</p>\n<p>最后，几乎所有关于OAuth的文章都会遗漏的一点，那就是资源服务器和认证服务器之间的认证。当访问者获取了token过后，向资源服务器发送请求时，资源服务器肯定会向认证服务器验证这个token的合法性，这也是一个很危险的步骤，在实际项目中，我将token与访问者的appkey一起进行认证，并且作为认证服务器同样要对资源服务器的认证请求一起认证。具体可参考<a href=\"http://stackoverflow.com/questions/12296017/how-to-validate-an-oauth-2-0-access-token-for-a-resource-server\">stackoverflow</a></p>\n<h2 id=\"SSO-单点登录\"><a href=\"#SSO-单点登录\" class=\"headerlink\" title=\"SSO(单点登录)\"></a>SSO(单点登录)</h2><p>解决的是跨域的用户校验问题，常用于一个公司内部有多个子网站，然后提供统一的登录，一个站点登录过后其他站点不用重复登录。多用于存在多个子系统的公司。<br>具体流程:</p>\n<ol>\n<li>用户请求任意一个子站的login页面</li>\n<li>用户输入用户名密码，子站将它传递给认证中心SSO Server</li>\n<li>SSO Server验证成功后</li>\n</ol>\n<p>虽然SSO和OAuth是不一样的东西，但是我认为SSO只是OAuth的一种简化模式，可以归为OAuth的一类。通常由于子系统的域名不一样，不方便设置各自的cookie，于是这里又有两种解决方案:</p>\n<ol>\n<li>使用公共加解密函数进行双向加解密(加密字符串直接放在GET请求中)</li>\n<li>同样使用公共的加解密函数，但是是使用JSOPN解决跨域问题(用户登录子应用时，会带上父应用域名下的cookie访问父应用提供的JSONP接口，父应用验证登录状态，最后返回加密后的用户信息)</li>\n</ol>\n<p>例如，本人在一个项目中所使用的认证流程:</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-2.png\" alt=\"图片\"></p>\n<h2 id=\"签名算法的设计\"><a href=\"#签名算法的设计\" class=\"headerlink\" title=\"签名算法的设计\"></a>签名算法的设计</h2><p>无论是OAuth或是SSO都涉及到认证的过程，一般都不推荐使用可逆的加密算法，而使用单向的加密算法，只要双方对数据进行加密后的结果一致就表示该请求是合法的。参考网上很多的签名算法，最后总结了一下使用最广也是最安全的一种签名算法步骤:</p>\n<ol>\n<li>将请求的参数转换为’key=value’形式的字符串，如: “k1=v1”, “k2=v2”</li>\n<li>将格式化后的字符串以字典升序进行排序，然后拼接在一起，如: “k1=v1k2=v2”</li>\n<li>在拼接后的字符串的前后加上Secret Key，如：”keyk1=v1k2=v2key”</li>\n<li>对拼接后的字符串进行MD5加密得到最终的结果</li>\n</ol>\n<h3 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> hashlib</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apiSign</span><span class=\"params\">(parameters, secret)</span>:</span></div><div class=\"line\">\tkeys = list(parameters.keys())</div><div class=\"line\">\tkeys.sort()</div><div class=\"line\"></div><div class=\"line\">\tparameters_str = <span class=\"string\">\"%s%s%s\"</span> % (</div><div class=\"line\">\t\tsecret,</div><div class=\"line\">\t\tstr().join(<span class=\"string\">'%s%s'</span> % (key, parameters[key]) <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> keys),</div><div class=\"line\">\t\tsecret)</div><div class=\"line\">\t<span class=\"keyword\">return</span> hashlib.md5(parameters_str.encode(<span class=\"string\">'utf8'</span>)).hexdigest()j</div></pre></td></tr></table></figure>\n<h3 id=\"PHP实现\"><a href=\"#PHP实现\" class=\"headerlink\" title=\"PHP实现\"></a>PHP实现</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">apiSign</span><span class=\"params\">($parameters, $secret)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t$str = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (gettype($parameters) === <span class=\"string\">'array'</span>) &#123;</div><div class=\"line\">\t\tksort($parameters);</div><div class=\"line\">\t\t<span class=\"keyword\">foreach</span> ($parameters <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</div><div class=\"line\">\t\t\t$str .= $k.$v;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; <span class=\"keyword\">elseif</span> (gettype($parameters) === <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">\t\t$str = $parameters;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t$str = $secret.$str.$secret;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> md5($str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Java实现\"><a href=\"#Java实现\" class=\"headerlink\" title=\"Java实现\"></a>Java实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">apiSign</span><span class=\"params\">(List&lt;NameValuePair&gt; nvps)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException </span>&#123;</div><div class=\"line\">    List&lt;String&gt; nvs = Lists.newArrayList();</div><div class=\"line\">    <span class=\"keyword\">for</span> (NameValuePair nvp: nvps) &#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> noSignValue = nvp == <span class=\"keyword\">null</span> || nvp.getValue() == <span class=\"keyword\">null</span> ||</div><div class=\"line\">                SIGN_EXCEPTIONS.contains(nvp.getName());</div><div class=\"line\">        <span class=\"keyword\">if</span> (noSignValue) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        nvs.add(String.format(<span class=\"string\">\"%s=%s\"</span>, nvp.getName(), nvp.getValue()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    Collections.sort(nvs);</div><div class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    <span class=\"keyword\">for</span> (String nv: nvs) sb.append(String.format(<span class=\"string\">\"%s\"</span>, nv));</div><div class=\"line\">    String encodeSource = String.format(<span class=\"string\">\"%s%s\"</span>, sb.toString(), APP_SECRET);</div><div class=\"line\">    <span class=\"keyword\">return</span> MD5Util.MD5Encode(encodeSource, ENCRYPT_CHARSET).toLowerCase();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"[读者]你一无所有，你拥有一切","date":"2014-07-28T14:08:14.000Z","_content":"作者：卢思浩\n\n# 嘴上说说的人生\n\n那年我在离家的时候一个劲地往自己的硬盘里拷《灌篮高手》，我妈一副嗤之以鼻的表情看着我，似乎是在说：“这么大的人了，居然还这么喜欢看动漫。”\n\n我不知道怎么回应她，只好耸耸肩，因为我实在无法对我亲爱的娘亲说明这部动漫对我的意义。\n\n**你知道，有些歌有些东西就是有那种力量。哪怕它在你的手机里藏了好几年，哪怕它早就过了黄金期，哪怕越来越少的人会提起它。你就是知道，当你一听起这首歌，当你一看起那些漫画的时候，你就会想到以前的自己，你就会获得一种莫名的力量。这种力量能够让你感受到自己的节奏，让你以跟世界不同的方式独自运转着，让你能听到自己。**\n\n在记忆里最让你印象深刻的，一定是当年的自己。**因为只有在你嚷嚷着“时间变化太快”的同时，才会发现在那些所谓的“物是人非”里，变化最多的人是你自己。我不知道\n怎么样的人生是最可怕的，但是我知道当你有一天你回头看，当你发现你曾经所说的一切，你曾经信誓旦旦的一切变成说说而已的时候，一定不会好受到哪里去。**\n\n好像人一长大，就会把很多东西给弄丢了。比如那些简单却能让自己充实开心的东西，比如让自己肆意哭和笑的能力，还有那些曾经一起结伴同行的人。最可怕的不是弄丢了这些\n东西，而是你变得心安理得。你开始安慰自己，这就是成长，这就是我们最终会变成的样子。你只是找了个借口继续这样的生活，对以前的自己嗤之以鼻。\n\n只是每当你听起以前的歌的时候，当你看到某个人在他自己的道路坚持下去的时候，你都会像被自己扇了一记耳光。\n\n** 看着别人的努力羡慕一下，然后转身回去过自己的生活的你，又凭什么去过自己想要的人生？**\n\n#  努力，是为了给自己交代\n\n曾经跟好友为了商谈一个项目去北京，对方是一个标准的“80后”，北漂。这是他漂着的第三年，这是他这一年换的第3份工作。他说：“这些年我看过了很多人，有些人不用\n做什么就可以有很好的前景，有些人拼死拼活还是没有办法在这个城市里生存。”\n\n认识一个小姑娘，她曾经差点为了男朋友去国外陪读，可是后来他们偏偏分手了。后来她决定一个人去上海，最艰难的时候连饭都没得吃，就躲在地铁站里，不知道去哪里。\n\n曾经我总是无法理解他们，明明回到爸妈身边工作更好，何必在大城市里摸爬滚打，还得不到一个很好的结果。然而当我有一天面临选择的时候，我终于明白他们做决定时的心情\n。\n\n那个北漂着的哥们说过，**哪怕自己奋斗了一辈子也还是个“屌丝”，但至少这样子自己不会再有借口了，不会在老的时候悔不该当初。**\n\n其实所有漂泊的人，不过是为了有一天能够不再漂泊，能用自己的力量撑起身后的家。你觉得最好的生活状态是什么？我觉得最好的生活状态莫过于，在你年轻时傻傻地为了理想\n坚持过，最后回归平淡用现实的方法让自己生活下去。能实现梦想自然是最好，但没能实现梦想那也没有什么可惜的。成长的第一步就是接受这个世界的多样性，认识到现实的不\n美好，然后还是决定要坚持最初的坚持。\n\n小时候我总嚷嚷着，努力是了改变世界，然而现在的我会觉得，也许我们始终都只是一个小人物，但这并不妨碍我们选择用生活的方式。窃以为，那些在看透了生活的无奈之后，\n还是选择不敷衍、不抱怨、不自卑，依旧热爱生活，依旧努力做好身边事的人，努力便是他们对自己的交代。\n\n就像我曾经跟朋友讨论去哪里工作，最后我们得出结论：其实无论在哪个城市生存都不容易，但无论过成什么样子，都要自己承担得起。\n\n我有勇气做选择，自然要有本事承担后果。\n\n# 只有行动，才能解除你所有的不安\n\n你说你想要当自由撰稿人，可从不见你努力写稿；你说你想考研，可从不见你背单词、做习题；你看到学霸出没便嗤之以鼻，说这样活着没意思；你看到有人旅行，又不屑一顾说\n这只是随大流。我便开始怀疑你挂在嘴边的是不是逃避现实的借口，我开始怀疑你是不是在一次次的逃避和自我安慰中变得惴惴不安。\n\n于是你慢慢屈服于自己的欲望。明明在几年以后能有更好的生活，却一定要在现在买上最新款的包。每个人都想要达到一定的社会地位和物质条件，似乎结果才是最重要的。然而\n，你有没有想过，你所谓的所有努力，是为了满足你的欲望还是真的追求上进？就像那首歌里面唱的：“多少人走着却困在原地，多少人活着却如同死去，多少人爱着却好似分离\n，多少人笑着却满含泪滴。”\n\n终于有一天，你发现你拥有了当初所要的结果，可是在那之后，你却再也不知道要怎么继续了。\n\n**二十岁出头的时候，请把自己摆在二十岁出头的位置上。你没有理由、也没能力去拥有一个40岁的人所拥有的阅历和财富，你除了青春一无所有，但就是你拥有的这为数不多的东西，能决定你是一个什么样的人。**\n\n我不知道这个世界上是不是真的有所谓的安全感，我对安全感的定义只有两个：一是别人给你的能量总有一天会消失，只有自己给自己的安全感最可靠，只有行动才会给你带来安\n全感；二是要记得，不管你是一个什么样的人，你都是你父母的安全感的来源。\n\n所以当你觉得不安的时候，请想一想身后的父母，请想一想自己的初衷，然后抬起头继续坚强地走下去。\n\n唯有行动，才能解除你所有的不安。\n\n# 有梦想，不抱怨\n\n** 时间一天天过去，我们终会因我们的努力或堕落变得丰富或苍白。**\n\n有时间我就每天花两小时看书，没时间就睡前看20分钟。做题一遍做不好我就做两遍，文稿要求我写一万字我就写将近两万字然后删。写出一篇好文是运气，如果一个人一直在\n写的话，那就是靠努力。更多时候，**世界对你的态度取决于你对世界的态度，没什么好抱怨的。**\n\n为什么有人一再受打击还是要继续前行？为什么明明很失望了我们也不愿意放弃一个人和一个理想？\n\n只是因为他想要向前走，只是因为他还不愿意向世界投降。也许没有人跟你完全一样，也没有人可以时时刻刻地陪在你身边，也许我们很久以后回过头来看，会连现在珍惜的人的\n样貌都记不清了。可是我们最大的幸运却是，即便如此，还是有人愿意在有限的时间里用心地陪自己走过这一段，一起为了梦想努力，经历那些孤单流离。\n\n这样一想，人生也还真是不错呢。\n\n当你看书看到头痛、两眼通红的时候，当你按着遥控器不停转台的时候；，你翻着通讯录不知道打给谁的时候，当你独自穿越人群、看着两岸灯火找不到归属感的时候，你就应该\n听起一首歌或看一本书，想想自己最初的坚持和理由，然后抬起头勇敢地走下去。\n\n你现在一无所有，但你却拥有一切，因为你还有梦想。**只要路是自己选的，就不怕走远，生活总会留点什么给对它抱有信心的人的。**\n\n——摘自《读者》2014年第9期\n","source":"_posts/nothing-is-anything.md","raw":"---\ntitle: \"[读者]你一无所有，你拥有一切\"\ndate: 2014-07-28 22:08:14\ncategories: 韦编三绝\n---\n作者：卢思浩\n\n# 嘴上说说的人生\n\n那年我在离家的时候一个劲地往自己的硬盘里拷《灌篮高手》，我妈一副嗤之以鼻的表情看着我，似乎是在说：“这么大的人了，居然还这么喜欢看动漫。”\n\n我不知道怎么回应她，只好耸耸肩，因为我实在无法对我亲爱的娘亲说明这部动漫对我的意义。\n\n**你知道，有些歌有些东西就是有那种力量。哪怕它在你的手机里藏了好几年，哪怕它早就过了黄金期，哪怕越来越少的人会提起它。你就是知道，当你一听起这首歌，当你一看起那些漫画的时候，你就会想到以前的自己，你就会获得一种莫名的力量。这种力量能够让你感受到自己的节奏，让你以跟世界不同的方式独自运转着，让你能听到自己。**\n\n在记忆里最让你印象深刻的，一定是当年的自己。**因为只有在你嚷嚷着“时间变化太快”的同时，才会发现在那些所谓的“物是人非”里，变化最多的人是你自己。我不知道\n怎么样的人生是最可怕的，但是我知道当你有一天你回头看，当你发现你曾经所说的一切，你曾经信誓旦旦的一切变成说说而已的时候，一定不会好受到哪里去。**\n\n好像人一长大，就会把很多东西给弄丢了。比如那些简单却能让自己充实开心的东西，比如让自己肆意哭和笑的能力，还有那些曾经一起结伴同行的人。最可怕的不是弄丢了这些\n东西，而是你变得心安理得。你开始安慰自己，这就是成长，这就是我们最终会变成的样子。你只是找了个借口继续这样的生活，对以前的自己嗤之以鼻。\n\n只是每当你听起以前的歌的时候，当你看到某个人在他自己的道路坚持下去的时候，你都会像被自己扇了一记耳光。\n\n** 看着别人的努力羡慕一下，然后转身回去过自己的生活的你，又凭什么去过自己想要的人生？**\n\n#  努力，是为了给自己交代\n\n曾经跟好友为了商谈一个项目去北京，对方是一个标准的“80后”，北漂。这是他漂着的第三年，这是他这一年换的第3份工作。他说：“这些年我看过了很多人，有些人不用\n做什么就可以有很好的前景，有些人拼死拼活还是没有办法在这个城市里生存。”\n\n认识一个小姑娘，她曾经差点为了男朋友去国外陪读，可是后来他们偏偏分手了。后来她决定一个人去上海，最艰难的时候连饭都没得吃，就躲在地铁站里，不知道去哪里。\n\n曾经我总是无法理解他们，明明回到爸妈身边工作更好，何必在大城市里摸爬滚打，还得不到一个很好的结果。然而当我有一天面临选择的时候，我终于明白他们做决定时的心情\n。\n\n那个北漂着的哥们说过，**哪怕自己奋斗了一辈子也还是个“屌丝”，但至少这样子自己不会再有借口了，不会在老的时候悔不该当初。**\n\n其实所有漂泊的人，不过是为了有一天能够不再漂泊，能用自己的力量撑起身后的家。你觉得最好的生活状态是什么？我觉得最好的生活状态莫过于，在你年轻时傻傻地为了理想\n坚持过，最后回归平淡用现实的方法让自己生活下去。能实现梦想自然是最好，但没能实现梦想那也没有什么可惜的。成长的第一步就是接受这个世界的多样性，认识到现实的不\n美好，然后还是决定要坚持最初的坚持。\n\n小时候我总嚷嚷着，努力是了改变世界，然而现在的我会觉得，也许我们始终都只是一个小人物，但这并不妨碍我们选择用生活的方式。窃以为，那些在看透了生活的无奈之后，\n还是选择不敷衍、不抱怨、不自卑，依旧热爱生活，依旧努力做好身边事的人，努力便是他们对自己的交代。\n\n就像我曾经跟朋友讨论去哪里工作，最后我们得出结论：其实无论在哪个城市生存都不容易，但无论过成什么样子，都要自己承担得起。\n\n我有勇气做选择，自然要有本事承担后果。\n\n# 只有行动，才能解除你所有的不安\n\n你说你想要当自由撰稿人，可从不见你努力写稿；你说你想考研，可从不见你背单词、做习题；你看到学霸出没便嗤之以鼻，说这样活着没意思；你看到有人旅行，又不屑一顾说\n这只是随大流。我便开始怀疑你挂在嘴边的是不是逃避现实的借口，我开始怀疑你是不是在一次次的逃避和自我安慰中变得惴惴不安。\n\n于是你慢慢屈服于自己的欲望。明明在几年以后能有更好的生活，却一定要在现在买上最新款的包。每个人都想要达到一定的社会地位和物质条件，似乎结果才是最重要的。然而\n，你有没有想过，你所谓的所有努力，是为了满足你的欲望还是真的追求上进？就像那首歌里面唱的：“多少人走着却困在原地，多少人活着却如同死去，多少人爱着却好似分离\n，多少人笑着却满含泪滴。”\n\n终于有一天，你发现你拥有了当初所要的结果，可是在那之后，你却再也不知道要怎么继续了。\n\n**二十岁出头的时候，请把自己摆在二十岁出头的位置上。你没有理由、也没能力去拥有一个40岁的人所拥有的阅历和财富，你除了青春一无所有，但就是你拥有的这为数不多的东西，能决定你是一个什么样的人。**\n\n我不知道这个世界上是不是真的有所谓的安全感，我对安全感的定义只有两个：一是别人给你的能量总有一天会消失，只有自己给自己的安全感最可靠，只有行动才会给你带来安\n全感；二是要记得，不管你是一个什么样的人，你都是你父母的安全感的来源。\n\n所以当你觉得不安的时候，请想一想身后的父母，请想一想自己的初衷，然后抬起头继续坚强地走下去。\n\n唯有行动，才能解除你所有的不安。\n\n# 有梦想，不抱怨\n\n** 时间一天天过去，我们终会因我们的努力或堕落变得丰富或苍白。**\n\n有时间我就每天花两小时看书，没时间就睡前看20分钟。做题一遍做不好我就做两遍，文稿要求我写一万字我就写将近两万字然后删。写出一篇好文是运气，如果一个人一直在\n写的话，那就是靠努力。更多时候，**世界对你的态度取决于你对世界的态度，没什么好抱怨的。**\n\n为什么有人一再受打击还是要继续前行？为什么明明很失望了我们也不愿意放弃一个人和一个理想？\n\n只是因为他想要向前走，只是因为他还不愿意向世界投降。也许没有人跟你完全一样，也没有人可以时时刻刻地陪在你身边，也许我们很久以后回过头来看，会连现在珍惜的人的\n样貌都记不清了。可是我们最大的幸运却是，即便如此，还是有人愿意在有限的时间里用心地陪自己走过这一段，一起为了梦想努力，经历那些孤单流离。\n\n这样一想，人生也还真是不错呢。\n\n当你看书看到头痛、两眼通红的时候，当你按着遥控器不停转台的时候；，你翻着通讯录不知道打给谁的时候，当你独自穿越人群、看着两岸灯火找不到归属感的时候，你就应该\n听起一首歌或看一本书，想想自己最初的坚持和理由，然后抬起头勇敢地走下去。\n\n你现在一无所有，但你却拥有一切，因为你还有梦想。**只要路是自己选的，就不怕走远，生活总会留点什么给对它抱有信心的人的。**\n\n——摘自《读者》2014年第9期\n","slug":"nothing-is-anything","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pem004d9vnzb4absjdy","content":"<p>作者：卢思浩</p>\n<h1 id=\"嘴上说说的人生\"><a href=\"#嘴上说说的人生\" class=\"headerlink\" title=\"嘴上说说的人生\"></a>嘴上说说的人生</h1><p>那年我在离家的时候一个劲地往自己的硬盘里拷《灌篮高手》，我妈一副嗤之以鼻的表情看着我，似乎是在说：“这么大的人了，居然还这么喜欢看动漫。”</p>\n<p>我不知道怎么回应她，只好耸耸肩，因为我实在无法对我亲爱的娘亲说明这部动漫对我的意义。</p>\n<p><strong>你知道，有些歌有些东西就是有那种力量。哪怕它在你的手机里藏了好几年，哪怕它早就过了黄金期，哪怕越来越少的人会提起它。你就是知道，当你一听起这首歌，当你一看起那些漫画的时候，你就会想到以前的自己，你就会获得一种莫名的力量。这种力量能够让你感受到自己的节奏，让你以跟世界不同的方式独自运转着，让你能听到自己。</strong></p>\n<p>在记忆里最让你印象深刻的，一定是当年的自己。<strong>因为只有在你嚷嚷着“时间变化太快”的同时，才会发现在那些所谓的“物是人非”里，变化最多的人是你自己。我不知道<br>怎么样的人生是最可怕的，但是我知道当你有一天你回头看，当你发现你曾经所说的一切，你曾经信誓旦旦的一切变成说说而已的时候，一定不会好受到哪里去。</strong></p>\n<p>好像人一长大，就会把很多东西给弄丢了。比如那些简单却能让自己充实开心的东西，比如让自己肆意哭和笑的能力，还有那些曾经一起结伴同行的人。最可怕的不是弄丢了这些<br>东西，而是你变得心安理得。你开始安慰自己，这就是成长，这就是我们最终会变成的样子。你只是找了个借口继续这样的生活，对以前的自己嗤之以鼻。</p>\n<p>只是每当你听起以前的歌的时候，当你看到某个人在他自己的道路坚持下去的时候，你都会像被自己扇了一记耳光。</p>\n<p><strong> 看着别人的努力羡慕一下，然后转身回去过自己的生活的你，又凭什么去过自己想要的人生？</strong></p>\n<h1 id=\"努力，是为了给自己交代\"><a href=\"#努力，是为了给自己交代\" class=\"headerlink\" title=\"努力，是为了给自己交代\"></a>努力，是为了给自己交代</h1><p>曾经跟好友为了商谈一个项目去北京，对方是一个标准的“80后”，北漂。这是他漂着的第三年，这是他这一年换的第3份工作。他说：“这些年我看过了很多人，有些人不用<br>做什么就可以有很好的前景，有些人拼死拼活还是没有办法在这个城市里生存。”</p>\n<p>认识一个小姑娘，她曾经差点为了男朋友去国外陪读，可是后来他们偏偏分手了。后来她决定一个人去上海，最艰难的时候连饭都没得吃，就躲在地铁站里，不知道去哪里。</p>\n<p>曾经我总是无法理解他们，明明回到爸妈身边工作更好，何必在大城市里摸爬滚打，还得不到一个很好的结果。然而当我有一天面临选择的时候，我终于明白他们做决定时的心情<br>。</p>\n<p>那个北漂着的哥们说过，<strong>哪怕自己奋斗了一辈子也还是个“屌丝”，但至少这样子自己不会再有借口了，不会在老的时候悔不该当初。</strong></p>\n<p>其实所有漂泊的人，不过是为了有一天能够不再漂泊，能用自己的力量撑起身后的家。你觉得最好的生活状态是什么？我觉得最好的生活状态莫过于，在你年轻时傻傻地为了理想<br>坚持过，最后回归平淡用现实的方法让自己生活下去。能实现梦想自然是最好，但没能实现梦想那也没有什么可惜的。成长的第一步就是接受这个世界的多样性，认识到现实的不<br>美好，然后还是决定要坚持最初的坚持。</p>\n<p>小时候我总嚷嚷着，努力是了改变世界，然而现在的我会觉得，也许我们始终都只是一个小人物，但这并不妨碍我们选择用生活的方式。窃以为，那些在看透了生活的无奈之后，<br>还是选择不敷衍、不抱怨、不自卑，依旧热爱生活，依旧努力做好身边事的人，努力便是他们对自己的交代。</p>\n<p>就像我曾经跟朋友讨论去哪里工作，最后我们得出结论：其实无论在哪个城市生存都不容易，但无论过成什么样子，都要自己承担得起。</p>\n<p>我有勇气做选择，自然要有本事承担后果。</p>\n<h1 id=\"只有行动，才能解除你所有的不安\"><a href=\"#只有行动，才能解除你所有的不安\" class=\"headerlink\" title=\"只有行动，才能解除你所有的不安\"></a>只有行动，才能解除你所有的不安</h1><p>你说你想要当自由撰稿人，可从不见你努力写稿；你说你想考研，可从不见你背单词、做习题；你看到学霸出没便嗤之以鼻，说这样活着没意思；你看到有人旅行，又不屑一顾说<br>这只是随大流。我便开始怀疑你挂在嘴边的是不是逃避现实的借口，我开始怀疑你是不是在一次次的逃避和自我安慰中变得惴惴不安。</p>\n<p>于是你慢慢屈服于自己的欲望。明明在几年以后能有更好的生活，却一定要在现在买上最新款的包。每个人都想要达到一定的社会地位和物质条件，似乎结果才是最重要的。然而<br>，你有没有想过，你所谓的所有努力，是为了满足你的欲望还是真的追求上进？就像那首歌里面唱的：“多少人走着却困在原地，多少人活着却如同死去，多少人爱着却好似分离<br>，多少人笑着却满含泪滴。”</p>\n<p>终于有一天，你发现你拥有了当初所要的结果，可是在那之后，你却再也不知道要怎么继续了。</p>\n<p><strong>二十岁出头的时候，请把自己摆在二十岁出头的位置上。你没有理由、也没能力去拥有一个40岁的人所拥有的阅历和财富，你除了青春一无所有，但就是你拥有的这为数不多的东西，能决定你是一个什么样的人。</strong></p>\n<p>我不知道这个世界上是不是真的有所谓的安全感，我对安全感的定义只有两个：一是别人给你的能量总有一天会消失，只有自己给自己的安全感最可靠，只有行动才会给你带来安<br>全感；二是要记得，不管你是一个什么样的人，你都是你父母的安全感的来源。</p>\n<p>所以当你觉得不安的时候，请想一想身后的父母，请想一想自己的初衷，然后抬起头继续坚强地走下去。</p>\n<p>唯有行动，才能解除你所有的不安。</p>\n<h1 id=\"有梦想，不抱怨\"><a href=\"#有梦想，不抱怨\" class=\"headerlink\" title=\"有梦想，不抱怨\"></a>有梦想，不抱怨</h1><p><strong> 时间一天天过去，我们终会因我们的努力或堕落变得丰富或苍白。</strong></p>\n<p>有时间我就每天花两小时看书，没时间就睡前看20分钟。做题一遍做不好我就做两遍，文稿要求我写一万字我就写将近两万字然后删。写出一篇好文是运气，如果一个人一直在<br>写的话，那就是靠努力。更多时候，<strong>世界对你的态度取决于你对世界的态度，没什么好抱怨的。</strong></p>\n<p>为什么有人一再受打击还是要继续前行？为什么明明很失望了我们也不愿意放弃一个人和一个理想？</p>\n<p>只是因为他想要向前走，只是因为他还不愿意向世界投降。也许没有人跟你完全一样，也没有人可以时时刻刻地陪在你身边，也许我们很久以后回过头来看，会连现在珍惜的人的<br>样貌都记不清了。可是我们最大的幸运却是，即便如此，还是有人愿意在有限的时间里用心地陪自己走过这一段，一起为了梦想努力，经历那些孤单流离。</p>\n<p>这样一想，人生也还真是不错呢。</p>\n<p>当你看书看到头痛、两眼通红的时候，当你按着遥控器不停转台的时候；，你翻着通讯录不知道打给谁的时候，当你独自穿越人群、看着两岸灯火找不到归属感的时候，你就应该<br>听起一首歌或看一本书，想想自己最初的坚持和理由，然后抬起头勇敢地走下去。</p>\n<p>你现在一无所有，但你却拥有一切，因为你还有梦想。<strong>只要路是自己选的，就不怕走远，生活总会留点什么给对它抱有信心的人的。</strong></p>\n<p>——摘自《读者》2014年第9期</p>\n","excerpt":"","more":"<p>作者：卢思浩</p>\n<h1 id=\"嘴上说说的人生\"><a href=\"#嘴上说说的人生\" class=\"headerlink\" title=\"嘴上说说的人生\"></a>嘴上说说的人生</h1><p>那年我在离家的时候一个劲地往自己的硬盘里拷《灌篮高手》，我妈一副嗤之以鼻的表情看着我，似乎是在说：“这么大的人了，居然还这么喜欢看动漫。”</p>\n<p>我不知道怎么回应她，只好耸耸肩，因为我实在无法对我亲爱的娘亲说明这部动漫对我的意义。</p>\n<p><strong>你知道，有些歌有些东西就是有那种力量。哪怕它在你的手机里藏了好几年，哪怕它早就过了黄金期，哪怕越来越少的人会提起它。你就是知道，当你一听起这首歌，当你一看起那些漫画的时候，你就会想到以前的自己，你就会获得一种莫名的力量。这种力量能够让你感受到自己的节奏，让你以跟世界不同的方式独自运转着，让你能听到自己。</strong></p>\n<p>在记忆里最让你印象深刻的，一定是当年的自己。<strong>因为只有在你嚷嚷着“时间变化太快”的同时，才会发现在那些所谓的“物是人非”里，变化最多的人是你自己。我不知道<br>怎么样的人生是最可怕的，但是我知道当你有一天你回头看，当你发现你曾经所说的一切，你曾经信誓旦旦的一切变成说说而已的时候，一定不会好受到哪里去。</strong></p>\n<p>好像人一长大，就会把很多东西给弄丢了。比如那些简单却能让自己充实开心的东西，比如让自己肆意哭和笑的能力，还有那些曾经一起结伴同行的人。最可怕的不是弄丢了这些<br>东西，而是你变得心安理得。你开始安慰自己，这就是成长，这就是我们最终会变成的样子。你只是找了个借口继续这样的生活，对以前的自己嗤之以鼻。</p>\n<p>只是每当你听起以前的歌的时候，当你看到某个人在他自己的道路坚持下去的时候，你都会像被自己扇了一记耳光。</p>\n<p><strong> 看着别人的努力羡慕一下，然后转身回去过自己的生活的你，又凭什么去过自己想要的人生？</strong></p>\n<h1 id=\"努力，是为了给自己交代\"><a href=\"#努力，是为了给自己交代\" class=\"headerlink\" title=\"努力，是为了给自己交代\"></a>努力，是为了给自己交代</h1><p>曾经跟好友为了商谈一个项目去北京，对方是一个标准的“80后”，北漂。这是他漂着的第三年，这是他这一年换的第3份工作。他说：“这些年我看过了很多人，有些人不用<br>做什么就可以有很好的前景，有些人拼死拼活还是没有办法在这个城市里生存。”</p>\n<p>认识一个小姑娘，她曾经差点为了男朋友去国外陪读，可是后来他们偏偏分手了。后来她决定一个人去上海，最艰难的时候连饭都没得吃，就躲在地铁站里，不知道去哪里。</p>\n<p>曾经我总是无法理解他们，明明回到爸妈身边工作更好，何必在大城市里摸爬滚打，还得不到一个很好的结果。然而当我有一天面临选择的时候，我终于明白他们做决定时的心情<br>。</p>\n<p>那个北漂着的哥们说过，<strong>哪怕自己奋斗了一辈子也还是个“屌丝”，但至少这样子自己不会再有借口了，不会在老的时候悔不该当初。</strong></p>\n<p>其实所有漂泊的人，不过是为了有一天能够不再漂泊，能用自己的力量撑起身后的家。你觉得最好的生活状态是什么？我觉得最好的生活状态莫过于，在你年轻时傻傻地为了理想<br>坚持过，最后回归平淡用现实的方法让自己生活下去。能实现梦想自然是最好，但没能实现梦想那也没有什么可惜的。成长的第一步就是接受这个世界的多样性，认识到现实的不<br>美好，然后还是决定要坚持最初的坚持。</p>\n<p>小时候我总嚷嚷着，努力是了改变世界，然而现在的我会觉得，也许我们始终都只是一个小人物，但这并不妨碍我们选择用生活的方式。窃以为，那些在看透了生活的无奈之后，<br>还是选择不敷衍、不抱怨、不自卑，依旧热爱生活，依旧努力做好身边事的人，努力便是他们对自己的交代。</p>\n<p>就像我曾经跟朋友讨论去哪里工作，最后我们得出结论：其实无论在哪个城市生存都不容易，但无论过成什么样子，都要自己承担得起。</p>\n<p>我有勇气做选择，自然要有本事承担后果。</p>\n<h1 id=\"只有行动，才能解除你所有的不安\"><a href=\"#只有行动，才能解除你所有的不安\" class=\"headerlink\" title=\"只有行动，才能解除你所有的不安\"></a>只有行动，才能解除你所有的不安</h1><p>你说你想要当自由撰稿人，可从不见你努力写稿；你说你想考研，可从不见你背单词、做习题；你看到学霸出没便嗤之以鼻，说这样活着没意思；你看到有人旅行，又不屑一顾说<br>这只是随大流。我便开始怀疑你挂在嘴边的是不是逃避现实的借口，我开始怀疑你是不是在一次次的逃避和自我安慰中变得惴惴不安。</p>\n<p>于是你慢慢屈服于自己的欲望。明明在几年以后能有更好的生活，却一定要在现在买上最新款的包。每个人都想要达到一定的社会地位和物质条件，似乎结果才是最重要的。然而<br>，你有没有想过，你所谓的所有努力，是为了满足你的欲望还是真的追求上进？就像那首歌里面唱的：“多少人走着却困在原地，多少人活着却如同死去，多少人爱着却好似分离<br>，多少人笑着却满含泪滴。”</p>\n<p>终于有一天，你发现你拥有了当初所要的结果，可是在那之后，你却再也不知道要怎么继续了。</p>\n<p><strong>二十岁出头的时候，请把自己摆在二十岁出头的位置上。你没有理由、也没能力去拥有一个40岁的人所拥有的阅历和财富，你除了青春一无所有，但就是你拥有的这为数不多的东西，能决定你是一个什么样的人。</strong></p>\n<p>我不知道这个世界上是不是真的有所谓的安全感，我对安全感的定义只有两个：一是别人给你的能量总有一天会消失，只有自己给自己的安全感最可靠，只有行动才会给你带来安<br>全感；二是要记得，不管你是一个什么样的人，你都是你父母的安全感的来源。</p>\n<p>所以当你觉得不安的时候，请想一想身后的父母，请想一想自己的初衷，然后抬起头继续坚强地走下去。</p>\n<p>唯有行动，才能解除你所有的不安。</p>\n<h1 id=\"有梦想，不抱怨\"><a href=\"#有梦想，不抱怨\" class=\"headerlink\" title=\"有梦想，不抱怨\"></a>有梦想，不抱怨</h1><p><strong> 时间一天天过去，我们终会因我们的努力或堕落变得丰富或苍白。</strong></p>\n<p>有时间我就每天花两小时看书，没时间就睡前看20分钟。做题一遍做不好我就做两遍，文稿要求我写一万字我就写将近两万字然后删。写出一篇好文是运气，如果一个人一直在<br>写的话，那就是靠努力。更多时候，<strong>世界对你的态度取决于你对世界的态度，没什么好抱怨的。</strong></p>\n<p>为什么有人一再受打击还是要继续前行？为什么明明很失望了我们也不愿意放弃一个人和一个理想？</p>\n<p>只是因为他想要向前走，只是因为他还不愿意向世界投降。也许没有人跟你完全一样，也没有人可以时时刻刻地陪在你身边，也许我们很久以后回过头来看，会连现在珍惜的人的<br>样貌都记不清了。可是我们最大的幸运却是，即便如此，还是有人愿意在有限的时间里用心地陪自己走过这一段，一起为了梦想努力，经历那些孤单流离。</p>\n<p>这样一想，人生也还真是不错呢。</p>\n<p>当你看书看到头痛、两眼通红的时候，当你按着遥控器不停转台的时候；，你翻着通讯录不知道打给谁的时候，当你独自穿越人群、看着两岸灯火找不到归属感的时候，你就应该<br>听起一首歌或看一本书，想想自己最初的坚持和理由，然后抬起头勇敢地走下去。</p>\n<p>你现在一无所有，但你却拥有一切，因为你还有梦想。<strong>只要路是自己选的，就不怕走远，生活总会留点什么给对它抱有信心的人的。</strong></p>\n<p>——摘自《读者》2014年第9期</p>\n"},{"title":"[转]我们这些程序员","date":"2014-02-23T04:11:52.000Z","_content":"封面图片来自：Pixabay  \n\n查看原文：<http://flywindmouse.diandian.com/post/2012-04-25/40046530641>\n\n小小的时候，玩着游戏机，偶尔想着这游戏怎么做出来的~~~\n\n第一次摸电脑的时候，总感觉这东西不可思议\n\n高考的时候，有一种莫名其妙的专业叫做：软件开发！貌似IT是一个神圣的行业！\n\n不知不觉中，你在高考志愿表上写下了：“软件开发”四个鲜红的大字\n\n你应该还记得第一次对着教材抄写了那个叫”hello world”的玩意儿\n\n你应该还记得第一次弄了个1加到100的计算器，运行成功后，\n\n相信你会在食堂的饭碗里好不心疼的多加一份回锅肉，在弄一瓶可口可乐~~\n\n你还会非常自信的看着对面走过来的MM\n\n后来啊后来\n\n电脑烂了，你得学着重装系统，什么GHOST、PQ\n\n你也掌握了把电脑拆下来在装回去的本领\n\n偶尔还给那些美女老乡设置下路由器，装个杀毒软件：他们都夸你能干~~~~~~~\n\n就在你略感得意的时候\n\n你也常常因为少了一个分号而调试一个通宵\n\n因为一个函数不会而不停的baidu 谷歌，这时候\n\n你会为看到一篇经典的技术文章而欣喜若狂\n\n因为”0 erros,0 warns”而激动不已\n\n另外\n\n你肯定还学着那个号称黑客的灰鸽子，IPC入侵…………心里总想象着黑客的那种神秘和伟大\n\n偶尔也享受到捉弄别人的得意\n\n但是，渐渐的你发现，你的哪一些黑客工具没用了\n\n就是这样：\n\n在别人旅游的时候，我们在coding\n\n在别人KTV的时候，我们也在coding\n\n在别人gaming的时候，我们还在coding\n\n终于有一天\n\n你做出了一个网站，你写出来一个学生管理系统\n\n你也偶尔会在论坛上争论C++和JAVA那个好~~~\n\n无意中看见了软件公司的招聘信息，发现他们的要求，貌似我也能达到~~\n\n然后\n\n毕业了\n\n找个软件公司\n\n事实上，\n\n你的idea没用了，只能够coding了~~\n\n“0 erros,0 warns”的时候，也没有那么激动了\n\n相比之下\n\n你多了许多淡定\n\n你会考虑工资什么时候涨，今晚不会加班吧~~,工作的电脑什么时候连上网\n\n风花雪月的日子感觉不到\n\n空调呼呼的吹着\n\n从来不会感觉到春夏秋冬\n\n我们的生活就是：上班对着大电脑，下班对着小电脑\n\n在空荡荡的出租屋里，一个人面对着花白的地板砖，傻傻发呆\n\n外面的广场很热闹，却不属于我们这些程序员\n\n我们尝试过在婚介网上找个朋友，却发现丫的发信息也要钱\n\n只能在QQ上查找那些同一个城市的聊友\n\n或许，找个不大不小的游戏玩玩，在游戏里面，低调的做个牛虻\n","source":"_posts/our-programmer.md","raw":"---\ntitle: \"[转]我们这些程序员\"\ndate: 2014-02-23 12:11:52\ncategories: 边走边想\n---\n封面图片来自：Pixabay  \n\n查看原文：<http://flywindmouse.diandian.com/post/2012-04-25/40046530641>\n\n小小的时候，玩着游戏机，偶尔想着这游戏怎么做出来的~~~\n\n第一次摸电脑的时候，总感觉这东西不可思议\n\n高考的时候，有一种莫名其妙的专业叫做：软件开发！貌似IT是一个神圣的行业！\n\n不知不觉中，你在高考志愿表上写下了：“软件开发”四个鲜红的大字\n\n你应该还记得第一次对着教材抄写了那个叫”hello world”的玩意儿\n\n你应该还记得第一次弄了个1加到100的计算器，运行成功后，\n\n相信你会在食堂的饭碗里好不心疼的多加一份回锅肉，在弄一瓶可口可乐~~\n\n你还会非常自信的看着对面走过来的MM\n\n后来啊后来\n\n电脑烂了，你得学着重装系统，什么GHOST、PQ\n\n你也掌握了把电脑拆下来在装回去的本领\n\n偶尔还给那些美女老乡设置下路由器，装个杀毒软件：他们都夸你能干~~~~~~~\n\n就在你略感得意的时候\n\n你也常常因为少了一个分号而调试一个通宵\n\n因为一个函数不会而不停的baidu 谷歌，这时候\n\n你会为看到一篇经典的技术文章而欣喜若狂\n\n因为”0 erros,0 warns”而激动不已\n\n另外\n\n你肯定还学着那个号称黑客的灰鸽子，IPC入侵…………心里总想象着黑客的那种神秘和伟大\n\n偶尔也享受到捉弄别人的得意\n\n但是，渐渐的你发现，你的哪一些黑客工具没用了\n\n就是这样：\n\n在别人旅游的时候，我们在coding\n\n在别人KTV的时候，我们也在coding\n\n在别人gaming的时候，我们还在coding\n\n终于有一天\n\n你做出了一个网站，你写出来一个学生管理系统\n\n你也偶尔会在论坛上争论C++和JAVA那个好~~~\n\n无意中看见了软件公司的招聘信息，发现他们的要求，貌似我也能达到~~\n\n然后\n\n毕业了\n\n找个软件公司\n\n事实上，\n\n你的idea没用了，只能够coding了~~\n\n“0 erros,0 warns”的时候，也没有那么激动了\n\n相比之下\n\n你多了许多淡定\n\n你会考虑工资什么时候涨，今晚不会加班吧~~,工作的电脑什么时候连上网\n\n风花雪月的日子感觉不到\n\n空调呼呼的吹着\n\n从来不会感觉到春夏秋冬\n\n我们的生活就是：上班对着大电脑，下班对着小电脑\n\n在空荡荡的出租屋里，一个人面对着花白的地板砖，傻傻发呆\n\n外面的广场很热闹，却不属于我们这些程序员\n\n我们尝试过在婚介网上找个朋友，却发现丫的发信息也要钱\n\n只能在QQ上查找那些同一个城市的聊友\n\n或许，找个不大不小的游戏玩玩，在游戏里面，低调的做个牛虻\n","slug":"our-programmer","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pf6004f9vnz80n40hpy","content":"<p>封面图片来自：Pixabay  </p>\n<p>查看原文：<a href=\"http://flywindmouse.diandian.com/post/2012-04-25/40046530641\" target=\"_blank\" rel=\"external\">http://flywindmouse.diandian.com/post/2012-04-25/40046530641</a></p>\n<p>小小的时候，玩着游戏机，偶尔想着这游戏怎么做出来的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">第一次摸电脑的时候，总感觉这东西不可思议</div><div class=\"line\"></div><div class=\"line\">高考的时候，有一种莫名其妙的专业叫做：软件开发！貌似IT是一个神圣的行业！</div><div class=\"line\"></div><div class=\"line\">不知不觉中，你在高考志愿表上写下了：“软件开发”四个鲜红的大字</div><div class=\"line\"></div><div class=\"line\">你应该还记得第一次对着教材抄写了那个叫”hello world”的玩意儿</div><div class=\"line\"></div><div class=\"line\">你应该还记得第一次弄了个1加到100的计算器，运行成功后，</div><div class=\"line\"></div><div class=\"line\">相信你会在食堂的饭碗里好不心疼的多加一份回锅肉，在弄一瓶可口可乐~~</div><div class=\"line\"></div><div class=\"line\">你还会非常自信的看着对面走过来的MM</div><div class=\"line\"></div><div class=\"line\">后来啊后来</div><div class=\"line\"></div><div class=\"line\">电脑烂了，你得学着重装系统，什么GHOST、PQ</div><div class=\"line\"></div><div class=\"line\">你也掌握了把电脑拆下来在装回去的本领</div><div class=\"line\"></div><div class=\"line\">偶尔还给那些美女老乡设置下路由器，装个杀毒软件：他们都夸你能干~~~~</div></pre></td></tr></table></figure></p>\n<p>就在你略感得意的时候</p>\n<p>你也常常因为少了一个分号而调试一个通宵</p>\n<p>因为一个函数不会而不停的baidu 谷歌，这时候</p>\n<p>你会为看到一篇经典的技术文章而欣喜若狂</p>\n<p>因为”0 erros,0 warns”而激动不已</p>\n<p>另外</p>\n<p>你肯定还学着那个号称黑客的灰鸽子，IPC入侵…………心里总想象着黑客的那种神秘和伟大</p>\n<p>偶尔也享受到捉弄别人的得意</p>\n<p>但是，渐渐的你发现，你的哪一些黑客工具没用了</p>\n<p>就是这样：</p>\n<p>在别人旅游的时候，我们在coding</p>\n<p>在别人KTV的时候，我们也在coding</p>\n<p>在别人gaming的时候，我们还在coding</p>\n<p>终于有一天</p>\n<p>你做出了一个网站，你写出来一个学生管理系统</p>\n<p>你也偶尔会在论坛上争论C++和JAVA那个好~~~</p>\n<p>无意中看见了软件公司的招聘信息，发现他们的要求，貌似我也能达到~~</p>\n<p>然后</p>\n<p>毕业了</p>\n<p>找个软件公司</p>\n<p>事实上，</p>\n<p>你的idea没用了，只能够coding了~~</p>\n<p>“0 erros,0 warns”的时候，也没有那么激动了</p>\n<p>相比之下</p>\n<p>你多了许多淡定</p>\n<p>你会考虑工资什么时候涨，今晚不会加班吧~~,工作的电脑什么时候连上网</p>\n<p>风花雪月的日子感觉不到</p>\n<p>空调呼呼的吹着</p>\n<p>从来不会感觉到春夏秋冬</p>\n<p>我们的生活就是：上班对着大电脑，下班对着小电脑</p>\n<p>在空荡荡的出租屋里，一个人面对着花白的地板砖，傻傻发呆</p>\n<p>外面的广场很热闹，却不属于我们这些程序员</p>\n<p>我们尝试过在婚介网上找个朋友，却发现丫的发信息也要钱</p>\n<p>只能在QQ上查找那些同一个城市的聊友</p>\n<p>或许，找个不大不小的游戏玩玩，在游戏里面，低调的做个牛虻</p>\n","excerpt":"","more":"<p>封面图片来自：Pixabay  </p>\n<p>查看原文：<a href=\"http://flywindmouse.diandian.com/post/2012-04-25/40046530641\">http://flywindmouse.diandian.com/post/2012-04-25/40046530641</a></p>\n<p>小小的时候，玩着游戏机，偶尔想着这游戏怎么做出来的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">第一次摸电脑的时候，总感觉这东西不可思议</div><div class=\"line\"></div><div class=\"line\">高考的时候，有一种莫名其妙的专业叫做：软件开发！貌似IT是一个神圣的行业！</div><div class=\"line\"></div><div class=\"line\">不知不觉中，你在高考志愿表上写下了：“软件开发”四个鲜红的大字</div><div class=\"line\"></div><div class=\"line\">你应该还记得第一次对着教材抄写了那个叫”hello world”的玩意儿</div><div class=\"line\"></div><div class=\"line\">你应该还记得第一次弄了个1加到100的计算器，运行成功后，</div><div class=\"line\"></div><div class=\"line\">相信你会在食堂的饭碗里好不心疼的多加一份回锅肉，在弄一瓶可口可乐~~</div><div class=\"line\"></div><div class=\"line\">你还会非常自信的看着对面走过来的MM</div><div class=\"line\"></div><div class=\"line\">后来啊后来</div><div class=\"line\"></div><div class=\"line\">电脑烂了，你得学着重装系统，什么GHOST、PQ</div><div class=\"line\"></div><div class=\"line\">你也掌握了把电脑拆下来在装回去的本领</div><div class=\"line\"></div><div class=\"line\">偶尔还给那些美女老乡设置下路由器，装个杀毒软件：他们都夸你能干~~~~</div></pre></td></tr></table></figure></p>\n<p>就在你略感得意的时候</p>\n<p>你也常常因为少了一个分号而调试一个通宵</p>\n<p>因为一个函数不会而不停的baidu 谷歌，这时候</p>\n<p>你会为看到一篇经典的技术文章而欣喜若狂</p>\n<p>因为”0 erros,0 warns”而激动不已</p>\n<p>另外</p>\n<p>你肯定还学着那个号称黑客的灰鸽子，IPC入侵…………心里总想象着黑客的那种神秘和伟大</p>\n<p>偶尔也享受到捉弄别人的得意</p>\n<p>但是，渐渐的你发现，你的哪一些黑客工具没用了</p>\n<p>就是这样：</p>\n<p>在别人旅游的时候，我们在coding</p>\n<p>在别人KTV的时候，我们也在coding</p>\n<p>在别人gaming的时候，我们还在coding</p>\n<p>终于有一天</p>\n<p>你做出了一个网站，你写出来一个学生管理系统</p>\n<p>你也偶尔会在论坛上争论C++和JAVA那个好~~~</p>\n<p>无意中看见了软件公司的招聘信息，发现他们的要求，貌似我也能达到~~</p>\n<p>然后</p>\n<p>毕业了</p>\n<p>找个软件公司</p>\n<p>事实上，</p>\n<p>你的idea没用了，只能够coding了~~</p>\n<p>“0 erros,0 warns”的时候，也没有那么激动了</p>\n<p>相比之下</p>\n<p>你多了许多淡定</p>\n<p>你会考虑工资什么时候涨，今晚不会加班吧~~,工作的电脑什么时候连上网</p>\n<p>风花雪月的日子感觉不到</p>\n<p>空调呼呼的吹着</p>\n<p>从来不会感觉到春夏秋冬</p>\n<p>我们的生活就是：上班对着大电脑，下班对着小电脑</p>\n<p>在空荡荡的出租屋里，一个人面对着花白的地板砖，傻傻发呆</p>\n<p>外面的广场很热闹，却不属于我们这些程序员</p>\n<p>我们尝试过在婚介网上找个朋友，却发现丫的发信息也要钱</p>\n<p>只能在QQ上查找那些同一个城市的聊友</p>\n<p>或许，找个不大不小的游戏玩玩，在游戏里面，低调的做个牛虻</p>\n"},{"title":"程序员之内功修炼","date":"2015-04-05T06:57:07.000Z","_content":"直到上个月，我都还一直以为能使用个第三方库，想要什么功能去Google一下肯定能搜索到，这样就算是高手了。可是，最近的实习生应聘却让我吃了一些苦头。刚开始时\n，我还一直想，为什么即使是BAT这样的大公司也都问那些在实际开发中根本就用不到的网上一搜就一大片的东西，感觉他们也落入了俗套。但最近看的几篇文章，遇到的几件\n事却让我意识到自己犯了一个多大的错。\n\n在这里，我想把只会堆砌代码的程序员称呼为码农，当然不是贬低，而是确实这个词比较直观，比如当年给进城务工的人士命名为农民工一样，绝对没有歧视的意思。  \n在我看来，内功包括三个方面：\n\n## 熟练程度\n\n这绝对不是一朝一夕就能简单掌握的，必须日复一日年复一年的写代码，才能达到所谓“熟练”的程度。不然，每次就像我之前那样，除了最熟悉的一两门语言、一两个框架外，\n甚至是很基础的语法问题都得去搜一下，然后，每次遇到问题都重复地去寻找答案，完全没有技术含量，可却从另一方面说明，你仅仅只是一个码农。\n\n## 创造能力\n\n我不鼓励重复造轮子，但你得保证，在没有轮子的时候能自己造一个出来。前阵子因为业务的需要，得破解一下某系统的验证码，以前一直以为这种事情网上应该有很多的库吧。\n结果去Google一下才让我大吃一惊，只发现了一个很古老的东西，pytesseract，是对Google Tesseract的一个简单的封装，识别效果差的令\n人发指。没办法，只能计划着自己造，我以前跟着一位导师研究过一点AI方面的知识，知道这种验证码是可以实现很高识别率的。可是，从哪儿开始呢？这种时候，我这种码农\n就只能呵呵了。\n\n## 系统架构\n\n天地万物为我所用。程序员，垒砌代码，总得知道在哪儿垒吧。如果，能够自己设计系统架构，能够清楚明白每一种技术选型的利与弊，那样，一个完整的工程才真正属于你，否\n则，你永远只属于你那一方没人愿意去碰的基础的代码，而且，我总感觉，像这种重复性的劳动，总有一天会被更智能的东西取代。\n\n当年，小米刚出来的时候，所有硬件都是出自别人之手，当时我很仰慕，能够集中所有最好的东西做出来一个产品，这样，应该很牛了吧。可后来发现，小米牛的不是这点，它也\n在造轮子，至少我认为小米系统，是国内最好的一个改装版android，很难想像，小米没有MIUI会是多么的脆弱。\n内功这种东西，有没有最重要，用不用才是另一回事儿。不过，是有一些工作是只需要码农的，那就是外包，而且是低质量项目的外包。\n","source":"_posts/programmer-internal-strength.md","raw":"---\ntitle: \"程序员之内功修炼\"\ndate: 2015-04-05 14:57:07\ncategories: 边走边想\n---\n直到上个月，我都还一直以为能使用个第三方库，想要什么功能去Google一下肯定能搜索到，这样就算是高手了。可是，最近的实习生应聘却让我吃了一些苦头。刚开始时\n，我还一直想，为什么即使是BAT这样的大公司也都问那些在实际开发中根本就用不到的网上一搜就一大片的东西，感觉他们也落入了俗套。但最近看的几篇文章，遇到的几件\n事却让我意识到自己犯了一个多大的错。\n\n在这里，我想把只会堆砌代码的程序员称呼为码农，当然不是贬低，而是确实这个词比较直观，比如当年给进城务工的人士命名为农民工一样，绝对没有歧视的意思。  \n在我看来，内功包括三个方面：\n\n## 熟练程度\n\n这绝对不是一朝一夕就能简单掌握的，必须日复一日年复一年的写代码，才能达到所谓“熟练”的程度。不然，每次就像我之前那样，除了最熟悉的一两门语言、一两个框架外，\n甚至是很基础的语法问题都得去搜一下，然后，每次遇到问题都重复地去寻找答案，完全没有技术含量，可却从另一方面说明，你仅仅只是一个码农。\n\n## 创造能力\n\n我不鼓励重复造轮子，但你得保证，在没有轮子的时候能自己造一个出来。前阵子因为业务的需要，得破解一下某系统的验证码，以前一直以为这种事情网上应该有很多的库吧。\n结果去Google一下才让我大吃一惊，只发现了一个很古老的东西，pytesseract，是对Google Tesseract的一个简单的封装，识别效果差的令\n人发指。没办法，只能计划着自己造，我以前跟着一位导师研究过一点AI方面的知识，知道这种验证码是可以实现很高识别率的。可是，从哪儿开始呢？这种时候，我这种码农\n就只能呵呵了。\n\n## 系统架构\n\n天地万物为我所用。程序员，垒砌代码，总得知道在哪儿垒吧。如果，能够自己设计系统架构，能够清楚明白每一种技术选型的利与弊，那样，一个完整的工程才真正属于你，否\n则，你永远只属于你那一方没人愿意去碰的基础的代码，而且，我总感觉，像这种重复性的劳动，总有一天会被更智能的东西取代。\n\n当年，小米刚出来的时候，所有硬件都是出自别人之手，当时我很仰慕，能够集中所有最好的东西做出来一个产品，这样，应该很牛了吧。可后来发现，小米牛的不是这点，它也\n在造轮子，至少我认为小米系统，是国内最好的一个改装版android，很难想像，小米没有MIUI会是多么的脆弱。\n内功这种东西，有没有最重要，用不用才是另一回事儿。不过，是有一些工作是只需要码农的，那就是外包，而且是低质量项目的外包。\n","slug":"programmer-internal-strength","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pf8004h9vnz3612q9e7","content":"<p>直到上个月，我都还一直以为能使用个第三方库，想要什么功能去Google一下肯定能搜索到，这样就算是高手了。可是，最近的实习生应聘却让我吃了一些苦头。刚开始时<br>，我还一直想，为什么即使是BAT这样的大公司也都问那些在实际开发中根本就用不到的网上一搜就一大片的东西，感觉他们也落入了俗套。但最近看的几篇文章，遇到的几件<br>事却让我意识到自己犯了一个多大的错。</p>\n<p>在这里，我想把只会堆砌代码的程序员称呼为码农，当然不是贬低，而是确实这个词比较直观，比如当年给进城务工的人士命名为农民工一样，绝对没有歧视的意思。<br>在我看来，内功包括三个方面：</p>\n<h2 id=\"熟练程度\"><a href=\"#熟练程度\" class=\"headerlink\" title=\"熟练程度\"></a>熟练程度</h2><p>这绝对不是一朝一夕就能简单掌握的，必须日复一日年复一年的写代码，才能达到所谓“熟练”的程度。不然，每次就像我之前那样，除了最熟悉的一两门语言、一两个框架外，<br>甚至是很基础的语法问题都得去搜一下，然后，每次遇到问题都重复地去寻找答案，完全没有技术含量，可却从另一方面说明，你仅仅只是一个码农。</p>\n<h2 id=\"创造能力\"><a href=\"#创造能力\" class=\"headerlink\" title=\"创造能力\"></a>创造能力</h2><p>我不鼓励重复造轮子，但你得保证，在没有轮子的时候能自己造一个出来。前阵子因为业务的需要，得破解一下某系统的验证码，以前一直以为这种事情网上应该有很多的库吧。<br>结果去Google一下才让我大吃一惊，只发现了一个很古老的东西，pytesseract，是对Google Tesseract的一个简单的封装，识别效果差的令<br>人发指。没办法，只能计划着自己造，我以前跟着一位导师研究过一点AI方面的知识，知道这种验证码是可以实现很高识别率的。可是，从哪儿开始呢？这种时候，我这种码农<br>就只能呵呵了。</p>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>天地万物为我所用。程序员，垒砌代码，总得知道在哪儿垒吧。如果，能够自己设计系统架构，能够清楚明白每一种技术选型的利与弊，那样，一个完整的工程才真正属于你，否<br>则，你永远只属于你那一方没人愿意去碰的基础的代码，而且，我总感觉，像这种重复性的劳动，总有一天会被更智能的东西取代。</p>\n<p>当年，小米刚出来的时候，所有硬件都是出自别人之手，当时我很仰慕，能够集中所有最好的东西做出来一个产品，这样，应该很牛了吧。可后来发现，小米牛的不是这点，它也<br>在造轮子，至少我认为小米系统，是国内最好的一个改装版android，很难想像，小米没有MIUI会是多么的脆弱。<br>内功这种东西，有没有最重要，用不用才是另一回事儿。不过，是有一些工作是只需要码农的，那就是外包，而且是低质量项目的外包。</p>\n","excerpt":"","more":"<p>直到上个月，我都还一直以为能使用个第三方库，想要什么功能去Google一下肯定能搜索到，这样就算是高手了。可是，最近的实习生应聘却让我吃了一些苦头。刚开始时<br>，我还一直想，为什么即使是BAT这样的大公司也都问那些在实际开发中根本就用不到的网上一搜就一大片的东西，感觉他们也落入了俗套。但最近看的几篇文章，遇到的几件<br>事却让我意识到自己犯了一个多大的错。</p>\n<p>在这里，我想把只会堆砌代码的程序员称呼为码农，当然不是贬低，而是确实这个词比较直观，比如当年给进城务工的人士命名为农民工一样，绝对没有歧视的意思。<br>在我看来，内功包括三个方面：</p>\n<h2 id=\"熟练程度\"><a href=\"#熟练程度\" class=\"headerlink\" title=\"熟练程度\"></a>熟练程度</h2><p>这绝对不是一朝一夕就能简单掌握的，必须日复一日年复一年的写代码，才能达到所谓“熟练”的程度。不然，每次就像我之前那样，除了最熟悉的一两门语言、一两个框架外，<br>甚至是很基础的语法问题都得去搜一下，然后，每次遇到问题都重复地去寻找答案，完全没有技术含量，可却从另一方面说明，你仅仅只是一个码农。</p>\n<h2 id=\"创造能力\"><a href=\"#创造能力\" class=\"headerlink\" title=\"创造能力\"></a>创造能力</h2><p>我不鼓励重复造轮子，但你得保证，在没有轮子的时候能自己造一个出来。前阵子因为业务的需要，得破解一下某系统的验证码，以前一直以为这种事情网上应该有很多的库吧。<br>结果去Google一下才让我大吃一惊，只发现了一个很古老的东西，pytesseract，是对Google Tesseract的一个简单的封装，识别效果差的令<br>人发指。没办法，只能计划着自己造，我以前跟着一位导师研究过一点AI方面的知识，知道这种验证码是可以实现很高识别率的。可是，从哪儿开始呢？这种时候，我这种码农<br>就只能呵呵了。</p>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>天地万物为我所用。程序员，垒砌代码，总得知道在哪儿垒吧。如果，能够自己设计系统架构，能够清楚明白每一种技术选型的利与弊，那样，一个完整的工程才真正属于你，否<br>则，你永远只属于你那一方没人愿意去碰的基础的代码，而且，我总感觉，像这种重复性的劳动，总有一天会被更智能的东西取代。</p>\n<p>当年，小米刚出来的时候，所有硬件都是出自别人之手，当时我很仰慕，能够集中所有最好的东西做出来一个产品，这样，应该很牛了吧。可后来发现，小米牛的不是这点，它也<br>在造轮子，至少我认为小米系统，是国内最好的一个改装版android，很难想像，小米没有MIUI会是多么的脆弱。<br>内功这种东西，有没有最重要，用不用才是另一回事儿。不过，是有一些工作是只需要码农的，那就是外包，而且是低质量项目的外包。</p>\n"},{"title":"Putty使用ssh由主机登录虚拟机connection Refused问题","date":"2014-09-18T15:50:51.000Z","_content":"参考文章：<http://www.lamp99.com/wirtualbox_centos_web.html>\n\n# 现象\n\n使用putty的ssh功能登录虚拟机里的linux系统时出现这样的错误提示：\n\n**Network error: Connection refused.**\n\n# 原因\n\n原因太多了，而且不同的网络连接方式，不同的虚拟机，不同的linux系统都会莫名其妙出现这个问题，所以在这里，我只能每次遇到问题就记录下解决方案，以后依次尝试\n就行了。之所以要在这里记录下来，是因为不知道为什么每次我遇到的问题在网上都很难找到解决办法，不知道是不是因为我总是做一些奇葩的操作。。。\n\n# 解决方案一：\n\n来自[红黑联盟 ](http://www.2cto.com/os/201205/130781.html)这个方法的状况是虚拟机和主机能够互相ping通，但就\n是连不上ssh。虚拟机能够上网，使用的是网络地址转换(NAT)的连接方式。\n首先在windows的命令行cmd中使用_**ipconfig**_命令查看以太网适配器(VirtualBox Host-Only\nNetwork)的IPv4地址。我的是192.168.56.101。 然后在虚拟机终端里面使用_**ifconfig**_查看内部网络地址，一般就是eth0\n的nat地址，在centos里面是enp0s3的inet地址，我的是10.0.2.15。 最后在该虚拟机设置端口转发  \n![](http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_0.jpg)  \n像如下这样添加一条规则：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_1.jpg)  \n添加后就可以通过putty的ssh登录主机了，ip是192.168.56.101.(需要注意的是，如果虚拟网卡的IPv4是自动获取ip的那么每次都会改变ip\n，在这里直接把两个IP都写成255.255.255.255即可)\n","source":"_posts/putty-ssh-connection-refused.md","raw":"---\ntitle: \"putty使用ssh由主机登录虚拟机connection refused问题\"\ndate: 2014-09-18 23:50:51\ncategories: 编程之路\n---\n参考文章：<http://www.lamp99.com/wirtualbox_centos_web.html>\n\n# 现象\n\n使用putty的ssh功能登录虚拟机里的linux系统时出现这样的错误提示：\n\n**Network error: Connection refused.**\n\n# 原因\n\n原因太多了，而且不同的网络连接方式，不同的虚拟机，不同的linux系统都会莫名其妙出现这个问题，所以在这里，我只能每次遇到问题就记录下解决方案，以后依次尝试\n就行了。之所以要在这里记录下来，是因为不知道为什么每次我遇到的问题在网上都很难找到解决办法，不知道是不是因为我总是做一些奇葩的操作。。。\n\n# 解决方案一：\n\n来自[红黑联盟 ](http://www.2cto.com/os/201205/130781.html)这个方法的状况是虚拟机和主机能够互相ping通，但就\n是连不上ssh。虚拟机能够上网，使用的是网络地址转换(NAT)的连接方式。\n首先在windows的命令行cmd中使用_**ipconfig**_命令查看以太网适配器(VirtualBox Host-Only\nNetwork)的IPv4地址。我的是192.168.56.101。 然后在虚拟机终端里面使用_**ifconfig**_查看内部网络地址，一般就是eth0\n的nat地址，在centos里面是enp0s3的inet地址，我的是10.0.2.15。 最后在该虚拟机设置端口转发  \n![](http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_0.jpg)  \n像如下这样添加一条规则：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_1.jpg)  \n添加后就可以通过putty的ssh登录主机了，ip是192.168.56.101.(需要注意的是，如果虚拟网卡的IPv4是自动获取ip的那么每次都会改变ip\n，在这里直接把两个IP都写成255.255.255.255即可)\n","slug":"putty-ssh-connection-refused","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfb004j9vnzrkf2eshz","content":"<p>参考文章：<a href=\"http://www.lamp99.com/wirtualbox_centos_web.html\" target=\"_blank\" rel=\"external\">http://www.lamp99.com/wirtualbox_centos_web.html</a></p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>使用putty的ssh功能登录虚拟机里的linux系统时出现这样的错误提示：</p>\n<p><strong>Network error: Connection refused.</strong></p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>原因太多了，而且不同的网络连接方式，不同的虚拟机，不同的linux系统都会莫名其妙出现这个问题，所以在这里，我只能每次遇到问题就记录下解决方案，以后依次尝试<br>就行了。之所以要在这里记录下来，是因为不知道为什么每次我遇到的问题在网上都很难找到解决办法，不知道是不是因为我总是做一些奇葩的操作。。。</p>\n<h1 id=\"解决方案一：\"><a href=\"#解决方案一：\" class=\"headerlink\" title=\"解决方案一：\"></a>解决方案一：</h1><p>来自<a href=\"http://www.2cto.com/os/201205/130781.html\" target=\"_blank\" rel=\"external\">红黑联盟 </a>这个方法的状况是虚拟机和主机能够互相ping通，但就<br>是连不上ssh。虚拟机能够上网，使用的是网络地址转换(NAT)的连接方式。<br>首先在windows的命令行cmd中使用<em><strong>ipconfig</strong></em>命令查看以太网适配器(VirtualBox Host-Only<br>Network)的IPv4地址。我的是192.168.56.101。 然后在虚拟机终端里面使用<em><strong>ifconfig</strong></em>查看内部网络地址，一般就是eth0<br>的nat地址，在centos里面是enp0s3的inet地址，我的是10.0.2.15。 最后在该虚拟机设置端口转发<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_0.jpg\" alt=\"\"><br>像如下这样添加一条规则：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_1.jpg\" alt=\"\"><br>添加后就可以通过putty的ssh登录主机了，ip是192.168.56.101.(需要注意的是，如果虚拟网卡的IPv4是自动获取ip的那么每次都会改变ip<br>，在这里直接把两个IP都写成255.255.255.255即可)</p>\n","excerpt":"","more":"<p>参考文章：<a href=\"http://www.lamp99.com/wirtualbox_centos_web.html\">http://www.lamp99.com/wirtualbox_centos_web.html</a></p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>使用putty的ssh功能登录虚拟机里的linux系统时出现这样的错误提示：</p>\n<p><strong>Network error: Connection refused.</strong></p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>原因太多了，而且不同的网络连接方式，不同的虚拟机，不同的linux系统都会莫名其妙出现这个问题，所以在这里，我只能每次遇到问题就记录下解决方案，以后依次尝试<br>就行了。之所以要在这里记录下来，是因为不知道为什么每次我遇到的问题在网上都很难找到解决办法，不知道是不是因为我总是做一些奇葩的操作。。。</p>\n<h1 id=\"解决方案一：\"><a href=\"#解决方案一：\" class=\"headerlink\" title=\"解决方案一：\"></a>解决方案一：</h1><p>来自<a href=\"http://www.2cto.com/os/201205/130781.html\">红黑联盟 </a>这个方法的状况是虚拟机和主机能够互相ping通，但就<br>是连不上ssh。虚拟机能够上网，使用的是网络地址转换(NAT)的连接方式。<br>首先在windows的命令行cmd中使用<em><strong>ipconfig</strong></em>命令查看以太网适配器(VirtualBox Host-Only<br>Network)的IPv4地址。我的是192.168.56.101。 然后在虚拟机终端里面使用<em><strong>ifconfig</strong></em>查看内部网络地址，一般就是eth0<br>的nat地址，在centos里面是enp0s3的inet地址，我的是10.0.2.15。 最后在该虚拟机设置端口转发<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_0.jpg\" alt=\"\"><br>像如下这样添加一条规则：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/putty-ssh-connection-refused_1.jpg\" alt=\"\"><br>添加后就可以通过putty的ssh登录主机了，ip是192.168.56.101.(需要注意的是，如果虚拟网卡的IPv4是自动获取ip的那么每次都会改变ip<br>，在这里直接把两个IP都写成255.255.255.255即可)</p>\n"},{"title":"使用Python3和Chrome获取QQ好友列表","date":"2014-09-28T07:22:01.000Z","_content":"最近想获得所有QQ好友的QQ帐号列表，但是腾讯居然没有提供这个功能，这让我很苦恼。由于QQ客户端上的数据我并不知道怎么获取(有人说可以提取手机QQ的数据库来\n获取，但我对那个也是一无所知)，于是我想到了通过QQ空间里的某些地方来寻找。其实QQ空间的寻找好友功能里面就能够查看到很多的好友，但是却只能查看亲密度前面2\n00的好友，对于我这种QQ好友比较多的人来说实在没办法。其实我对http等不大了解，最终是通过一个很笨的方法来获取的，如下：\n\n首先，在QQ空间顶部面板处有一个搜索好友和用户的搜索框，输入一个数字即可显示以该数字为关键词的好友，最多显示5个。于是通过Chrome的**右键->审查元素\n**功能获取我的请求信息：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.jpg)  \n随便输入一个数字，在下面的Network监听处会出现所请求的cgi脚本的信息  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.jpg)  \n点击JS脚本，找到Preview里面有刚才显示的QQ帐号信息的那个就是它了，然后鼠标右键，copy as\ncURL即可得到curl请求信息(如果在linux下直接命令行就搞定了)\n\n注：经过研究发现，在处理_**subprocess.check_output(args)**_的返回值时，直接_**subprocess.check_out\nput(args).decode('utf-8')**_，直接将含有中文的bytes转换utf编码的str，这样可以避免很多编码问题\n\n\n\n    #-_- coding: UTF-8 -_-\n    import os, sys\n    import re\n    import subprocess\n    import shlex\n    import json\n    import codecs\n\n\n\n\n    # 添加curl的环境变量\n\n\n\n\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')\n\n\n\n\n    # 分解原始请求\n\n\n\n\n    origin = ''        # 这里粘贴从浏览器copy过来的cURL请求\n    temp = origin.split('&search=1')\n    temp[0] += '&search='\n\n\n\n\n    # 结果集合\n\n\n\n\n    qqlist = set()\n\n\n\n\n    # 查找并移去含有中文的字段\n\n\n\n\n    # 应该默认遇到逗号结束，如果遇到的是大括号，那么就相当于在最后\n\n\n\n\n    def remove(convert, char):\n        while(convert.find(char) > 0):\n            pre = convert.find(char)    # pre 表示前面的位置\n            now = pre + 1\n            while(True):\n                if(convert[now] == '\\}' and convert[now+1] == ',' and convert[now+2] == '\\{'):\n                    break\n                # \\}]\n                elif(convert[now] == '\\}' and convert[now+1] == ']'):\n                    break\n                elif(convert[now] == ',' and convert[now+1] == '\"'):\n                    break\n                else:\n                    now += 1\n            if(convert[now] == ','):\n                if(convert[now+1] == '\"' and convert[now+2] == ','):\n                    now += 3\n                else:\n                    now += 1\n            else:\n                pre -= 1\n            leave = convert[: pre]\n            leave += convert[now :]\n            convert = leave\n        return convert\n\n\n\n\n    def search(pre):\n        for i in range(10):\n\n\n\n\n\n            curl = temp[0] + pre + str(i) + temp[1]\n            print('当前' + pre + str(i))\n\n            # 执行curl命令并获取返回结果，并对结果字符串进行处理转换为json对象\n            args = shlex.split(curl)\n            result = str(subprocess.check_output(args)).replace(' ', '')\n            convert = result.replace(' ', '').split('callback(')[1].split(');')[0]\n\n            # 这一句话可以减少很多时间\n            if(convert.find('100006') &lt; 0):\n                continue\n\n            # 我郁闷，我要直接把那几个字段给删除，这些人起昵称太奇葩了\n            convert = remove(convert, '\"CA\"')\n            convert = remove(convert, '\"TA\"')\n            convert = remove(convert, '\"CB\"')\n            convert = remove(convert, '\"TB\"')\n            convert = remove(convert, '\"hitFieldContent\"')\n            convert = remove(convert, '\"TF\"')           \n            output = json.loads(convert)\n\n            \"\"\"\n            如果想获取其中的中文信息，可以改变一下其编码的字符\n            regex = re.compile(r'\\\\\\\\(?![/u\"])')\n            fixed = regex.sub(r\"\\\\\\\\\\\\\\\\\", convert)\n            \"\"\"\n\n            if('data' not in output):\n                continue\n            for sub in output['data']:\n                if(sub['llBoxType'] == 100006):\n                    for one in sub['sData']['resultData']:\n                        if(one['intimacy'] == '0'):\n                            continue\n                        qqlist.add(one['NM'])\n                    if(len(sub['sData']['resultData']) == 5):\n                        search(pre + str(i))\n\n\nfor i in range(10, 100): search(str(i))\n\n# 输出最终结果\n\nfp = codecs.open('1129029735.txt', 'a', 'utf-8') fp.write('总共搜索到' +\nstr(len(qqlist)) + '个QQ\\\\n') result = [qq + '\\\\n' for qq in sorted(qqlist)]\nfp.writelines(result) fp.close()\n\n由于前面两位QQ号基本上都可以搜索到大于5位的好友，所以，我从100到999逐个开始搜索，如果发现小于5个就进入下一个，如果等于5个，那就递归。这个请求所返\n回的不是标准的JSON数据，总是有这样或者那样的干扰，看我的remove函数你们就可以发现其中出现的诸多问题，其实我最先还想把QQ昵称一起提取出来的，后来发\n现QQ昵称里面的奇葩字符太多了，真不知道腾讯的人是怎么处理的，还是我对中文字符处理技术比较薄弱。最终，搜索我QQ上400多个好友花费时间约为9分钟(忘了统计\n请求数量了，应该只有1000多次的请求)：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_2.jpg)[  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_3.jpg)  \n](http://haofly.net/wp-content/uploads/2014/09/qqlist3.jpg)\n","source":"_posts/python-Chrome-QQ-friends.md","raw":"---\ntitle: \"使用Python3和Chrome获取QQ好友列表\"\ndate: 2014-09-28 15:22:01\ncategories: 就是爱玩\n---\n最近想获得所有QQ好友的QQ帐号列表，但是腾讯居然没有提供这个功能，这让我很苦恼。由于QQ客户端上的数据我并不知道怎么获取(有人说可以提取手机QQ的数据库来\n获取，但我对那个也是一无所知)，于是我想到了通过QQ空间里的某些地方来寻找。其实QQ空间的寻找好友功能里面就能够查看到很多的好友，但是却只能查看亲密度前面2\n00的好友，对于我这种QQ好友比较多的人来说实在没办法。其实我对http等不大了解，最终是通过一个很笨的方法来获取的，如下：\n\n首先，在QQ空间顶部面板处有一个搜索好友和用户的搜索框，输入一个数字即可显示以该数字为关键词的好友，最多显示5个。于是通过Chrome的**右键->审查元素\n**功能获取我的请求信息：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.jpg)  \n随便输入一个数字，在下面的Network监听处会出现所请求的cgi脚本的信息  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.jpg)  \n点击JS脚本，找到Preview里面有刚才显示的QQ帐号信息的那个就是它了，然后鼠标右键，copy as\ncURL即可得到curl请求信息(如果在linux下直接命令行就搞定了)\n\n注：经过研究发现，在处理_**subprocess.check_output(args)**_的返回值时，直接_**subprocess.check_out\nput(args).decode('utf-8')**_，直接将含有中文的bytes转换utf编码的str，这样可以避免很多编码问题\n\n\n\n    #-_- coding: UTF-8 -_-\n    import os, sys\n    import re\n    import subprocess\n    import shlex\n    import json\n    import codecs\n\n\n\n\n    # 添加curl的环境变量\n\n\n\n\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')\n\n\n\n\n    # 分解原始请求\n\n\n\n\n    origin = ''        # 这里粘贴从浏览器copy过来的cURL请求\n    temp = origin.split('&search=1')\n    temp[0] += '&search='\n\n\n\n\n    # 结果集合\n\n\n\n\n    qqlist = set()\n\n\n\n\n    # 查找并移去含有中文的字段\n\n\n\n\n    # 应该默认遇到逗号结束，如果遇到的是大括号，那么就相当于在最后\n\n\n\n\n    def remove(convert, char):\n        while(convert.find(char) > 0):\n            pre = convert.find(char)    # pre 表示前面的位置\n            now = pre + 1\n            while(True):\n                if(convert[now] == '\\}' and convert[now+1] == ',' and convert[now+2] == '\\{'):\n                    break\n                # \\}]\n                elif(convert[now] == '\\}' and convert[now+1] == ']'):\n                    break\n                elif(convert[now] == ',' and convert[now+1] == '\"'):\n                    break\n                else:\n                    now += 1\n            if(convert[now] == ','):\n                if(convert[now+1] == '\"' and convert[now+2] == ','):\n                    now += 3\n                else:\n                    now += 1\n            else:\n                pre -= 1\n            leave = convert[: pre]\n            leave += convert[now :]\n            convert = leave\n        return convert\n\n\n\n\n    def search(pre):\n        for i in range(10):\n\n\n\n\n\n            curl = temp[0] + pre + str(i) + temp[1]\n            print('当前' + pre + str(i))\n\n            # 执行curl命令并获取返回结果，并对结果字符串进行处理转换为json对象\n            args = shlex.split(curl)\n            result = str(subprocess.check_output(args)).replace(' ', '')\n            convert = result.replace(' ', '').split('callback(')[1].split(');')[0]\n\n            # 这一句话可以减少很多时间\n            if(convert.find('100006') &lt; 0):\n                continue\n\n            # 我郁闷，我要直接把那几个字段给删除，这些人起昵称太奇葩了\n            convert = remove(convert, '\"CA\"')\n            convert = remove(convert, '\"TA\"')\n            convert = remove(convert, '\"CB\"')\n            convert = remove(convert, '\"TB\"')\n            convert = remove(convert, '\"hitFieldContent\"')\n            convert = remove(convert, '\"TF\"')           \n            output = json.loads(convert)\n\n            \"\"\"\n            如果想获取其中的中文信息，可以改变一下其编码的字符\n            regex = re.compile(r'\\\\\\\\(?![/u\"])')\n            fixed = regex.sub(r\"\\\\\\\\\\\\\\\\\", convert)\n            \"\"\"\n\n            if('data' not in output):\n                continue\n            for sub in output['data']:\n                if(sub['llBoxType'] == 100006):\n                    for one in sub['sData']['resultData']:\n                        if(one['intimacy'] == '0'):\n                            continue\n                        qqlist.add(one['NM'])\n                    if(len(sub['sData']['resultData']) == 5):\n                        search(pre + str(i))\n\n\nfor i in range(10, 100): search(str(i))\n\n# 输出最终结果\n\nfp = codecs.open('1129029735.txt', 'a', 'utf-8') fp.write('总共搜索到' +\nstr(len(qqlist)) + '个QQ\\\\n') result = [qq + '\\\\n' for qq in sorted(qqlist)]\nfp.writelines(result) fp.close()\n\n由于前面两位QQ号基本上都可以搜索到大于5位的好友，所以，我从100到999逐个开始搜索，如果发现小于5个就进入下一个，如果等于5个，那就递归。这个请求所返\n回的不是标准的JSON数据，总是有这样或者那样的干扰，看我的remove函数你们就可以发现其中出现的诸多问题，其实我最先还想把QQ昵称一起提取出来的，后来发\n现QQ昵称里面的奇葩字符太多了，真不知道腾讯的人是怎么处理的，还是我对中文字符处理技术比较薄弱。最终，搜索我QQ上400多个好友花费时间约为9分钟(忘了统计\n请求数量了，应该只有1000多次的请求)：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_2.jpg)[  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_3.jpg)  \n](http://haofly.net/wp-content/uploads/2014/09/qqlist3.jpg)\n","slug":"python-Chrome-QQ-friends","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfj004l9vnzn8qf63rm","content":"<p>最近想获得所有QQ好友的QQ帐号列表，但是腾讯居然没有提供这个功能，这让我很苦恼。由于QQ客户端上的数据我并不知道怎么获取(有人说可以提取手机QQ的数据库来<br>获取，但我对那个也是一无所知)，于是我想到了通过QQ空间里的某些地方来寻找。其实QQ空间的寻找好友功能里面就能够查看到很多的好友，但是却只能查看亲密度前面2<br>00的好友，对于我这种QQ好友比较多的人来说实在没办法。其实我对http等不大了解，最终是通过一个很笨的方法来获取的，如下：</p>\n<p>首先，在QQ空间顶部面板处有一个搜索好友和用户的搜索框，输入一个数字即可显示以该数字为关键词的好友，最多显示5个。于是通过Chrome的<strong>右键-&gt;审查元素\n</strong>功能获取我的请求信息：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.jpg\" alt=\"\"><br>随便输入一个数字，在下面的Network监听处会出现所请求的cgi脚本的信息<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.jpg\" alt=\"\"><br>点击JS脚本，找到Preview里面有刚才显示的QQ帐号信息的那个就是它了，然后鼠标右键，copy as<br>cURL即可得到curl请求信息(如果在linux下直接命令行就搞定了)</p>\n<p>注：经过研究发现，在处理_<strong>subprocess.check_output(args)</strong><em>的返回值时，直接</em><strong>subprocess.check_out<br>put(args).decode(‘utf-8’)</strong>_，直接将含有中文的bytes转换utf编码的str，这样可以避免很多编码问题</p>\n<pre><code>#-_- coding: UTF-8 -_-\nimport os, sys\nimport re\nimport subprocess\nimport shlex\nimport json\nimport codecs\n\n\n\n\n# 添加curl的环境变量\n\n\n\n\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)\n\n\n\n\n# 分解原始请求\n\n\n\n\norigin = &apos;&apos;        # 这里粘贴从浏览器copy过来的cURL请求\ntemp = origin.split(&apos;&amp;search=1&apos;)\ntemp[0] += &apos;&amp;search=&apos;\n\n\n\n\n# 结果集合\n\n\n\n\nqqlist = set()\n\n\n\n\n# 查找并移去含有中文的字段\n\n\n\n\n# 应该默认遇到逗号结束，如果遇到的是大括号，那么就相当于在最后\n\n\n\n\ndef remove(convert, char):\n    while(convert.find(char) &gt; 0):\n        pre = convert.find(char)    # pre 表示前面的位置\n        now = pre + 1\n        while(True):\n            if(convert[now] == &apos;\\}&apos; and convert[now+1] == &apos;,&apos; and convert[now+2] == &apos;\\{&apos;):\n                break\n            # \\}]\n            elif(convert[now] == &apos;\\}&apos; and convert[now+1] == &apos;]&apos;):\n                break\n            elif(convert[now] == &apos;,&apos; and convert[now+1] == &apos;&quot;&apos;):\n                break\n            else:\n                now += 1\n        if(convert[now] == &apos;,&apos;):\n            if(convert[now+1] == &apos;&quot;&apos; and convert[now+2] == &apos;,&apos;):\n                now += 3\n            else:\n                now += 1\n        else:\n            pre -= 1\n        leave = convert[: pre]\n        leave += convert[now :]\n        convert = leave\n    return convert\n\n\n\n\ndef search(pre):\n    for i in range(10):\n\n\n\n\n\n        curl = temp[0] + pre + str(i) + temp[1]\n        print(&apos;当前&apos; + pre + str(i))\n\n        # 执行curl命令并获取返回结果，并对结果字符串进行处理转换为json对象\n        args = shlex.split(curl)\n        result = str(subprocess.check_output(args)).replace(&apos; &apos;, &apos;&apos;)\n        convert = result.replace(&apos; &apos;, &apos;&apos;).split(&apos;callback(&apos;)[1].split(&apos;);&apos;)[0]\n\n        # 这一句话可以减少很多时间\n        if(convert.find(&apos;100006&apos;) &amp;lt; 0):\n            continue\n\n        # 我郁闷，我要直接把那几个字段给删除，这些人起昵称太奇葩了\n        convert = remove(convert, &apos;&quot;CA&quot;&apos;)\n        convert = remove(convert, &apos;&quot;TA&quot;&apos;)\n        convert = remove(convert, &apos;&quot;CB&quot;&apos;)\n        convert = remove(convert, &apos;&quot;TB&quot;&apos;)\n        convert = remove(convert, &apos;&quot;hitFieldContent&quot;&apos;)\n        convert = remove(convert, &apos;&quot;TF&quot;&apos;)           \n        output = json.loads(convert)\n\n        &quot;&quot;&quot;\n        如果想获取其中的中文信息，可以改变一下其编码的字符\n        regex = re.compile(r&apos;\\\\\\\\(?![/u&quot;])&apos;)\n        fixed = regex.sub(r&quot;\\\\\\\\\\\\\\\\&quot;, convert)\n        &quot;&quot;&quot;\n\n        if(&apos;data&apos; not in output):\n            continue\n        for sub in output[&apos;data&apos;]:\n            if(sub[&apos;llBoxType&apos;] == 100006):\n                for one in sub[&apos;sData&apos;][&apos;resultData&apos;]:\n                    if(one[&apos;intimacy&apos;] == &apos;0&apos;):\n                        continue\n                    qqlist.add(one[&apos;NM&apos;])\n                if(len(sub[&apos;sData&apos;][&apos;resultData&apos;]) == 5):\n                    search(pre + str(i))\n</code></pre><p>for i in range(10, 100): search(str(i))</p>\n<h1 id=\"输出最终结果\"><a href=\"#输出最终结果\" class=\"headerlink\" title=\"输出最终结果\"></a>输出最终结果</h1><p>fp = codecs.open(‘1129029735.txt’, ‘a’, ‘utf-8’) fp.write(‘总共搜索到’ +<br>str(len(qqlist)) + ‘个QQ\\n’) result = [qq + ‘\\n’ for qq in sorted(qqlist)]<br>fp.writelines(result) fp.close()</p>\n<p>由于前面两位QQ号基本上都可以搜索到大于5位的好友，所以，我从100到999逐个开始搜索，如果发现小于5个就进入下一个，如果等于5个，那就递归。这个请求所返<br>回的不是标准的JSON数据，总是有这样或者那样的干扰，看我的remove函数你们就可以发现其中出现的诸多问题，其实我最先还想把QQ昵称一起提取出来的，后来发<br>现QQ昵称里面的奇葩字符太多了，真不知道腾讯的人是怎么处理的，还是我对中文字符处理技术比较薄弱。最终，搜索我QQ上400多个好友花费时间约为9分钟(忘了统计<br>请求数量了，应该只有1000多次的请求)：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_2.jpg\" alt=\"\"><a href=\"http://haofly.net/wp-content/uploads/2014/09/qqlist3.jpg\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_3.jpg\" alt=\"\">  \n</a></p>\n","excerpt":"","more":"<p>最近想获得所有QQ好友的QQ帐号列表，但是腾讯居然没有提供这个功能，这让我很苦恼。由于QQ客户端上的数据我并不知道怎么获取(有人说可以提取手机QQ的数据库来<br>获取，但我对那个也是一无所知)，于是我想到了通过QQ空间里的某些地方来寻找。其实QQ空间的寻找好友功能里面就能够查看到很多的好友，但是却只能查看亲密度前面2<br>00的好友，对于我这种QQ好友比较多的人来说实在没办法。其实我对http等不大了解，最终是通过一个很笨的方法来获取的，如下：</p>\n<p>首先，在QQ空间顶部面板处有一个搜索好友和用户的搜索框，输入一个数字即可显示以该数字为关键词的好友，最多显示5个。于是通过Chrome的<strong>右键-&gt;审查元素\n</strong>功能获取我的请求信息：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.jpg\" alt=\"\"><br>随便输入一个数字，在下面的Network监听处会出现所请求的cgi脚本的信息<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.jpg\" alt=\"\"><br>点击JS脚本，找到Preview里面有刚才显示的QQ帐号信息的那个就是它了，然后鼠标右键，copy as<br>cURL即可得到curl请求信息(如果在linux下直接命令行就搞定了)</p>\n<p>注：经过研究发现，在处理_<strong>subprocess.check_output(args)</strong><em>的返回值时，直接</em><strong>subprocess.check_out<br>put(args).decode(‘utf-8’)</strong>_，直接将含有中文的bytes转换utf编码的str，这样可以避免很多编码问题</p>\n<pre><code>#-_- coding: UTF-8 -_-\nimport os, sys\nimport re\nimport subprocess\nimport shlex\nimport json\nimport codecs\n\n\n\n\n# 添加curl的环境变量\n\n\n\n\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)\n\n\n\n\n# 分解原始请求\n\n\n\n\norigin = &apos;&apos;        # 这里粘贴从浏览器copy过来的cURL请求\ntemp = origin.split(&apos;&amp;search=1&apos;)\ntemp[0] += &apos;&amp;search=&apos;\n\n\n\n\n# 结果集合\n\n\n\n\nqqlist = set()\n\n\n\n\n# 查找并移去含有中文的字段\n\n\n\n\n# 应该默认遇到逗号结束，如果遇到的是大括号，那么就相当于在最后\n\n\n\n\ndef remove(convert, char):\n    while(convert.find(char) &gt; 0):\n        pre = convert.find(char)    # pre 表示前面的位置\n        now = pre + 1\n        while(True):\n            if(convert[now] == &apos;\\}&apos; and convert[now+1] == &apos;,&apos; and convert[now+2] == &apos;\\{&apos;):\n                break\n            # \\}]\n            elif(convert[now] == &apos;\\}&apos; and convert[now+1] == &apos;]&apos;):\n                break\n            elif(convert[now] == &apos;,&apos; and convert[now+1] == &apos;&quot;&apos;):\n                break\n            else:\n                now += 1\n        if(convert[now] == &apos;,&apos;):\n            if(convert[now+1] == &apos;&quot;&apos; and convert[now+2] == &apos;,&apos;):\n                now += 3\n            else:\n                now += 1\n        else:\n            pre -= 1\n        leave = convert[: pre]\n        leave += convert[now :]\n        convert = leave\n    return convert\n\n\n\n\ndef search(pre):\n    for i in range(10):\n\n\n\n\n\n        curl = temp[0] + pre + str(i) + temp[1]\n        print(&apos;当前&apos; + pre + str(i))\n\n        # 执行curl命令并获取返回结果，并对结果字符串进行处理转换为json对象\n        args = shlex.split(curl)\n        result = str(subprocess.check_output(args)).replace(&apos; &apos;, &apos;&apos;)\n        convert = result.replace(&apos; &apos;, &apos;&apos;).split(&apos;callback(&apos;)[1].split(&apos;);&apos;)[0]\n\n        # 这一句话可以减少很多时间\n        if(convert.find(&apos;100006&apos;) &amp;lt; 0):\n            continue\n\n        # 我郁闷，我要直接把那几个字段给删除，这些人起昵称太奇葩了\n        convert = remove(convert, &apos;&quot;CA&quot;&apos;)\n        convert = remove(convert, &apos;&quot;TA&quot;&apos;)\n        convert = remove(convert, &apos;&quot;CB&quot;&apos;)\n        convert = remove(convert, &apos;&quot;TB&quot;&apos;)\n        convert = remove(convert, &apos;&quot;hitFieldContent&quot;&apos;)\n        convert = remove(convert, &apos;&quot;TF&quot;&apos;)           \n        output = json.loads(convert)\n\n        &quot;&quot;&quot;\n        如果想获取其中的中文信息，可以改变一下其编码的字符\n        regex = re.compile(r&apos;\\\\\\\\(?![/u&quot;])&apos;)\n        fixed = regex.sub(r&quot;\\\\\\\\\\\\\\\\&quot;, convert)\n        &quot;&quot;&quot;\n\n        if(&apos;data&apos; not in output):\n            continue\n        for sub in output[&apos;data&apos;]:\n            if(sub[&apos;llBoxType&apos;] == 100006):\n                for one in sub[&apos;sData&apos;][&apos;resultData&apos;]:\n                    if(one[&apos;intimacy&apos;] == &apos;0&apos;):\n                        continue\n                    qqlist.add(one[&apos;NM&apos;])\n                if(len(sub[&apos;sData&apos;][&apos;resultData&apos;]) == 5):\n                    search(pre + str(i))\n</code></pre><p>for i in range(10, 100): search(str(i))</p>\n<h1 id=\"输出最终结果\"><a href=\"#输出最终结果\" class=\"headerlink\" title=\"输出最终结果\"></a>输出最终结果</h1><p>fp = codecs.open(‘1129029735.txt’, ‘a’, ‘utf-8’) fp.write(‘总共搜索到’ +<br>str(len(qqlist)) + ‘个QQ\\n’) result = [qq + ‘\\n’ for qq in sorted(qqlist)]<br>fp.writelines(result) fp.close()</p>\n<p>由于前面两位QQ号基本上都可以搜索到大于5位的好友，所以，我从100到999逐个开始搜索，如果发现小于5个就进入下一个，如果等于5个，那就递归。这个请求所返<br>回的不是标准的JSON数据，总是有这样或者那样的干扰，看我的remove函数你们就可以发现其中出现的诸多问题，其实我最先还想把QQ昵称一起提取出来的，后来发<br>现QQ昵称里面的奇葩字符太多了，真不知道腾讯的人是怎么处理的，还是我对中文字符处理技术比较薄弱。最终，搜索我QQ上400多个好友花费时间约为9分钟(忘了统计<br>请求数量了，应该只有1000多次的请求)：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_2.jpg\" alt=\"\"><a href=\"http://haofly.net/wp-content/uploads/2014/09/qqlist3.jpg\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_3.jpg\" alt=\"\">  \n</a></p>\n"},{"title":"Python3使用configparser模块设置配置信息","date":"2014-10-19T12:47:37.000Z","_content":"参考文档：<https://docs.python.org/3/library/configparser.html#module-configparser>\n\n今天在研究MySQL Connector for Python的时候无意间发现原来Python自带了设置与读取配置信息的模块的，有了这么一个功能就能够在一个\n单独的文件里面写上一些敏感信息，比如你的数据库的用户名密码等，以后要使用的时候直接读取该文件即可。这里简要描述一下其使用方法。\n\n首先，得要有一个文件用来保存配置信息，格式如下setting.conf：\n\n\n\n    [DATABASE]\n    Port = 21\n    Username = haofly\n    Password = 123456\n    Database = test\n\n\n\n\n    [DEFAULT]\n    User = hg\n\n\n需要注意的是，在配置文件里字符串是不加引号的，因为无论是字符串还是数字，读取出来都是字符串的形式。\n\n在另一个文件中使用方法如下：\n\n\n\n    import configparser\n\n\n\n\n    config = configparser.ConfigParser()\n    config.sections()\n    config.read('co.config')\n    print(config['DATABASE']['Username'])\n\n打印出来`haofly`\n","source":"_posts/python-configparser.md","raw":"---\ntitle: \"Python3使用configparser模块设置配置信息\"\ndate: 2014-10-19 20:47:37\ncategories: 编程之路\n---\n参考文档：<https://docs.python.org/3/library/configparser.html#module-configparser>\n\n今天在研究MySQL Connector for Python的时候无意间发现原来Python自带了设置与读取配置信息的模块的，有了这么一个功能就能够在一个\n单独的文件里面写上一些敏感信息，比如你的数据库的用户名密码等，以后要使用的时候直接读取该文件即可。这里简要描述一下其使用方法。\n\n首先，得要有一个文件用来保存配置信息，格式如下setting.conf：\n\n\n\n    [DATABASE]\n    Port = 21\n    Username = haofly\n    Password = 123456\n    Database = test\n\n\n\n\n    [DEFAULT]\n    User = hg\n\n\n需要注意的是，在配置文件里字符串是不加引号的，因为无论是字符串还是数字，读取出来都是字符串的形式。\n\n在另一个文件中使用方法如下：\n\n\n\n    import configparser\n\n\n\n\n    config = configparser.ConfigParser()\n    config.sections()\n    config.read('co.config')\n    print(config['DATABASE']['Username'])\n\n打印出来`haofly`\n","slug":"python-configparser","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfn004n9vnzo2etoggu","content":"<p>参考文档：<a href=\"https://docs.python.org/3/library/configparser.html#module-configparser\" target=\"_blank\" rel=\"external\">https://docs.python.org/3/library/configparser.html#module-configparser</a></p>\n<p>今天在研究MySQL Connector for Python的时候无意间发现原来Python自带了设置与读取配置信息的模块的，有了这么一个功能就能够在一个<br>单独的文件里面写上一些敏感信息，比如你的数据库的用户名密码等，以后要使用的时候直接读取该文件即可。这里简要描述一下其使用方法。</p>\n<p>首先，得要有一个文件用来保存配置信息，格式如下setting.conf：</p>\n<pre><code>[DATABASE]\nPort = 21\nUsername = haofly\nPassword = 123456\nDatabase = test\n\n\n\n\n[DEFAULT]\nUser = hg\n</code></pre><p>需要注意的是，在配置文件里字符串是不加引号的，因为无论是字符串还是数字，读取出来都是字符串的形式。</p>\n<p>在另一个文件中使用方法如下：</p>\n<pre><code>import configparser\n\n\n\n\nconfig = configparser.ConfigParser()\nconfig.sections()\nconfig.read(&apos;co.config&apos;)\nprint(config[&apos;DATABASE&apos;][&apos;Username&apos;])\n</code></pre><p>打印出来<code>haofly</code></p>\n","excerpt":"","more":"<p>参考文档：<a href=\"https://docs.python.org/3/library/configparser.html#module-configparser\">https://docs.python.org/3/library/configparser.html#module-configparser</a></p>\n<p>今天在研究MySQL Connector for Python的时候无意间发现原来Python自带了设置与读取配置信息的模块的，有了这么一个功能就能够在一个<br>单独的文件里面写上一些敏感信息，比如你的数据库的用户名密码等，以后要使用的时候直接读取该文件即可。这里简要描述一下其使用方法。</p>\n<p>首先，得要有一个文件用来保存配置信息，格式如下setting.conf：</p>\n<pre><code>[DATABASE]\nPort = 21\nUsername = haofly\nPassword = 123456\nDatabase = test\n\n\n\n\n[DEFAULT]\nUser = hg\n</code></pre><p>需要注意的是，在配置文件里字符串是不加引号的，因为无论是字符串还是数字，读取出来都是字符串的形式。</p>\n<p>在另一个文件中使用方法如下：</p>\n<pre><code>import configparser\n\n\n\n\nconfig = configparser.ConfigParser()\nconfig.sections()\nconfig.read(&apos;co.config&apos;)\nprint(config[&apos;DATABASE&apos;][&apos;Username&apos;])\n</code></pre><p>打印出来<code>haofly</code></p>\n"},{"title":"MySQL单机多实例","date":"2016-03-09T06:37:29.000Z","_content":"这是我们公司的实习内容之一，以前一直以为在单机上部署多个MySQL就是起多个进程就行了，too yuang too simple，原来MySQL默认提供了单机多实例功能的。  \n配置和使用过程如下(CentOS)：\n\n1. `mysqld_multi --example`这个可以直接查看MySQL提供的多实例配置文件的配置内容样例，基本上可以直接拿来就用\n2. `mysql_install_db --datadir=/tmp/mariadb/data1`以这种方式创建多个数据库存放目录，**一定要注意不要放在/root目录下，不然会出现什么Aria无法加载的情况**\n3. `vim /etc/my.cnf`内容如下：\n\n```\n[mysqld_multi]\nmysqld     = /usr/bin/mysqld_safe\nmysqladmin = /usr/bin/mysqladmin\nuser       = root # mysql\npassword   = mysql\n\t\n[mysqld2]\nsocket     = /tmp/mysql.sock2\nport       = 3307\npid-file   = /tmp/hostname.pid2\ndatadir    = /tmp/data1\nuser       = mysql\n\t\n[mysqld3]\nsocket     = /tmp/mysql.sock3\nport       = 3308\npid-file   = /tmp/hostname.pid3\ndatadir    = /tmp/data2\nuser       = mysql\n```\n4. 启动实例\n\n```\nmysqld_multi start      # 启动实例\nmysqld_multi stop\nmysqld_multi report     # 查看两个实例运行状态\n```\n另外，实例的日志文件默认是在实例文件夹下的`localhost.localdomain.err`文件里，启动完实例后，还要连接实例进行初始密码设置\n","source":"_posts/mysql-multi-instance.md","raw":"---\ntitle: \"MySQL单机多实例\"\ndate: 2016-03-09 14:37:29\ncategories: 编程之路\n---\n这是我们公司的实习内容之一，以前一直以为在单机上部署多个MySQL就是起多个进程就行了，too yuang too simple，原来MySQL默认提供了单机多实例功能的。  \n配置和使用过程如下(CentOS)：\n\n1. `mysqld_multi --example`这个可以直接查看MySQL提供的多实例配置文件的配置内容样例，基本上可以直接拿来就用\n2. `mysql_install_db --datadir=/tmp/mariadb/data1`以这种方式创建多个数据库存放目录，**一定要注意不要放在/root目录下，不然会出现什么Aria无法加载的情况**\n3. `vim /etc/my.cnf`内容如下：\n\n```\n[mysqld_multi]\nmysqld     = /usr/bin/mysqld_safe\nmysqladmin = /usr/bin/mysqladmin\nuser       = root # mysql\npassword   = mysql\n\t\n[mysqld2]\nsocket     = /tmp/mysql.sock2\nport       = 3307\npid-file   = /tmp/hostname.pid2\ndatadir    = /tmp/data1\nuser       = mysql\n\t\n[mysqld3]\nsocket     = /tmp/mysql.sock3\nport       = 3308\npid-file   = /tmp/hostname.pid3\ndatadir    = /tmp/data2\nuser       = mysql\n```\n4. 启动实例\n\n```\nmysqld_multi start      # 启动实例\nmysqld_multi stop\nmysqld_multi report     # 查看两个实例运行状态\n```\n另外，实例的日志文件默认是在实例文件夹下的`localhost.localdomain.err`文件里，启动完实例后，还要连接实例进行初始密码设置\n","slug":"mysql-multi-instance","published":1,"updated":"2016-04-13T06:57:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfp004p9vnzh3o4y392","content":"<p>这是我们公司的实习内容之一，以前一直以为在单机上部署多个MySQL就是起多个进程就行了，too yuang too simple，原来MySQL默认提供了单机多实例功能的。<br>配置和使用过程如下(CentOS)：</p>\n<ol>\n<li><code>mysqld_multi --example</code>这个可以直接查看MySQL提供的多实例配置文件的配置内容样例，基本上可以直接拿来就用</li>\n<li><code>mysql_install_db --datadir=/tmp/mariadb/data1</code>以这种方式创建多个数据库存放目录，<strong>一定要注意不要放在/root目录下，不然会出现什么Aria无法加载的情况</strong></li>\n<li><code>vim /etc/my.cnf</code>内容如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld_multi]</div><div class=\"line\">mysqld     = /usr/bin/mysqld_safe</div><div class=\"line\">mysqladmin = /usr/bin/mysqladmin</div><div class=\"line\">user       = root # mysql</div><div class=\"line\">password   = mysql</div><div class=\"line\">\t</div><div class=\"line\">[mysqld2]</div><div class=\"line\">socket     = /tmp/mysql.sock2</div><div class=\"line\">port       = 3307</div><div class=\"line\">pid-file   = /tmp/hostname.pid2</div><div class=\"line\">datadir    = /tmp/data1</div><div class=\"line\">user       = mysql</div><div class=\"line\">\t</div><div class=\"line\">[mysqld3]</div><div class=\"line\">socket     = /tmp/mysql.sock3</div><div class=\"line\">port       = 3308</div><div class=\"line\">pid-file   = /tmp/hostname.pid3</div><div class=\"line\">datadir    = /tmp/data2</div><div class=\"line\">user       = mysql</div></pre></td></tr></table></figure>\n<ol>\n<li>启动实例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqld_multi start      # 启动实例</div><div class=\"line\">mysqld_multi stop</div><div class=\"line\">mysqld_multi report     # 查看两个实例运行状态</div></pre></td></tr></table></figure>\n<p>另外，实例的日志文件默认是在实例文件夹下的<code>localhost.localdomain.err</code>文件里，启动完实例后，还要连接实例进行初始密码设置</p>\n","excerpt":"","more":"<p>这是我们公司的实习内容之一，以前一直以为在单机上部署多个MySQL就是起多个进程就行了，too yuang too simple，原来MySQL默认提供了单机多实例功能的。<br>配置和使用过程如下(CentOS)：</p>\n<ol>\n<li><code>mysqld_multi --example</code>这个可以直接查看MySQL提供的多实例配置文件的配置内容样例，基本上可以直接拿来就用</li>\n<li><code>mysql_install_db --datadir=/tmp/mariadb/data1</code>以这种方式创建多个数据库存放目录，<strong>一定要注意不要放在/root目录下，不然会出现什么Aria无法加载的情况</strong></li>\n<li><code>vim /etc/my.cnf</code>内容如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld_multi]</div><div class=\"line\">mysqld     = /usr/bin/mysqld_safe</div><div class=\"line\">mysqladmin = /usr/bin/mysqladmin</div><div class=\"line\">user       = root # mysql</div><div class=\"line\">password   = mysql</div><div class=\"line\">\t</div><div class=\"line\">[mysqld2]</div><div class=\"line\">socket     = /tmp/mysql.sock2</div><div class=\"line\">port       = 3307</div><div class=\"line\">pid-file   = /tmp/hostname.pid2</div><div class=\"line\">datadir    = /tmp/data1</div><div class=\"line\">user       = mysql</div><div class=\"line\">\t</div><div class=\"line\">[mysqld3]</div><div class=\"line\">socket     = /tmp/mysql.sock3</div><div class=\"line\">port       = 3308</div><div class=\"line\">pid-file   = /tmp/hostname.pid3</div><div class=\"line\">datadir    = /tmp/data2</div><div class=\"line\">user       = mysql</div></pre></td></tr></table></figure>\n<ol>\n<li>启动实例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqld_multi start      # 启动实例</div><div class=\"line\">mysqld_multi stop</div><div class=\"line\">mysqld_multi report     # 查看两个实例运行状态</div></pre></td></tr></table></figure>\n<p>另外，实例的日志文件默认是在实例文件夹下的<code>localhost.localdomain.err</code>文件里，启动完实例后，还要连接实例进行初始密码设置</p>\n"},{"title":"使用PDB调试Python程序","date":"2015-07-11T09:18:07.000Z","_content":"pdb是Python自带的类gdb、cdb的调试工具。\n\n在Sublime Text的SublimeREPL插件提供了pdb调试应用程序的功能，但是由于手上项目package太过复杂，所以这次我就直接在Django\n代码要调试的地方插入pdb代码，这样相当于直接在那个地方下了一个断点。可以在任何地方插入如下代码进行中断，即使是Django也能通过这种方式进行调试：\n\n\n\n    import pdb; pdb.set_trace()\n\npdb常用命令：\n\n  * n：执行下一行\n  * s：执行下一行，如果有函数，会进入函数体\n  * c：让程序正常运行，直到遇到断点\n  * p：**打印某个变量**\n  * ！：感叹号后面跟一个语句，可以直接改变某个变量\n  * h：帮助\n  * l：列出当前将要运行的代码块\n  * b：设置断点，例如'b 12'表示在第12行下端点，'b a.py:12'表示在a.py这个文件的第12行下断点\n  * cl：清楚所有的断点\n  * j：跳到指定的行数\n  * a：打印当前函数的参数\n  * q：推出调试\n","source":"_posts/pdb-\tdebug-python.md","raw":"---\ntitle: \"使用PDB调试Python程序\"\ndate: 2015-07-11 17:18:07\ncategories: 编程之路\n---\npdb是Python自带的类gdb、cdb的调试工具。\n\n在Sublime Text的SublimeREPL插件提供了pdb调试应用程序的功能，但是由于手上项目package太过复杂，所以这次我就直接在Django\n代码要调试的地方插入pdb代码，这样相当于直接在那个地方下了一个断点。可以在任何地方插入如下代码进行中断，即使是Django也能通过这种方式进行调试：\n\n\n\n    import pdb; pdb.set_trace()\n\npdb常用命令：\n\n  * n：执行下一行\n  * s：执行下一行，如果有函数，会进入函数体\n  * c：让程序正常运行，直到遇到断点\n  * p：**打印某个变量**\n  * ！：感叹号后面跟一个语句，可以直接改变某个变量\n  * h：帮助\n  * l：列出当前将要运行的代码块\n  * b：设置断点，例如'b 12'表示在第12行下端点，'b a.py:12'表示在a.py这个文件的第12行下断点\n  * cl：清楚所有的断点\n  * j：跳到指定的行数\n  * a：打印当前函数的参数\n  * q：推出调试\n","slug":"pdb-\tdebug-python","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfr004r9vnzrir8nijt","content":"<p>pdb是Python自带的类gdb、cdb的调试工具。</p>\n<p>在Sublime Text的SublimeREPL插件提供了pdb调试应用程序的功能，但是由于手上项目package太过复杂，所以这次我就直接在Django<br>代码要调试的地方插入pdb代码，这样相当于直接在那个地方下了一个断点。可以在任何地方插入如下代码进行中断，即使是Django也能通过这种方式进行调试：</p>\n<pre><code>import pdb; pdb.set_trace()\n</code></pre><p>pdb常用命令：</p>\n<ul>\n<li>n：执行下一行</li>\n<li>s：执行下一行，如果有函数，会进入函数体</li>\n<li>c：让程序正常运行，直到遇到断点</li>\n<li>p：<strong>打印某个变量</strong></li>\n<li>！：感叹号后面跟一个语句，可以直接改变某个变量</li>\n<li>h：帮助</li>\n<li>l：列出当前将要运行的代码块</li>\n<li>b：设置断点，例如’b 12’表示在第12行下端点，’b a.py:12’表示在a.py这个文件的第12行下断点</li>\n<li>cl：清楚所有的断点</li>\n<li>j：跳到指定的行数</li>\n<li>a：打印当前函数的参数</li>\n<li>q：推出调试</li>\n</ul>\n","excerpt":"","more":"<p>pdb是Python自带的类gdb、cdb的调试工具。</p>\n<p>在Sublime Text的SublimeREPL插件提供了pdb调试应用程序的功能，但是由于手上项目package太过复杂，所以这次我就直接在Django<br>代码要调试的地方插入pdb代码，这样相当于直接在那个地方下了一个断点。可以在任何地方插入如下代码进行中断，即使是Django也能通过这种方式进行调试：</p>\n<pre><code>import pdb; pdb.set_trace()\n</code></pre><p>pdb常用命令：</p>\n<ul>\n<li>n：执行下一行</li>\n<li>s：执行下一行，如果有函数，会进入函数体</li>\n<li>c：让程序正常运行，直到遇到断点</li>\n<li>p：<strong>打印某个变量</strong></li>\n<li>！：感叹号后面跟一个语句，可以直接改变某个变量</li>\n<li>h：帮助</li>\n<li>l：列出当前将要运行的代码块</li>\n<li>b：设置断点，例如’b 12’表示在第12行下端点，’b a.py:12’表示在a.py这个文件的第12行下断点</li>\n<li>cl：清楚所有的断点</li>\n<li>j：跳到指定的行数</li>\n<li>a：打印当前函数的参数</li>\n<li>q：推出调试</li>\n</ul>\n"},{"title":"使用Python和Chrome下载所有QQ好友相册","date":"2014-10-08T00:23:13.000Z","_content":"上一次用cURL获取了QQ的好友列表，跳过了验证过程，感觉特别爽，所以趁热打铁，直接又写了个获取所有QQ好友相册的代码。\n\n环境：Python3 + Chrome + Windows7\n\n首先得要获取到所有QQ好友的QQ号码，直接参考[《使用Python3和Chrome获取QQ好友列表》](http://haofly.net/qqlist/\n\"Link: http://haofly.net/qqlist/\" )，当然，如果你想要指定的号码，那么直接在**_qqlist.txt_**里写上其QQ号\n码即可(不过获取之后是不用处理末尾的'\\\\n'的，因为我当时写入的时候加入了)。\n\n然后，和那篇文章一样，获取cURL。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.png)  \n首先在任意一个_**user.qzone.qq.com/QQ号码/4**_页面刷新，在审查里面的Network获取_fcg_list_album_的cURL\n，然后，再随便点进一个相册获取_cgi_list_photo_的cURL，其中一个是获取相册列表的，一个是获取某相册下照片列表的。\n\n然后将两个字符串分别替换代码16/17行的get_album和get_photo\n\n\n\n    #-_- coding: UTF-8 -_-\n    import os, sys\n    import re\n    import subprocess\n    import shlex\n    import urllib.request\n    import json\n    import codecs\n    import datetime\n\n\n\n\n    # 我最先是把get_album和get_photo的值存储在request_curl.py文件里面的\n\n\n\n\n    # from request_curl import *\n\n\n\n\n    # 添加curl的环境变量\n\n\n\n\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')\n\n\n\n\n    # 获取原始curl请求\n\n\n\n\n    origin_album = get_album\n    origin_photo = get_photo\n\n\n\n\n    # 获取目标QQ\n\n\n\n\n    fp = open('qqlist.txt', 'r')\n    qqlist = fp.readlines()\n    for i in range(len(qqlist)):\n        qqlist[i] = qqlist[i][:-1]\n    fp.close()\n\n\n\n\n    for target in qqlist:\n            log = \\{\\}                    # 下载日志\n            log['qq'] = target          # QQ号\n            log['access'] = 1           # 是否允许访问\n            log['time'] = datetime.datetime.now()   # 下载完成后记录花费的时间\n            log['album_count'] = 0      # 相册总数\n            log['photo_count'] = 0      # 照片总数\n\n\n\n\n\n        print('当前QQ：' + target)\n        try:\n            os.makedirs('photos/' + target)                                             # 建立相应的文件夹\n        except:\n            os.removedirs('photos/' + target)\n            os.makedirs('photos/' + target)\n        # 先得到正确的curl，然后执行获取json数据\n        curl = origin_album.replace('&amp;hostUin=1129029735', '&amp;hostUin=' + target)    # 被访问者\n        curl = curl.replace('&amp;pageNumModeSort=40', '&amp;pageNumModeSort=100')          # 显示相册数量\n        args = shlex.split(curl)\n        result = subprocess.check_output(args).decode('utf-8')\n        convert = result[result.find('(') + 1 : result.find(')', -1) -1]            # 去除不标准的json数据\n        output = json.loads(convert)                                                # 最终json数据\n        if(output['code'] == -4009):\n            log['access'] = 0           # 是否允许访问\n            fp = open('photos/' + target + '/log.txt', 'w', encoding='utf-8')       # 日志文件，记录时间与数量\n            fp.writelines(str(log))\n            fp.close()\n            continue\n\n        # output['data']['albumListModeSort']就是相册列表\n        # 艹，也有可能output['data']['albumListModeClass'][0]['albumList']是相册列表\n        # 最后才发现，output['data']['albumListModeClass']也有可能是相册列表\n        try:\n            if(output['data']['albumListModeSort'] == None):\n                albumList = None\n            else:\n                albumList = output['data']['albumListModeSort']\n        except:\n            if(output['data']['albumListModeClass'] == None):\n                albumList = None\n            else:\n                albumList = output['data']['albumListModeClass'][0]['albumList']\n\n        # 我服都服了，这么大个人了，居然还有没有相册的\n        if(albumList == None):\n            continue\n\n        theSameAlbumName = 0    # 防止同名相册的出现\n        print(albumList)\n        for album in albumList:\n            log['album_count'] += 1\n            print('当前相册：' + album['name'])\n            if(album['allowAccess'] == 0):                  # 相册无法直接访问(需要密码或者禁止访问)\n                continue\n\n            # album['id']就是照片列表的ID\n            # 获取照片列表数据\n            curl = origin_photo.replace('&amp;hostUin=1129029735', '&amp;hostUin=' + target)\n            curl = curl.replace('&amp;topicId=V10HYl1S33NLS5', '&amp;topicId=' + album['id'])\n            curl = curl.replace('&amp;pageNum=30', '&amp;pageNum=600')  # QQ空间每个相册最大貌似不会超过512\n            args = shlex.split(curl)\n            result = subprocess.check_output(args).decode('utf-8')\n            convert = result[result.find('(') + 1 : result.find(')', -1) -1]\n            output = json.loads(convert)\n\n            if(output['code'] == -4404):\n                continue\n\n            # 相册名里面会不会也有奇葩名字呢\n            filt = re.compile(r'\\\\\\\\|/|:|\\\\*|\\\\?|&lt;|&gt;|\\\\||\\\\.')\n            album['name'] = re.sub(filt, '', album['name'])\n            # 我服都服了，QQ空间居然还允许同名的相册。。。\n            albumname = album['name'].replace(' ', '')\n            filelist = os.listdir('photos/' + target + '/')\n            if (albumname in filelist) or (len(albumname) == 0):\n                albumname = albumname + '_' + str(theSameAlbumName)\n                theSameAlbumName += 1\n\n            os.makedirs('photos/' + target + '/' + albumname)\n            same = 0    # 防止同名\n\n            # 获取该相册下的每一张照片，如果相册为空，那么output['data']['photoList'] = None，艹\n            photoList = output['data']['photoList']\n            if(photoList == None):\n                continue\n\n            for photo in photoList:\n                log['photo_count'] += 1\n                print('当前照片' + photo['name'])\n\n                # 图片格式由photo['phototype']字段(整型)控制\n                # 1：jpg\n                # 3：png\n                phototype = \\{'1': '.jpg', '2': '.gif', '3': '.png', '5': '.jpg', '10': '.jpg'\\}\n                try:\n                    format = phototype[str(photo['phototype'])]\n                except:\n                    format = '.jpg'\n\n                # 建立文件夹并下载图片\n                # QQ图片里面有太多的特殊字符了\n                photoname = photo['name']\n                filelist = os.listdir('photos/' + target + '/' + albumname)\n                for i in range(len(filelist)):\n                    filelist[i] = filelist[i][:-4]\n                photoname = photoname.replace(' ','')\n\n                if (photoname in filelist) or (len(photoname) == 0):\n                    photoname = photoname + '_' + str(same)\n                    same += 1\n                # 文件名中不能有特殊字符\n                filt = re.compile(r'\\\\\\\\|/|:|\\\\*|\\\\?|&lt;|&gt;|\\\\||\\\\.|\\\\n|\\\\t|\\\\\"')\n                photoname = re.sub(filt, '', photoname)\n\n                path = 'photos\\\\\\\\' + target + '\\\\\\\\' + albumname + '\\\\\\\\' + photoname + format\n                try:\n                    urllib.request.urlretrieve(photo['url'], path)\n                except urllib.error.ContentTooShortError as e:\n                    print('啥子错误哟')\n\n        fp = open('photos/' + target + '/log.txt', 'w', encoding='utf-8')       # 日志文件，记录时间与数量\n        log['time'] = (datetime.datetime.now() - log['time']).seconds\n        log['time'] = str(log['time']) + 's'\n        fp.writelines(str(log))\n        fp.close()\n        print('当前QQ：' + target + '下载完毕')</pre>\n\n\n以下是我获取到的结果，可以说，百分之九十九都成功获取到了，但是有几个好友反映貌似他们的没有获取完，我去看了下，又是获取的json数据结构的问题，我真的服了，\n腾讯同一个功能搞那么多数据结构来干嘛，操蛋。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.png)  \n另外写了一个统计耗时的脚本，因为我在每个相册的日志里都记录了下载时间的，所以直接就统计了\n\n\n\n    # 统计log.txt里面所有的数据\n\n\n\n\n    # 根目录是photos\n\n\n\n\n    import os\n    import json\n    alltime = 0\n    for i in os.walk('photos'):\n        if(len(i[2]) == 1 and i[2][0] == 'log.txt'):\n            fp = open(i[0] + '/' + 'log.txt', 'r')\n            data = fp.read()\n            data = data.replace('\\\\'', '\"')\n            if(data.find('datetime') < 0):\n                #print(data)\n                output = json.loads(data)\n                time = output['time'][:-1]\n                alltime += int(time)\n                fp.close()\n    print(str(alltime/60/60) + 'h')\n\n结果是13.797500000000001h，和我预计的差不多，虽然是4M的网速，但是建立连接建立过多，而且没有用到多线程，这个时间还是合情合理的。\n\nPS：正在把这些照片上传到云盘，哈哈，要是泄漏了可不要说我是故意的 还有就是请勿模仿，我虽然总共下载了400个好友，但是停下来了十多次，都是数据结构出现问题\n，请千万不要为此折腾，我纯属是为了完成自己以前的愿望罢了，下载下来也没用。\n","source":"_posts/python-Chrome-QQ-album.md","raw":"---\ntitle: \"使用Python和Chrome下载所有QQ好友相册\"\ndate: 2014-10-08 08:23:13\ncategories: 就是爱玩\n---\n上一次用cURL获取了QQ的好友列表，跳过了验证过程，感觉特别爽，所以趁热打铁，直接又写了个获取所有QQ好友相册的代码。\n\n环境：Python3 + Chrome + Windows7\n\n首先得要获取到所有QQ好友的QQ号码，直接参考[《使用Python3和Chrome获取QQ好友列表》](http://haofly.net/qqlist/\n\"Link: http://haofly.net/qqlist/\" )，当然，如果你想要指定的号码，那么直接在**_qqlist.txt_**里写上其QQ号\n码即可(不过获取之后是不用处理末尾的'\\\\n'的，因为我当时写入的时候加入了)。\n\n然后，和那篇文章一样，获取cURL。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.png)  \n首先在任意一个_**user.qzone.qq.com/QQ号码/4**_页面刷新，在审查里面的Network获取_fcg_list_album_的cURL\n，然后，再随便点进一个相册获取_cgi_list_photo_的cURL，其中一个是获取相册列表的，一个是获取某相册下照片列表的。\n\n然后将两个字符串分别替换代码16/17行的get_album和get_photo\n\n\n\n    #-_- coding: UTF-8 -_-\n    import os, sys\n    import re\n    import subprocess\n    import shlex\n    import urllib.request\n    import json\n    import codecs\n    import datetime\n\n\n\n\n    # 我最先是把get_album和get_photo的值存储在request_curl.py文件里面的\n\n\n\n\n    # from request_curl import *\n\n\n\n\n    # 添加curl的环境变量\n\n\n\n\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')\n\n\n\n\n    # 获取原始curl请求\n\n\n\n\n    origin_album = get_album\n    origin_photo = get_photo\n\n\n\n\n    # 获取目标QQ\n\n\n\n\n    fp = open('qqlist.txt', 'r')\n    qqlist = fp.readlines()\n    for i in range(len(qqlist)):\n        qqlist[i] = qqlist[i][:-1]\n    fp.close()\n\n\n\n\n    for target in qqlist:\n            log = \\{\\}                    # 下载日志\n            log['qq'] = target          # QQ号\n            log['access'] = 1           # 是否允许访问\n            log['time'] = datetime.datetime.now()   # 下载完成后记录花费的时间\n            log['album_count'] = 0      # 相册总数\n            log['photo_count'] = 0      # 照片总数\n\n\n\n\n\n        print('当前QQ：' + target)\n        try:\n            os.makedirs('photos/' + target)                                             # 建立相应的文件夹\n        except:\n            os.removedirs('photos/' + target)\n            os.makedirs('photos/' + target)\n        # 先得到正确的curl，然后执行获取json数据\n        curl = origin_album.replace('&amp;hostUin=1129029735', '&amp;hostUin=' + target)    # 被访问者\n        curl = curl.replace('&amp;pageNumModeSort=40', '&amp;pageNumModeSort=100')          # 显示相册数量\n        args = shlex.split(curl)\n        result = subprocess.check_output(args).decode('utf-8')\n        convert = result[result.find('(') + 1 : result.find(')', -1) -1]            # 去除不标准的json数据\n        output = json.loads(convert)                                                # 最终json数据\n        if(output['code'] == -4009):\n            log['access'] = 0           # 是否允许访问\n            fp = open('photos/' + target + '/log.txt', 'w', encoding='utf-8')       # 日志文件，记录时间与数量\n            fp.writelines(str(log))\n            fp.close()\n            continue\n\n        # output['data']['albumListModeSort']就是相册列表\n        # 艹，也有可能output['data']['albumListModeClass'][0]['albumList']是相册列表\n        # 最后才发现，output['data']['albumListModeClass']也有可能是相册列表\n        try:\n            if(output['data']['albumListModeSort'] == None):\n                albumList = None\n            else:\n                albumList = output['data']['albumListModeSort']\n        except:\n            if(output['data']['albumListModeClass'] == None):\n                albumList = None\n            else:\n                albumList = output['data']['albumListModeClass'][0]['albumList']\n\n        # 我服都服了，这么大个人了，居然还有没有相册的\n        if(albumList == None):\n            continue\n\n        theSameAlbumName = 0    # 防止同名相册的出现\n        print(albumList)\n        for album in albumList:\n            log['album_count'] += 1\n            print('当前相册：' + album['name'])\n            if(album['allowAccess'] == 0):                  # 相册无法直接访问(需要密码或者禁止访问)\n                continue\n\n            # album['id']就是照片列表的ID\n            # 获取照片列表数据\n            curl = origin_photo.replace('&amp;hostUin=1129029735', '&amp;hostUin=' + target)\n            curl = curl.replace('&amp;topicId=V10HYl1S33NLS5', '&amp;topicId=' + album['id'])\n            curl = curl.replace('&amp;pageNum=30', '&amp;pageNum=600')  # QQ空间每个相册最大貌似不会超过512\n            args = shlex.split(curl)\n            result = subprocess.check_output(args).decode('utf-8')\n            convert = result[result.find('(') + 1 : result.find(')', -1) -1]\n            output = json.loads(convert)\n\n            if(output['code'] == -4404):\n                continue\n\n            # 相册名里面会不会也有奇葩名字呢\n            filt = re.compile(r'\\\\\\\\|/|:|\\\\*|\\\\?|&lt;|&gt;|\\\\||\\\\.')\n            album['name'] = re.sub(filt, '', album['name'])\n            # 我服都服了，QQ空间居然还允许同名的相册。。。\n            albumname = album['name'].replace(' ', '')\n            filelist = os.listdir('photos/' + target + '/')\n            if (albumname in filelist) or (len(albumname) == 0):\n                albumname = albumname + '_' + str(theSameAlbumName)\n                theSameAlbumName += 1\n\n            os.makedirs('photos/' + target + '/' + albumname)\n            same = 0    # 防止同名\n\n            # 获取该相册下的每一张照片，如果相册为空，那么output['data']['photoList'] = None，艹\n            photoList = output['data']['photoList']\n            if(photoList == None):\n                continue\n\n            for photo in photoList:\n                log['photo_count'] += 1\n                print('当前照片' + photo['name'])\n\n                # 图片格式由photo['phototype']字段(整型)控制\n                # 1：jpg\n                # 3：png\n                phototype = \\{'1': '.jpg', '2': '.gif', '3': '.png', '5': '.jpg', '10': '.jpg'\\}\n                try:\n                    format = phototype[str(photo['phototype'])]\n                except:\n                    format = '.jpg'\n\n                # 建立文件夹并下载图片\n                # QQ图片里面有太多的特殊字符了\n                photoname = photo['name']\n                filelist = os.listdir('photos/' + target + '/' + albumname)\n                for i in range(len(filelist)):\n                    filelist[i] = filelist[i][:-4]\n                photoname = photoname.replace(' ','')\n\n                if (photoname in filelist) or (len(photoname) == 0):\n                    photoname = photoname + '_' + str(same)\n                    same += 1\n                # 文件名中不能有特殊字符\n                filt = re.compile(r'\\\\\\\\|/|:|\\\\*|\\\\?|&lt;|&gt;|\\\\||\\\\.|\\\\n|\\\\t|\\\\\"')\n                photoname = re.sub(filt, '', photoname)\n\n                path = 'photos\\\\\\\\' + target + '\\\\\\\\' + albumname + '\\\\\\\\' + photoname + format\n                try:\n                    urllib.request.urlretrieve(photo['url'], path)\n                except urllib.error.ContentTooShortError as e:\n                    print('啥子错误哟')\n\n        fp = open('photos/' + target + '/log.txt', 'w', encoding='utf-8')       # 日志文件，记录时间与数量\n        log['time'] = (datetime.datetime.now() - log['time']).seconds\n        log['time'] = str(log['time']) + 's'\n        fp.writelines(str(log))\n        fp.close()\n        print('当前QQ：' + target + '下载完毕')</pre>\n\n\n以下是我获取到的结果，可以说，百分之九十九都成功获取到了，但是有几个好友反映貌似他们的没有获取完，我去看了下，又是获取的json数据结构的问题，我真的服了，\n腾讯同一个功能搞那么多数据结构来干嘛，操蛋。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.png)  \n另外写了一个统计耗时的脚本，因为我在每个相册的日志里都记录了下载时间的，所以直接就统计了\n\n\n\n    # 统计log.txt里面所有的数据\n\n\n\n\n    # 根目录是photos\n\n\n\n\n    import os\n    import json\n    alltime = 0\n    for i in os.walk('photos'):\n        if(len(i[2]) == 1 and i[2][0] == 'log.txt'):\n            fp = open(i[0] + '/' + 'log.txt', 'r')\n            data = fp.read()\n            data = data.replace('\\\\'', '\"')\n            if(data.find('datetime') < 0):\n                #print(data)\n                output = json.loads(data)\n                time = output['time'][:-1]\n                alltime += int(time)\n                fp.close()\n    print(str(alltime/60/60) + 'h')\n\n结果是13.797500000000001h，和我预计的差不多，虽然是4M的网速，但是建立连接建立过多，而且没有用到多线程，这个时间还是合情合理的。\n\nPS：正在把这些照片上传到云盘，哈哈，要是泄漏了可不要说我是故意的 还有就是请勿模仿，我虽然总共下载了400个好友，但是停下来了十多次，都是数据结构出现问题\n，请千万不要为此折腾，我纯属是为了完成自己以前的愿望罢了，下载下来也没用。\n","slug":"python-Chrome-QQ-album","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfs004t9vnzm6sc7zxc","content":"<p>上一次用cURL获取了QQ的好友列表，跳过了验证过程，感觉特别爽，所以趁热打铁，直接又写了个获取所有QQ好友相册的代码。</p>\n<p>环境：Python3 + Chrome + Windows7</p>\n<p>首先得要获取到所有QQ好友的QQ号码，直接参考<a href=\"http://haofly.net/qqlist/\" title=\"Link: http://haofly.net/qqlist/\">《使用Python3和Chrome获取QQ好友列表》</a>，当然，如果你想要指定的号码，那么直接在<strong><em>qqlist.txt</em></strong>里写上其QQ号<br>码即可(不过获取之后是不用处理末尾的’\\n’的，因为我当时写入的时候加入了)。</p>\n<p>然后，和那篇文章一样，获取cURL。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.png\" alt=\"\"><br>首先在任意一个<em><strong>user.qzone.qq.com/QQ号码/4</strong></em>页面刷新，在审查里面的Network获取_fcg_list<em>album</em>的cURL<br>，然后，再随便点进一个相册获取_cgi_list<em>photo</em>的cURL，其中一个是获取相册列表的，一个是获取某相册下照片列表的。</p>\n<p>然后将两个字符串分别替换代码16/17行的get_album和get_photo</p>\n<pre><code>#-_- coding: UTF-8 -_-\nimport os, sys\nimport re\nimport subprocess\nimport shlex\nimport urllib.request\nimport json\nimport codecs\nimport datetime\n\n\n\n\n# 我最先是把get_album和get_photo的值存储在request_curl.py文件里面的\n\n\n\n\n# from request_curl import *\n\n\n\n\n# 添加curl的环境变量\n\n\n\n\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)\n\n\n\n\n# 获取原始curl请求\n\n\n\n\norigin_album = get_album\norigin_photo = get_photo\n\n\n\n\n# 获取目标QQ\n\n\n\n\nfp = open(&apos;qqlist.txt&apos;, &apos;r&apos;)\nqqlist = fp.readlines()\nfor i in range(len(qqlist)):\n    qqlist[i] = qqlist[i][:-1]\nfp.close()\n\n\n\n\nfor target in qqlist:\n        log = \\{\\}                    # 下载日志\n        log[&apos;qq&apos;] = target          # QQ号\n        log[&apos;access&apos;] = 1           # 是否允许访问\n        log[&apos;time&apos;] = datetime.datetime.now()   # 下载完成后记录花费的时间\n        log[&apos;album_count&apos;] = 0      # 相册总数\n        log[&apos;photo_count&apos;] = 0      # 照片总数\n\n\n\n\n\n    print(&apos;当前QQ：&apos; + target)\n    try:\n        os.makedirs(&apos;photos/&apos; + target)                                             # 建立相应的文件夹\n    except:\n        os.removedirs(&apos;photos/&apos; + target)\n        os.makedirs(&apos;photos/&apos; + target)\n    # 先得到正确的curl，然后执行获取json数据\n    curl = origin_album.replace(&apos;&amp;amp;hostUin=1129029735&apos;, &apos;&amp;amp;hostUin=&apos; + target)    # 被访问者\n    curl = curl.replace(&apos;&amp;amp;pageNumModeSort=40&apos;, &apos;&amp;amp;pageNumModeSort=100&apos;)          # 显示相册数量\n    args = shlex.split(curl)\n    result = subprocess.check_output(args).decode(&apos;utf-8&apos;)\n    convert = result[result.find(&apos;(&apos;) + 1 : result.find(&apos;)&apos;, -1) -1]            # 去除不标准的json数据\n    output = json.loads(convert)                                                # 最终json数据\n    if(output[&apos;code&apos;] == -4009):\n        log[&apos;access&apos;] = 0           # 是否允许访问\n        fp = open(&apos;photos/&apos; + target + &apos;/log.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)       # 日志文件，记录时间与数量\n        fp.writelines(str(log))\n        fp.close()\n        continue\n\n    # output[&apos;data&apos;][&apos;albumListModeSort&apos;]就是相册列表\n    # 艹，也有可能output[&apos;data&apos;][&apos;albumListModeClass&apos;][0][&apos;albumList&apos;]是相册列表\n    # 最后才发现，output[&apos;data&apos;][&apos;albumListModeClass&apos;]也有可能是相册列表\n    try:\n        if(output[&apos;data&apos;][&apos;albumListModeSort&apos;] == None):\n            albumList = None\n        else:\n            albumList = output[&apos;data&apos;][&apos;albumListModeSort&apos;]\n    except:\n        if(output[&apos;data&apos;][&apos;albumListModeClass&apos;] == None):\n            albumList = None\n        else:\n            albumList = output[&apos;data&apos;][&apos;albumListModeClass&apos;][0][&apos;albumList&apos;]\n\n    # 我服都服了，这么大个人了，居然还有没有相册的\n    if(albumList == None):\n        continue\n\n    theSameAlbumName = 0    # 防止同名相册的出现\n    print(albumList)\n    for album in albumList:\n        log[&apos;album_count&apos;] += 1\n        print(&apos;当前相册：&apos; + album[&apos;name&apos;])\n        if(album[&apos;allowAccess&apos;] == 0):                  # 相册无法直接访问(需要密码或者禁止访问)\n            continue\n\n        # album[&apos;id&apos;]就是照片列表的ID\n        # 获取照片列表数据\n        curl = origin_photo.replace(&apos;&amp;amp;hostUin=1129029735&apos;, &apos;&amp;amp;hostUin=&apos; + target)\n        curl = curl.replace(&apos;&amp;amp;topicId=V10HYl1S33NLS5&apos;, &apos;&amp;amp;topicId=&apos; + album[&apos;id&apos;])\n        curl = curl.replace(&apos;&amp;amp;pageNum=30&apos;, &apos;&amp;amp;pageNum=600&apos;)  # QQ空间每个相册最大貌似不会超过512\n        args = shlex.split(curl)\n        result = subprocess.check_output(args).decode(&apos;utf-8&apos;)\n        convert = result[result.find(&apos;(&apos;) + 1 : result.find(&apos;)&apos;, -1) -1]\n        output = json.loads(convert)\n\n        if(output[&apos;code&apos;] == -4404):\n            continue\n\n        # 相册名里面会不会也有奇葩名字呢\n        filt = re.compile(r&apos;\\\\\\\\|/|:|\\\\*|\\\\?|&amp;lt;|&amp;gt;|\\\\||\\\\.&apos;)\n        album[&apos;name&apos;] = re.sub(filt, &apos;&apos;, album[&apos;name&apos;])\n        # 我服都服了，QQ空间居然还允许同名的相册。。。\n        albumname = album[&apos;name&apos;].replace(&apos; &apos;, &apos;&apos;)\n        filelist = os.listdir(&apos;photos/&apos; + target + &apos;/&apos;)\n        if (albumname in filelist) or (len(albumname) == 0):\n            albumname = albumname + &apos;_&apos; + str(theSameAlbumName)\n            theSameAlbumName += 1\n\n        os.makedirs(&apos;photos/&apos; + target + &apos;/&apos; + albumname)\n        same = 0    # 防止同名\n\n        # 获取该相册下的每一张照片，如果相册为空，那么output[&apos;data&apos;][&apos;photoList&apos;] = None，艹\n        photoList = output[&apos;data&apos;][&apos;photoList&apos;]\n        if(photoList == None):\n            continue\n\n        for photo in photoList:\n            log[&apos;photo_count&apos;] += 1\n            print(&apos;当前照片&apos; + photo[&apos;name&apos;])\n\n            # 图片格式由photo[&apos;phototype&apos;]字段(整型)控制\n            # 1：jpg\n            # 3：png\n            phototype = \\{&apos;1&apos;: &apos;.jpg&apos;, &apos;2&apos;: &apos;.gif&apos;, &apos;3&apos;: &apos;.png&apos;, &apos;5&apos;: &apos;.jpg&apos;, &apos;10&apos;: &apos;.jpg&apos;\\}\n            try:\n                format = phototype[str(photo[&apos;phototype&apos;])]\n            except:\n                format = &apos;.jpg&apos;\n\n            # 建立文件夹并下载图片\n            # QQ图片里面有太多的特殊字符了\n            photoname = photo[&apos;name&apos;]\n            filelist = os.listdir(&apos;photos/&apos; + target + &apos;/&apos; + albumname)\n            for i in range(len(filelist)):\n                filelist[i] = filelist[i][:-4]\n            photoname = photoname.replace(&apos; &apos;,&apos;&apos;)\n\n            if (photoname in filelist) or (len(photoname) == 0):\n                photoname = photoname + &apos;_&apos; + str(same)\n                same += 1\n            # 文件名中不能有特殊字符\n            filt = re.compile(r&apos;\\\\\\\\|/|:|\\\\*|\\\\?|&amp;lt;|&amp;gt;|\\\\||\\\\.|\\\\n|\\\\t|\\\\&quot;&apos;)\n            photoname = re.sub(filt, &apos;&apos;, photoname)\n\n            path = &apos;photos\\\\\\\\&apos; + target + &apos;\\\\\\\\&apos; + albumname + &apos;\\\\\\\\&apos; + photoname + format\n            try:\n                urllib.request.urlretrieve(photo[&apos;url&apos;], path)\n            except urllib.error.ContentTooShortError as e:\n                print(&apos;啥子错误哟&apos;)\n\n    fp = open(&apos;photos/&apos; + target + &apos;/log.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)       # 日志文件，记录时间与数量\n    log[&apos;time&apos;] = (datetime.datetime.now() - log[&apos;time&apos;]).seconds\n    log[&apos;time&apos;] = str(log[&apos;time&apos;]) + &apos;s&apos;\n    fp.writelines(str(log))\n    fp.close()\n    print(&apos;当前QQ：&apos; + target + &apos;下载完毕&apos;)&lt;/pre&gt;\n</code></pre><p>以下是我获取到的结果，可以说，百分之九十九都成功获取到了，但是有几个好友反映貌似他们的没有获取完，我去看了下，又是获取的json数据结构的问题，我真的服了，<br>腾讯同一个功能搞那么多数据结构来干嘛，操蛋。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.png\" alt=\"\"><br>另外写了一个统计耗时的脚本，因为我在每个相册的日志里都记录了下载时间的，所以直接就统计了</p>\n<pre><code># 统计log.txt里面所有的数据\n\n\n\n\n# 根目录是photos\n\n\n\n\nimport os\nimport json\nalltime = 0\nfor i in os.walk(&apos;photos&apos;):\n    if(len(i[2]) == 1 and i[2][0] == &apos;log.txt&apos;):\n        fp = open(i[0] + &apos;/&apos; + &apos;log.txt&apos;, &apos;r&apos;)\n        data = fp.read()\n        data = data.replace(&apos;\\\\&apos;&apos;, &apos;&quot;&apos;)\n        if(data.find(&apos;datetime&apos;) &lt; 0):\n            #print(data)\n            output = json.loads(data)\n            time = output[&apos;time&apos;][:-1]\n            alltime += int(time)\n            fp.close()\nprint(str(alltime/60/60) + &apos;h&apos;)\n</code></pre><p>结果是13.797500000000001h，和我预计的差不多，虽然是4M的网速，但是建立连接建立过多，而且没有用到多线程，这个时间还是合情合理的。</p>\n<p>PS：正在把这些照片上传到云盘，哈哈，要是泄漏了可不要说我是故意的 还有就是请勿模仿，我虽然总共下载了400个好友，但是停下来了十多次，都是数据结构出现问题<br>，请千万不要为此折腾，我纯属是为了完成自己以前的愿望罢了，下载下来也没用。</p>\n","excerpt":"","more":"<p>上一次用cURL获取了QQ的好友列表，跳过了验证过程，感觉特别爽，所以趁热打铁，直接又写了个获取所有QQ好友相册的代码。</p>\n<p>环境：Python3 + Chrome + Windows7</p>\n<p>首先得要获取到所有QQ好友的QQ号码，直接参考<a href=\"http://haofly.net/qqlist/\" title=\"Link: http://haofly.net/qqlist/\">《使用Python3和Chrome获取QQ好友列表》</a>，当然，如果你想要指定的号码，那么直接在<strong><em>qqlist.txt</em></strong>里写上其QQ号<br>码即可(不过获取之后是不用处理末尾的’\\n’的，因为我当时写入的时候加入了)。</p>\n<p>然后，和那篇文章一样，获取cURL。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_0.png\" alt=\"\"><br>首先在任意一个<em><strong>user.qzone.qq.com/QQ号码/4</strong></em>页面刷新，在审查里面的Network获取_fcg_list<em>album</em>的cURL<br>，然后，再随便点进一个相册获取_cgi_list<em>photo</em>的cURL，其中一个是获取相册列表的，一个是获取某相册下照片列表的。</p>\n<p>然后将两个字符串分别替换代码16/17行的get_album和get_photo</p>\n<pre><code>#-_- coding: UTF-8 -_-\nimport os, sys\nimport re\nimport subprocess\nimport shlex\nimport urllib.request\nimport json\nimport codecs\nimport datetime\n\n\n\n\n# 我最先是把get_album和get_photo的值存储在request_curl.py文件里面的\n\n\n\n\n# from request_curl import *\n\n\n\n\n# 添加curl的环境变量\n\n\n\n\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)\n\n\n\n\n# 获取原始curl请求\n\n\n\n\norigin_album = get_album\norigin_photo = get_photo\n\n\n\n\n# 获取目标QQ\n\n\n\n\nfp = open(&apos;qqlist.txt&apos;, &apos;r&apos;)\nqqlist = fp.readlines()\nfor i in range(len(qqlist)):\n    qqlist[i] = qqlist[i][:-1]\nfp.close()\n\n\n\n\nfor target in qqlist:\n        log = \\{\\}                    # 下载日志\n        log[&apos;qq&apos;] = target          # QQ号\n        log[&apos;access&apos;] = 1           # 是否允许访问\n        log[&apos;time&apos;] = datetime.datetime.now()   # 下载完成后记录花费的时间\n        log[&apos;album_count&apos;] = 0      # 相册总数\n        log[&apos;photo_count&apos;] = 0      # 照片总数\n\n\n\n\n\n    print(&apos;当前QQ：&apos; + target)\n    try:\n        os.makedirs(&apos;photos/&apos; + target)                                             # 建立相应的文件夹\n    except:\n        os.removedirs(&apos;photos/&apos; + target)\n        os.makedirs(&apos;photos/&apos; + target)\n    # 先得到正确的curl，然后执行获取json数据\n    curl = origin_album.replace(&apos;&amp;amp;hostUin=1129029735&apos;, &apos;&amp;amp;hostUin=&apos; + target)    # 被访问者\n    curl = curl.replace(&apos;&amp;amp;pageNumModeSort=40&apos;, &apos;&amp;amp;pageNumModeSort=100&apos;)          # 显示相册数量\n    args = shlex.split(curl)\n    result = subprocess.check_output(args).decode(&apos;utf-8&apos;)\n    convert = result[result.find(&apos;(&apos;) + 1 : result.find(&apos;)&apos;, -1) -1]            # 去除不标准的json数据\n    output = json.loads(convert)                                                # 最终json数据\n    if(output[&apos;code&apos;] == -4009):\n        log[&apos;access&apos;] = 0           # 是否允许访问\n        fp = open(&apos;photos/&apos; + target + &apos;/log.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)       # 日志文件，记录时间与数量\n        fp.writelines(str(log))\n        fp.close()\n        continue\n\n    # output[&apos;data&apos;][&apos;albumListModeSort&apos;]就是相册列表\n    # 艹，也有可能output[&apos;data&apos;][&apos;albumListModeClass&apos;][0][&apos;albumList&apos;]是相册列表\n    # 最后才发现，output[&apos;data&apos;][&apos;albumListModeClass&apos;]也有可能是相册列表\n    try:\n        if(output[&apos;data&apos;][&apos;albumListModeSort&apos;] == None):\n            albumList = None\n        else:\n            albumList = output[&apos;data&apos;][&apos;albumListModeSort&apos;]\n    except:\n        if(output[&apos;data&apos;][&apos;albumListModeClass&apos;] == None):\n            albumList = None\n        else:\n            albumList = output[&apos;data&apos;][&apos;albumListModeClass&apos;][0][&apos;albumList&apos;]\n\n    # 我服都服了，这么大个人了，居然还有没有相册的\n    if(albumList == None):\n        continue\n\n    theSameAlbumName = 0    # 防止同名相册的出现\n    print(albumList)\n    for album in albumList:\n        log[&apos;album_count&apos;] += 1\n        print(&apos;当前相册：&apos; + album[&apos;name&apos;])\n        if(album[&apos;allowAccess&apos;] == 0):                  # 相册无法直接访问(需要密码或者禁止访问)\n            continue\n\n        # album[&apos;id&apos;]就是照片列表的ID\n        # 获取照片列表数据\n        curl = origin_photo.replace(&apos;&amp;amp;hostUin=1129029735&apos;, &apos;&amp;amp;hostUin=&apos; + target)\n        curl = curl.replace(&apos;&amp;amp;topicId=V10HYl1S33NLS5&apos;, &apos;&amp;amp;topicId=&apos; + album[&apos;id&apos;])\n        curl = curl.replace(&apos;&amp;amp;pageNum=30&apos;, &apos;&amp;amp;pageNum=600&apos;)  # QQ空间每个相册最大貌似不会超过512\n        args = shlex.split(curl)\n        result = subprocess.check_output(args).decode(&apos;utf-8&apos;)\n        convert = result[result.find(&apos;(&apos;) + 1 : result.find(&apos;)&apos;, -1) -1]\n        output = json.loads(convert)\n\n        if(output[&apos;code&apos;] == -4404):\n            continue\n\n        # 相册名里面会不会也有奇葩名字呢\n        filt = re.compile(r&apos;\\\\\\\\|/|:|\\\\*|\\\\?|&amp;lt;|&amp;gt;|\\\\||\\\\.&apos;)\n        album[&apos;name&apos;] = re.sub(filt, &apos;&apos;, album[&apos;name&apos;])\n        # 我服都服了，QQ空间居然还允许同名的相册。。。\n        albumname = album[&apos;name&apos;].replace(&apos; &apos;, &apos;&apos;)\n        filelist = os.listdir(&apos;photos/&apos; + target + &apos;/&apos;)\n        if (albumname in filelist) or (len(albumname) == 0):\n            albumname = albumname + &apos;_&apos; + str(theSameAlbumName)\n            theSameAlbumName += 1\n\n        os.makedirs(&apos;photos/&apos; + target + &apos;/&apos; + albumname)\n        same = 0    # 防止同名\n\n        # 获取该相册下的每一张照片，如果相册为空，那么output[&apos;data&apos;][&apos;photoList&apos;] = None，艹\n        photoList = output[&apos;data&apos;][&apos;photoList&apos;]\n        if(photoList == None):\n            continue\n\n        for photo in photoList:\n            log[&apos;photo_count&apos;] += 1\n            print(&apos;当前照片&apos; + photo[&apos;name&apos;])\n\n            # 图片格式由photo[&apos;phototype&apos;]字段(整型)控制\n            # 1：jpg\n            # 3：png\n            phototype = \\{&apos;1&apos;: &apos;.jpg&apos;, &apos;2&apos;: &apos;.gif&apos;, &apos;3&apos;: &apos;.png&apos;, &apos;5&apos;: &apos;.jpg&apos;, &apos;10&apos;: &apos;.jpg&apos;\\}\n            try:\n                format = phototype[str(photo[&apos;phototype&apos;])]\n            except:\n                format = &apos;.jpg&apos;\n\n            # 建立文件夹并下载图片\n            # QQ图片里面有太多的特殊字符了\n            photoname = photo[&apos;name&apos;]\n            filelist = os.listdir(&apos;photos/&apos; + target + &apos;/&apos; + albumname)\n            for i in range(len(filelist)):\n                filelist[i] = filelist[i][:-4]\n            photoname = photoname.replace(&apos; &apos;,&apos;&apos;)\n\n            if (photoname in filelist) or (len(photoname) == 0):\n                photoname = photoname + &apos;_&apos; + str(same)\n                same += 1\n            # 文件名中不能有特殊字符\n            filt = re.compile(r&apos;\\\\\\\\|/|:|\\\\*|\\\\?|&amp;lt;|&amp;gt;|\\\\||\\\\.|\\\\n|\\\\t|\\\\&quot;&apos;)\n            photoname = re.sub(filt, &apos;&apos;, photoname)\n\n            path = &apos;photos\\\\\\\\&apos; + target + &apos;\\\\\\\\&apos; + albumname + &apos;\\\\\\\\&apos; + photoname + format\n            try:\n                urllib.request.urlretrieve(photo[&apos;url&apos;], path)\n            except urllib.error.ContentTooShortError as e:\n                print(&apos;啥子错误哟&apos;)\n\n    fp = open(&apos;photos/&apos; + target + &apos;/log.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)       # 日志文件，记录时间与数量\n    log[&apos;time&apos;] = (datetime.datetime.now() - log[&apos;time&apos;]).seconds\n    log[&apos;time&apos;] = str(log[&apos;time&apos;]) + &apos;s&apos;\n    fp.writelines(str(log))\n    fp.close()\n    print(&apos;当前QQ：&apos; + target + &apos;下载完毕&apos;)&lt;/pre&gt;\n</code></pre><p>以下是我获取到的结果，可以说，百分之九十九都成功获取到了，但是有几个好友反映貌似他们的没有获取完，我去看了下，又是获取的json数据结构的问题，我真的服了，<br>腾讯同一个功能搞那么多数据结构来干嘛，操蛋。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-Chrome-QQ-album_1.png\" alt=\"\"><br>另外写了一个统计耗时的脚本，因为我在每个相册的日志里都记录了下载时间的，所以直接就统计了</p>\n<pre><code># 统计log.txt里面所有的数据\n\n\n\n\n# 根目录是photos\n\n\n\n\nimport os\nimport json\nalltime = 0\nfor i in os.walk(&apos;photos&apos;):\n    if(len(i[2]) == 1 and i[2][0] == &apos;log.txt&apos;):\n        fp = open(i[0] + &apos;/&apos; + &apos;log.txt&apos;, &apos;r&apos;)\n        data = fp.read()\n        data = data.replace(&apos;\\\\&apos;&apos;, &apos;&quot;&apos;)\n        if(data.find(&apos;datetime&apos;) &lt; 0):\n            #print(data)\n            output = json.loads(data)\n            time = output[&apos;time&apos;][:-1]\n            alltime += int(time)\n            fp.close()\nprint(str(alltime/60/60) + &apos;h&apos;)\n</code></pre><p>结果是13.797500000000001h，和我预计的差不多，虽然是4M的网速，但是建立连接建立过多，而且没有用到多线程，这个时间还是合情合理的。</p>\n<p>PS：正在把这些照片上传到云盘，哈哈，要是泄漏了可不要说我是故意的 还有就是请勿模仿，我虽然总共下载了400个好友，但是停下来了十多次，都是数据结构出现问题<br>，请千万不要为此折腾，我纯属是为了完成自己以前的愿望罢了，下载下来也没用。</p>\n"},{"title":"Python3 使用MySQL Connector操作数据库","date":"2015-11-04T09:48:41.000Z","_content":"参考文档：  \n<https://dev.mysql.com/doc/connector-python/en/>  \n\n<http://mysql-python.sourceforge.net/MySQLdb.html>  \n\n## 安装方法\n```\n# ubuntu\nsudo apt-get install python3-dev libmysqlclient-dev\npip install mysqlclient\n\n# CentOS\nsudo yum install pytho3-devel mysql-devel\npip install mysqlclient\n```\n## 数据库的连接\n\n这里有所有的[连接参数列表](https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html)\n\n```python\n# 使用Oracle官方提供的数据库引擎的连接方法\nimport mysql.connector\ncnx = mysql.connector.connect(  \n                          user='',\n                          password='',\n                          host='',\n                          database='',  \n                          pool_size=3 # 连接池大小)\ncnx.close()\n\n# 使用基于MySQLdb的连接方法，比如mysqlclient\nimport MySQLdb\ndb = MySQLdb.connect(\n\thost='', \n    user='', \n    passwd='', \n    db='', \n    charset='utf8', \n    autocommit=True)\ncursor = db.cursor()\n```\n\n\n## Difference：两个库的区别\n\n    # MySQL Connector/Python\n    Oracle官方的实现，底层完全用C来实现\n    默认未开启cursorbuffer，如果需要则显式开启：cnx.cursor(buffered=True)或者mysql.connector.connect(buffered=True)，开启了buffer，可同时使用多个游标\n    \n    # MySQLdb\n    不完全用C\n    默认开启了cursor的，会缓存结果，但是针对特别大的查询，可能会导致程序崩溃\n\n## CURD操作\n\n### 插入\n\n    # 插入一条数据\n    insert_stmt = (\n      \"INSERT INTO employees (emp_no, first_name, last_name, hire_date) \"\n      \"VALUES (%s, %s, %s, %s)\"\n    )\n    data = (2, 'Jane', 'Doe', datetime.date(2012, 3, 23))\n    cursor.execute(insert_stmt, data)\n    \n    # 同时插入多条数据\n    data = [\n        ('a', 'b', 'c', 'd'),\n        ('e', 'f', 'g', 'h')\n    ]\n    stmt = 'INSERT INTO table_name (field_name1, field_name2)' \t\t\t\t'VALUES(%s, %s)'\n    cursor.executemany(stmt, data)\n### 读取\n\n```python\n# 看了源码发现，fetchone/fatchmany/fetchall实现居然是一样的：https://github.com/PyMySQL/mysqlclient-python/blob/7d289b21728ab1a94bb1f0210a26367c6714d881/MySQLdb/cursors.py，结果都是一次取出保存，这三个方法就是在结果列表里面切片而已\n\n# fetchone\ncursor.execute('select * FROM user\")\nrow = cursor.fetchone()\nwhile row is not None:\n    print(row)\n    row = cursor.fetchone()  \n\n# cursor可以直接拿来做迭代器\ncursor.execute(sql)\nfor row in cursor:\n    print(row)\n\n# fetchmany()：获取固定数量的结果，当然，每次fetch过后指针会偏移到后面那个地方\nrows = cursor.fetchmany(size=1)\n```\n# TroubleShooting\n\n* 获取insert后的ID值  \n\n  ```shell\n  db.insert_id()  # 表示上一次插入数据的ID\n  ```\n\n* 获取原始SQL语句\n\n  ```python\n  print(cursor._last_executed)\n  ```\n\n* 多线程的情况下，出现错误\"OperationalError:(2013, 'Lost connection to MySQL server during query')\"，出现这种情况是因为在多线程的情况下，如果只有一个mysql连接，那么mysql该连接会在执行完一个线程后销毁，需要加锁，在线程里面修改全局变量，会导致该变量的引用出错  \n\n  ```python\n  LOCK.acquire()  \n  mysql.cursor.execute(sql)  \n  result = mysql.cursor.fetchall()  \n  LOCK.release()  \n  print(len(result))\n  ```\n\n* **Can't connect to local mySQL server ough socket '/tmp/mysql.sock**\n\n  可能原因是由于MySQL是编译安装的，没有放在默认的目录，导致python找不到默认的sock文件，可以用一个软连接将实际文件链接到这个默认的目录下面\n\n\n","source":"_posts/python-connect-mysql.md","raw":"---\ntitle: \"Python3 使用MySQL Connector操作数据库\"\ndate: 2015-11-04 17:48:41\ncategories: 编程之路\n---\n参考文档：  \n<https://dev.mysql.com/doc/connector-python/en/>  \n\n<http://mysql-python.sourceforge.net/MySQLdb.html>  \n\n## 安装方法\n```\n# ubuntu\nsudo apt-get install python3-dev libmysqlclient-dev\npip install mysqlclient\n\n# CentOS\nsudo yum install pytho3-devel mysql-devel\npip install mysqlclient\n```\n## 数据库的连接\n\n这里有所有的[连接参数列表](https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html)\n\n```python\n# 使用Oracle官方提供的数据库引擎的连接方法\nimport mysql.connector\ncnx = mysql.connector.connect(  \n                          user='',\n                          password='',\n                          host='',\n                          database='',  \n                          pool_size=3 # 连接池大小)\ncnx.close()\n\n# 使用基于MySQLdb的连接方法，比如mysqlclient\nimport MySQLdb\ndb = MySQLdb.connect(\n\thost='', \n    user='', \n    passwd='', \n    db='', \n    charset='utf8', \n    autocommit=True)\ncursor = db.cursor()\n```\n\n\n## Difference：两个库的区别\n\n    # MySQL Connector/Python\n    Oracle官方的实现，底层完全用C来实现\n    默认未开启cursorbuffer，如果需要则显式开启：cnx.cursor(buffered=True)或者mysql.connector.connect(buffered=True)，开启了buffer，可同时使用多个游标\n    \n    # MySQLdb\n    不完全用C\n    默认开启了cursor的，会缓存结果，但是针对特别大的查询，可能会导致程序崩溃\n\n## CURD操作\n\n### 插入\n\n    # 插入一条数据\n    insert_stmt = (\n      \"INSERT INTO employees (emp_no, first_name, last_name, hire_date) \"\n      \"VALUES (%s, %s, %s, %s)\"\n    )\n    data = (2, 'Jane', 'Doe', datetime.date(2012, 3, 23))\n    cursor.execute(insert_stmt, data)\n    \n    # 同时插入多条数据\n    data = [\n        ('a', 'b', 'c', 'd'),\n        ('e', 'f', 'g', 'h')\n    ]\n    stmt = 'INSERT INTO table_name (field_name1, field_name2)' \t\t\t\t'VALUES(%s, %s)'\n    cursor.executemany(stmt, data)\n### 读取\n\n```python\n# 看了源码发现，fetchone/fatchmany/fetchall实现居然是一样的：https://github.com/PyMySQL/mysqlclient-python/blob/7d289b21728ab1a94bb1f0210a26367c6714d881/MySQLdb/cursors.py，结果都是一次取出保存，这三个方法就是在结果列表里面切片而已\n\n# fetchone\ncursor.execute('select * FROM user\")\nrow = cursor.fetchone()\nwhile row is not None:\n    print(row)\n    row = cursor.fetchone()  \n\n# cursor可以直接拿来做迭代器\ncursor.execute(sql)\nfor row in cursor:\n    print(row)\n\n# fetchmany()：获取固定数量的结果，当然，每次fetch过后指针会偏移到后面那个地方\nrows = cursor.fetchmany(size=1)\n```\n# TroubleShooting\n\n* 获取insert后的ID值  \n\n  ```shell\n  db.insert_id()  # 表示上一次插入数据的ID\n  ```\n\n* 获取原始SQL语句\n\n  ```python\n  print(cursor._last_executed)\n  ```\n\n* 多线程的情况下，出现错误\"OperationalError:(2013, 'Lost connection to MySQL server during query')\"，出现这种情况是因为在多线程的情况下，如果只有一个mysql连接，那么mysql该连接会在执行完一个线程后销毁，需要加锁，在线程里面修改全局变量，会导致该变量的引用出错  \n\n  ```python\n  LOCK.acquire()  \n  mysql.cursor.execute(sql)  \n  result = mysql.cursor.fetchall()  \n  LOCK.release()  \n  print(len(result))\n  ```\n\n* **Can't connect to local mySQL server ough socket '/tmp/mysql.sock**\n\n  可能原因是由于MySQL是编译安装的，没有放在默认的目录，导致python找不到默认的sock文件，可以用一个软连接将实际文件链接到这个默认的目录下面\n\n\n","slug":"python-connect-mysql","published":1,"updated":"2016-08-04T06:37:42.000Z","_id":"cir3l2pfu004v9vnz3gsy88rj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考文档：<br><a href=\"https://dev.mysql.com/doc/connector-python/en/\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/doc/connector-python/en/</a>  </p>\n<p><a href=\"http://mysql-python.sourceforge.net/MySQLdb.html\" target=\"_blank\" rel=\"external\">http://mysql-python.sourceforge.net/MySQLdb.html</a>  </p>\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ubuntu</div><div class=\"line\">sudo apt-get install python3-dev libmysqlclient-dev</div><div class=\"line\">pip install mysqlclient</div><div class=\"line\"></div><div class=\"line\"># CentOS</div><div class=\"line\">sudo yum install pytho3-devel mysql-devel</div><div class=\"line\">pip install mysqlclient</div></pre></td></tr></table></figure>\n<h2 id=\"数据库的连接\"><a href=\"#数据库的连接\" class=\"headerlink\" title=\"数据库的连接\"></a>数据库的连接</h2><p>这里有所有的<a href=\"https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\" target=\"_blank\" rel=\"external\">连接参数列表</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用Oracle官方提供的数据库引擎的连接方法</span></div><div class=\"line\"><span class=\"keyword\">import</span> mysql.connector</div><div class=\"line\">cnx = mysql.connector.connect(  </div><div class=\"line\">                          user=<span class=\"string\">''</span>,</div><div class=\"line\">                          password=<span class=\"string\">''</span>,</div><div class=\"line\">                          host=<span class=\"string\">''</span>,</div><div class=\"line\">                          database=<span class=\"string\">''</span>,  </div><div class=\"line\">                          pool_size=<span class=\"number\">3</span> <span class=\"comment\"># 连接池大小)</span></div><div class=\"line\">cnx.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用基于MySQLdb的连接方法，比如mysqlclient</span></div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">db = MySQLdb.connect(</div><div class=\"line\">\thost=<span class=\"string\">''</span>, </div><div class=\"line\">    user=<span class=\"string\">''</span>, </div><div class=\"line\">    passwd=<span class=\"string\">''</span>, </div><div class=\"line\">    db=<span class=\"string\">''</span>, </div><div class=\"line\">    charset=<span class=\"string\">'utf8'</span>, </div><div class=\"line\">    autocommit=<span class=\"keyword\">True</span>)</div><div class=\"line\">cursor = db.cursor()</div></pre></td></tr></table></figure>\n<h2 id=\"Difference：两个库的区别\"><a href=\"#Difference：两个库的区别\" class=\"headerlink\" title=\"Difference：两个库的区别\"></a>Difference：两个库的区别</h2><pre><code># MySQL Connector/Python\nOracle官方的实现，底层完全用C来实现\n默认未开启cursorbuffer，如果需要则显式开启：cnx.cursor(buffered=True)或者mysql.connector.connect(buffered=True)，开启了buffer，可同时使用多个游标\n\n# MySQLdb\n不完全用C\n默认开启了cursor的，会缓存结果，但是针对特别大的查询，可能会导致程序崩溃\n</code></pre><h2 id=\"CURD操作\"><a href=\"#CURD操作\" class=\"headerlink\" title=\"CURD操作\"></a>CURD操作</h2><h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><pre><code># 插入一条数据\ninsert_stmt = (\n  &quot;INSERT INTO employees (emp_no, first_name, last_name, hire_date) &quot;\n  &quot;VALUES (%s, %s, %s, %s)&quot;\n)\ndata = (2, &apos;Jane&apos;, &apos;Doe&apos;, datetime.date(2012, 3, 23))\ncursor.execute(insert_stmt, data)\n\n# 同时插入多条数据\ndata = [\n    (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;),\n    (&apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;)\n]\nstmt = &apos;INSERT INTO table_name (field_name1, field_name2)&apos;                 &apos;VALUES(%s, %s)&apos;\ncursor.executemany(stmt, data)\n</code></pre><h3 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 看了源码发现，fetchone/fatchmany/fetchall实现居然是一样的：https://github.com/PyMySQL/mysqlclient-python/blob/7d289b21728ab1a94bb1f0210a26367c6714d881/MySQLdb/cursors.py，结果都是一次取出保存，这三个方法就是在结果列表里面切片而已</div><div class=\"line\"></div><div class=\"line\"># fetchone</div><div class=\"line\">cursor.execute('select * FROM user\")</div><div class=\"line\">row = cursor.fetchone()</div><div class=\"line\">while row is not None:</div><div class=\"line\">    print(row)</div><div class=\"line\">    row = cursor.fetchone()  </div><div class=\"line\"></div><div class=\"line\"># cursor可以直接拿来做迭代器</div><div class=\"line\">cursor.execute(sql)</div><div class=\"line\">for row in cursor:</div><div class=\"line\">    print(row)</div><div class=\"line\"></div><div class=\"line\"># fetchmany()：获取固定数量的结果，当然，每次fetch过后指针会偏移到后面那个地方</div><div class=\"line\">rows = cursor.fetchmany(size=1)</div></pre></td></tr></table></figure>\n<h1 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h1><ul>\n<li><p>获取insert后的ID值  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.insert_id()  # 表示上一次插入数据的ID</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取原始SQL语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(cursor._last_executed)</div></pre></td></tr></table></figure>\n</li>\n<li><p>多线程的情况下，出现错误”OperationalError:(2013, ‘Lost connection to MySQL server during query’)”，出现这种情况是因为在多线程的情况下，如果只有一个mysql连接，那么mysql该连接会在执行完一个线程后销毁，需要加锁，在线程里面修改全局变量，会导致该变量的引用出错  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">LOCK.acquire()  </div><div class=\"line\">mysql.cursor.execute(sql)  </div><div class=\"line\">result = mysql.cursor.fetchall()  </div><div class=\"line\">LOCK.release()  </div><div class=\"line\">print(len(result))</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Can’t connect to local mySQL server ough socket ‘/tmp/mysql.sock</strong></p>\n<p>可能原因是由于MySQL是编译安装的，没有放在默认的目录，导致python找不到默认的sock文件，可以用一个软连接将实际文件链接到这个默认的目录下面</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>参考文档：<br><a href=\"https://dev.mysql.com/doc/connector-python/en/\">https://dev.mysql.com/doc/connector-python/en/</a>  </p>\n<p><a href=\"http://mysql-python.sourceforge.net/MySQLdb.html\">http://mysql-python.sourceforge.net/MySQLdb.html</a>  </p>\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ubuntu</div><div class=\"line\">sudo apt-get install python3-dev libmysqlclient-dev</div><div class=\"line\">pip install mysqlclient</div><div class=\"line\"></div><div class=\"line\"># CentOS</div><div class=\"line\">sudo yum install pytho3-devel mysql-devel</div><div class=\"line\">pip install mysqlclient</div></pre></td></tr></table></figure>\n<h2 id=\"数据库的连接\"><a href=\"#数据库的连接\" class=\"headerlink\" title=\"数据库的连接\"></a>数据库的连接</h2><p>这里有所有的<a href=\"https://dev.mysql.com/doc/connector-python/en/connector-python-connectargs.html\">连接参数列表</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 使用Oracle官方提供的数据库引擎的连接方法</span></div><div class=\"line\"><span class=\"keyword\">import</span> mysql.connector</div><div class=\"line\">cnx = mysql.connector.connect(  </div><div class=\"line\">                          user=<span class=\"string\">''</span>,</div><div class=\"line\">                          password=<span class=\"string\">''</span>,</div><div class=\"line\">                          host=<span class=\"string\">''</span>,</div><div class=\"line\">                          database=<span class=\"string\">''</span>,  </div><div class=\"line\">                          pool_size=<span class=\"number\">3</span> <span class=\"comment\"># 连接池大小)</span></div><div class=\"line\">cnx.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 使用基于MySQLdb的连接方法，比如mysqlclient</span></div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">db = MySQLdb.connect(</div><div class=\"line\">\thost=<span class=\"string\">''</span>, </div><div class=\"line\">    user=<span class=\"string\">''</span>, </div><div class=\"line\">    passwd=<span class=\"string\">''</span>, </div><div class=\"line\">    db=<span class=\"string\">''</span>, </div><div class=\"line\">    charset=<span class=\"string\">'utf8'</span>, </div><div class=\"line\">    autocommit=<span class=\"keyword\">True</span>)</div><div class=\"line\">cursor = db.cursor()</div></pre></td></tr></table></figure>\n<h2 id=\"Difference：两个库的区别\"><a href=\"#Difference：两个库的区别\" class=\"headerlink\" title=\"Difference：两个库的区别\"></a>Difference：两个库的区别</h2><pre><code># MySQL Connector/Python\nOracle官方的实现，底层完全用C来实现\n默认未开启cursorbuffer，如果需要则显式开启：cnx.cursor(buffered=True)或者mysql.connector.connect(buffered=True)，开启了buffer，可同时使用多个游标\n\n# MySQLdb\n不完全用C\n默认开启了cursor的，会缓存结果，但是针对特别大的查询，可能会导致程序崩溃\n</code></pre><h2 id=\"CURD操作\"><a href=\"#CURD操作\" class=\"headerlink\" title=\"CURD操作\"></a>CURD操作</h2><h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><pre><code># 插入一条数据\ninsert_stmt = (\n  &quot;INSERT INTO employees (emp_no, first_name, last_name, hire_date) &quot;\n  &quot;VALUES (%s, %s, %s, %s)&quot;\n)\ndata = (2, &apos;Jane&apos;, &apos;Doe&apos;, datetime.date(2012, 3, 23))\ncursor.execute(insert_stmt, data)\n\n# 同时插入多条数据\ndata = [\n    (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;),\n    (&apos;e&apos;, &apos;f&apos;, &apos;g&apos;, &apos;h&apos;)\n]\nstmt = &apos;INSERT INTO table_name (field_name1, field_name2)&apos;                 &apos;VALUES(%s, %s)&apos;\ncursor.executemany(stmt, data)\n</code></pre><h3 id=\"读取\"><a href=\"#读取\" class=\"headerlink\" title=\"读取\"></a>读取</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 看了源码发现，fetchone/fatchmany/fetchall实现居然是一样的：https://github.com/PyMySQL/mysqlclient-python/blob/7d289b21728ab1a94bb1f0210a26367c6714d881/MySQLdb/cursors.py，结果都是一次取出保存，这三个方法就是在结果列表里面切片而已</div><div class=\"line\"></div><div class=\"line\"># fetchone</div><div class=\"line\">cursor.execute('select * FROM user\")</div><div class=\"line\">row = cursor.fetchone()</div><div class=\"line\">while row is not None:</div><div class=\"line\">    print(row)</div><div class=\"line\">    row = cursor.fetchone()  </div><div class=\"line\"></div><div class=\"line\"># cursor可以直接拿来做迭代器</div><div class=\"line\">cursor.execute(sql)</div><div class=\"line\">for row in cursor:</div><div class=\"line\">    print(row)</div><div class=\"line\"></div><div class=\"line\"># fetchmany()：获取固定数量的结果，当然，每次fetch过后指针会偏移到后面那个地方</div><div class=\"line\">rows = cursor.fetchmany(size=1)</div></pre></td></tr></table></figure>\n<h1 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h1><ul>\n<li><p>获取insert后的ID值  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.insert_id()  # 表示上一次插入数据的ID</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取原始SQL语句</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(cursor._last_executed)</div></pre></td></tr></table></figure>\n</li>\n<li><p>多线程的情况下，出现错误”OperationalError:(2013, ‘Lost connection to MySQL server during query’)”，出现这种情况是因为在多线程的情况下，如果只有一个mysql连接，那么mysql该连接会在执行完一个线程后销毁，需要加锁，在线程里面修改全局变量，会导致该变量的引用出错  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">LOCK.acquire()  </div><div class=\"line\">mysql.cursor.execute(sql)  </div><div class=\"line\">result = mysql.cursor.fetchall()  </div><div class=\"line\">LOCK.release()  </div><div class=\"line\">print(len(result))</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Can’t connect to local mySQL server ough socket ‘/tmp/mysql.sock</strong></p>\n<p>可能原因是由于MySQL是编译安装的，没有放在默认的目录，导致python找不到默认的sock文件，可以用一个软连接将实际文件链接到这个默认的目录下面</p>\n</li>\n</ul>\n"},{"title":"Python编码格式各种问题的解决方案","date":"2015-04-07T01:45:56.000Z","_content":"其实Python3的字符串默认是unicode格式了，但utf-8并不能解决所有问题。首先，我们得在所有的文件前加上这样一句：\n\n\n\n    # -_- coding:utf-8 -_-\n    或者\n\n\n\n\n    # coding: utf-8\n\n其次，就是注意一般的常见的编码格式，爬去某些奇葩的网页时可能会遇到的，这时候只需要使用对应的转换进行了，如果不知道网页的格式就只能一个一个猜了，常见的有\n\n\n\n    ASCII\n    GB18030\n    GB2312\n    GBK\n    UTF-8\n","source":"_posts/python-encode-decode.md","raw":"---\ntitle: \"Python编码格式各种问题的解决方案\"\ndate: 2015-04-07 09:45:56\ncategories: 编程之路\n---\n其实Python3的字符串默认是unicode格式了，但utf-8并不能解决所有问题。首先，我们得在所有的文件前加上这样一句：\n\n\n\n    # -_- coding:utf-8 -_-\n    或者\n\n\n\n\n    # coding: utf-8\n\n其次，就是注意一般的常见的编码格式，爬去某些奇葩的网页时可能会遇到的，这时候只需要使用对应的转换进行了，如果不知道网页的格式就只能一个一个猜了，常见的有\n\n\n\n    ASCII\n    GB18030\n    GB2312\n    GBK\n    UTF-8\n","slug":"python-encode-decode","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pfz004x9vnzzdi5s08g","content":"<p>其实Python3的字符串默认是unicode格式了，但utf-8并不能解决所有问题。首先，我们得在所有的文件前加上这样一句：</p>\n<pre><code># -_- coding:utf-8 -_-\n或者\n\n\n\n\n# coding: utf-8\n</code></pre><p>其次，就是注意一般的常见的编码格式，爬去某些奇葩的网页时可能会遇到的，这时候只需要使用对应的转换进行了，如果不知道网页的格式就只能一个一个猜了，常见的有</p>\n<pre><code>ASCII\nGB18030\nGB2312\nGBK\nUTF-8\n</code></pre>","excerpt":"","more":"<p>其实Python3的字符串默认是unicode格式了，但utf-8并不能解决所有问题。首先，我们得在所有的文件前加上这样一句：</p>\n<pre><code># -_- coding:utf-8 -_-\n或者\n\n\n\n\n# coding: utf-8\n</code></pre><p>其次，就是注意一般的常见的编码格式，爬去某些奇葩的网页时可能会遇到的，这时候只需要使用对应的转换进行了，如果不知道网页的格式就只能一个一个猜了，常见的有</p>\n<pre><code>ASCII\nGB18030\nGB2312\nGBK\nUTF-8\n</code></pre>"},{"title":"在Python3代码里执行另一个python文件的几种访问及其效率的比较","date":"2014-10-29T10:27:38.000Z","_content":"最近做一个项目，需要从一个Python文件里执行其他的Python文件，因为数量可能有点大，所以考虑了一下性能的问题，就去简单地测试了一下其效率，结果如下：\n\n首先，我的`另一个Python文件test1.py`里内容如下，执行一条command命令\n\n\n\n    import os\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')    # 我的ls命令在git下面\n    os.system('ls -ls')\n\n# 1.使用exec函数\n\n在Python3中无法直接使用execfile()函数，execfile被分解为了open()和exec()，[详见文档](https://docs.pyt\nhon.org/3/library/functions.html#exec)，必须先将文件打开，再把文件浏览当作参数传入exec函数中去。代码如下：\n\n\n\n    import os\n\n\n\n\n    for time in range(0, 1000):\n            fp = open('test1.py')\n            exec(fp.read(), None, None)\n            #os.popen('ls -l')\n\n执行一千次该文件，结果如下：内存几乎无变化，CPU使用率62\\%左右，耗时86.3s  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency.png)\n\n# 2.使用os.popen()函数\n\nos模块的popen()函数是相当于执行的是一条command命令，并可以通过read()方法获取命令的输出，代码如下：\n\n\n\n    import os\n\n\n\n\n    for time in range(0, 1000):\n            fp = open('test1.py')\n            #exec(fp.read(), None, None)\n            os.popen('ls -l')\n\n执行一千次该循环，结果如下：内存几乎无变化，CPU使用率90\\%左右，耗时118.1s\n\n# ![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_1.png)  \n\n# 3.结果\n\n从上面很明显的就能发现，使用Python3里面的exec不仅占用CPU率较低，并且执行时间也较快，而在占用内存方面两者几乎都一样。所以，还是使用exec吧。\n\n# 4.扩展\n\n顺便测试了一下使用os.system()函数和os.popen()函数的区别，当然这里的测试是在单个文件里执行一千次该命令，如下：\n\n\n\n    import os\n\n\n\n\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')    # 我的ls命令在git下面\n\n\n\n\n    for time in range(0, 1000):\n            os.system('ls -l')\n        # os.popen('ls -l')\n\n\nos.system()的结果：CPU占用65\\%左右，内存几乎不变，耗时83.5s  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_2.png)  \nos.popen()的结果：CPU占用90\\%左右，内存几乎不变，耗时38.4s  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_3.png)  \n","source":"_posts/python-execute-pythonfile-effiency.md","raw":"---\ntitle: \"在Python3代码里执行另一个python文件的几种访问及其效率的比较\"\ndate: 2014-10-29 18:27:38\ncategories: 编程之路\n---\n最近做一个项目，需要从一个Python文件里执行其他的Python文件，因为数量可能有点大，所以考虑了一下性能的问题，就去简单地测试了一下其效率，结果如下：\n\n首先，我的`另一个Python文件test1.py`里内容如下，执行一条command命令\n\n\n\n    import os\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')    # 我的ls命令在git下面\n    os.system('ls -ls')\n\n# 1.使用exec函数\n\n在Python3中无法直接使用execfile()函数，execfile被分解为了open()和exec()，[详见文档](https://docs.pyt\nhon.org/3/library/functions.html#exec)，必须先将文件打开，再把文件浏览当作参数传入exec函数中去。代码如下：\n\n\n\n    import os\n\n\n\n\n    for time in range(0, 1000):\n            fp = open('test1.py')\n            exec(fp.read(), None, None)\n            #os.popen('ls -l')\n\n执行一千次该文件，结果如下：内存几乎无变化，CPU使用率62\\%左右，耗时86.3s  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency.png)\n\n# 2.使用os.popen()函数\n\nos模块的popen()函数是相当于执行的是一条command命令，并可以通过read()方法获取命令的输出，代码如下：\n\n\n\n    import os\n\n\n\n\n    for time in range(0, 1000):\n            fp = open('test1.py')\n            #exec(fp.read(), None, None)\n            os.popen('ls -l')\n\n执行一千次该循环，结果如下：内存几乎无变化，CPU使用率90\\%左右，耗时118.1s\n\n# ![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_1.png)  \n\n# 3.结果\n\n从上面很明显的就能发现，使用Python3里面的exec不仅占用CPU率较低，并且执行时间也较快，而在占用内存方面两者几乎都一样。所以，还是使用exec吧。\n\n# 4.扩展\n\n顺便测试了一下使用os.system()函数和os.popen()函数的区别，当然这里的测试是在单个文件里执行一千次该命令，如下：\n\n\n\n    import os\n\n\n\n\n    os.putenv('PATH', 'C:\\\\Program Files (x86)\\\\Git\\\\bin')    # 我的ls命令在git下面\n\n\n\n\n    for time in range(0, 1000):\n            os.system('ls -l')\n        # os.popen('ls -l')\n\n\nos.system()的结果：CPU占用65\\%左右，内存几乎不变，耗时83.5s  \n![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_2.png)  \nos.popen()的结果：CPU占用90\\%左右，内存几乎不变，耗时38.4s  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_3.png)  \n","slug":"python-execute-pythonfile-effiency","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pg3004z9vnzavct54ly","content":"<p>最近做一个项目，需要从一个Python文件里执行其他的Python文件，因为数量可能有点大，所以考虑了一下性能的问题，就去简单地测试了一下其效率，结果如下：</p>\n<p>首先，我的<code>另一个Python文件test1.py</code>里内容如下，执行一条command命令</p>\n<pre><code>import os\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)    # 我的ls命令在git下面\nos.system(&apos;ls -ls&apos;)\n</code></pre><h1 id=\"1-使用exec函数\"><a href=\"#1-使用exec函数\" class=\"headerlink\" title=\"1.使用exec函数\"></a>1.使用exec函数</h1><p>在Python3中无法直接使用execfile()函数，execfile被分解为了open()和exec()，<a href=\"https://docs.pyt\nhon.org/3/library/functions.html#exec\" target=\"_blank\" rel=\"external\">详见文档</a>，必须先将文件打开，再把文件浏览当作参数传入exec函数中去。代码如下：</p>\n<pre><code>import os\n\n\n\n\nfor time in range(0, 1000):\n        fp = open(&apos;test1.py&apos;)\n        exec(fp.read(), None, None)\n        #os.popen(&apos;ls -l&apos;)\n</code></pre><p>执行一千次该文件，结果如下：内存几乎无变化，CPU使用率62\\%左右，耗时86.3s<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency.png\" alt=\"\"></p>\n<h1 id=\"2-使用os-popen-函数\"><a href=\"#2-使用os-popen-函数\" class=\"headerlink\" title=\"2.使用os.popen()函数\"></a>2.使用os.popen()函数</h1><p>os模块的popen()函数是相当于执行的是一条command命令，并可以通过read()方法获取命令的输出，代码如下：</p>\n<pre><code>import os\n\n\n\n\nfor time in range(0, 1000):\n        fp = open(&apos;test1.py&apos;)\n        #exec(fp.read(), None, None)\n        os.popen(&apos;ls -l&apos;)\n</code></pre><p>执行一千次该循环，结果如下：内存几乎无变化，CPU使用率90\\%左右，耗时118.1s</p>\n<h1 id=\"http-7xnc86-com1-z0-glb-clouddn-com-python-execute-pythonfile\"><a href=\"#http-7xnc86-com1-z0-glb-clouddn-com-python-execute-pythonfile\" class=\"headerlink\" title=\"![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\"></a>![](<a href=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\" target=\"_blank\" rel=\"external\">http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-</a></h1><p>effiency_1.png)  </p>\n<h1 id=\"3-结果\"><a href=\"#3-结果\" class=\"headerlink\" title=\"3.结果\"></a>3.结果</h1><p>从上面很明显的就能发现，使用Python3里面的exec不仅占用CPU率较低，并且执行时间也较快，而在占用内存方面两者几乎都一样。所以，还是使用exec吧。</p>\n<h1 id=\"4-扩展\"><a href=\"#4-扩展\" class=\"headerlink\" title=\"4.扩展\"></a>4.扩展</h1><p>顺便测试了一下使用os.system()函数和os.popen()函数的区别，当然这里的测试是在单个文件里执行一千次该命令，如下：</p>\n<pre><code>import os\n\n\n\n\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)    # 我的ls命令在git下面\n\n\n\n\nfor time in range(0, 1000):\n        os.system(&apos;ls -l&apos;)\n    # os.popen(&apos;ls -l&apos;)\n</code></pre><p>os.system()的结果：CPU占用65\\%左右，内存几乎不变，耗时83.5s<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_2.png\" alt=\"\"><br>os.popen()的结果：CPU占用90\\%左右，内存几乎不变，耗时38.4s  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_3.png\" alt=\"\">  </p>\n","excerpt":"","more":"<p>最近做一个项目，需要从一个Python文件里执行其他的Python文件，因为数量可能有点大，所以考虑了一下性能的问题，就去简单地测试了一下其效率，结果如下：</p>\n<p>首先，我的<code>另一个Python文件test1.py</code>里内容如下，执行一条command命令</p>\n<pre><code>import os\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)    # 我的ls命令在git下面\nos.system(&apos;ls -ls&apos;)\n</code></pre><h1 id=\"1-使用exec函数\"><a href=\"#1-使用exec函数\" class=\"headerlink\" title=\"1.使用exec函数\"></a>1.使用exec函数</h1><p>在Python3中无法直接使用execfile()函数，execfile被分解为了open()和exec()，<a href=\"https://docs.pyt\nhon.org/3/library/functions.html#exec\">详见文档</a>，必须先将文件打开，再把文件浏览当作参数传入exec函数中去。代码如下：</p>\n<pre><code>import os\n\n\n\n\nfor time in range(0, 1000):\n        fp = open(&apos;test1.py&apos;)\n        exec(fp.read(), None, None)\n        #os.popen(&apos;ls -l&apos;)\n</code></pre><p>执行一千次该文件，结果如下：内存几乎无变化，CPU使用率62\\%左右，耗时86.3s<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency.png\" alt=\"\"></p>\n<h1 id=\"2-使用os-popen-函数\"><a href=\"#2-使用os-popen-函数\" class=\"headerlink\" title=\"2.使用os.popen()函数\"></a>2.使用os.popen()函数</h1><p>os模块的popen()函数是相当于执行的是一条command命令，并可以通过read()方法获取命令的输出，代码如下：</p>\n<pre><code>import os\n\n\n\n\nfor time in range(0, 1000):\n        fp = open(&apos;test1.py&apos;)\n        #exec(fp.read(), None, None)\n        os.popen(&apos;ls -l&apos;)\n</code></pre><p>执行一千次该循环，结果如下：内存几乎无变化，CPU使用率90\\%左右，耗时118.1s</p>\n<h1 id=\"http-7xnc86-com1-z0-glb-clouddn-com-python-execute-pythonfile\"><a href=\"#http-7xnc86-com1-z0-glb-clouddn-com-python-execute-pythonfile\" class=\"headerlink\" title=\"![](http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\"></a>![](<a href=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\">http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-</a></h1><p>effiency_1.png)  </p>\n<h1 id=\"3-结果\"><a href=\"#3-结果\" class=\"headerlink\" title=\"3.结果\"></a>3.结果</h1><p>从上面很明显的就能发现，使用Python3里面的exec不仅占用CPU率较低，并且执行时间也较快，而在占用内存方面两者几乎都一样。所以，还是使用exec吧。</p>\n<h1 id=\"4-扩展\"><a href=\"#4-扩展\" class=\"headerlink\" title=\"4.扩展\"></a>4.扩展</h1><p>顺便测试了一下使用os.system()函数和os.popen()函数的区别，当然这里的测试是在单个文件里执行一千次该命令，如下：</p>\n<pre><code>import os\n\n\n\n\nos.putenv(&apos;PATH&apos;, &apos;C:\\\\Program Files (x86)\\\\Git\\\\bin&apos;)    # 我的ls命令在git下面\n\n\n\n\nfor time in range(0, 1000):\n        os.system(&apos;ls -l&apos;)\n    # os.popen(&apos;ls -l&apos;)\n</code></pre><p>os.system()的结果：CPU占用65\\%左右，内存几乎不变，耗时83.5s<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_2.png\" alt=\"\"><br>os.popen()的结果：CPU占用90\\%左右，内存几乎不变，耗时38.4s  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-execute-pythonfile-\neffiency_3.png\" alt=\"\">  </p>\n"},{"title":"Python编码及注释规范","date":"2015-04-03T04:38:08.000Z","_content":"Python，我最喜欢的语言。但是，在其强大的功能以及强制的编码格式背后，也会引来一大波的编码方面的困扰，所以依然得需要进行一些规范化。\n\n## 注释\n\n函数或者文档的注释使用三引号，结尾空一行\n\n**函数注释**需要注明三个参数：Args(参数)、Return(返回值)和Raises(抛出的错误)，例如：\n\n\n    def exampleFunc(one, two):\n        \"\"\"\n        这里是函数的功能\n\n\n\n\n\n    Args:\n        one: 参数一的注释\n        two: 参数二的注释\n\n    Return:返回值的解释，如果返回值比较复杂，比如是一个json数据，那么还需要将返回的格式卸载这儿\n\n    Raises: 非必须\n    \"\"\"</pre>\n\n\n** 类的注释**，依然得有一行文档字符串，若有共有属性，需要在注释处表名，例如：\n\n\n    class exampleClass(基类):\n        \"\"\"\n        类的注释\n\n\n\n\n\n    Attributes:\n        公有属性1: 解释\n    \"\"\"</pre>\n\n\n** 文件注释：**一般包括了编码信息、版权、许可声明、模块头等信息，例如：\n\n\n    # coding = utf-8\n\n\n\n\n    # Copyright 2015 ........\n\n\n\n\n    \"\"\"\n    这里是模块头，用一行文字概括文件或模块或脚本的作用\n    \"\"\"\n\n## 命名\n\n\n\n    module_name：模块\n    package_name：包\n    ClassName：类\n    method_name：方法\n    ExceptionName：错误\n    function_name：函数\n    GLOBAL_VAR_NAME：全局变量\n    function_parameter_name：函数参数\n    local_var_name：局部变量\n    has_或is_：定义布尔类型元素\n\n## 空行\n\n两个函数的定义之间空两行，而方法或者语句模块之间则只空一行\n\n## 空格\n\n二元操作符之间添加空格\n\n## 其它\n\n对于常字符串，Python可以使用小括号将行隐式地连接在一起而不用在每行末尾加上加号，例如：\n\n\n\n    a = (\n        'wang'\n        'hao'\n    )\n    print(a)\n\n\n\n\n    # 打印出来就是wanghao\n","source":"_posts/python-encoding-specification.md","raw":"---\ntitle: \"Python编码及注释规范\"\ndate: 2015-04-03 12:38:08\ncategories: 编程之路\n---\nPython，我最喜欢的语言。但是，在其强大的功能以及强制的编码格式背后，也会引来一大波的编码方面的困扰，所以依然得需要进行一些规范化。\n\n## 注释\n\n函数或者文档的注释使用三引号，结尾空一行\n\n**函数注释**需要注明三个参数：Args(参数)、Return(返回值)和Raises(抛出的错误)，例如：\n\n\n    def exampleFunc(one, two):\n        \"\"\"\n        这里是函数的功能\n\n\n\n\n\n    Args:\n        one: 参数一的注释\n        two: 参数二的注释\n\n    Return:返回值的解释，如果返回值比较复杂，比如是一个json数据，那么还需要将返回的格式卸载这儿\n\n    Raises: 非必须\n    \"\"\"</pre>\n\n\n** 类的注释**，依然得有一行文档字符串，若有共有属性，需要在注释处表名，例如：\n\n\n    class exampleClass(基类):\n        \"\"\"\n        类的注释\n\n\n\n\n\n    Attributes:\n        公有属性1: 解释\n    \"\"\"</pre>\n\n\n** 文件注释：**一般包括了编码信息、版权、许可声明、模块头等信息，例如：\n\n\n    # coding = utf-8\n\n\n\n\n    # Copyright 2015 ........\n\n\n\n\n    \"\"\"\n    这里是模块头，用一行文字概括文件或模块或脚本的作用\n    \"\"\"\n\n## 命名\n\n\n\n    module_name：模块\n    package_name：包\n    ClassName：类\n    method_name：方法\n    ExceptionName：错误\n    function_name：函数\n    GLOBAL_VAR_NAME：全局变量\n    function_parameter_name：函数参数\n    local_var_name：局部变量\n    has_或is_：定义布尔类型元素\n\n## 空行\n\n两个函数的定义之间空两行，而方法或者语句模块之间则只空一行\n\n## 空格\n\n二元操作符之间添加空格\n\n## 其它\n\n对于常字符串，Python可以使用小括号将行隐式地连接在一起而不用在每行末尾加上加号，例如：\n\n\n\n    a = (\n        'wang'\n        'hao'\n    )\n    print(a)\n\n\n\n\n    # 打印出来就是wanghao\n","slug":"python-encoding-specification","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pg400519vnzeljvtkbf","content":"<p>Python，我最喜欢的语言。但是，在其强大的功能以及强制的编码格式背后，也会引来一大波的编码方面的困扰，所以依然得需要进行一些规范化。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>函数或者文档的注释使用三引号，结尾空一行</p>\n<p><strong>函数注释</strong>需要注明三个参数：Args(参数)、Return(返回值)和Raises(抛出的错误)，例如：</p>\n<pre><code>def exampleFunc(one, two):\n    &quot;&quot;&quot;\n    这里是函数的功能\n\n\n\n\n\nArgs:\n    one: 参数一的注释\n    two: 参数二的注释\n\nReturn:返回值的解释，如果返回值比较复杂，比如是一个json数据，那么还需要将返回的格式卸载这儿\n\nRaises: 非必须\n&quot;&quot;&quot;&lt;/pre&gt;\n</code></pre><p><strong> 类的注释</strong>，依然得有一行文档字符串，若有共有属性，需要在注释处表名，例如：</p>\n<pre><code>class exampleClass(基类):\n    &quot;&quot;&quot;\n    类的注释\n\n\n\n\n\nAttributes:\n    公有属性1: 解释\n&quot;&quot;&quot;&lt;/pre&gt;\n</code></pre><p><strong> 文件注释：</strong>一般包括了编码信息、版权、许可声明、模块头等信息，例如：</p>\n<pre><code># coding = utf-8\n\n\n\n\n# Copyright 2015 ........\n\n\n\n\n&quot;&quot;&quot;\n这里是模块头，用一行文字概括文件或模块或脚本的作用\n&quot;&quot;&quot;\n</code></pre><h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><pre><code>module_name：模块\npackage_name：包\nClassName：类\nmethod_name：方法\nExceptionName：错误\nfunction_name：函数\nGLOBAL_VAR_NAME：全局变量\nfunction_parameter_name：函数参数\nlocal_var_name：局部变量\nhas_或is_：定义布尔类型元素\n</code></pre><h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>两个函数的定义之间空两行，而方法或者语句模块之间则只空一行</p>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>二元操作符之间添加空格</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>对于常字符串，Python可以使用小括号将行隐式地连接在一起而不用在每行末尾加上加号，例如：</p>\n<pre><code>a = (\n    &apos;wang&apos;\n    &apos;hao&apos;\n)\nprint(a)\n\n\n\n\n# 打印出来就是wanghao\n</code></pre>","excerpt":"","more":"<p>Python，我最喜欢的语言。但是，在其强大的功能以及强制的编码格式背后，也会引来一大波的编码方面的困扰，所以依然得需要进行一些规范化。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>函数或者文档的注释使用三引号，结尾空一行</p>\n<p><strong>函数注释</strong>需要注明三个参数：Args(参数)、Return(返回值)和Raises(抛出的错误)，例如：</p>\n<pre><code>def exampleFunc(one, two):\n    &quot;&quot;&quot;\n    这里是函数的功能\n\n\n\n\n\nArgs:\n    one: 参数一的注释\n    two: 参数二的注释\n\nReturn:返回值的解释，如果返回值比较复杂，比如是一个json数据，那么还需要将返回的格式卸载这儿\n\nRaises: 非必须\n&quot;&quot;&quot;&lt;/pre&gt;\n</code></pre><p><strong> 类的注释</strong>，依然得有一行文档字符串，若有共有属性，需要在注释处表名，例如：</p>\n<pre><code>class exampleClass(基类):\n    &quot;&quot;&quot;\n    类的注释\n\n\n\n\n\nAttributes:\n    公有属性1: 解释\n&quot;&quot;&quot;&lt;/pre&gt;\n</code></pre><p><strong> 文件注释：</strong>一般包括了编码信息、版权、许可声明、模块头等信息，例如：</p>\n<pre><code># coding = utf-8\n\n\n\n\n# Copyright 2015 ........\n\n\n\n\n&quot;&quot;&quot;\n这里是模块头，用一行文字概括文件或模块或脚本的作用\n&quot;&quot;&quot;\n</code></pre><h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><pre><code>module_name：模块\npackage_name：包\nClassName：类\nmethod_name：方法\nExceptionName：错误\nfunction_name：函数\nGLOBAL_VAR_NAME：全局变量\nfunction_parameter_name：函数参数\nlocal_var_name：局部变量\nhas_或is_：定义布尔类型元素\n</code></pre><h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>两个函数的定义之间空两行，而方法或者语句模块之间则只空一行</p>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>二元操作符之间添加空格</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>对于常字符串，Python可以使用小括号将行隐式地连接在一起而不用在每行末尾加上加号，例如：</p>\n<pre><code>a = (\n    &apos;wang&apos;\n    &apos;hao&apos;\n)\nprint(a)\n\n\n\n\n# 打印出来就是wanghao\n</code></pre>"},{"title":"Python使用beautifulsoup解析HTML、XML","date":"2015-05-22T15:21:57.000Z","_content":"Python官方文档都说自己解析XML的方式存在漏洞了，那我也只能用他推荐的了。\n\n这里我使用的BeautifulSoup，因为其中文文档十分完整清晰，而且相比于defusedxml，它不仅可以解析XML还可以解析HTML，非常方便。[文档\n地址](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)\n\n另外，如果是简单的网页解析任务，可以直接将获取到的网页进行正则表达式匹配也可以达到效果，只是可能会出现各种编码各种错误问题\n\n## Installation\n```\n# 直接apt安装\n$ sudo apt-get install Python3-bs4  # 这将安装下面两个包\n\n# pip方式安装\n$ pip3 install beautifulsoup4   # 这样直接安装或者下载源码进行安装\n$ pip3 install lxml             # 如果是解析xml必须安装一个解析器，文档里说的那个解析器只有这个好安装点，需要提前安装好依赖，apt-get install libxml2-dev, libxslt1-dev, python-dev，还可以使用html.parser这个解析器，这个解析器不会自动添加body元素,CentOS用yum -y install python-devel gcc libxml2 libxml2-devel libxslt libxslt-devel\n```\n\n## 基本概念\n\nTAG：表示xml/html里面的一个元素(节点)，包括标签以及其里面的内容\n\n## 基本使用\n\n最简单的使用例子：\n\n```\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\ncontent = \"<b><!--Hey, buddy--></b>\"   # 表示网页内容\ncontent = urllib.request.urlopen(url)  # 通常做爬虫的时候html来自于网页\nsoup = BeautifulSoup(content)          # 解析，生成一个bs4.BeautifulSoup\ncomment = soup.b.string                # 获取<b>标签的内容\n```\n## 查找\n```\n# 查找标签\nsoup.a             # 查找第一个a标签，返回值就是一个TAG<class 'bs4.element.Tag'>\n    soup.find('a')     # 同上，都只是查找满足条件的第一个\n    soup.find_all('a') # 查找所有的a标签，返回一个list获取内容\n    soup.find_all('a', class_='name')  # 根据标签的属性进行查找，比如这里查找class这个属性为name的a标签\n    soup.find_all(text=\"\") # 在整个文档中查找一个字符串\n    soup.find_all('a', limit=3) # 限制只找三个结果\n    soup.find_all('a', recursive=False) # 只找直接子节点而不递归查找# CSS选择器  \n\nsoup.select('a') # 查找a标签，结果是列表\nsoup.select('.title') # 查找类为title的标签\nsoup.select('#name')  # 查找id为name的标签\n```\n## 获取内容\n```\n    tag.name        # 如果是Tag，那么返回它本身，例如，如果是a标签，那就返回a；如果是soup对象，那么返回[document]，返回值都是str类型\n    tag.attrs       # 获取该标签的属性，返回的是一个字典，例如，如果有个a标签是<a class=\"a\" href=\"#\"></a>那么返回\\{'class': 'a', 'href': '#'\\}\n    soup.a['class'] # 直接获取a标签的class属性值\n    soup.a.get('class'] # 同上\n\n    soup.a.string   # 获取标签内的内容，<a>文字部分</a>\n    soup.a.text     # 获取标签内文字部分<span>abc<a href=\"\"></a></span> 获取abc\n    soup.prettify() # 获取所有内容\n```\n## 遍历\n\n获取tag内的字符串用tag.string，可以通过unicode方法将NavigableString对象转换成Unicode字符串，如unicode_st\nring = unicode(tag.string)\n\n## TroubleShooting\n- 如果出现无法找到某些真的存在的标签，可能原因是选择的解析器有问题，可以将lxml换成html5lib\n\n\n如果要获取xml/html中的注释使用Comment对象，如\n\n```\n    markup = \"<b><!--Hey, buddy. Want to buy a used parser?--></b>\"\n    soup = BeautifulSoup(markup)\n    comment = soup.b.string\n    commment就是注释的东西\n    print(comment)\n    >>>u'Hey, buddy. Want to buy a used parser'\n    可以\n    print(soup.b.prettify())打印全部<b>\n    也可以用CDATA替代注释：如\n    from bs4 import CData\n    cdata = CData(\"A CDATA block\")\n    comment.replace_with(cdata)\n\n\n    print(soup.b.prettify())\n    打印：\n    <b><![CDATA[A CDATA block]]></b>\n```\n通过点去属性的方式只能获得当前名字的第一个tag，如果要得到所有的就用soup.find_all('a')\n\ntag的.contents属性可以将tag的子节点以列表的方式输出(包括子节点的所有内容)\n\n```\n    head_tag = soup.head\n    head_tag # <head><title>The Dormouse's story</title></head>  \n\n    head_tag.contents\n    [<title>The Dormouse's story</title>]\n\n    title_tag = head_tag.contents[0]\n    title_tag\n\n    #<title>The Dormouse's story</title>  \n\n    title_tag.contents\n\n    [u'The Dormouse's story']\n```\nBeautifulSoup对象本身一定会包含子节点，也就是说<html>标签也是该对象的子节点，如 soup.contents[0].name就是html\n\n通过tag的.children生成器，可以对tag的子节点进行循环：\n\n```\n    for child in title_tag.children:\n        print(child)\n        # The Dormouse's story\n```\n。desendants属性可以对所有tag的子孙节点进行递归循环\n\n```\n    for child in head_tag.descendants:\n        print(child)\n        # <title>The Dormouse's story</title>\n        # The Dormouse's story\n    字符串也是一个子节点\n```\n如果tag只有一个NavigableString类型的子节点，就可以用title_tag.string访问子节点\n\n如果tag包含多个字符串就用.strings来循环，如：\n\n```\n    for string in soup.strings:\n        print(repr(string))\n        # u\"The Dormouse's story\"\n        # u'\\\\n\\\\n'\n        # u\"The Dormouse's story\"\n        # u'\\\\n\\\\n'\n```\n使用soup.stripped_strings代替soup.strings可以去掉空白或空行项\n\n父节点就正好相反了，.parent得到父节点，.parents递归得到元素的所有父节点\n\n兄弟节点：.next_sibling，.previous_sibling来访问，通过.next_siblings和.previous_siblings属性对\n当前节点的兄弟节点迭代输出for sibling in soup.a.next_siblings:这样子\n\n回退和前进：.next_element和.previouw_element，.next_elements和.previous_elements\n\n查找\n\nfind和find_all，还可以传入正则表达式，如soup.find_all(re.compile(\"^b\"))如果传入的是列表，将会与列表中任一元素匹配\n的内容返回，true可以匹配任何标签，如soup.find_all(True)\n\n检查是否包含属性tag.has_attr('class')\n\nfind_all( [name](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh\n.html#id32) , [attrs](http://www.crummy.com/software/BeautifulSoup/bs4/doc/ind\nex.zh.html#css) , [recursive](http://www.crummy.com/software/BeautifulSoup/bs4\n/doc/index.zh.html#recursive \"Link:\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#recursive\"\n) , [text](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#\ntext) , [**kwargs](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.\nzh.html#keyword) )\n\nattr表示具有该属性的name标签，text可以搜索非标签的字符串内容，如soup.find_all(text=\"wang\")\n\n\n\n    soup.find_all(id=\"link2\")[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n\nlimit参数：find_all()方法返回全部的搜索结果，如果文档数很大那么搜索会很慢，如果不需要全部结果，可以用limit参数，类似于SQL中的limi\nt，如soup.find_all(\"a\", limit=2)\n\n如果只搜索直接子节点，就加上recursive=False参数\n\n可以不用指明find_all，如soup.find_all(\"a\")可以用soup(\"a\")代替，soup.title.find_all(text=True\n)可以用soup.title(text=True)代替\n\n其他功能，按CSS搜索、支持CSS选择器，支持修改文档树\n\nfind()方法至返回一个，其他的还有find_parents()和find_parent()，find_next_siblings()，find_next\n_sibling()，find_previous_siblings()，find_previous_sibling()，find_all_next()，fi\nnd_next()，find_all_previous()，find_previous()\n\n如果只想得到tag中包含的文本内容，那么就可以用get_text()方法，获取到tag包含的所有文本内容包括子孙tag中的内容\n\n注：beautifulsoup会自动将tag变为小写，只有添加\"xml\"选项才能大小写敏感，因为不指定就默认是html，html的标签对大小写不敏感，所以推\n荐还是把lxml XML解析器安上，不过要先弄上什么C语言库\n\n# 修改\n\n\n\n    # 删除当前节点\n    tag.extract()  \n    \n    # 插入节点\n    new_tag = '<url>dagasgga</url>'\n    new_tag = BeautifulSoup(new_url, 'html.parser')\n    soup.tag.insert(位置如1, new_tag)\n","source":"_posts/python-beautifulsoup-parse-html-xml.md","raw":"---\ntitle: \"Python使用beautifulsoup解析HTML、XML\"\ndate: 2015-05-22 23:21:57\ncategories: 编程之路\n---\nPython官方文档都说自己解析XML的方式存在漏洞了，那我也只能用他推荐的了。\n\n这里我使用的BeautifulSoup，因为其中文文档十分完整清晰，而且相比于defusedxml，它不仅可以解析XML还可以解析HTML，非常方便。[文档\n地址](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)\n\n另外，如果是简单的网页解析任务，可以直接将获取到的网页进行正则表达式匹配也可以达到效果，只是可能会出现各种编码各种错误问题\n\n## Installation\n```\n# 直接apt安装\n$ sudo apt-get install Python3-bs4  # 这将安装下面两个包\n\n# pip方式安装\n$ pip3 install beautifulsoup4   # 这样直接安装或者下载源码进行安装\n$ pip3 install lxml             # 如果是解析xml必须安装一个解析器，文档里说的那个解析器只有这个好安装点，需要提前安装好依赖，apt-get install libxml2-dev, libxslt1-dev, python-dev，还可以使用html.parser这个解析器，这个解析器不会自动添加body元素,CentOS用yum -y install python-devel gcc libxml2 libxml2-devel libxslt libxslt-devel\n```\n\n## 基本概念\n\nTAG：表示xml/html里面的一个元素(节点)，包括标签以及其里面的内容\n\n## 基本使用\n\n最简单的使用例子：\n\n```\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\ncontent = \"<b><!--Hey, buddy--></b>\"   # 表示网页内容\ncontent = urllib.request.urlopen(url)  # 通常做爬虫的时候html来自于网页\nsoup = BeautifulSoup(content)          # 解析，生成一个bs4.BeautifulSoup\ncomment = soup.b.string                # 获取<b>标签的内容\n```\n## 查找\n```\n# 查找标签\nsoup.a             # 查找第一个a标签，返回值就是一个TAG<class 'bs4.element.Tag'>\n    soup.find('a')     # 同上，都只是查找满足条件的第一个\n    soup.find_all('a') # 查找所有的a标签，返回一个list获取内容\n    soup.find_all('a', class_='name')  # 根据标签的属性进行查找，比如这里查找class这个属性为name的a标签\n    soup.find_all(text=\"\") # 在整个文档中查找一个字符串\n    soup.find_all('a', limit=3) # 限制只找三个结果\n    soup.find_all('a', recursive=False) # 只找直接子节点而不递归查找# CSS选择器  \n\nsoup.select('a') # 查找a标签，结果是列表\nsoup.select('.title') # 查找类为title的标签\nsoup.select('#name')  # 查找id为name的标签\n```\n## 获取内容\n```\n    tag.name        # 如果是Tag，那么返回它本身，例如，如果是a标签，那就返回a；如果是soup对象，那么返回[document]，返回值都是str类型\n    tag.attrs       # 获取该标签的属性，返回的是一个字典，例如，如果有个a标签是<a class=\"a\" href=\"#\"></a>那么返回\\{'class': 'a', 'href': '#'\\}\n    soup.a['class'] # 直接获取a标签的class属性值\n    soup.a.get('class'] # 同上\n\n    soup.a.string   # 获取标签内的内容，<a>文字部分</a>\n    soup.a.text     # 获取标签内文字部分<span>abc<a href=\"\"></a></span> 获取abc\n    soup.prettify() # 获取所有内容\n```\n## 遍历\n\n获取tag内的字符串用tag.string，可以通过unicode方法将NavigableString对象转换成Unicode字符串，如unicode_st\nring = unicode(tag.string)\n\n## TroubleShooting\n- 如果出现无法找到某些真的存在的标签，可能原因是选择的解析器有问题，可以将lxml换成html5lib\n\n\n如果要获取xml/html中的注释使用Comment对象，如\n\n```\n    markup = \"<b><!--Hey, buddy. Want to buy a used parser?--></b>\"\n    soup = BeautifulSoup(markup)\n    comment = soup.b.string\n    commment就是注释的东西\n    print(comment)\n    >>>u'Hey, buddy. Want to buy a used parser'\n    可以\n    print(soup.b.prettify())打印全部<b>\n    也可以用CDATA替代注释：如\n    from bs4 import CData\n    cdata = CData(\"A CDATA block\")\n    comment.replace_with(cdata)\n\n\n    print(soup.b.prettify())\n    打印：\n    <b><![CDATA[A CDATA block]]></b>\n```\n通过点去属性的方式只能获得当前名字的第一个tag，如果要得到所有的就用soup.find_all('a')\n\ntag的.contents属性可以将tag的子节点以列表的方式输出(包括子节点的所有内容)\n\n```\n    head_tag = soup.head\n    head_tag # <head><title>The Dormouse's story</title></head>  \n\n    head_tag.contents\n    [<title>The Dormouse's story</title>]\n\n    title_tag = head_tag.contents[0]\n    title_tag\n\n    #<title>The Dormouse's story</title>  \n\n    title_tag.contents\n\n    [u'The Dormouse's story']\n```\nBeautifulSoup对象本身一定会包含子节点，也就是说<html>标签也是该对象的子节点，如 soup.contents[0].name就是html\n\n通过tag的.children生成器，可以对tag的子节点进行循环：\n\n```\n    for child in title_tag.children:\n        print(child)\n        # The Dormouse's story\n```\n。desendants属性可以对所有tag的子孙节点进行递归循环\n\n```\n    for child in head_tag.descendants:\n        print(child)\n        # <title>The Dormouse's story</title>\n        # The Dormouse's story\n    字符串也是一个子节点\n```\n如果tag只有一个NavigableString类型的子节点，就可以用title_tag.string访问子节点\n\n如果tag包含多个字符串就用.strings来循环，如：\n\n```\n    for string in soup.strings:\n        print(repr(string))\n        # u\"The Dormouse's story\"\n        # u'\\\\n\\\\n'\n        # u\"The Dormouse's story\"\n        # u'\\\\n\\\\n'\n```\n使用soup.stripped_strings代替soup.strings可以去掉空白或空行项\n\n父节点就正好相反了，.parent得到父节点，.parents递归得到元素的所有父节点\n\n兄弟节点：.next_sibling，.previous_sibling来访问，通过.next_siblings和.previous_siblings属性对\n当前节点的兄弟节点迭代输出for sibling in soup.a.next_siblings:这样子\n\n回退和前进：.next_element和.previouw_element，.next_elements和.previous_elements\n\n查找\n\nfind和find_all，还可以传入正则表达式，如soup.find_all(re.compile(\"^b\"))如果传入的是列表，将会与列表中任一元素匹配\n的内容返回，true可以匹配任何标签，如soup.find_all(True)\n\n检查是否包含属性tag.has_attr('class')\n\nfind_all( [name](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh\n.html#id32) , [attrs](http://www.crummy.com/software/BeautifulSoup/bs4/doc/ind\nex.zh.html#css) , [recursive](http://www.crummy.com/software/BeautifulSoup/bs4\n/doc/index.zh.html#recursive \"Link:\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#recursive\"\n) , [text](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#\ntext) , [**kwargs](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.\nzh.html#keyword) )\n\nattr表示具有该属性的name标签，text可以搜索非标签的字符串内容，如soup.find_all(text=\"wang\")\n\n\n\n    soup.find_all(id=\"link2\")[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>]\n\nlimit参数：find_all()方法返回全部的搜索结果，如果文档数很大那么搜索会很慢，如果不需要全部结果，可以用limit参数，类似于SQL中的limi\nt，如soup.find_all(\"a\", limit=2)\n\n如果只搜索直接子节点，就加上recursive=False参数\n\n可以不用指明find_all，如soup.find_all(\"a\")可以用soup(\"a\")代替，soup.title.find_all(text=True\n)可以用soup.title(text=True)代替\n\n其他功能，按CSS搜索、支持CSS选择器，支持修改文档树\n\nfind()方法至返回一个，其他的还有find_parents()和find_parent()，find_next_siblings()，find_next\n_sibling()，find_previous_siblings()，find_previous_sibling()，find_all_next()，fi\nnd_next()，find_all_previous()，find_previous()\n\n如果只想得到tag中包含的文本内容，那么就可以用get_text()方法，获取到tag包含的所有文本内容包括子孙tag中的内容\n\n注：beautifulsoup会自动将tag变为小写，只有添加\"xml\"选项才能大小写敏感，因为不指定就默认是html，html的标签对大小写不敏感，所以推\n荐还是把lxml XML解析器安上，不过要先弄上什么C语言库\n\n# 修改\n\n\n\n    # 删除当前节点\n    tag.extract()  \n    \n    # 插入节点\n    new_tag = '<url>dagasgga</url>'\n    new_tag = BeautifulSoup(new_url, 'html.parser')\n    soup.tag.insert(位置如1, new_tag)\n","slug":"python-beautifulsoup-parse-html-xml","published":1,"updated":"2016-07-30T07:16:37.000Z","_id":"cir3l2pg900539vnzwn5fhaqg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Python官方文档都说自己解析XML的方式存在漏洞了，那我也只能用他推荐的了。</p>\n<p>这里我使用的BeautifulSoup，因为其中文文档十分完整清晰，而且相比于defusedxml，它不仅可以解析XML还可以解析HTML，非常方便。<a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\" target=\"_blank\" rel=\"external\">文档<br>地址</a></p>\n<p>另外，如果是简单的网页解析任务，可以直接将获取到的网页进行正则表达式匹配也可以达到效果，只是可能会出现各种编码各种错误问题</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 直接apt安装</div><div class=\"line\">$ sudo apt-get install Python3-bs4  # 这将安装下面两个包</div><div class=\"line\"></div><div class=\"line\"># pip方式安装</div><div class=\"line\">$ pip3 install beautifulsoup4   # 这样直接安装或者下载源码进行安装</div><div class=\"line\">$ pip3 install lxml             # 如果是解析xml必须安装一个解析器，文档里说的那个解析器只有这个好安装点，需要提前安装好依赖，apt-get install libxml2-dev, libxslt1-dev, python-dev，还可以使用html.parser这个解析器，这个解析器不会自动添加body元素,CentOS用yum -y install python-devel gcc libxml2 libxml2-devel libxslt libxslt-devel</div></pre></td></tr></table></figure>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>TAG：表示xml/html里面的一个元素(节点)，包括标签以及其里面的内容</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>最简单的使用例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request</div><div class=\"line\">from bs4 import BeautifulSoup</div><div class=\"line\"></div><div class=\"line\">content = &quot;&lt;b&gt;&lt;!--Hey, buddy--&gt;&lt;/b&gt;&quot;   # 表示网页内容</div><div class=\"line\">content = urllib.request.urlopen(url)  # 通常做爬虫的时候html来自于网页</div><div class=\"line\">soup = BeautifulSoup(content)          # 解析，生成一个bs4.BeautifulSoup</div><div class=\"line\">comment = soup.b.string                # 获取&lt;b&gt;标签的内容</div></pre></td></tr></table></figure>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查找标签</div><div class=\"line\">soup.a             # 查找第一个a标签，返回值就是一个TAG&lt;class &apos;bs4.element.Tag&apos;&gt;</div><div class=\"line\">    soup.find(&apos;a&apos;)     # 同上，都只是查找满足条件的第一个</div><div class=\"line\">    soup.find_all(&apos;a&apos;) # 查找所有的a标签，返回一个list获取内容</div><div class=\"line\">    soup.find_all(&apos;a&apos;, class_=&apos;name&apos;)  # 根据标签的属性进行查找，比如这里查找class这个属性为name的a标签</div><div class=\"line\">    soup.find_all(text=&quot;&quot;) # 在整个文档中查找一个字符串</div><div class=\"line\">    soup.find_all(&apos;a&apos;, limit=3) # 限制只找三个结果</div><div class=\"line\">    soup.find_all(&apos;a&apos;, recursive=False) # 只找直接子节点而不递归查找# CSS选择器  </div><div class=\"line\"></div><div class=\"line\">soup.select(&apos;a&apos;) # 查找a标签，结果是列表</div><div class=\"line\">soup.select(&apos;.title&apos;) # 查找类为title的标签</div><div class=\"line\">soup.select(&apos;#name&apos;)  # 查找id为name的标签</div></pre></td></tr></table></figure>\n<h2 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tag.name        # 如果是Tag，那么返回它本身，例如，如果是a标签，那就返回a；如果是soup对象，那么返回[document]，返回值都是str类型</div><div class=\"line\">tag.attrs       # 获取该标签的属性，返回的是一个字典，例如，如果有个a标签是&lt;a class=&quot;a&quot; href=&quot;#&quot;&gt;&lt;/a&gt;那么返回\\&#123;&apos;class&apos;: &apos;a&apos;, &apos;href&apos;: &apos;#&apos;\\&#125;</div><div class=\"line\">soup.a[&apos;class&apos;] # 直接获取a标签的class属性值</div><div class=\"line\">soup.a.get(&apos;class&apos;] # 同上</div><div class=\"line\"></div><div class=\"line\">soup.a.string   # 获取标签内的内容，&lt;a&gt;文字部分&lt;/a&gt;</div><div class=\"line\">soup.a.text     # 获取标签内文字部分&lt;span&gt;abc&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/span&gt; 获取abc</div><div class=\"line\">soup.prettify() # 获取所有内容</div></pre></td></tr></table></figure>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><p>获取tag内的字符串用tag.string，可以通过unicode方法将NavigableString对象转换成Unicode字符串，如unicode_st<br>ring = unicode(tag.string)</p>\n<h2 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h2><ul>\n<li>如果出现无法找到某些真的存在的标签，可能原因是选择的解析器有问题，可以将lxml换成html5lib</li>\n</ul>\n<p>如果要获取xml/html中的注释使用Comment对象，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">markup = &quot;&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;&quot;</div><div class=\"line\">soup = BeautifulSoup(markup)</div><div class=\"line\">comment = soup.b.string</div><div class=\"line\">commment就是注释的东西</div><div class=\"line\">print(comment)</div><div class=\"line\">&gt;&gt;&gt;u&apos;Hey, buddy. Want to buy a used parser&apos;</div><div class=\"line\">可以</div><div class=\"line\">print(soup.b.prettify())打印全部&lt;b&gt;</div><div class=\"line\">也可以用CDATA替代注释：如</div><div class=\"line\">from bs4 import CData</div><div class=\"line\">cdata = CData(&quot;A CDATA block&quot;)</div><div class=\"line\">comment.replace_with(cdata)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print(soup.b.prettify())</div><div class=\"line\">打印：</div><div class=\"line\">&lt;b&gt;&lt;![CDATA[A CDATA block]]&gt;&lt;/b&gt;</div></pre></td></tr></table></figure>\n<p>通过点去属性的方式只能获得当前名字的第一个tag，如果要得到所有的就用soup.find_all(‘a’)</p>\n<p>tag的.contents属性可以将tag的子节点以列表的方式输出(包括子节点的所有内容)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">head_tag = soup.head</div><div class=\"line\">head_tag # &lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;  </div><div class=\"line\"></div><div class=\"line\">head_tag.contents</div><div class=\"line\">[&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;]</div><div class=\"line\"></div><div class=\"line\">title_tag = head_tag.contents[0]</div><div class=\"line\">title_tag</div><div class=\"line\"></div><div class=\"line\">#&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;  </div><div class=\"line\"></div><div class=\"line\">title_tag.contents</div><div class=\"line\"></div><div class=\"line\">[u&apos;The Dormouse&apos;s story&apos;]</div></pre></td></tr></table></figure>\n<p>BeautifulSoup对象本身一定会包含子节点，也就是说<html>标签也是该对象的子节点，如 soup.contents[0].name就是html</html></p>\n<p>通过tag的.children生成器，可以对tag的子节点进行循环：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for child in title_tag.children:</div><div class=\"line\">    print(child)</div><div class=\"line\">    # The Dormouse&apos;s story</div></pre></td></tr></table></figure>\n<p>。desendants属性可以对所有tag的子孙节点进行递归循环</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for child in head_tag.descendants:</div><div class=\"line\">    print(child)</div><div class=\"line\">    # &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</div><div class=\"line\">    # The Dormouse&apos;s story</div><div class=\"line\">字符串也是一个子节点</div></pre></td></tr></table></figure>\n<p>如果tag只有一个NavigableString类型的子节点，就可以用title_tag.string访问子节点</p>\n<p>如果tag包含多个字符串就用.strings来循环，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">for string in soup.strings:</div><div class=\"line\">    print(repr(string))</div><div class=\"line\">    # u&quot;The Dormouse&apos;s story&quot;</div><div class=\"line\">    # u&apos;\\\\n\\\\n&apos;</div><div class=\"line\">    # u&quot;The Dormouse&apos;s story&quot;</div><div class=\"line\">    # u&apos;\\\\n\\\\n&apos;</div></pre></td></tr></table></figure>\n<p>使用soup.stripped_strings代替soup.strings可以去掉空白或空行项</p>\n<p>父节点就正好相反了，.parent得到父节点，.parents递归得到元素的所有父节点</p>\n<p>兄弟节点：.next_sibling，.previous_sibling来访问，通过.next_siblings和.previous_siblings属性对<br>当前节点的兄弟节点迭代输出for sibling in soup.a.next_siblings:这样子</p>\n<p>回退和前进：.next_element和.previouw_element，.next_elements和.previous_elements</p>\n<p>查找</p>\n<p>find和find_all，还可以传入正则表达式，如soup.find_all(re.compile(“^b”))如果传入的是列表，将会与列表中任一元素匹配<br>的内容返回，true可以匹配任何标签，如soup.find_all(True)</p>\n<p>检查是否包含属性tag.has_attr(‘class’)</p>\n<p>find_all( <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh\n.html#id32\" target=\"_blank\" rel=\"external\">name</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/ind\nex.zh.html#css\" target=\"_blank\" rel=\"external\">attrs</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4\n/doc/index.zh.html#recursive\" title=\"Link:\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#recursive\" target=\"_blank\" rel=\"external\">recursive</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#\ntext\" target=\"_blank\" rel=\"external\">text</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.\nzh.html#keyword\" target=\"_blank\" rel=\"external\">**kwargs</a> )</p>\n<p>attr表示具有该属性的name标签，text可以搜索非标签的字符串内容，如soup.find_all(text=”wang”)</p>\n<pre><code>soup.find_all(id=&quot;link2&quot;)[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]\n</code></pre><p>limit参数：find_all()方法返回全部的搜索结果，如果文档数很大那么搜索会很慢，如果不需要全部结果，可以用limit参数，类似于SQL中的limi<br>t，如soup.find_all(“a”, limit=2)</p>\n<p>如果只搜索直接子节点，就加上recursive=False参数</p>\n<p>可以不用指明find_all，如soup.find_all(“a”)可以用soup(“a”)代替，soup.title.find_all(text=True<br>)可以用soup.title(text=True)代替</p>\n<p>其他功能，按CSS搜索、支持CSS选择器，支持修改文档树</p>\n<p>find()方法至返回一个，其他的还有find_parents()和find_parent()，find_next_siblings()，find_next<br>_sibling()，find_previous_siblings()，find_previous_sibling()，find_all_next()，fi<br>nd_next()，find_all_previous()，find_previous()</p>\n<p>如果只想得到tag中包含的文本内容，那么就可以用get_text()方法，获取到tag包含的所有文本内容包括子孙tag中的内容</p>\n<p>注：beautifulsoup会自动将tag变为小写，只有添加”xml”选项才能大小写敏感，因为不指定就默认是html，html的标签对大小写不敏感，所以推<br>荐还是把lxml XML解析器安上，不过要先弄上什么C语言库</p>\n<h1 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h1><pre><code># 删除当前节点\ntag.extract()  \n\n# 插入节点\nnew_tag = &apos;&lt;url&gt;dagasgga&lt;/url&gt;&apos;\nnew_tag = BeautifulSoup(new_url, &apos;html.parser&apos;)\nsoup.tag.insert(位置如1, new_tag)\n</code></pre>","excerpt":"","more":"<p>Python官方文档都说自己解析XML的方式存在漏洞了，那我也只能用他推荐的了。</p>\n<p>这里我使用的BeautifulSoup，因为其中文文档十分完整清晰，而且相比于defusedxml，它不仅可以解析XML还可以解析HTML，非常方便。<a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\">文档<br>地址</a></p>\n<p>另外，如果是简单的网页解析任务，可以直接将获取到的网页进行正则表达式匹配也可以达到效果，只是可能会出现各种编码各种错误问题</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 直接apt安装</div><div class=\"line\">$ sudo apt-get install Python3-bs4  # 这将安装下面两个包</div><div class=\"line\"></div><div class=\"line\"># pip方式安装</div><div class=\"line\">$ pip3 install beautifulsoup4   # 这样直接安装或者下载源码进行安装</div><div class=\"line\">$ pip3 install lxml             # 如果是解析xml必须安装一个解析器，文档里说的那个解析器只有这个好安装点，需要提前安装好依赖，apt-get install libxml2-dev, libxslt1-dev, python-dev，还可以使用html.parser这个解析器，这个解析器不会自动添加body元素,CentOS用yum -y install python-devel gcc libxml2 libxml2-devel libxslt libxslt-devel</div></pre></td></tr></table></figure>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>TAG：表示xml/html里面的一个元素(节点)，包括标签以及其里面的内容</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>最简单的使用例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request</div><div class=\"line\">from bs4 import BeautifulSoup</div><div class=\"line\"></div><div class=\"line\">content = &quot;&lt;b&gt;&lt;!--Hey, buddy--&gt;&lt;/b&gt;&quot;   # 表示网页内容</div><div class=\"line\">content = urllib.request.urlopen(url)  # 通常做爬虫的时候html来自于网页</div><div class=\"line\">soup = BeautifulSoup(content)          # 解析，生成一个bs4.BeautifulSoup</div><div class=\"line\">comment = soup.b.string                # 获取&lt;b&gt;标签的内容</div></pre></td></tr></table></figure>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查找标签</div><div class=\"line\">soup.a             # 查找第一个a标签，返回值就是一个TAG&lt;class &apos;bs4.element.Tag&apos;&gt;</div><div class=\"line\">    soup.find(&apos;a&apos;)     # 同上，都只是查找满足条件的第一个</div><div class=\"line\">    soup.find_all(&apos;a&apos;) # 查找所有的a标签，返回一个list获取内容</div><div class=\"line\">    soup.find_all(&apos;a&apos;, class_=&apos;name&apos;)  # 根据标签的属性进行查找，比如这里查找class这个属性为name的a标签</div><div class=\"line\">    soup.find_all(text=&quot;&quot;) # 在整个文档中查找一个字符串</div><div class=\"line\">    soup.find_all(&apos;a&apos;, limit=3) # 限制只找三个结果</div><div class=\"line\">    soup.find_all(&apos;a&apos;, recursive=False) # 只找直接子节点而不递归查找# CSS选择器  </div><div class=\"line\"></div><div class=\"line\">soup.select(&apos;a&apos;) # 查找a标签，结果是列表</div><div class=\"line\">soup.select(&apos;.title&apos;) # 查找类为title的标签</div><div class=\"line\">soup.select(&apos;#name&apos;)  # 查找id为name的标签</div></pre></td></tr></table></figure>\n<h2 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">tag.name        # 如果是Tag，那么返回它本身，例如，如果是a标签，那就返回a；如果是soup对象，那么返回[document]，返回值都是str类型</div><div class=\"line\">tag.attrs       # 获取该标签的属性，返回的是一个字典，例如，如果有个a标签是&lt;a class=&quot;a&quot; href=&quot;#&quot;&gt;&lt;/a&gt;那么返回\\&#123;&apos;class&apos;: &apos;a&apos;, &apos;href&apos;: &apos;#&apos;\\&#125;</div><div class=\"line\">soup.a[&apos;class&apos;] # 直接获取a标签的class属性值</div><div class=\"line\">soup.a.get(&apos;class&apos;] # 同上</div><div class=\"line\"></div><div class=\"line\">soup.a.string   # 获取标签内的内容，&lt;a&gt;文字部分&lt;/a&gt;</div><div class=\"line\">soup.a.text     # 获取标签内文字部分&lt;span&gt;abc&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/span&gt; 获取abc</div><div class=\"line\">soup.prettify() # 获取所有内容</div></pre></td></tr></table></figure>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><p>获取tag内的字符串用tag.string，可以通过unicode方法将NavigableString对象转换成Unicode字符串，如unicode_st<br>ring = unicode(tag.string)</p>\n<h2 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h2><ul>\n<li>如果出现无法找到某些真的存在的标签，可能原因是选择的解析器有问题，可以将lxml换成html5lib</li>\n</ul>\n<p>如果要获取xml/html中的注释使用Comment对象，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">markup = &quot;&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;&quot;</div><div class=\"line\">soup = BeautifulSoup(markup)</div><div class=\"line\">comment = soup.b.string</div><div class=\"line\">commment就是注释的东西</div><div class=\"line\">print(comment)</div><div class=\"line\">&gt;&gt;&gt;u&apos;Hey, buddy. Want to buy a used parser&apos;</div><div class=\"line\">可以</div><div class=\"line\">print(soup.b.prettify())打印全部&lt;b&gt;</div><div class=\"line\">也可以用CDATA替代注释：如</div><div class=\"line\">from bs4 import CData</div><div class=\"line\">cdata = CData(&quot;A CDATA block&quot;)</div><div class=\"line\">comment.replace_with(cdata)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print(soup.b.prettify())</div><div class=\"line\">打印：</div><div class=\"line\">&lt;b&gt;&lt;![CDATA[A CDATA block]]&gt;&lt;/b&gt;</div></pre></td></tr></table></figure>\n<p>通过点去属性的方式只能获得当前名字的第一个tag，如果要得到所有的就用soup.find_all(‘a’)</p>\n<p>tag的.contents属性可以将tag的子节点以列表的方式输出(包括子节点的所有内容)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">head_tag = soup.head</div><div class=\"line\">head_tag # &lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;  </div><div class=\"line\"></div><div class=\"line\">head_tag.contents</div><div class=\"line\">[&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;]</div><div class=\"line\"></div><div class=\"line\">title_tag = head_tag.contents[0]</div><div class=\"line\">title_tag</div><div class=\"line\"></div><div class=\"line\">#&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;  </div><div class=\"line\"></div><div class=\"line\">title_tag.contents</div><div class=\"line\"></div><div class=\"line\">[u&apos;The Dormouse&apos;s story&apos;]</div></pre></td></tr></table></figure>\n<p>BeautifulSoup对象本身一定会包含子节点，也就是说<html>标签也是该对象的子节点，如 soup.contents[0].name就是html</p>\n<p>通过tag的.children生成器，可以对tag的子节点进行循环：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for child in title_tag.children:</div><div class=\"line\">    print(child)</div><div class=\"line\">    # The Dormouse&apos;s story</div></pre></td></tr></table></figure>\n<p>。desendants属性可以对所有tag的子孙节点进行递归循环</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for child in head_tag.descendants:</div><div class=\"line\">    print(child)</div><div class=\"line\">    # &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</div><div class=\"line\">    # The Dormouse&apos;s story</div><div class=\"line\">字符串也是一个子节点</div></pre></td></tr></table></figure>\n<p>如果tag只有一个NavigableString类型的子节点，就可以用title_tag.string访问子节点</p>\n<p>如果tag包含多个字符串就用.strings来循环，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">for string in soup.strings:</div><div class=\"line\">    print(repr(string))</div><div class=\"line\">    # u&quot;The Dormouse&apos;s story&quot;</div><div class=\"line\">    # u&apos;\\\\n\\\\n&apos;</div><div class=\"line\">    # u&quot;The Dormouse&apos;s story&quot;</div><div class=\"line\">    # u&apos;\\\\n\\\\n&apos;</div></pre></td></tr></table></figure>\n<p>使用soup.stripped_strings代替soup.strings可以去掉空白或空行项</p>\n<p>父节点就正好相反了，.parent得到父节点，.parents递归得到元素的所有父节点</p>\n<p>兄弟节点：.next_sibling，.previous_sibling来访问，通过.next_siblings和.previous_siblings属性对<br>当前节点的兄弟节点迭代输出for sibling in soup.a.next_siblings:这样子</p>\n<p>回退和前进：.next_element和.previouw_element，.next_elements和.previous_elements</p>\n<p>查找</p>\n<p>find和find_all，还可以传入正则表达式，如soup.find_all(re.compile(“^b”))如果传入的是列表，将会与列表中任一元素匹配<br>的内容返回，true可以匹配任何标签，如soup.find_all(True)</p>\n<p>检查是否包含属性tag.has_attr(‘class’)</p>\n<p>find_all( <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh\n.html#id32\">name</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/ind\nex.zh.html#css\">attrs</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4\n/doc/index.zh.html#recursive\" title=\"Link:\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#recursive\">recursive</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#\ntext\">text</a> , <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.\nzh.html#keyword\">**kwargs</a> )</p>\n<p>attr表示具有该属性的name标签，text可以搜索非标签的字符串内容，如soup.find_all(text=”wang”)</p>\n<pre><code>soup.find_all(id=&quot;link2&quot;)[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]\n</code></pre><p>limit参数：find_all()方法返回全部的搜索结果，如果文档数很大那么搜索会很慢，如果不需要全部结果，可以用limit参数，类似于SQL中的limi<br>t，如soup.find_all(“a”, limit=2)</p>\n<p>如果只搜索直接子节点，就加上recursive=False参数</p>\n<p>可以不用指明find_all，如soup.find_all(“a”)可以用soup(“a”)代替，soup.title.find_all(text=True<br>)可以用soup.title(text=True)代替</p>\n<p>其他功能，按CSS搜索、支持CSS选择器，支持修改文档树</p>\n<p>find()方法至返回一个，其他的还有find_parents()和find_parent()，find_next_siblings()，find_next<br>_sibling()，find_previous_siblings()，find_previous_sibling()，find_all_next()，fi<br>nd_next()，find_all_previous()，find_previous()</p>\n<p>如果只想得到tag中包含的文本内容，那么就可以用get_text()方法，获取到tag包含的所有文本内容包括子孙tag中的内容</p>\n<p>注：beautifulsoup会自动将tag变为小写，只有添加”xml”选项才能大小写敏感，因为不指定就默认是html，html的标签对大小写不敏感，所以推<br>荐还是把lxml XML解析器安上，不过要先弄上什么C语言库</p>\n<h1 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h1><pre><code># 删除当前节点\ntag.extract()  \n\n# 插入节点\nnew_tag = &apos;&lt;url&gt;dagasgga&lt;/url&gt;&apos;\nnew_tag = BeautifulSoup(new_url, &apos;html.parser&apos;)\nsoup.tag.insert(位置如1, new_tag)\n</code></pre>"},{"title":"Python Redis模块的使用","date":"2015-05-29T13:42:08.000Z","_content":"Python可以使用redis模块直接操作Redis数据库\n\nPyPI文档：<https://pypi.python.org/pypi/redis/2.10.3>\n\n可直接使用pip进行安装。\n\nredis-py使用两个类来完成Redis的操作。\n\nredis-py使用一个连接池来管理Redis server。每个Redis实例都默认会创建自己的连接池。\n\n## 基本使用\n\n\n\n    import redis\n\n\n\n\n    # 数据库的连接\n\n\n\n\n    r = redis.StrictRedis(host='localhost', port=6379, db=0)\n    r.set('foo', 'bar')   # 添加一条记录\n    r.get('foo')          # 获取某字段的值\n\n如果是使用连接池创建的，那么可以直接从连接池获取对象实例：\n\n\n\n    pool = redis.ConnectionPool(host='localhost', port=6379, db=0)\n    r = redis.Redis(connection_pool=pool)\n\n## Pipelines\n\nPipelines是redis的一个子类，用于同时提交多条命令(批量执行)，依次减少TCP请求，提高性能。常见使用方法：\n\n\n\n    r = redis.Redis(......)\n    pipe = r.pipeline()\n\n\n\n\n    # 这样下面的redis命令都会先被缓冲\n\n\n\n\n    pipe.set('foo', 'bar')\n    pipe.get('bing')\n\n\n\n\n    # 下面的命令会提交所有的命令到服务器\n\n\n\n\n    pipe.execute()\n\n\n\n\n    # 十分高级的魔术方法：\n\n\n\n\n    pipe.set('foo', 'bar').sadd('faz', 'baz').incr('auto_number').exectue()\n","source":"_posts/python-use-redis.md","raw":"---\ntitle: \"Python Redis模块的使用\"\ndate: 2015-05-29 21:42:08\ncategories: 编程之路\n---\nPython可以使用redis模块直接操作Redis数据库\n\nPyPI文档：<https://pypi.python.org/pypi/redis/2.10.3>\n\n可直接使用pip进行安装。\n\nredis-py使用两个类来完成Redis的操作。\n\nredis-py使用一个连接池来管理Redis server。每个Redis实例都默认会创建自己的连接池。\n\n## 基本使用\n\n\n\n    import redis\n\n\n\n\n    # 数据库的连接\n\n\n\n\n    r = redis.StrictRedis(host='localhost', port=6379, db=0)\n    r.set('foo', 'bar')   # 添加一条记录\n    r.get('foo')          # 获取某字段的值\n\n如果是使用连接池创建的，那么可以直接从连接池获取对象实例：\n\n\n\n    pool = redis.ConnectionPool(host='localhost', port=6379, db=0)\n    r = redis.Redis(connection_pool=pool)\n\n## Pipelines\n\nPipelines是redis的一个子类，用于同时提交多条命令(批量执行)，依次减少TCP请求，提高性能。常见使用方法：\n\n\n\n    r = redis.Redis(......)\n    pipe = r.pipeline()\n\n\n\n\n    # 这样下面的redis命令都会先被缓冲\n\n\n\n\n    pipe.set('foo', 'bar')\n    pipe.get('bing')\n\n\n\n\n    # 下面的命令会提交所有的命令到服务器\n\n\n\n\n    pipe.execute()\n\n\n\n\n    # 十分高级的魔术方法：\n\n\n\n\n    pipe.set('foo', 'bar').sadd('faz', 'baz').incr('auto_number').exectue()\n","slug":"python-use-redis","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pge00559vnz64sopqht","content":"<p>Python可以使用redis模块直接操作Redis数据库</p>\n<p>PyPI文档：<a href=\"https://pypi.python.org/pypi/redis/2.10.3\" target=\"_blank\" rel=\"external\">https://pypi.python.org/pypi/redis/2.10.3</a></p>\n<p>可直接使用pip进行安装。</p>\n<p>redis-py使用两个类来完成Redis的操作。</p>\n<p>redis-py使用一个连接池来管理Redis server。每个Redis实例都默认会创建自己的连接池。</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><pre><code>import redis\n\n\n\n\n# 数据库的连接\n\n\n\n\nr = redis.StrictRedis(host=&apos;localhost&apos;, port=6379, db=0)\nr.set(&apos;foo&apos;, &apos;bar&apos;)   # 添加一条记录\nr.get(&apos;foo&apos;)          # 获取某字段的值\n</code></pre><p>如果是使用连接池创建的，那么可以直接从连接池获取对象实例：</p>\n<pre><code>pool = redis.ConnectionPool(host=&apos;localhost&apos;, port=6379, db=0)\nr = redis.Redis(connection_pool=pool)\n</code></pre><h2 id=\"Pipelines\"><a href=\"#Pipelines\" class=\"headerlink\" title=\"Pipelines\"></a>Pipelines</h2><p>Pipelines是redis的一个子类，用于同时提交多条命令(批量执行)，依次减少TCP请求，提高性能。常见使用方法：</p>\n<pre><code>r = redis.Redis(......)\npipe = r.pipeline()\n\n\n\n\n# 这样下面的redis命令都会先被缓冲\n\n\n\n\npipe.set(&apos;foo&apos;, &apos;bar&apos;)\npipe.get(&apos;bing&apos;)\n\n\n\n\n# 下面的命令会提交所有的命令到服务器\n\n\n\n\npipe.execute()\n\n\n\n\n# 十分高级的魔术方法：\n\n\n\n\npipe.set(&apos;foo&apos;, &apos;bar&apos;).sadd(&apos;faz&apos;, &apos;baz&apos;).incr(&apos;auto_number&apos;).exectue()\n</code></pre>","excerpt":"","more":"<p>Python可以使用redis模块直接操作Redis数据库</p>\n<p>PyPI文档：<a href=\"https://pypi.python.org/pypi/redis/2.10.3\">https://pypi.python.org/pypi/redis/2.10.3</a></p>\n<p>可直接使用pip进行安装。</p>\n<p>redis-py使用两个类来完成Redis的操作。</p>\n<p>redis-py使用一个连接池来管理Redis server。每个Redis实例都默认会创建自己的连接池。</p>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><pre><code>import redis\n\n\n\n\n# 数据库的连接\n\n\n\n\nr = redis.StrictRedis(host=&apos;localhost&apos;, port=6379, db=0)\nr.set(&apos;foo&apos;, &apos;bar&apos;)   # 添加一条记录\nr.get(&apos;foo&apos;)          # 获取某字段的值\n</code></pre><p>如果是使用连接池创建的，那么可以直接从连接池获取对象实例：</p>\n<pre><code>pool = redis.ConnectionPool(host=&apos;localhost&apos;, port=6379, db=0)\nr = redis.Redis(connection_pool=pool)\n</code></pre><h2 id=\"Pipelines\"><a href=\"#Pipelines\" class=\"headerlink\" title=\"Pipelines\"></a>Pipelines</h2><p>Pipelines是redis的一个子类，用于同时提交多条命令(批量执行)，依次减少TCP请求，提高性能。常见使用方法：</p>\n<pre><code>r = redis.Redis(......)\npipe = r.pipeline()\n\n\n\n\n# 这样下面的redis命令都会先被缓冲\n\n\n\n\npipe.set(&apos;foo&apos;, &apos;bar&apos;)\npipe.get(&apos;bing&apos;)\n\n\n\n\n# 下面的命令会提交所有的命令到服务器\n\n\n\n\npipe.execute()\n\n\n\n\n# 十分高级的魔术方法：\n\n\n\n\npipe.set(&apos;foo&apos;, &apos;bar&apos;).sadd(&apos;faz&apos;, &apos;baz&apos;).incr(&apos;auto_number&apos;).exectue()\n</code></pre>"},{"title":"Python3+Eric5+PyQt4环境搭建","date":"2014-08-12T16:10:00.000Z","_content":"Eric是Python语言的一个IDE，它支持Python+PyQt(Python的一个图形库)进行可视化图形界面的开发。目前最新版本Eric5支持到Pyt\nhon3.4和PyQt4，目测Eric6马上就要出来了，并且Eric6支持PyQt5。当然，Eric还支持其它的一些开发语言，不过主要还是用来开发Pytho\nn的图形界面。Python为数不多的IDE中Eric算是很好的了，不仅支持多语言，而且界面好看，调试功能强大，对于熟悉QT的人就更得心应手了，因为PyQt是\n完全把C++的QT库拿来改成了Python自己的库，类和函数的用法几乎一致，再加上Python语言本身的简洁和强大，是我很喜欢的一套工具。这里就简要介绍一下\n其环境的搭建过程。\n\n1.下载必要的几个文件(在下载的时候一定要注意64位还是32位，必须一致)：\n\nPython3：[下载页面](https://www.python.org/downloads/windows/) 可以下载最新的版本\n\nPyQt4：[下载页面](http://www.riverbankcomputing.co.uk/software/pyqt/download)\n注意Eric目前只支持到PyQt5，不过Qt的版本可以到5，我下载的就是PyQt4-4.11.1-gpl-Py3.4-Qt5.3.1-x64.exe\n\nEric5：[下载页面](http://sourceforge.net/projects/eric-ide/files/eric5/stable/) ，选择\n一个最新稳定版，进入后记得把语言包一起下载，我下载的就是eric5-5.4.6.zip和eric5-i18n-tr-5.4.6.zip，注意windows版\n本是zip压缩文件tar.gz是针对linux的\n\n2.安装Python3：点击msi文件默认安装就行，千万不要修改路径，不然之后所有东西都要修改路径\n\n3.安装PyQt4：点击exe文件默认安装，勿改路径，安装完后，打开Python\nIDLE(Python安装完后开始菜单中会有这么一个选项)，输入import PyQt4看是否已经成功安装该模块\n\n4.安装Eric5：将下载后的两个zip同时解压，然后将解压后的文件夹直接放到C盘下，点进去后点击install.py进行安装，一会儿就安装好了\n\n5.验证安装：最后在C:\\\\Python34目录里面找到eric5.bat(这就是Eric的启动文件，可以在桌面建立一个快捷方式方便以后打开)\n\n6.初始化配置：第一次进入会提示进行初始化配置，此时界面还是英文的，不过没关系，下次打开就是中文了，我们先来进行如下简单配置：\n\n首先是Editor->AutoCompletion->QScintilla勾选上Show single(显示单条)和Use fill-up\ncharacters(使用填充符号)和from Document and API files(源文件来自文档和API文件)\n\n然后是Editor->API勾上Compile APIs\nautomatically(自动编译API)，在下面的language选择Python3，然后在下面选择Add from installed\nAPIs(从已安装的API添加)选择eric5.API\n\n最后，确定，重启，就可以了\n\n7.Hello World：下面开始尝试第一个Python GUI程序\n\n项目->新建：\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_1.jpg)  \n\n项目名称：test，然后在项目文件夹里新建一个文件夹test，点击OK即可新建项目\n\n新建窗体：在窗体标签栏里点击右键新建窗体，然后会提示选择窗体类型，直接选择对话框，然后OK，然后会叫你输入ui文件的名称，之后就会进入QtDesigner(\nQt设计师)设计界面\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_2.jpg)  \n\n直接将左边的按钮控件拖到主界面，然后双击该按钮可以修改其显示的文字\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_3.jpg)  \n\n保存后，返回Eric界面，会发现刚才新建的ui文件，然后对着它右键->编译窗体，再切换到源代码标签可看到编译生成的py文件，这就是Python可执行的文件了\n，右边就是自动生成的代码，此时就可以直接按F5运行，就会出现那个Hello World!对话框了\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_4.jpg)  \n\n现在就踏上你的PyQt之旅吧，不过PyQt没有多少的中文资料，如果对QT熟悉，可以直接到网上找找“PyQt_精彩实例分析”(也可以联系我)\n\n\n\n封面图片来自Pixebay\n","source":"_posts/python-eric-pyqt.md","raw":"---\ntitle: \"Python3+Eric5+PyQt4环境搭建\"\ndate: 2014-08-13 00:10:00\ncategories: 编程之路\n---\nEric是Python语言的一个IDE，它支持Python+PyQt(Python的一个图形库)进行可视化图形界面的开发。目前最新版本Eric5支持到Pyt\nhon3.4和PyQt4，目测Eric6马上就要出来了，并且Eric6支持PyQt5。当然，Eric还支持其它的一些开发语言，不过主要还是用来开发Pytho\nn的图形界面。Python为数不多的IDE中Eric算是很好的了，不仅支持多语言，而且界面好看，调试功能强大，对于熟悉QT的人就更得心应手了，因为PyQt是\n完全把C++的QT库拿来改成了Python自己的库，类和函数的用法几乎一致，再加上Python语言本身的简洁和强大，是我很喜欢的一套工具。这里就简要介绍一下\n其环境的搭建过程。\n\n1.下载必要的几个文件(在下载的时候一定要注意64位还是32位，必须一致)：\n\nPython3：[下载页面](https://www.python.org/downloads/windows/) 可以下载最新的版本\n\nPyQt4：[下载页面](http://www.riverbankcomputing.co.uk/software/pyqt/download)\n注意Eric目前只支持到PyQt5，不过Qt的版本可以到5，我下载的就是PyQt4-4.11.1-gpl-Py3.4-Qt5.3.1-x64.exe\n\nEric5：[下载页面](http://sourceforge.net/projects/eric-ide/files/eric5/stable/) ，选择\n一个最新稳定版，进入后记得把语言包一起下载，我下载的就是eric5-5.4.6.zip和eric5-i18n-tr-5.4.6.zip，注意windows版\n本是zip压缩文件tar.gz是针对linux的\n\n2.安装Python3：点击msi文件默认安装就行，千万不要修改路径，不然之后所有东西都要修改路径\n\n3.安装PyQt4：点击exe文件默认安装，勿改路径，安装完后，打开Python\nIDLE(Python安装完后开始菜单中会有这么一个选项)，输入import PyQt4看是否已经成功安装该模块\n\n4.安装Eric5：将下载后的两个zip同时解压，然后将解压后的文件夹直接放到C盘下，点进去后点击install.py进行安装，一会儿就安装好了\n\n5.验证安装：最后在C:\\\\Python34目录里面找到eric5.bat(这就是Eric的启动文件，可以在桌面建立一个快捷方式方便以后打开)\n\n6.初始化配置：第一次进入会提示进行初始化配置，此时界面还是英文的，不过没关系，下次打开就是中文了，我们先来进行如下简单配置：\n\n首先是Editor->AutoCompletion->QScintilla勾选上Show single(显示单条)和Use fill-up\ncharacters(使用填充符号)和from Document and API files(源文件来自文档和API文件)\n\n然后是Editor->API勾上Compile APIs\nautomatically(自动编译API)，在下面的language选择Python3，然后在下面选择Add from installed\nAPIs(从已安装的API添加)选择eric5.API\n\n最后，确定，重启，就可以了\n\n7.Hello World：下面开始尝试第一个Python GUI程序\n\n项目->新建：\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_1.jpg)  \n\n项目名称：test，然后在项目文件夹里新建一个文件夹test，点击OK即可新建项目\n\n新建窗体：在窗体标签栏里点击右键新建窗体，然后会提示选择窗体类型，直接选择对话框，然后OK，然后会叫你输入ui文件的名称，之后就会进入QtDesigner(\nQt设计师)设计界面\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_2.jpg)  \n\n直接将左边的按钮控件拖到主界面，然后双击该按钮可以修改其显示的文字\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_3.jpg)  \n\n保存后，返回Eric界面，会发现刚才新建的ui文件，然后对着它右键->编译窗体，再切换到源代码标签可看到编译生成的py文件，这就是Python可执行的文件了\n，右边就是自动生成的代码，此时就可以直接按F5运行，就会出现那个Hello World!对话框了\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_4.jpg)  \n\n现在就踏上你的PyQt之旅吧，不过PyQt没有多少的中文资料，如果对QT熟悉，可以直接到网上找找“PyQt_精彩实例分析”(也可以联系我)\n\n\n\n封面图片来自Pixebay\n","slug":"python-eric-pyqt","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgi00579vnzq42h2zjv","content":"<p>Eric是Python语言的一个IDE，它支持Python+PyQt(Python的一个图形库)进行可视化图形界面的开发。目前最新版本Eric5支持到Pyt<br>hon3.4和PyQt4，目测Eric6马上就要出来了，并且Eric6支持PyQt5。当然，Eric还支持其它的一些开发语言，不过主要还是用来开发Pytho<br>n的图形界面。Python为数不多的IDE中Eric算是很好的了，不仅支持多语言，而且界面好看，调试功能强大，对于熟悉QT的人就更得心应手了，因为PyQt是<br>完全把C++的QT库拿来改成了Python自己的库，类和函数的用法几乎一致，再加上Python语言本身的简洁和强大，是我很喜欢的一套工具。这里就简要介绍一下<br>其环境的搭建过程。</p>\n<p>1.下载必要的几个文件(在下载的时候一定要注意64位还是32位，必须一致)：</p>\n<p>Python3：<a href=\"https://www.python.org/downloads/windows/\" target=\"_blank\" rel=\"external\">下载页面</a> 可以下载最新的版本</p>\n<p>PyQt4：<a href=\"http://www.riverbankcomputing.co.uk/software/pyqt/download\" target=\"_blank\" rel=\"external\">下载页面</a><br>注意Eric目前只支持到PyQt5，不过Qt的版本可以到5，我下载的就是PyQt4-4.11.1-gpl-Py3.4-Qt5.3.1-x64.exe</p>\n<p>Eric5：<a href=\"http://sourceforge.net/projects/eric-ide/files/eric5/stable/\" target=\"_blank\" rel=\"external\">下载页面</a> ，选择<br>一个最新稳定版，进入后记得把语言包一起下载，我下载的就是eric5-5.4.6.zip和eric5-i18n-tr-5.4.6.zip，注意windows版<br>本是zip压缩文件tar.gz是针对linux的</p>\n<p>2.安装Python3：点击msi文件默认安装就行，千万不要修改路径，不然之后所有东西都要修改路径</p>\n<p>3.安装PyQt4：点击exe文件默认安装，勿改路径，安装完后，打开Python<br>IDLE(Python安装完后开始菜单中会有这么一个选项)，输入import PyQt4看是否已经成功安装该模块</p>\n<p>4.安装Eric5：将下载后的两个zip同时解压，然后将解压后的文件夹直接放到C盘下，点进去后点击install.py进行安装，一会儿就安装好了</p>\n<p>5.验证安装：最后在C:\\Python34目录里面找到eric5.bat(这就是Eric的启动文件，可以在桌面建立一个快捷方式方便以后打开)</p>\n<p>6.初始化配置：第一次进入会提示进行初始化配置，此时界面还是英文的，不过没关系，下次打开就是中文了，我们先来进行如下简单配置：</p>\n<p>首先是Editor-&gt;AutoCompletion-&gt;QScintilla勾选上Show single(显示单条)和Use fill-up<br>characters(使用填充符号)和from Document and API files(源文件来自文档和API文件)</p>\n<p>然后是Editor-&gt;API勾上Compile APIs<br>automatically(自动编译API)，在下面的language选择Python3，然后在下面选择Add from installed<br>APIs(从已安装的API添加)选择eric5.API</p>\n<p>最后，确定，重启，就可以了</p>\n<p>7.Hello World：下面开始尝试第一个Python GUI程序</p>\n<p>项目-&gt;新建：</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_1.jpg\" alt=\"\">  </p>\n<p>项目名称：test，然后在项目文件夹里新建一个文件夹test，点击OK即可新建项目</p>\n<p>新建窗体：在窗体标签栏里点击右键新建窗体，然后会提示选择窗体类型，直接选择对话框，然后OK，然后会叫你输入ui文件的名称，之后就会进入QtDesigner(<br>Qt设计师)设计界面</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_2.jpg\" alt=\"\">  </p>\n<p>直接将左边的按钮控件拖到主界面，然后双击该按钮可以修改其显示的文字</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_3.jpg\" alt=\"\">  </p>\n<p>保存后，返回Eric界面，会发现刚才新建的ui文件，然后对着它右键-&gt;编译窗体，再切换到源代码标签可看到编译生成的py文件，这就是Python可执行的文件了<br>，右边就是自动生成的代码，此时就可以直接按F5运行，就会出现那个Hello World!对话框了</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_4.jpg\" alt=\"\">  </p>\n<p>现在就踏上你的PyQt之旅吧，不过PyQt没有多少的中文资料，如果对QT熟悉，可以直接到网上找找“PyQt_精彩实例分析”(也可以联系我)</p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>Eric是Python语言的一个IDE，它支持Python+PyQt(Python的一个图形库)进行可视化图形界面的开发。目前最新版本Eric5支持到Pyt<br>hon3.4和PyQt4，目测Eric6马上就要出来了，并且Eric6支持PyQt5。当然，Eric还支持其它的一些开发语言，不过主要还是用来开发Pytho<br>n的图形界面。Python为数不多的IDE中Eric算是很好的了，不仅支持多语言，而且界面好看，调试功能强大，对于熟悉QT的人就更得心应手了，因为PyQt是<br>完全把C++的QT库拿来改成了Python自己的库，类和函数的用法几乎一致，再加上Python语言本身的简洁和强大，是我很喜欢的一套工具。这里就简要介绍一下<br>其环境的搭建过程。</p>\n<p>1.下载必要的几个文件(在下载的时候一定要注意64位还是32位，必须一致)：</p>\n<p>Python3：<a href=\"https://www.python.org/downloads/windows/\">下载页面</a> 可以下载最新的版本</p>\n<p>PyQt4：<a href=\"http://www.riverbankcomputing.co.uk/software/pyqt/download\">下载页面</a><br>注意Eric目前只支持到PyQt5，不过Qt的版本可以到5，我下载的就是PyQt4-4.11.1-gpl-Py3.4-Qt5.3.1-x64.exe</p>\n<p>Eric5：<a href=\"http://sourceforge.net/projects/eric-ide/files/eric5/stable/\">下载页面</a> ，选择<br>一个最新稳定版，进入后记得把语言包一起下载，我下载的就是eric5-5.4.6.zip和eric5-i18n-tr-5.4.6.zip，注意windows版<br>本是zip压缩文件tar.gz是针对linux的</p>\n<p>2.安装Python3：点击msi文件默认安装就行，千万不要修改路径，不然之后所有东西都要修改路径</p>\n<p>3.安装PyQt4：点击exe文件默认安装，勿改路径，安装完后，打开Python<br>IDLE(Python安装完后开始菜单中会有这么一个选项)，输入import PyQt4看是否已经成功安装该模块</p>\n<p>4.安装Eric5：将下载后的两个zip同时解压，然后将解压后的文件夹直接放到C盘下，点进去后点击install.py进行安装，一会儿就安装好了</p>\n<p>5.验证安装：最后在C:\\Python34目录里面找到eric5.bat(这就是Eric的启动文件，可以在桌面建立一个快捷方式方便以后打开)</p>\n<p>6.初始化配置：第一次进入会提示进行初始化配置，此时界面还是英文的，不过没关系，下次打开就是中文了，我们先来进行如下简单配置：</p>\n<p>首先是Editor-&gt;AutoCompletion-&gt;QScintilla勾选上Show single(显示单条)和Use fill-up<br>characters(使用填充符号)和from Document and API files(源文件来自文档和API文件)</p>\n<p>然后是Editor-&gt;API勾上Compile APIs<br>automatically(自动编译API)，在下面的language选择Python3，然后在下面选择Add from installed<br>APIs(从已安装的API添加)选择eric5.API</p>\n<p>最后，确定，重启，就可以了</p>\n<p>7.Hello World：下面开始尝试第一个Python GUI程序</p>\n<p>项目-&gt;新建：</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_1.jpg\" alt=\"\">  </p>\n<p>项目名称：test，然后在项目文件夹里新建一个文件夹test，点击OK即可新建项目</p>\n<p>新建窗体：在窗体标签栏里点击右键新建窗体，然后会提示选择窗体类型，直接选择对话框，然后OK，然后会叫你输入ui文件的名称，之后就会进入QtDesigner(<br>Qt设计师)设计界面</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_2.jpg\" alt=\"\">  </p>\n<p>直接将左边的按钮控件拖到主界面，然后双击该按钮可以修改其显示的文字</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_3.jpg\" alt=\"\">  </p>\n<p>保存后，返回Eric界面，会发现刚才新建的ui文件，然后对着它右键-&gt;编译窗体，再切换到源代码标签可看到编译生成的py文件，这就是Python可执行的文件了<br>，右边就是自动生成的代码，此时就可以直接按F5运行，就会出现那个Hello World!对话框了</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/python-eric-pyqt_4.jpg\" alt=\"\">  </p>\n<p>现在就踏上你的PyQt之旅吧，不过PyQt没有多少的中文资料，如果对QT熟悉，可以直接到网上找找“PyQt_精彩实例分析”(也可以联系我)</p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"Python Requests模块进行网页抓取详解","date":"2015-12-04T00:02:53.000Z","_content":"一直以来我都看不惯python自带的urllib包的繁琐的使用方法，所以我都使用的requests包来代替原生方法。它能方便的发送GET和POST请求，支\n持HTTPS，基本上能模拟人类真实的访问  \n\n## 发送请求\n```\n# GET请求\nresponse = requests.get(url)  \n\n# 会话对象，以这种方式可以跨请求保持某些参数，不用再自己提取上一次请求的信息了，比如cookie等，但是需要注意的是，即使使用了会话，方法级别的参数并不会跨请求保持，如果要跨方法，可以使用with\ns = requests.Session()\ns.get(url)\nr = s.get(next_url)\n\nwith requests.Session() as s:\n\ts.get(url)\n```\n## 自定义HTTP头，修改Headers\n```\nheaders = {\n\t'User-Agent': '注意名称'\n}\nrequests.get(url, headers=headers)\n```\n## 重定向\n```\nresponse.status_code  #HTTP status，http状态码\n# 如果直接请求，如果发生重定向，那么response.status_code = 200, response.history = 301\nprint([x for x,y in A.__dict__.items() if type(y) == FunctionType])\n```\n# TroubleShooting:\n- **设置最大重试次数**:之前发现设置了timeout时间却没反应，原来是因为查询不到ip地址，导致在timeout时间内就已经默认在重试了，要设置就得先执行语句：`requests.adapters.DEFAULT_RETRIES=5`\n- **user-agent列表﻿**  \n```\nuser_agent_list = [  \n    'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19',  \n    'Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',  \n    'Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',  \n    'Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0',  \n    'Mozilla/5.0 (Android; Tablet; rv:14.0) Gecko/14.0 Firefox/14.0',  \n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0',  \n    'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0',  \n    'Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0',  \n    'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19',  \n    'Mozilla/5.0 (Linux; Android 4.1.2; Nexus 7 Build/JZ054K) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19',  \n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36',  \n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like Gecko) Ubuntu/11.10 Chromium/27.0.1453.93 Chrome/27.0.1453.93 Safari/537.36',  \n    'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36',  \n    'Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_4 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) CriOS/27.0.1453.10 Mobile/10B350 Safari/8536.25',  \n    'Mozilla/4.0 (Windows; MSIE 6.0; Windows NT 5.2)',  \n    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)',  \n    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)',  \n    'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)',  \n    'Mozilla/5.0 (compatible; WOW64; MSIE 10.0; Windows NT 6.2)',  \n    'Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.9.168 Version/11.52',  \n    'Opera/9.80 (Windows NT 6.1; WOW64; U; en) Presto/2.10.229 Version/11.62',  \n    'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML, like Gecko) Version/7.2.1.0 Safari/536.2+',  \n    'Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13',  \n    'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',  \n    'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',  \n    'Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3',  \n    'Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3',  \n    'Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3',  \n]\n```","source":"_posts/python-requests.md","raw":"---\ntitle: \"Python requests模块进行网页抓取详解\"\ndate: 2015-12-04 08:02:53\ncategories: 编程之路\n---\n一直以来我都看不惯python自带的urllib包的繁琐的使用方法，所以我都使用的requests包来代替原生方法。它能方便的发送GET和POST请求，支\n持HTTPS，基本上能模拟人类真实的访问  \n\n## 发送请求\n```\n# GET请求\nresponse = requests.get(url)  \n\n# 会话对象，以这种方式可以跨请求保持某些参数，不用再自己提取上一次请求的信息了，比如cookie等，但是需要注意的是，即使使用了会话，方法级别的参数并不会跨请求保持，如果要跨方法，可以使用with\ns = requests.Session()\ns.get(url)\nr = s.get(next_url)\n\nwith requests.Session() as s:\n\ts.get(url)\n```\n## 自定义HTTP头，修改Headers\n```\nheaders = {\n\t'User-Agent': '注意名称'\n}\nrequests.get(url, headers=headers)\n```\n## 重定向\n```\nresponse.status_code  #HTTP status，http状态码\n# 如果直接请求，如果发生重定向，那么response.status_code = 200, response.history = 301\nprint([x for x,y in A.__dict__.items() if type(y) == FunctionType])\n```\n# TroubleShooting:\n- **设置最大重试次数**:之前发现设置了timeout时间却没反应，原来是因为查询不到ip地址，导致在timeout时间内就已经默认在重试了，要设置就得先执行语句：`requests.adapters.DEFAULT_RETRIES=5`\n- **user-agent列表﻿**  \n```\nuser_agent_list = [  \n    'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19',  \n    'Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',  \n    'Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',  \n    'Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0',  \n    'Mozilla/5.0 (Android; Tablet; rv:14.0) Gecko/14.0 Firefox/14.0',  \n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0',  \n    'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0',  \n    'Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0',  \n    'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19',  \n    'Mozilla/5.0 (Linux; Android 4.1.2; Nexus 7 Build/JZ054K) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19',  \n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36',  \n    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like Gecko) Ubuntu/11.10 Chromium/27.0.1453.93 Chrome/27.0.1453.93 Safari/537.36',  \n    'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36',  \n    'Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_4 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) CriOS/27.0.1453.10 Mobile/10B350 Safari/8536.25',  \n    'Mozilla/4.0 (Windows; MSIE 6.0; Windows NT 5.2)',  \n    'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)',  \n    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)',  \n    'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)',  \n    'Mozilla/5.0 (compatible; WOW64; MSIE 10.0; Windows NT 6.2)',  \n    'Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.9.168 Version/11.52',  \n    'Opera/9.80 (Windows NT 6.1; WOW64; U; en) Presto/2.10.229 Version/11.62',  \n    'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML, like Gecko) Version/7.2.1.0 Safari/536.2+',  \n    'Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13',  \n    'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',  \n    'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27',  \n    'Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3',  \n    'Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3',  \n    'Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3',  \n]\n```","slug":"python-requests","published":1,"updated":"2016-08-05T09:17:31.000Z","_id":"cir3l2pgk00599vnz59i3xy83","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一直以来我都看不惯python自带的urllib包的繁琐的使用方法，所以我都使用的requests包来代替原生方法。它能方便的发送GET和POST请求，支<br>持HTTPS，基本上能模拟人类真实的访问  </p>\n<h2 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># GET请求</div><div class=\"line\">response = requests.get(url)  </div><div class=\"line\"></div><div class=\"line\"># 会话对象，以这种方式可以跨请求保持某些参数，不用再自己提取上一次请求的信息了，比如cookie等，但是需要注意的是，即使使用了会话，方法级别的参数并不会跨请求保持，如果要跨方法，可以使用with</div><div class=\"line\">s = requests.Session()</div><div class=\"line\">s.get(url)</div><div class=\"line\">r = s.get(next_url)</div><div class=\"line\"></div><div class=\"line\">with requests.Session() as s:</div><div class=\"line\">\ts.get(url)</div></pre></td></tr></table></figure>\n<h2 id=\"自定义HTTP头，修改Headers\"><a href=\"#自定义HTTP头，修改Headers\" class=\"headerlink\" title=\"自定义HTTP头，修改Headers\"></a>自定义HTTP头，修改Headers</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">headers = &#123;</div><div class=\"line\">\t&apos;User-Agent&apos;: &apos;注意名称&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">requests.get(url, headers=headers)</div></pre></td></tr></table></figure>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.status_code  #HTTP status，http状态码</div><div class=\"line\"># 如果直接请求，如果发生重定向，那么response.status_code = 200, response.history = 301</div><div class=\"line\">print([x for x,y in A.__dict__.items() if type(y) == FunctionType])</div></pre></td></tr></table></figure>\n<h1 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting:\"></a>TroubleShooting:</h1><ul>\n<li><strong>设置最大重试次数</strong>:之前发现设置了timeout时间却没反应，原来是因为查询不到ip地址，导致在timeout时间内就已经默认在重试了，要设置就得先执行语句：<code>requests.adapters.DEFAULT_RETRIES=5</code></li>\n<li><strong>user-agent列表﻿</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">user_agent_list = [  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Android; Tablet; rv:14.0) Gecko/14.0 Firefox/14.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; Android 4.1.2; Nexus 7 Build/JZ054K) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like Gecko) Ubuntu/11.10 Chromium/27.0.1453.93 Chrome/27.0.1453.93 Safari/537.36&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_4 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) CriOS/27.0.1453.10 Mobile/10B350 Safari/8536.25&apos;,  </div><div class=\"line\">    &apos;Mozilla/4.0 (Windows; MSIE 6.0; Windows NT 5.2)&apos;,  </div><div class=\"line\">    &apos;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&apos;,  </div><div class=\"line\">    &apos;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (compatible; WOW64; MSIE 10.0; Windows NT 6.2)&apos;,  </div><div class=\"line\">    &apos;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.9.168 Version/11.52&apos;,  </div><div class=\"line\">    &apos;Opera/9.80 (Windows NT 6.1; WOW64; U; en) Presto/2.10.229 Version/11.62&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML, like Gecko) Version/7.2.1.0 Safari/536.2+&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&apos;,  </div><div class=\"line\">]</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>一直以来我都看不惯python自带的urllib包的繁琐的使用方法，所以我都使用的requests包来代替原生方法。它能方便的发送GET和POST请求，支<br>持HTTPS，基本上能模拟人类真实的访问  </p>\n<h2 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># GET请求</div><div class=\"line\">response = requests.get(url)  </div><div class=\"line\"></div><div class=\"line\"># 会话对象，以这种方式可以跨请求保持某些参数，不用再自己提取上一次请求的信息了，比如cookie等，但是需要注意的是，即使使用了会话，方法级别的参数并不会跨请求保持，如果要跨方法，可以使用with</div><div class=\"line\">s = requests.Session()</div><div class=\"line\">s.get(url)</div><div class=\"line\">r = s.get(next_url)</div><div class=\"line\"></div><div class=\"line\">with requests.Session() as s:</div><div class=\"line\">\ts.get(url)</div></pre></td></tr></table></figure>\n<h2 id=\"自定义HTTP头，修改Headers\"><a href=\"#自定义HTTP头，修改Headers\" class=\"headerlink\" title=\"自定义HTTP头，修改Headers\"></a>自定义HTTP头，修改Headers</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">headers = &#123;</div><div class=\"line\">\t&apos;User-Agent&apos;: &apos;注意名称&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">requests.get(url, headers=headers)</div></pre></td></tr></table></figure>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">response.status_code  #HTTP status，http状态码</div><div class=\"line\"># 如果直接请求，如果发生重定向，那么response.status_code = 200, response.history = 301</div><div class=\"line\">print([x for x,y in A.__dict__.items() if type(y) == FunctionType])</div></pre></td></tr></table></figure>\n<h1 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting:\"></a>TroubleShooting:</h1><ul>\n<li><strong>设置最大重试次数</strong>:之前发现设置了timeout时间却没反应，原来是因为查询不到ip地址，导致在timeout时间内就已经默认在重试了，要设置就得先执行语句：<code>requests.adapters.DEFAULT_RETRIES=5</code></li>\n<li><strong>user-agent列表﻿</strong>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">user_agent_list = [  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; U; Android 4.0.4; en-gb; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; U; Android 2.2; en-gb; GT-P1000 Build/FROYO) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Android; Mobile; rv:14.0) Gecko/14.0 Firefox/14.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Android; Tablet; rv:14.0) Gecko/14.0 Firefox/14.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Linux; Android 4.1.2; Nexus 7 Build/JZ054K) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like Gecko) Ubuntu/11.10 Chromium/27.0.1453.93 Chrome/27.0.1453.93 Safari/537.36&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.94 Safari/537.36&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_4 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) CriOS/27.0.1453.10 Mobile/10B350 Safari/8536.25&apos;,  </div><div class=\"line\">    &apos;Mozilla/4.0 (Windows; MSIE 6.0; Windows NT 5.2)&apos;,  </div><div class=\"line\">    &apos;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&apos;,  </div><div class=\"line\">    &apos;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (compatible; WOW64; MSIE 10.0; Windows NT 6.2)&apos;,  </div><div class=\"line\">    &apos;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.9.168 Version/11.52&apos;,  </div><div class=\"line\">    &apos;Opera/9.80 (Windows NT 6.1; WOW64; U; en) Presto/2.10.229 Version/11.62&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML, like Gecko) Version/7.2.1.0 Safari/536.2+&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&apos;,  </div><div class=\"line\">    &apos;Mozilla/5.0 (iPad; CPU OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&apos;,  </div><div class=\"line\">]</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Python多进程和多线程","date":"2015-12-29T19:28:42.000Z","_content":"多线程和多进程能极大限度的利用线代计算机强大的CPU，在IO密集型的应用场景里十分常见，目前项目中有个需求，是需要向别人网站发送请求等待响应，不过必须等页面\n的js执行完毕后才能获取内容，就得将执行时间设置得长一点，比如10s，如果每个请求都等这么久那效率实在太慢，所以趁此机会，学习了一下Python的多进程和多\n线程编程。  \n\n在Python里面多进程和多线程的区别\n\n  * Python里的多线程只能利用CPU的一个核(由于全局解释锁的历史原因)，而多进程则能利用多核的优势\n  * 多线程一般来说比多进程快，毕竟共享内存，但是多线程也更危险，因为一个线程崩溃可能导致整个程序崩溃\n\n# **Python多线程**\n\n  * 定义与使用  \n\n\n        import threading\n\n    class Thread(threading.Thread):\n        def __init__(self, 变量):\n            threading.Thread.__init__(self)\n            self.变量 = 变量\n        def run(self):\n            逻辑\n    thread = Thread(参数) # 定义一个线程\n    thread.start()        # 开启一个线程\n\n  * 全局变量：加锁，对于全局变量，如果仅仅是引用其值，而不对其进行修改，那么可以直接引用，如果要进行修改，就必须加锁，否则会出现不可预期的错误，比如可能会导致MySQL连接意外断开  \n\n\n        LOCK = threading.Lock()  # 在全局定义一个锁\n    # 局部使用\n    LOCK.acquire()\n    修改全局变量\n    LOCK.release()\n\n  * 局部变量：虽然局部变量简单的使用直接用就行，但是如果要在run里面进行各个函数之间的传递那就麻烦了，所以提供了ThreadLocal来将线程内部的局部变量变为一个字典，其它函数直接调用即可  \n\n\n        LOCAL = threading.local() # 在全局定义，每个线程引用该值结果都仅仅会得到自己的私有变量\n    # 在Thread类里面的run函数赋值，不能在__init__里面定义，因为那时候线程还没启起来\n    LOCAL.变量名 = 值 # 就这样\n\n  * 常用方法  \n\n\n        threading.activeCount()  # 获取当前线程数量，我一般用这个来控制线程最大的数量\n    threading.currentThread() # 获取当前线程对象\n    threading.currentThread().getName() # 获取当前线程的名称\n    exit()         # 终止当前线程，网上好多人问怎么没有API，后来发现exit就行了...并不会影响到其它线程和主线程\n\n# **Python多进程**\n\nwaiting...\n","source":"_posts/python-multithreading-multiprocess.md","raw":"---\ntitle: \"python多进程和多线程\"\ndate: 2015-12-30 03:28:42\ncategories: 编程之路\n---\n多线程和多进程能极大限度的利用线代计算机强大的CPU，在IO密集型的应用场景里十分常见，目前项目中有个需求，是需要向别人网站发送请求等待响应，不过必须等页面\n的js执行完毕后才能获取内容，就得将执行时间设置得长一点，比如10s，如果每个请求都等这么久那效率实在太慢，所以趁此机会，学习了一下Python的多进程和多\n线程编程。  \n\n在Python里面多进程和多线程的区别\n\n  * Python里的多线程只能利用CPU的一个核(由于全局解释锁的历史原因)，而多进程则能利用多核的优势\n  * 多线程一般来说比多进程快，毕竟共享内存，但是多线程也更危险，因为一个线程崩溃可能导致整个程序崩溃\n\n# **Python多线程**\n\n  * 定义与使用  \n\n\n        import threading\n\n    class Thread(threading.Thread):\n        def __init__(self, 变量):\n            threading.Thread.__init__(self)\n            self.变量 = 变量\n        def run(self):\n            逻辑\n    thread = Thread(参数) # 定义一个线程\n    thread.start()        # 开启一个线程\n\n  * 全局变量：加锁，对于全局变量，如果仅仅是引用其值，而不对其进行修改，那么可以直接引用，如果要进行修改，就必须加锁，否则会出现不可预期的错误，比如可能会导致MySQL连接意外断开  \n\n\n        LOCK = threading.Lock()  # 在全局定义一个锁\n    # 局部使用\n    LOCK.acquire()\n    修改全局变量\n    LOCK.release()\n\n  * 局部变量：虽然局部变量简单的使用直接用就行，但是如果要在run里面进行各个函数之间的传递那就麻烦了，所以提供了ThreadLocal来将线程内部的局部变量变为一个字典，其它函数直接调用即可  \n\n\n        LOCAL = threading.local() # 在全局定义，每个线程引用该值结果都仅仅会得到自己的私有变量\n    # 在Thread类里面的run函数赋值，不能在__init__里面定义，因为那时候线程还没启起来\n    LOCAL.变量名 = 值 # 就这样\n\n  * 常用方法  \n\n\n        threading.activeCount()  # 获取当前线程数量，我一般用这个来控制线程最大的数量\n    threading.currentThread() # 获取当前线程对象\n    threading.currentThread().getName() # 获取当前线程的名称\n    exit()         # 终止当前线程，网上好多人问怎么没有API，后来发现exit就行了...并不会影响到其它线程和主线程\n\n# **Python多进程**\n\nwaiting...\n","slug":"python-multithreading-multiprocess","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgl005b9vnzyo8hpg52","content":"<p>多线程和多进程能极大限度的利用线代计算机强大的CPU，在IO密集型的应用场景里十分常见，目前项目中有个需求，是需要向别人网站发送请求等待响应，不过必须等页面<br>的js执行完毕后才能获取内容，就得将执行时间设置得长一点，比如10s，如果每个请求都等这么久那效率实在太慢，所以趁此机会，学习了一下Python的多进程和多<br>线程编程。  </p>\n<p>在Python里面多进程和多线程的区别</p>\n<ul>\n<li>Python里的多线程只能利用CPU的一个核(由于全局解释锁的历史原因)，而多进程则能利用多核的优势</li>\n<li>多线程一般来说比多进程快，毕竟共享内存，但是多线程也更危险，因为一个线程崩溃可能导致整个程序崩溃</li>\n</ul>\n<h1 id=\"Python多线程\"><a href=\"#Python多线程\" class=\"headerlink\" title=\"Python多线程\"></a><strong>Python多线程</strong></h1><ul>\n<li>定义与使用  </li>\n</ul>\n<pre><code>    import threading\n\nclass Thread(threading.Thread):\n    def __init__(self, 变量):\n        threading.Thread.__init__(self)\n        self.变量 = 变量\n    def run(self):\n        逻辑\nthread = Thread(参数) # 定义一个线程\nthread.start()        # 开启一个线程\n</code></pre><ul>\n<li>全局变量：加锁，对于全局变量，如果仅仅是引用其值，而不对其进行修改，那么可以直接引用，如果要进行修改，就必须加锁，否则会出现不可预期的错误，比如可能会导致MySQL连接意外断开  </li>\n</ul>\n<pre><code>    LOCK = threading.Lock()  # 在全局定义一个锁\n# 局部使用\nLOCK.acquire()\n修改全局变量\nLOCK.release()\n</code></pre><ul>\n<li>局部变量：虽然局部变量简单的使用直接用就行，但是如果要在run里面进行各个函数之间的传递那就麻烦了，所以提供了ThreadLocal来将线程内部的局部变量变为一个字典，其它函数直接调用即可  </li>\n</ul>\n<pre><code>    LOCAL = threading.local() # 在全局定义，每个线程引用该值结果都仅仅会得到自己的私有变量\n# 在Thread类里面的run函数赋值，不能在__init__里面定义，因为那时候线程还没启起来\nLOCAL.变量名 = 值 # 就这样\n</code></pre><ul>\n<li>常用方法  </li>\n</ul>\n<pre><code>    threading.activeCount()  # 获取当前线程数量，我一般用这个来控制线程最大的数量\nthreading.currentThread() # 获取当前线程对象\nthreading.currentThread().getName() # 获取当前线程的名称\nexit()         # 终止当前线程，网上好多人问怎么没有API，后来发现exit就行了...并不会影响到其它线程和主线程\n</code></pre><h1 id=\"Python多进程\"><a href=\"#Python多进程\" class=\"headerlink\" title=\"Python多进程\"></a><strong>Python多进程</strong></h1><p>waiting…</p>\n","excerpt":"","more":"<p>多线程和多进程能极大限度的利用线代计算机强大的CPU，在IO密集型的应用场景里十分常见，目前项目中有个需求，是需要向别人网站发送请求等待响应，不过必须等页面<br>的js执行完毕后才能获取内容，就得将执行时间设置得长一点，比如10s，如果每个请求都等这么久那效率实在太慢，所以趁此机会，学习了一下Python的多进程和多<br>线程编程。  </p>\n<p>在Python里面多进程和多线程的区别</p>\n<ul>\n<li>Python里的多线程只能利用CPU的一个核(由于全局解释锁的历史原因)，而多进程则能利用多核的优势</li>\n<li>多线程一般来说比多进程快，毕竟共享内存，但是多线程也更危险，因为一个线程崩溃可能导致整个程序崩溃</li>\n</ul>\n<h1 id=\"Python多线程\"><a href=\"#Python多线程\" class=\"headerlink\" title=\"Python多线程\"></a><strong>Python多线程</strong></h1><ul>\n<li>定义与使用  </li>\n</ul>\n<pre><code>    import threading\n\nclass Thread(threading.Thread):\n    def __init__(self, 变量):\n        threading.Thread.__init__(self)\n        self.变量 = 变量\n    def run(self):\n        逻辑\nthread = Thread(参数) # 定义一个线程\nthread.start()        # 开启一个线程\n</code></pre><ul>\n<li>全局变量：加锁，对于全局变量，如果仅仅是引用其值，而不对其进行修改，那么可以直接引用，如果要进行修改，就必须加锁，否则会出现不可预期的错误，比如可能会导致MySQL连接意外断开  </li>\n</ul>\n<pre><code>    LOCK = threading.Lock()  # 在全局定义一个锁\n# 局部使用\nLOCK.acquire()\n修改全局变量\nLOCK.release()\n</code></pre><ul>\n<li>局部变量：虽然局部变量简单的使用直接用就行，但是如果要在run里面进行各个函数之间的传递那就麻烦了，所以提供了ThreadLocal来将线程内部的局部变量变为一个字典，其它函数直接调用即可  </li>\n</ul>\n<pre><code>    LOCAL = threading.local() # 在全局定义，每个线程引用该值结果都仅仅会得到自己的私有变量\n# 在Thread类里面的run函数赋值，不能在__init__里面定义，因为那时候线程还没启起来\nLOCAL.变量名 = 值 # 就这样\n</code></pre><ul>\n<li>常用方法  </li>\n</ul>\n<pre><code>    threading.activeCount()  # 获取当前线程数量，我一般用这个来控制线程最大的数量\nthreading.currentThread() # 获取当前线程对象\nthreading.currentThread().getName() # 获取当前线程的名称\nexit()         # 终止当前线程，网上好多人问怎么没有API，后来发现exit就行了...并不会影响到其它线程和主线程\n</code></pre><h1 id=\"Python多进程\"><a href=\"#Python多进程\" class=\"headerlink\" title=\"Python多进程\"></a><strong>Python多进程</strong></h1><p>waiting…</p>\n"},{"title":"玩转树莓派2","date":"2015-12-07T18:58:50.000Z","_content":"想在家里做NAS、DNS等私有云服务，但是无奈家里淘汰下来的电脑已无力承担如此重任。没办法了，就只能试试树莓派。不试不知道，一试吓一跳，完全就是一手掌大小的\n电脑，听说desktop版本还能使用word等软件，虽然只有1GB内存，但是200多块(淘宝店)就能买到这个东西，那是非常值了。当然，作为一个技术爱好者，别\n人是完全无法体会这种快乐的。要是其功耗再低点或者能采用其它的供电方式(比如无线供电、电池供电)，感觉完全能颠覆智能市场。  \n\n## **制作启动镜像**\n\n镜像下载：<https://www.raspberrypi.org/downloads/>，我下载的是RASPBIAN分支，因为其是官方提供且基于Debian，和Ubuntu操作一样  \n**Mac环境**：  \n```\n    $ df  # 查看当前已经挂载的卷\n    一般sd卡在最后，Filesystem是/dev/disk2s1，Mounted on /Volumes/No Name，可以在Finder里面将sd卡的名字改为Pi(我那个默认是No Name)\n    $ diskutil unmount /dev/disk2s1   #将sd卡卸载\n    Volume Pi on disk2s1 unmounted\n    $ diskutil list # 查看是否有sd卡设备\n    $ dd bs=4m if=pi.img of=/dev/rdisk2   #将镜像文件pi.img写入sd卡\n    $ diskutil unmountDisk /dev/disk2  # 再卸载sd卡，此时可以拔出来插入树莓派的sd卡槽了  \n```\n\n## **启动操作系统**\n\n收到货的那天，发现其有一个DC接口，还以为是通过DC接口供电，出门走了一圈都没发现有卖这货的，于是回家，自习已看，发现可以用Android的电源为期供电的，\n那接口名字忘了。和网上建议的一样，我采用的是5V 2A的供电设备(其实是直接插到小米插线板上的)  \n然后，我又发现，我家里没多的网线，那怎么办，我装的不是desktop版本，没有网线就不能SSH进去。不过还好，它支持HDMI，于是我把它功过HDMI连接上了\n家里40英寸的电视，(HDMI高清显示，真他妈爽)就像这样，还通过USB插了外置键盘。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/raspberrypi_1.jpg)  \n\n默认是通电自动启动的，所以插上电就会进入系统了，默认用户名pi，默认密码是raspberry，接着就做一些基本的配置，通过`sudo raspi-config`来运行设置工具：\n\n- 第一项将sd卡的剩余空间全部用来使用\n- 然后修改international里面的时区及默认字符编码\n- 接着修改源，这个国度没办法的事  \n\n```\n$ sudo nano /etc/apt/sources.list.d/raspi.list\n修改为如下：\ndeb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ jessie main\n\t\n$ sudo nano /etc/apt/sources.list  \n修改为如下：\ndeb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib  \ndeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib\n```\n- 最后，安装必要的软件\n```\t\t\n\t\tsudo apt-get update && apt-get upgrade \n\t\tsudo apt-get install vim tree ttf-wqy-microhei python python3 python-dev python3-dev python-pip python3-pip zsh git -y\n```\n- 中文环境配置\n```\n\t\tsudo dpkg-reconfigure locales\n```\n\n## **WIFI设置**\n\n当然，我不可能一直用电视作显示器吧，这时候我买的无线设备就有用场了，直接通过USB插到树莓派上，然后设置wifi  \n\n```\n    $ ifconfig # 可以看到wlan0，表示已经识别无线网卡\n    $ sudo vim /etc/network/interfaces添加或修改关于wlan0的配置\n    auto wlan0\n    allow-hotplug wlan0\n    iface wlan0 inet dhcp\n    wpa-ssid WIFI名称\n    wpa-psk WIFI密码\n\n    # 然后通过如下命令重启网卡\n    sudo ifdown wlan0 && sudo ifup wlan0\n```\n\n注：如果要关机，务必使用命令关机，而不要物理直接断，当然开机貌似只能拔了电源再插上\n\n## **搭建ownCloud私有云**\n\n作为私有云方案，我选择的ownCloud，而不是Samba，因为Samba功能仅仅算是ftp的共享，而不是一个私有云方案，当然ownCloud也有为人诟病的\n地方，比如内存占用高(树莓派2上占用100多MB)，另一个是因为它本身是基于Apache的，树莓派内存总共就1G，我可不想既有Apache又有Nginx，所\n以直接用的是Nginx+php5-fpm的方案，不过这样子，配置过程就有点麻烦了。  \n\n```\n    # 首先，安装基本服务\n    sudo apt-get install php5-common php5-cli php5-fpm\n    sudo apt-get install nginx\n    sudo apt-get install mysql-server mysql-client\n\n    # 配置MySQL，ownCloud需要提前创建用户、数据库和分配权限\n    > create database 库名 character set utf8 collate utf8_general_ci;  \n    > grant ALL on 库名.* 用户名@localhost identified by \"密码\"   # 注意，ownCloud是不允许root用户的，因为权限太多\n\n    # 配置文件权限\n    chmod 775 -R owncloud/        # 不要分配777，分配了也不能用\n    chown -R www-data:www-data owncloud/\n\n    # 配置php5-fpm\n    $ printenv PATH 获取系统环境变量\n    vim /etc/php5/fpm/pool.d/www.conf，将下面几行前面的注释去掉\n    ;env[HOSTNAME] = $HOSTNAME  \n    ;env[PATH] = /usr/local/bin:/usr/bin:/bin      # 这里还要修改为刚才获取到的环境变量  \n    ;env[TMP] = /tmp  \n    ;env[TMPDIR] = /tmp  \n    ;env[TEMP] = /tmp\n\n    # 配置nginx，按照官网的教程配置Nginx conf：https://doc.owncloud.org/server/7.0/admin_manual/installation/nginx_configuration.html\n\n    对于官网的配置，我做了如下几项修改：\n    location ~ .php(?:$|/)$这里面修改为：\n    location ~ ^(.+?.php)(/.*)?$ \\{  \n      fastcgi_split_path_info ^(.+.php)(/.+)$;  \n      include fastcgi_params;  \n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  \n      fastcgi_param PATH_INFO $fastcgi_path_info;  \n      fastcgi_pass unix:/var/run/php5-fpm.sock;  \n      fastcgi_index index.php;  \n      include fastcgi_params;  \n      fastcgi_param PHP_VALUE \"post_max_size=10G \\\\n upload_max_filesize=10G\";   # 上传默认居然为513MB，这里可以修改大，不然在owncloud无法调整到更大  \n    \\}\n    检查配置文件是否正确用# nginx -t nginx.conf  \n```\n\n## TroubleShooting\n- **中文设置**:\n\n```\n    sudo raspi-config\n    去掉en_GB.UTF-8 UTF-8\n    选择“en_US.UTF-8 UTF-8”、“zh_CN.UTF-8 UTF-8”、“zh_CN.GBK GBK”\n    然后第二个页面默认语言选择en_GB.UTF-8 UTF-8\n```\n\n参考：  \n[http://blog.akarin.xyz/raspberry-init/  \nhttps://github.com/ccforward/cc/issues/25?utm_source=tuicool](http://blog.akar\nin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool \"Link:\nhttp://blog.akarin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool\" )  \n","source":"_posts/raspberrypi.md","raw":"---\ntitle: \"玩转树莓派2\"\ndate: 2015-12-08 02:58:50\ncategories: 就是爱玩\n---\n想在家里做NAS、DNS等私有云服务，但是无奈家里淘汰下来的电脑已无力承担如此重任。没办法了，就只能试试树莓派。不试不知道，一试吓一跳，完全就是一手掌大小的\n电脑，听说desktop版本还能使用word等软件，虽然只有1GB内存，但是200多块(淘宝店)就能买到这个东西，那是非常值了。当然，作为一个技术爱好者，别\n人是完全无法体会这种快乐的。要是其功耗再低点或者能采用其它的供电方式(比如无线供电、电池供电)，感觉完全能颠覆智能市场。  \n\n## **制作启动镜像**\n\n镜像下载：<https://www.raspberrypi.org/downloads/>，我下载的是RASPBIAN分支，因为其是官方提供且基于Debian，和Ubuntu操作一样  \n**Mac环境**：  \n```\n    $ df  # 查看当前已经挂载的卷\n    一般sd卡在最后，Filesystem是/dev/disk2s1，Mounted on /Volumes/No Name，可以在Finder里面将sd卡的名字改为Pi(我那个默认是No Name)\n    $ diskutil unmount /dev/disk2s1   #将sd卡卸载\n    Volume Pi on disk2s1 unmounted\n    $ diskutil list # 查看是否有sd卡设备\n    $ dd bs=4m if=pi.img of=/dev/rdisk2   #将镜像文件pi.img写入sd卡\n    $ diskutil unmountDisk /dev/disk2  # 再卸载sd卡，此时可以拔出来插入树莓派的sd卡槽了  \n```\n\n## **启动操作系统**\n\n收到货的那天，发现其有一个DC接口，还以为是通过DC接口供电，出门走了一圈都没发现有卖这货的，于是回家，自习已看，发现可以用Android的电源为期供电的，\n那接口名字忘了。和网上建议的一样，我采用的是5V 2A的供电设备(其实是直接插到小米插线板上的)  \n然后，我又发现，我家里没多的网线，那怎么办，我装的不是desktop版本，没有网线就不能SSH进去。不过还好，它支持HDMI，于是我把它功过HDMI连接上了\n家里40英寸的电视，(HDMI高清显示，真他妈爽)就像这样，还通过USB插了外置键盘。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/raspberrypi_1.jpg)  \n\n默认是通电自动启动的，所以插上电就会进入系统了，默认用户名pi，默认密码是raspberry，接着就做一些基本的配置，通过`sudo raspi-config`来运行设置工具：\n\n- 第一项将sd卡的剩余空间全部用来使用\n- 然后修改international里面的时区及默认字符编码\n- 接着修改源，这个国度没办法的事  \n\n```\n$ sudo nano /etc/apt/sources.list.d/raspi.list\n修改为如下：\ndeb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ jessie main\n\t\n$ sudo nano /etc/apt/sources.list  \n修改为如下：\ndeb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib  \ndeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib\n```\n- 最后，安装必要的软件\n```\t\t\n\t\tsudo apt-get update && apt-get upgrade \n\t\tsudo apt-get install vim tree ttf-wqy-microhei python python3 python-dev python3-dev python-pip python3-pip zsh git -y\n```\n- 中文环境配置\n```\n\t\tsudo dpkg-reconfigure locales\n```\n\n## **WIFI设置**\n\n当然，我不可能一直用电视作显示器吧，这时候我买的无线设备就有用场了，直接通过USB插到树莓派上，然后设置wifi  \n\n```\n    $ ifconfig # 可以看到wlan0，表示已经识别无线网卡\n    $ sudo vim /etc/network/interfaces添加或修改关于wlan0的配置\n    auto wlan0\n    allow-hotplug wlan0\n    iface wlan0 inet dhcp\n    wpa-ssid WIFI名称\n    wpa-psk WIFI密码\n\n    # 然后通过如下命令重启网卡\n    sudo ifdown wlan0 && sudo ifup wlan0\n```\n\n注：如果要关机，务必使用命令关机，而不要物理直接断，当然开机貌似只能拔了电源再插上\n\n## **搭建ownCloud私有云**\n\n作为私有云方案，我选择的ownCloud，而不是Samba，因为Samba功能仅仅算是ftp的共享，而不是一个私有云方案，当然ownCloud也有为人诟病的\n地方，比如内存占用高(树莓派2上占用100多MB)，另一个是因为它本身是基于Apache的，树莓派内存总共就1G，我可不想既有Apache又有Nginx，所\n以直接用的是Nginx+php5-fpm的方案，不过这样子，配置过程就有点麻烦了。  \n\n```\n    # 首先，安装基本服务\n    sudo apt-get install php5-common php5-cli php5-fpm\n    sudo apt-get install nginx\n    sudo apt-get install mysql-server mysql-client\n\n    # 配置MySQL，ownCloud需要提前创建用户、数据库和分配权限\n    > create database 库名 character set utf8 collate utf8_general_ci;  \n    > grant ALL on 库名.* 用户名@localhost identified by \"密码\"   # 注意，ownCloud是不允许root用户的，因为权限太多\n\n    # 配置文件权限\n    chmod 775 -R owncloud/        # 不要分配777，分配了也不能用\n    chown -R www-data:www-data owncloud/\n\n    # 配置php5-fpm\n    $ printenv PATH 获取系统环境变量\n    vim /etc/php5/fpm/pool.d/www.conf，将下面几行前面的注释去掉\n    ;env[HOSTNAME] = $HOSTNAME  \n    ;env[PATH] = /usr/local/bin:/usr/bin:/bin      # 这里还要修改为刚才获取到的环境变量  \n    ;env[TMP] = /tmp  \n    ;env[TMPDIR] = /tmp  \n    ;env[TEMP] = /tmp\n\n    # 配置nginx，按照官网的教程配置Nginx conf：https://doc.owncloud.org/server/7.0/admin_manual/installation/nginx_configuration.html\n\n    对于官网的配置，我做了如下几项修改：\n    location ~ .php(?:$|/)$这里面修改为：\n    location ~ ^(.+?.php)(/.*)?$ \\{  \n      fastcgi_split_path_info ^(.+.php)(/.+)$;  \n      include fastcgi_params;  \n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  \n      fastcgi_param PATH_INFO $fastcgi_path_info;  \n      fastcgi_pass unix:/var/run/php5-fpm.sock;  \n      fastcgi_index index.php;  \n      include fastcgi_params;  \n      fastcgi_param PHP_VALUE \"post_max_size=10G \\\\n upload_max_filesize=10G\";   # 上传默认居然为513MB，这里可以修改大，不然在owncloud无法调整到更大  \n    \\}\n    检查配置文件是否正确用# nginx -t nginx.conf  \n```\n\n## TroubleShooting\n- **中文设置**:\n\n```\n    sudo raspi-config\n    去掉en_GB.UTF-8 UTF-8\n    选择“en_US.UTF-8 UTF-8”、“zh_CN.UTF-8 UTF-8”、“zh_CN.GBK GBK”\n    然后第二个页面默认语言选择en_GB.UTF-8 UTF-8\n```\n\n参考：  \n[http://blog.akarin.xyz/raspberry-init/  \nhttps://github.com/ccforward/cc/issues/25?utm_source=tuicool](http://blog.akar\nin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool \"Link:\nhttp://blog.akarin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool\" )  \n","slug":"raspberrypi","published":1,"updated":"2016-04-13T06:58:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgn005d9vnz250xsdpq","content":"<p>想在家里做NAS、DNS等私有云服务，但是无奈家里淘汰下来的电脑已无力承担如此重任。没办法了，就只能试试树莓派。不试不知道，一试吓一跳，完全就是一手掌大小的<br>电脑，听说desktop版本还能使用word等软件，虽然只有1GB内存，但是200多块(淘宝店)就能买到这个东西，那是非常值了。当然，作为一个技术爱好者，别<br>人是完全无法体会这种快乐的。要是其功耗再低点或者能采用其它的供电方式(比如无线供电、电池供电)，感觉完全能颠覆智能市场。  </p>\n<h2 id=\"制作启动镜像\"><a href=\"#制作启动镜像\" class=\"headerlink\" title=\"制作启动镜像\"></a><strong>制作启动镜像</strong></h2><p>镜像下载：<a href=\"https://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"external\">https://www.raspberrypi.org/downloads/</a>，我下载的是RASPBIAN分支，因为其是官方提供且基于Debian，和Ubuntu操作一样<br><strong>Mac环境</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df  # 查看当前已经挂载的卷</div><div class=\"line\">一般sd卡在最后，Filesystem是/dev/disk2s1，Mounted on /Volumes/No Name，可以在Finder里面将sd卡的名字改为Pi(我那个默认是No Name)</div><div class=\"line\">$ diskutil unmount /dev/disk2s1   #将sd卡卸载</div><div class=\"line\">Volume Pi on disk2s1 unmounted</div><div class=\"line\">$ diskutil list # 查看是否有sd卡设备</div><div class=\"line\">$ dd bs=4m if=pi.img of=/dev/rdisk2   #将镜像文件pi.img写入sd卡</div><div class=\"line\">$ diskutil unmountDisk /dev/disk2  # 再卸载sd卡，此时可以拔出来插入树莓派的sd卡槽了</div></pre></td></tr></table></figure></p>\n<h2 id=\"启动操作系统\"><a href=\"#启动操作系统\" class=\"headerlink\" title=\"启动操作系统\"></a><strong>启动操作系统</strong></h2><p>收到货的那天，发现其有一个DC接口，还以为是通过DC接口供电，出门走了一圈都没发现有卖这货的，于是回家，自习已看，发现可以用Android的电源为期供电的，<br>那接口名字忘了。和网上建议的一样，我采用的是5V 2A的供电设备(其实是直接插到小米插线板上的)<br>然后，我又发现，我家里没多的网线，那怎么办，我装的不是desktop版本，没有网线就不能SSH进去。不过还好，它支持HDMI，于是我把它功过HDMI连接上了<br>家里40英寸的电视，(HDMI高清显示，真他妈爽)就像这样，还通过USB插了外置键盘。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/raspberrypi_1.jpg\" alt=\"\">  </p>\n<p>默认是通电自动启动的，所以插上电就会进入系统了，默认用户名pi，默认密码是raspberry，接着就做一些基本的配置，通过<code>sudo raspi-config</code>来运行设置工具：</p>\n<ul>\n<li>第一项将sd卡的剩余空间全部用来使用</li>\n<li>然后修改international里面的时区及默认字符编码</li>\n<li>接着修改源，这个国度没办法的事  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo nano /etc/apt/sources.list.d/raspi.list</div><div class=\"line\">修改为如下：</div><div class=\"line\">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ jessie main</div><div class=\"line\">\t</div><div class=\"line\">$ sudo nano /etc/apt/sources.list  </div><div class=\"line\">修改为如下：</div><div class=\"line\">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib  </div><div class=\"line\">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib</div></pre></td></tr></table></figure>\n<ul>\n<li><p>最后，安装必要的软件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update &amp;&amp; apt-get upgrade </div><div class=\"line\">sudo apt-get install vim tree ttf-wqy-microhei python python3 python-dev python3-dev python-pip python3-pip zsh git -y</div></pre></td></tr></table></figure>\n</li>\n<li><p>中文环境配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"WIFI设置\"><a href=\"#WIFI设置\" class=\"headerlink\" title=\"WIFI设置\"></a><strong>WIFI设置</strong></h2><p>当然，我不可能一直用电视作显示器吧，这时候我买的无线设备就有用场了，直接通过USB插到树莓派上，然后设置wifi  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ifconfig # 可以看到wlan0，表示已经识别无线网卡</div><div class=\"line\">$ sudo vim /etc/network/interfaces添加或修改关于wlan0的配置</div><div class=\"line\">auto wlan0</div><div class=\"line\">allow-hotplug wlan0</div><div class=\"line\">iface wlan0 inet dhcp</div><div class=\"line\">wpa-ssid WIFI名称</div><div class=\"line\">wpa-psk WIFI密码</div><div class=\"line\"></div><div class=\"line\"># 然后通过如下命令重启网卡</div><div class=\"line\">sudo ifdown wlan0 &amp;&amp; sudo ifup wlan0</div></pre></td></tr></table></figure>\n<p>注：如果要关机，务必使用命令关机，而不要物理直接断，当然开机貌似只能拔了电源再插上</p>\n<h2 id=\"搭建ownCloud私有云\"><a href=\"#搭建ownCloud私有云\" class=\"headerlink\" title=\"搭建ownCloud私有云\"></a><strong>搭建ownCloud私有云</strong></h2><p>作为私有云方案，我选择的ownCloud，而不是Samba，因为Samba功能仅仅算是ftp的共享，而不是一个私有云方案，当然ownCloud也有为人诟病的<br>地方，比如内存占用高(树莓派2上占用100多MB)，另一个是因为它本身是基于Apache的，树莓派内存总共就1G，我可不想既有Apache又有Nginx，所<br>以直接用的是Nginx+php5-fpm的方案，不过这样子，配置过程就有点麻烦了。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 首先，安装基本服务</div><div class=\"line\">sudo apt-get install php5-common php5-cli php5-fpm</div><div class=\"line\">sudo apt-get install nginx</div><div class=\"line\">sudo apt-get install mysql-server mysql-client</div><div class=\"line\"></div><div class=\"line\"># 配置MySQL，ownCloud需要提前创建用户、数据库和分配权限</div><div class=\"line\">&gt; create database 库名 character set utf8 collate utf8_general_ci;  </div><div class=\"line\">&gt; grant ALL on 库名.* 用户名@localhost identified by &quot;密码&quot;   # 注意，ownCloud是不允许root用户的，因为权限太多</div><div class=\"line\"></div><div class=\"line\"># 配置文件权限</div><div class=\"line\">chmod 775 -R owncloud/        # 不要分配777，分配了也不能用</div><div class=\"line\">chown -R www-data:www-data owncloud/</div><div class=\"line\"></div><div class=\"line\"># 配置php5-fpm</div><div class=\"line\">$ printenv PATH 获取系统环境变量</div><div class=\"line\">vim /etc/php5/fpm/pool.d/www.conf，将下面几行前面的注释去掉</div><div class=\"line\">;env[HOSTNAME] = $HOSTNAME  </div><div class=\"line\">;env[PATH] = /usr/local/bin:/usr/bin:/bin      # 这里还要修改为刚才获取到的环境变量  </div><div class=\"line\">;env[TMP] = /tmp  </div><div class=\"line\">;env[TMPDIR] = /tmp  </div><div class=\"line\">;env[TEMP] = /tmp</div><div class=\"line\"></div><div class=\"line\"># 配置nginx，按照官网的教程配置Nginx conf：https://doc.owncloud.org/server/7.0/admin_manual/installation/nginx_configuration.html</div><div class=\"line\"></div><div class=\"line\">对于官网的配置，我做了如下几项修改：</div><div class=\"line\">location ~ .php(?:$|/)$这里面修改为：</div><div class=\"line\">location ~ ^(.+?.php)(/.*)?$ \\&#123;  </div><div class=\"line\">  fastcgi_split_path_info ^(.+.php)(/.+)$;  </div><div class=\"line\">  include fastcgi_params;  </div><div class=\"line\">  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  </div><div class=\"line\">  fastcgi_param PATH_INFO $fastcgi_path_info;  </div><div class=\"line\">  fastcgi_pass unix:/var/run/php5-fpm.sock;  </div><div class=\"line\">  fastcgi_index index.php;  </div><div class=\"line\">  include fastcgi_params;  </div><div class=\"line\">  fastcgi_param PHP_VALUE &quot;post_max_size=10G \\\\n upload_max_filesize=10G&quot;;   # 上传默认居然为513MB，这里可以修改大，不然在owncloud无法调整到更大  </div><div class=\"line\">\\&#125;</div><div class=\"line\">检查配置文件是否正确用# nginx -t nginx.conf</div></pre></td></tr></table></figure>\n<h2 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h2><ul>\n<li><strong>中文设置</strong>:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo raspi-config</div><div class=\"line\">去掉en_GB.UTF-8 UTF-8</div><div class=\"line\">选择“en_US.UTF-8 UTF-8”、“zh_CN.UTF-8 UTF-8”、“zh_CN.GBK GBK”</div><div class=\"line\">然后第二个页面默认语言选择en_GB.UTF-8 UTF-8</div></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://blog.akar\nin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool\" title=\"Link:\nhttp://blog.akarin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://blog.akarin.xyz/raspberry-init/<br>https://github.com/ccforward/cc/issues/25?utm_source=tuicool</a>  </p>\n","excerpt":"","more":"<p>想在家里做NAS、DNS等私有云服务，但是无奈家里淘汰下来的电脑已无力承担如此重任。没办法了，就只能试试树莓派。不试不知道，一试吓一跳，完全就是一手掌大小的<br>电脑，听说desktop版本还能使用word等软件，虽然只有1GB内存，但是200多块(淘宝店)就能买到这个东西，那是非常值了。当然，作为一个技术爱好者，别<br>人是完全无法体会这种快乐的。要是其功耗再低点或者能采用其它的供电方式(比如无线供电、电池供电)，感觉完全能颠覆智能市场。  </p>\n<h2 id=\"制作启动镜像\"><a href=\"#制作启动镜像\" class=\"headerlink\" title=\"制作启动镜像\"></a><strong>制作启动镜像</strong></h2><p>镜像下载：<a href=\"https://www.raspberrypi.org/downloads/\">https://www.raspberrypi.org/downloads/</a>，我下载的是RASPBIAN分支，因为其是官方提供且基于Debian，和Ubuntu操作一样<br><strong>Mac环境</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ df  # 查看当前已经挂载的卷</div><div class=\"line\">一般sd卡在最后，Filesystem是/dev/disk2s1，Mounted on /Volumes/No Name，可以在Finder里面将sd卡的名字改为Pi(我那个默认是No Name)</div><div class=\"line\">$ diskutil unmount /dev/disk2s1   #将sd卡卸载</div><div class=\"line\">Volume Pi on disk2s1 unmounted</div><div class=\"line\">$ diskutil list # 查看是否有sd卡设备</div><div class=\"line\">$ dd bs=4m if=pi.img of=/dev/rdisk2   #将镜像文件pi.img写入sd卡</div><div class=\"line\">$ diskutil unmountDisk /dev/disk2  # 再卸载sd卡，此时可以拔出来插入树莓派的sd卡槽了</div></pre></td></tr></table></figure></p>\n<h2 id=\"启动操作系统\"><a href=\"#启动操作系统\" class=\"headerlink\" title=\"启动操作系统\"></a><strong>启动操作系统</strong></h2><p>收到货的那天，发现其有一个DC接口，还以为是通过DC接口供电，出门走了一圈都没发现有卖这货的，于是回家，自习已看，发现可以用Android的电源为期供电的，<br>那接口名字忘了。和网上建议的一样，我采用的是5V 2A的供电设备(其实是直接插到小米插线板上的)<br>然后，我又发现，我家里没多的网线，那怎么办，我装的不是desktop版本，没有网线就不能SSH进去。不过还好，它支持HDMI，于是我把它功过HDMI连接上了<br>家里40英寸的电视，(HDMI高清显示，真他妈爽)就像这样，还通过USB插了外置键盘。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/raspberrypi_1.jpg\" alt=\"\">  </p>\n<p>默认是通电自动启动的，所以插上电就会进入系统了，默认用户名pi，默认密码是raspberry，接着就做一些基本的配置，通过<code>sudo raspi-config</code>来运行设置工具：</p>\n<ul>\n<li>第一项将sd卡的剩余空间全部用来使用</li>\n<li>然后修改international里面的时区及默认字符编码</li>\n<li>接着修改源，这个国度没办法的事  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo nano /etc/apt/sources.list.d/raspi.list</div><div class=\"line\">修改为如下：</div><div class=\"line\">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ jessie main</div><div class=\"line\">\t</div><div class=\"line\">$ sudo nano /etc/apt/sources.list  </div><div class=\"line\">修改为如下：</div><div class=\"line\">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib  </div><div class=\"line\">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main non-free contrib</div></pre></td></tr></table></figure>\n<ul>\n<li><p>最后，安装必要的软件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update &amp;&amp; apt-get upgrade </div><div class=\"line\">sudo apt-get install vim tree ttf-wqy-microhei python python3 python-dev python3-dev python-pip python3-pip zsh git -y</div></pre></td></tr></table></figure>\n</li>\n<li><p>中文环境配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"WIFI设置\"><a href=\"#WIFI设置\" class=\"headerlink\" title=\"WIFI设置\"></a><strong>WIFI设置</strong></h2><p>当然，我不可能一直用电视作显示器吧，这时候我买的无线设备就有用场了，直接通过USB插到树莓派上，然后设置wifi  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ifconfig # 可以看到wlan0，表示已经识别无线网卡</div><div class=\"line\">$ sudo vim /etc/network/interfaces添加或修改关于wlan0的配置</div><div class=\"line\">auto wlan0</div><div class=\"line\">allow-hotplug wlan0</div><div class=\"line\">iface wlan0 inet dhcp</div><div class=\"line\">wpa-ssid WIFI名称</div><div class=\"line\">wpa-psk WIFI密码</div><div class=\"line\"></div><div class=\"line\"># 然后通过如下命令重启网卡</div><div class=\"line\">sudo ifdown wlan0 &amp;&amp; sudo ifup wlan0</div></pre></td></tr></table></figure>\n<p>注：如果要关机，务必使用命令关机，而不要物理直接断，当然开机貌似只能拔了电源再插上</p>\n<h2 id=\"搭建ownCloud私有云\"><a href=\"#搭建ownCloud私有云\" class=\"headerlink\" title=\"搭建ownCloud私有云\"></a><strong>搭建ownCloud私有云</strong></h2><p>作为私有云方案，我选择的ownCloud，而不是Samba，因为Samba功能仅仅算是ftp的共享，而不是一个私有云方案，当然ownCloud也有为人诟病的<br>地方，比如内存占用高(树莓派2上占用100多MB)，另一个是因为它本身是基于Apache的，树莓派内存总共就1G，我可不想既有Apache又有Nginx，所<br>以直接用的是Nginx+php5-fpm的方案，不过这样子，配置过程就有点麻烦了。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 首先，安装基本服务</div><div class=\"line\">sudo apt-get install php5-common php5-cli php5-fpm</div><div class=\"line\">sudo apt-get install nginx</div><div class=\"line\">sudo apt-get install mysql-server mysql-client</div><div class=\"line\"></div><div class=\"line\"># 配置MySQL，ownCloud需要提前创建用户、数据库和分配权限</div><div class=\"line\">&gt; create database 库名 character set utf8 collate utf8_general_ci;  </div><div class=\"line\">&gt; grant ALL on 库名.* 用户名@localhost identified by &quot;密码&quot;   # 注意，ownCloud是不允许root用户的，因为权限太多</div><div class=\"line\"></div><div class=\"line\"># 配置文件权限</div><div class=\"line\">chmod 775 -R owncloud/        # 不要分配777，分配了也不能用</div><div class=\"line\">chown -R www-data:www-data owncloud/</div><div class=\"line\"></div><div class=\"line\"># 配置php5-fpm</div><div class=\"line\">$ printenv PATH 获取系统环境变量</div><div class=\"line\">vim /etc/php5/fpm/pool.d/www.conf，将下面几行前面的注释去掉</div><div class=\"line\">;env[HOSTNAME] = $HOSTNAME  </div><div class=\"line\">;env[PATH] = /usr/local/bin:/usr/bin:/bin      # 这里还要修改为刚才获取到的环境变量  </div><div class=\"line\">;env[TMP] = /tmp  </div><div class=\"line\">;env[TMPDIR] = /tmp  </div><div class=\"line\">;env[TEMP] = /tmp</div><div class=\"line\"></div><div class=\"line\"># 配置nginx，按照官网的教程配置Nginx conf：https://doc.owncloud.org/server/7.0/admin_manual/installation/nginx_configuration.html</div><div class=\"line\"></div><div class=\"line\">对于官网的配置，我做了如下几项修改：</div><div class=\"line\">location ~ .php(?:$|/)$这里面修改为：</div><div class=\"line\">location ~ ^(.+?.php)(/.*)?$ \\&#123;  </div><div class=\"line\">  fastcgi_split_path_info ^(.+.php)(/.+)$;  </div><div class=\"line\">  include fastcgi_params;  </div><div class=\"line\">  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  </div><div class=\"line\">  fastcgi_param PATH_INFO $fastcgi_path_info;  </div><div class=\"line\">  fastcgi_pass unix:/var/run/php5-fpm.sock;  </div><div class=\"line\">  fastcgi_index index.php;  </div><div class=\"line\">  include fastcgi_params;  </div><div class=\"line\">  fastcgi_param PHP_VALUE &quot;post_max_size=10G \\\\n upload_max_filesize=10G&quot;;   # 上传默认居然为513MB，这里可以修改大，不然在owncloud无法调整到更大  </div><div class=\"line\">\\&#125;</div><div class=\"line\">检查配置文件是否正确用# nginx -t nginx.conf</div></pre></td></tr></table></figure>\n<h2 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h2><ul>\n<li><strong>中文设置</strong>:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo raspi-config</div><div class=\"line\">去掉en_GB.UTF-8 UTF-8</div><div class=\"line\">选择“en_US.UTF-8 UTF-8”、“zh_CN.UTF-8 UTF-8”、“zh_CN.GBK GBK”</div><div class=\"line\">然后第二个页面默认语言选择en_GB.UTF-8 UTF-8</div></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"http://blog.akar\nin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool\" title=\"Link:\nhttp://blog.akarin.xyz/raspberry-\ninit/https://github.com/ccforward/cc/issues/25?utm_source=tuicool\">http://blog.akarin.xyz/raspberry-init/<br>https://github.com/ccforward/cc/issues/25?utm_source=tuicool</a>  </p>\n"},{"title":"最后悔莫过于过上别人期待的人生","date":"2015-03-15T01:32:57.000Z","_content":"写这篇文章源于年前一个程序爱好者的QQ群里的一次讨论，很想说说自己的想法。以下是我们的聊天内容(本来想直接上传截图的，但是太小看不清，所以一字一字敲出来吧)\n：\n\nA：家里人给介绍一个工作，在一个效益很好的单位干文职  \n`A即是主人公`  \nA：我想，我以后不会再做程序方面的工作了  \nA：…可是我还是对PHP比较有兴趣  \nA：for($i=╯﹏╰; $i < 999999; $i++)\\{ echo $i;\\}  \nB：这种工作应该不会太忙吧  \n`我上场啦`  \nA：是的  \nB：还不是可以在闲暇的时候写代码  \nA：家里人都想找个稳定的  \n`让他们去找呗。。。`  \nA：..我觉得 如果爱好 就要一心一意的  \n`不同意，反正我爱好很多，如果一辈子只有一个爱好那多无聊呀`  \nA：想了很久 真想 破釜沉舟！！  \n`破釜沉舟这个词我是去年在决定不考研的时候用过，当时一下就把所有的书给卖了`  \nC：那么问题来了  \nA：妈的 就是 不敢  \nD：。。。  \nC：到底应该是践行自己的目标呢？还是开一辈子挖掘机  \n`不是蓝翔毕业能开好挖掘机吗，哈哈`  \nD：亮点是不敢  \n`有的人怕的是违反父命，有的人怕的是未知的人生`  \nB：无法理解你们已经工作了的人  \n`由于大人总是说我幼稚，所以有可能确实是我没去社会无法理解你们`  \nA：要是敢了 我也不会这么说…  \n`如果真的觉得自己不能勇敢一次，就没必要说出来了`  \nA：现实！  \nA：马勒个B  \nE：我父母当年安排进入事业单位，年少轻狂，坚决不去，结果现在惨兮兮。。。  \n`这是重点任务，只有经历过的，才有资格说话`  \nD：不能反抗 那你就躺好姿势享受就是了  \n`生活就像强奸，要么反抗要么就去享受；工作就像轮奸，您不行就让别人上 ；社会就像自慰，所有的都要靠自己的双手来解决`  \nA：我不能说，如果我继续干PHP，以后能怎么样怎么样，但是现在就是选择  \n`我知道，他们会说如果按照他们的干，以后能怎么样怎么样`  \nA：我就是知道这些，才特别特别的纠结  \nA：就是选择if else，执行了，if下面就跟你没关系了  \nD：呵呵  \nE：**惨兮兮怎么了，好歹自己选的**  \nA：你后悔么？如果让你再选你怎么选？  \nE：**有时候哭起来，说不后悔是假的。但是心里还是觉得，自己能选择还是好**。  \n`这句话说到我心坎里来了`  \nF：我就是听从了父母的安排，每天就像在等死一样！现在觉得我不能再坐以待毙！才开始自学网页方面的知识，虽然我不了解网页！但是我有学习的能力！  \n`另一个例子出来了，无论怎样，看样子他已经找到了自己想要走的路了`\n\n虽然我还在上大学，但我已经体会到生活中有各种各样的if else，很多情况，我们只能选择一条路。但无论选择哪一条路，未来都是未知的，只是从过往的经验来看，总\n有那么一条路要诱人一点。选择诱人的那条路无可厚非。但别人的现在并不一定会成为你的未来，既然都是未知的，为何不选择自己喜欢的那条路呢，既然都可能会后悔，你想想\n选择哪一条路会更后悔呢？下面是罗伯特·弗罗斯特的一首诗，我们应该都听过：\n\n黄色的林子里有两条路  \n很遗憾我无法同时选择两者  \n身在旅途的我久久站立  \n对着其中一条极目眺望  \n直到它蜿蜒拐进远处的树丛\n\n我选择了另外的一条，天经地义  \n也许更为诱人  \n因为它充满荆棘，需要开拓  \n然而这样的路过  \n并未引起太大的改变\n\n那天清晨这两条小路一起静卧在  \n无人踩过的树叶丛中  \n哦，我把另一条路留给了明天  \n明知路连着路  \n我不知是否该回头\n\n我将轻轻叹息，叙述这一切  \n许多许多年以后：  \n林子里有两条路，我——  \n选择了行人稀少的那一条  \n它改变了我的一生\n\n","source":"_posts/regret-living-on-others-life.md","raw":"---\ntitle: \"最后悔莫过于过上别人期待的人生\"\ndate: 2015-03-15 09:32:57\ncategories: 边走边想\n---\n写这篇文章源于年前一个程序爱好者的QQ群里的一次讨论，很想说说自己的想法。以下是我们的聊天内容(本来想直接上传截图的，但是太小看不清，所以一字一字敲出来吧)\n：\n\nA：家里人给介绍一个工作，在一个效益很好的单位干文职  \n`A即是主人公`  \nA：我想，我以后不会再做程序方面的工作了  \nA：…可是我还是对PHP比较有兴趣  \nA：for($i=╯﹏╰; $i < 999999; $i++)\\{ echo $i;\\}  \nB：这种工作应该不会太忙吧  \n`我上场啦`  \nA：是的  \nB：还不是可以在闲暇的时候写代码  \nA：家里人都想找个稳定的  \n`让他们去找呗。。。`  \nA：..我觉得 如果爱好 就要一心一意的  \n`不同意，反正我爱好很多，如果一辈子只有一个爱好那多无聊呀`  \nA：想了很久 真想 破釜沉舟！！  \n`破釜沉舟这个词我是去年在决定不考研的时候用过，当时一下就把所有的书给卖了`  \nC：那么问题来了  \nA：妈的 就是 不敢  \nD：。。。  \nC：到底应该是践行自己的目标呢？还是开一辈子挖掘机  \n`不是蓝翔毕业能开好挖掘机吗，哈哈`  \nD：亮点是不敢  \n`有的人怕的是违反父命，有的人怕的是未知的人生`  \nB：无法理解你们已经工作了的人  \n`由于大人总是说我幼稚，所以有可能确实是我没去社会无法理解你们`  \nA：要是敢了 我也不会这么说…  \n`如果真的觉得自己不能勇敢一次，就没必要说出来了`  \nA：现实！  \nA：马勒个B  \nE：我父母当年安排进入事业单位，年少轻狂，坚决不去，结果现在惨兮兮。。。  \n`这是重点任务，只有经历过的，才有资格说话`  \nD：不能反抗 那你就躺好姿势享受就是了  \n`生活就像强奸，要么反抗要么就去享受；工作就像轮奸，您不行就让别人上 ；社会就像自慰，所有的都要靠自己的双手来解决`  \nA：我不能说，如果我继续干PHP，以后能怎么样怎么样，但是现在就是选择  \n`我知道，他们会说如果按照他们的干，以后能怎么样怎么样`  \nA：我就是知道这些，才特别特别的纠结  \nA：就是选择if else，执行了，if下面就跟你没关系了  \nD：呵呵  \nE：**惨兮兮怎么了，好歹自己选的**  \nA：你后悔么？如果让你再选你怎么选？  \nE：**有时候哭起来，说不后悔是假的。但是心里还是觉得，自己能选择还是好**。  \n`这句话说到我心坎里来了`  \nF：我就是听从了父母的安排，每天就像在等死一样！现在觉得我不能再坐以待毙！才开始自学网页方面的知识，虽然我不了解网页！但是我有学习的能力！  \n`另一个例子出来了，无论怎样，看样子他已经找到了自己想要走的路了`\n\n虽然我还在上大学，但我已经体会到生活中有各种各样的if else，很多情况，我们只能选择一条路。但无论选择哪一条路，未来都是未知的，只是从过往的经验来看，总\n有那么一条路要诱人一点。选择诱人的那条路无可厚非。但别人的现在并不一定会成为你的未来，既然都是未知的，为何不选择自己喜欢的那条路呢，既然都可能会后悔，你想想\n选择哪一条路会更后悔呢？下面是罗伯特·弗罗斯特的一首诗，我们应该都听过：\n\n黄色的林子里有两条路  \n很遗憾我无法同时选择两者  \n身在旅途的我久久站立  \n对着其中一条极目眺望  \n直到它蜿蜒拐进远处的树丛\n\n我选择了另外的一条，天经地义  \n也许更为诱人  \n因为它充满荆棘，需要开拓  \n然而这样的路过  \n并未引起太大的改变\n\n那天清晨这两条小路一起静卧在  \n无人踩过的树叶丛中  \n哦，我把另一条路留给了明天  \n明知路连着路  \n我不知是否该回头\n\n我将轻轻叹息，叙述这一切  \n许多许多年以后：  \n林子里有两条路，我——  \n选择了行人稀少的那一条  \n它改变了我的一生\n\n","slug":"regret-living-on-others-life","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgo005f9vnzwie5iwh1","content":"<p>写这篇文章源于年前一个程序爱好者的QQ群里的一次讨论，很想说说自己的想法。以下是我们的聊天内容(本来想直接上传截图的，但是太小看不清，所以一字一字敲出来吧)<br>：</p>\n<p>A：家里人给介绍一个工作，在一个效益很好的单位干文职<br><code>A即是主人公</code><br>A：我想，我以后不会再做程序方面的工作了<br>A：…可是我还是对PHP比较有兴趣<br>A：for($i=╯﹏╰; $i &lt; 999999; $i++){ echo $i;}<br>B：这种工作应该不会太忙吧<br><code>我上场啦</code><br>A：是的<br>B：还不是可以在闲暇的时候写代码<br>A：家里人都想找个稳定的<br><code>让他们去找呗。。。</code><br>A：..我觉得 如果爱好 就要一心一意的<br><code>不同意，反正我爱好很多，如果一辈子只有一个爱好那多无聊呀</code><br>A：想了很久 真想 破釜沉舟！！<br><code>破釜沉舟这个词我是去年在决定不考研的时候用过，当时一下就把所有的书给卖了</code><br>C：那么问题来了<br>A：妈的 就是 不敢<br>D：。。。<br>C：到底应该是践行自己的目标呢？还是开一辈子挖掘机<br><code>不是蓝翔毕业能开好挖掘机吗，哈哈</code><br>D：亮点是不敢<br><code>有的人怕的是违反父命，有的人怕的是未知的人生</code><br>B：无法理解你们已经工作了的人<br><code>由于大人总是说我幼稚，所以有可能确实是我没去社会无法理解你们</code><br>A：要是敢了 我也不会这么说…<br><code>如果真的觉得自己不能勇敢一次，就没必要说出来了</code><br>A：现实！<br>A：马勒个B<br>E：我父母当年安排进入事业单位，年少轻狂，坚决不去，结果现在惨兮兮。。。<br><code>这是重点任务，只有经历过的，才有资格说话</code><br>D：不能反抗 那你就躺好姿势享受就是了<br><code>生活就像强奸，要么反抗要么就去享受；工作就像轮奸，您不行就让别人上 ；社会就像自慰，所有的都要靠自己的双手来解决</code><br>A：我不能说，如果我继续干PHP，以后能怎么样怎么样，但是现在就是选择<br><code>我知道，他们会说如果按照他们的干，以后能怎么样怎么样</code><br>A：我就是知道这些，才特别特别的纠结<br>A：就是选择if else，执行了，if下面就跟你没关系了<br>D：呵呵<br>E：<strong>惨兮兮怎么了，好歹自己选的</strong><br>A：你后悔么？如果让你再选你怎么选？<br>E：<strong>有时候哭起来，说不后悔是假的。但是心里还是觉得，自己能选择还是好</strong>。<br><code>这句话说到我心坎里来了</code><br>F：我就是听从了父母的安排，每天就像在等死一样！现在觉得我不能再坐以待毙！才开始自学网页方面的知识，虽然我不了解网页！但是我有学习的能力！<br><code>另一个例子出来了，无论怎样，看样子他已经找到了自己想要走的路了</code></p>\n<p>虽然我还在上大学，但我已经体会到生活中有各种各样的if else，很多情况，我们只能选择一条路。但无论选择哪一条路，未来都是未知的，只是从过往的经验来看，总<br>有那么一条路要诱人一点。选择诱人的那条路无可厚非。但别人的现在并不一定会成为你的未来，既然都是未知的，为何不选择自己喜欢的那条路呢，既然都可能会后悔，你想想<br>选择哪一条路会更后悔呢？下面是罗伯特·弗罗斯特的一首诗，我们应该都听过：</p>\n<p>黄色的林子里有两条路<br>很遗憾我无法同时选择两者<br>身在旅途的我久久站立<br>对着其中一条极目眺望<br>直到它蜿蜒拐进远处的树丛</p>\n<p>我选择了另外的一条，天经地义<br>也许更为诱人<br>因为它充满荆棘，需要开拓<br>然而这样的路过<br>并未引起太大的改变</p>\n<p>那天清晨这两条小路一起静卧在<br>无人踩过的树叶丛中<br>哦，我把另一条路留给了明天<br>明知路连着路<br>我不知是否该回头</p>\n<p>我将轻轻叹息，叙述这一切<br>许多许多年以后：<br>林子里有两条路，我——<br>选择了行人稀少的那一条<br>它改变了我的一生</p>\n","excerpt":"","more":"<p>写这篇文章源于年前一个程序爱好者的QQ群里的一次讨论，很想说说自己的想法。以下是我们的聊天内容(本来想直接上传截图的，但是太小看不清，所以一字一字敲出来吧)<br>：</p>\n<p>A：家里人给介绍一个工作，在一个效益很好的单位干文职<br><code>A即是主人公</code><br>A：我想，我以后不会再做程序方面的工作了<br>A：…可是我还是对PHP比较有兴趣<br>A：for($i=╯﹏╰; $i &lt; 999999; $i++){ echo $i;}<br>B：这种工作应该不会太忙吧<br><code>我上场啦</code><br>A：是的<br>B：还不是可以在闲暇的时候写代码<br>A：家里人都想找个稳定的<br><code>让他们去找呗。。。</code><br>A：..我觉得 如果爱好 就要一心一意的<br><code>不同意，反正我爱好很多，如果一辈子只有一个爱好那多无聊呀</code><br>A：想了很久 真想 破釜沉舟！！<br><code>破釜沉舟这个词我是去年在决定不考研的时候用过，当时一下就把所有的书给卖了</code><br>C：那么问题来了<br>A：妈的 就是 不敢<br>D：。。。<br>C：到底应该是践行自己的目标呢？还是开一辈子挖掘机<br><code>不是蓝翔毕业能开好挖掘机吗，哈哈</code><br>D：亮点是不敢<br><code>有的人怕的是违反父命，有的人怕的是未知的人生</code><br>B：无法理解你们已经工作了的人<br><code>由于大人总是说我幼稚，所以有可能确实是我没去社会无法理解你们</code><br>A：要是敢了 我也不会这么说…<br><code>如果真的觉得自己不能勇敢一次，就没必要说出来了</code><br>A：现实！<br>A：马勒个B<br>E：我父母当年安排进入事业单位，年少轻狂，坚决不去，结果现在惨兮兮。。。<br><code>这是重点任务，只有经历过的，才有资格说话</code><br>D：不能反抗 那你就躺好姿势享受就是了<br><code>生活就像强奸，要么反抗要么就去享受；工作就像轮奸，您不行就让别人上 ；社会就像自慰，所有的都要靠自己的双手来解决</code><br>A：我不能说，如果我继续干PHP，以后能怎么样怎么样，但是现在就是选择<br><code>我知道，他们会说如果按照他们的干，以后能怎么样怎么样</code><br>A：我就是知道这些，才特别特别的纠结<br>A：就是选择if else，执行了，if下面就跟你没关系了<br>D：呵呵<br>E：<strong>惨兮兮怎么了，好歹自己选的</strong><br>A：你后悔么？如果让你再选你怎么选？<br>E：<strong>有时候哭起来，说不后悔是假的。但是心里还是觉得，自己能选择还是好</strong>。<br><code>这句话说到我心坎里来了</code><br>F：我就是听从了父母的安排，每天就像在等死一样！现在觉得我不能再坐以待毙！才开始自学网页方面的知识，虽然我不了解网页！但是我有学习的能力！<br><code>另一个例子出来了，无论怎样，看样子他已经找到了自己想要走的路了</code></p>\n<p>虽然我还在上大学，但我已经体会到生活中有各种各样的if else，很多情况，我们只能选择一条路。但无论选择哪一条路，未来都是未知的，只是从过往的经验来看，总<br>有那么一条路要诱人一点。选择诱人的那条路无可厚非。但别人的现在并不一定会成为你的未来，既然都是未知的，为何不选择自己喜欢的那条路呢，既然都可能会后悔，你想想<br>选择哪一条路会更后悔呢？下面是罗伯特·弗罗斯特的一首诗，我们应该都听过：</p>\n<p>黄色的林子里有两条路<br>很遗憾我无法同时选择两者<br>身在旅途的我久久站立<br>对着其中一条极目眺望<br>直到它蜿蜒拐进远处的树丛</p>\n<p>我选择了另外的一条，天经地义<br>也许更为诱人<br>因为它充满荆棘，需要开拓<br>然而这样的路过<br>并未引起太大的改变</p>\n<p>那天清晨这两条小路一起静卧在<br>无人踩过的树叶丛中<br>哦，我把另一条路留给了明天<br>明知路连着路<br>我不知是否该回头</p>\n<p>我将轻轻叹息，叙述这一切<br>许多许多年以后：<br>林子里有两条路，我——<br>选择了行人稀少的那一条<br>它改变了我的一生</p>\n"},{"title":"学生应尽量购买正版","date":"2013-12-29T04:52:26.000Z","_content":"昨晚去学校外面买了两本书，一本《计算机网络》，一本《C和指针》，\n\n分别是15元和19元。买的时候很是高兴，但买回来我就后悔了，不是因为质量差，而是因为内心感到的不安，经过一夜的辗转反侧，决定写下这篇文章，激励自己以后尽量买\n正版产品，无论是书籍、软件还是其它。  \n\n说实话，作为一个生活都还要向父母伸手的学生党，而且是在这个神奇的  \n国度，要想完全支持正版是不可能的，我又不是富二代，不过还好，我们学校参与了微软的dreamspark计划可以免费获得很多微软的正版软件，比如我现在所使用的w\nindows7操作系统和visiual studio\n2013，当然，我更喜欢使用linux。在书籍方面我最喜欢的是在亚马逊购书，不仅全部是正版，而且价格相对其它网上书店便宜（这里就不提淘宝了），服务也很不错。\n\n其实盗版书最大的危害不是自己拿到了一本下等质量的书，而是可能让很多作者对知识产权的保护感到失望，从而打击了大师们的创作积极性。换句话说，盗版越多，我们以后看\n到经典书籍的机会就会越来越少。很多人说正版书是价格虚高，我想说的是，什么叫虚高？我不说天朝的正版相对于美国还算便宜的了，你的意思应该是那本书的分量比不上他的\n价格吗？那很好，你可以直接放下那本书，没必要看了。（注：我所说的不是那些包装极富奢华之势的书籍，用包装来提高书的价格是对书籍的侮辱，爱收集精装书的人除外）\n\n至于盗版的好处，这里我就不说了，反正天朝已经过了没盗版就活不下去的低不了，我们现在应一步一步，走向正版化。\n\n其实对知识版权的尊重主要是来自于各大开源社区，开源是一种精神，我很高兴世界上有这样一群人，乐于把自己的东西奉献出来，大家一起学习。当然开源不等于免费，商业软\n件也不等于一定要收费。\n\n支持正版是个人素质问题，法律目前还不能完全管制，而我们作为大学生自应为知识产权做一些力所能及的事情。\n","source":"_posts/student-should-buy-genuine.md","raw":"---\ntitle: \"学生应尽量购买正版\"\ndate: 2013-12-29 12:52:26\ncategories: 边走边想\n---\n昨晚去学校外面买了两本书，一本《计算机网络》，一本《C和指针》，\n\n分别是15元和19元。买的时候很是高兴，但买回来我就后悔了，不是因为质量差，而是因为内心感到的不安，经过一夜的辗转反侧，决定写下这篇文章，激励自己以后尽量买\n正版产品，无论是书籍、软件还是其它。  \n\n说实话，作为一个生活都还要向父母伸手的学生党，而且是在这个神奇的  \n国度，要想完全支持正版是不可能的，我又不是富二代，不过还好，我们学校参与了微软的dreamspark计划可以免费获得很多微软的正版软件，比如我现在所使用的w\nindows7操作系统和visiual studio\n2013，当然，我更喜欢使用linux。在书籍方面我最喜欢的是在亚马逊购书，不仅全部是正版，而且价格相对其它网上书店便宜（这里就不提淘宝了），服务也很不错。\n\n其实盗版书最大的危害不是自己拿到了一本下等质量的书，而是可能让很多作者对知识产权的保护感到失望，从而打击了大师们的创作积极性。换句话说，盗版越多，我们以后看\n到经典书籍的机会就会越来越少。很多人说正版书是价格虚高，我想说的是，什么叫虚高？我不说天朝的正版相对于美国还算便宜的了，你的意思应该是那本书的分量比不上他的\n价格吗？那很好，你可以直接放下那本书，没必要看了。（注：我所说的不是那些包装极富奢华之势的书籍，用包装来提高书的价格是对书籍的侮辱，爱收集精装书的人除外）\n\n至于盗版的好处，这里我就不说了，反正天朝已经过了没盗版就活不下去的低不了，我们现在应一步一步，走向正版化。\n\n其实对知识版权的尊重主要是来自于各大开源社区，开源是一种精神，我很高兴世界上有这样一群人，乐于把自己的东西奉献出来，大家一起学习。当然开源不等于免费，商业软\n件也不等于一定要收费。\n\n支持正版是个人素质问题，法律目前还不能完全管制，而我们作为大学生自应为知识产权做一些力所能及的事情。\n","slug":"student-should-buy-genuine","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgr005h9vnzr7rtjo89","content":"<p>昨晚去学校外面买了两本书，一本《计算机网络》，一本《C和指针》，</p>\n<p>分别是15元和19元。买的时候很是高兴，但买回来我就后悔了，不是因为质量差，而是因为内心感到的不安，经过一夜的辗转反侧，决定写下这篇文章，激励自己以后尽量买<br>正版产品，无论是书籍、软件还是其它。  </p>\n<p>说实话，作为一个生活都还要向父母伸手的学生党，而且是在这个神奇的<br>国度，要想完全支持正版是不可能的，我又不是富二代，不过还好，我们学校参与了微软的dreamspark计划可以免费获得很多微软的正版软件，比如我现在所使用的w<br>indows7操作系统和visiual studio<br>2013，当然，我更喜欢使用linux。在书籍方面我最喜欢的是在亚马逊购书，不仅全部是正版，而且价格相对其它网上书店便宜（这里就不提淘宝了），服务也很不错。</p>\n<p>其实盗版书最大的危害不是自己拿到了一本下等质量的书，而是可能让很多作者对知识产权的保护感到失望，从而打击了大师们的创作积极性。换句话说，盗版越多，我们以后看<br>到经典书籍的机会就会越来越少。很多人说正版书是价格虚高，我想说的是，什么叫虚高？我不说天朝的正版相对于美国还算便宜的了，你的意思应该是那本书的分量比不上他的<br>价格吗？那很好，你可以直接放下那本书，没必要看了。（注：我所说的不是那些包装极富奢华之势的书籍，用包装来提高书的价格是对书籍的侮辱，爱收集精装书的人除外）</p>\n<p>至于盗版的好处，这里我就不说了，反正天朝已经过了没盗版就活不下去的低不了，我们现在应一步一步，走向正版化。</p>\n<p>其实对知识版权的尊重主要是来自于各大开源社区，开源是一种精神，我很高兴世界上有这样一群人，乐于把自己的东西奉献出来，大家一起学习。当然开源不等于免费，商业软<br>件也不等于一定要收费。</p>\n<p>支持正版是个人素质问题，法律目前还不能完全管制，而我们作为大学生自应为知识产权做一些力所能及的事情。</p>\n","excerpt":"","more":"<p>昨晚去学校外面买了两本书，一本《计算机网络》，一本《C和指针》，</p>\n<p>分别是15元和19元。买的时候很是高兴，但买回来我就后悔了，不是因为质量差，而是因为内心感到的不安，经过一夜的辗转反侧，决定写下这篇文章，激励自己以后尽量买<br>正版产品，无论是书籍、软件还是其它。  </p>\n<p>说实话，作为一个生活都还要向父母伸手的学生党，而且是在这个神奇的<br>国度，要想完全支持正版是不可能的，我又不是富二代，不过还好，我们学校参与了微软的dreamspark计划可以免费获得很多微软的正版软件，比如我现在所使用的w<br>indows7操作系统和visiual studio<br>2013，当然，我更喜欢使用linux。在书籍方面我最喜欢的是在亚马逊购书，不仅全部是正版，而且价格相对其它网上书店便宜（这里就不提淘宝了），服务也很不错。</p>\n<p>其实盗版书最大的危害不是自己拿到了一本下等质量的书，而是可能让很多作者对知识产权的保护感到失望，从而打击了大师们的创作积极性。换句话说，盗版越多，我们以后看<br>到经典书籍的机会就会越来越少。很多人说正版书是价格虚高，我想说的是，什么叫虚高？我不说天朝的正版相对于美国还算便宜的了，你的意思应该是那本书的分量比不上他的<br>价格吗？那很好，你可以直接放下那本书，没必要看了。（注：我所说的不是那些包装极富奢华之势的书籍，用包装来提高书的价格是对书籍的侮辱，爱收集精装书的人除外）</p>\n<p>至于盗版的好处，这里我就不说了，反正天朝已经过了没盗版就活不下去的低不了，我们现在应一步一步，走向正版化。</p>\n<p>其实对知识版权的尊重主要是来自于各大开源社区，开源是一种精神，我很高兴世界上有这样一群人，乐于把自己的东西奉献出来，大家一起学习。当然开源不等于免费，商业软<br>件也不等于一定要收费。</p>\n<p>支持正版是个人素质问题，法律目前还不能完全管制，而我们作为大学生自应为知识产权做一些力所能及的事情。</p>\n"},{"title":"我居然忘了写《三体》的读后感","date":"2016-02-13T14:58:29.000Z","_content":"买了kindle已经看了七八本书了，其他的书在博客改版后都陆陆续续写了书评了，但是我居然还没有给《三体》写读后感。这两天，世界突然被一个发现震动了：[引力波](http://www.guokr.com/article/441177/)被证实了。虽然不知道其中的具体含义，但是可能真的如人们所说，引力波的发现可能会像万有引力被发现一样给基础物理学带来飞速的发展。\n\n简单地说，我最初是因为急着看《三体》才去淘宝买kindle的。对于一个长大了的科幻迷来说，《三体》绝对是不可多得的好书，并且它是国产的，这是我最惊讶的一个部分。不是我看不起国内小说，国内小说总体来说武侠传奇的比较多，描写未来的确实罕见，而能这样引人入胜的，更是凤毛麟角。当然也有可能是由于我读的小说比较少的缘故吧，这部小说在开篇就把我吸引进去了，废寝忘食地看了一个星期。\n\n全书分为三个部分：《地球往事》、《黑暗森林》、《死神永生》，其中最精彩的部分莫过于黑暗森林了，把宗教、伦理、科幻、爱情等统统融合在一起，体现了其宇宙社会学的深层含义。看了很多的书评，负面评价的原因主要有二，一是叙事手法上，二是科幻知识上相对低级。前者我不好评价，毕竟我对这方面没有研究，我只知道在阅读的时候我被深深地吸入进去了，只知道这本书的想象力至少在国内是极少见到的。(不过说实话，最后一部的结尾，确实有点粗糙，感觉就像是《火影忍者》一样，匆匆结尾，看起来像是文思枯竭了一样)对于后者，我只能说，正式因为此书所用到的物理知识对于一个大学生的我来说，刚好能够理解，不会显得晦涩难懂，我想，这已经很成功了。\n\n**黑暗森林法则**：宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景。  \n佩服作者的想象力，以前的我真的从没想过这一个层面的东西，认为我们就应该一直寻找宇宙中的智慧生物，去寻找另一个文明，现在看来，一切都太艰难了，宇宙中处处存在着猜疑链，你永远不知道另一个文明是怎么看你的，不要像程圣母(程心)一样只用善良的思维去思考这个世界。\n\n**射手假说**：有一名神枪手，在一个靶子上每隔十厘米打一个洞。设想这个靶子的平面上生活着一种二维智能生物，它们中的科学家在对自己的宇宙进行观察后，发现了一个伟大的定律： “宇宙每隔十厘米，必然会有一个洞。”它们把这个神枪手一时兴起的随意行为，看成了自己宇宙中的铁律。   \n**农场主假说**：一个农场里有一一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。  \n这两个假说，我也只能仰望了，看过那么多科幻小说和纪录片，我也没能跳出这个牢笼，从外面的世界思考，比如这里，如果调到比我们更高维度来思考，他们也会不会认为我们只是纸上的一些小人儿呢。\n\n## 消灭人类暴政，世界属于三体\n## 一切都会逝去，只有死神永生\n\n推荐观看：  \n[神剪辑！12分钟看完90万字科幻小说神作《三体》\n](https://www.youtube.com/watch?v=HL_o_if5it0)  \n[我的三体(国内粉丝使用minecraft制作)](http://www.bilibili.com/bangumi/i/1704/)\n","source":"_posts/santi.md","raw":"---\ntitle: \"我居然忘了写《三体》的读后感\"\ndate: 2016-02-13 22:58:29\ncategories: 韦编三绝\n---\n买了kindle已经看了七八本书了，其他的书在博客改版后都陆陆续续写了书评了，但是我居然还没有给《三体》写读后感。这两天，世界突然被一个发现震动了：[引力波](http://www.guokr.com/article/441177/)被证实了。虽然不知道其中的具体含义，但是可能真的如人们所说，引力波的发现可能会像万有引力被发现一样给基础物理学带来飞速的发展。\n\n简单地说，我最初是因为急着看《三体》才去淘宝买kindle的。对于一个长大了的科幻迷来说，《三体》绝对是不可多得的好书，并且它是国产的，这是我最惊讶的一个部分。不是我看不起国内小说，国内小说总体来说武侠传奇的比较多，描写未来的确实罕见，而能这样引人入胜的，更是凤毛麟角。当然也有可能是由于我读的小说比较少的缘故吧，这部小说在开篇就把我吸引进去了，废寝忘食地看了一个星期。\n\n全书分为三个部分：《地球往事》、《黑暗森林》、《死神永生》，其中最精彩的部分莫过于黑暗森林了，把宗教、伦理、科幻、爱情等统统融合在一起，体现了其宇宙社会学的深层含义。看了很多的书评，负面评价的原因主要有二，一是叙事手法上，二是科幻知识上相对低级。前者我不好评价，毕竟我对这方面没有研究，我只知道在阅读的时候我被深深地吸入进去了，只知道这本书的想象力至少在国内是极少见到的。(不过说实话，最后一部的结尾，确实有点粗糙，感觉就像是《火影忍者》一样，匆匆结尾，看起来像是文思枯竭了一样)对于后者，我只能说，正式因为此书所用到的物理知识对于一个大学生的我来说，刚好能够理解，不会显得晦涩难懂，我想，这已经很成功了。\n\n**黑暗森林法则**：宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景。  \n佩服作者的想象力，以前的我真的从没想过这一个层面的东西，认为我们就应该一直寻找宇宙中的智慧生物，去寻找另一个文明，现在看来，一切都太艰难了，宇宙中处处存在着猜疑链，你永远不知道另一个文明是怎么看你的，不要像程圣母(程心)一样只用善良的思维去思考这个世界。\n\n**射手假说**：有一名神枪手，在一个靶子上每隔十厘米打一个洞。设想这个靶子的平面上生活着一种二维智能生物，它们中的科学家在对自己的宇宙进行观察后，发现了一个伟大的定律： “宇宙每隔十厘米，必然会有一个洞。”它们把这个神枪手一时兴起的随意行为，看成了自己宇宙中的铁律。   \n**农场主假说**：一个农场里有一一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。  \n这两个假说，我也只能仰望了，看过那么多科幻小说和纪录片，我也没能跳出这个牢笼，从外面的世界思考，比如这里，如果调到比我们更高维度来思考，他们也会不会认为我们只是纸上的一些小人儿呢。\n\n## 消灭人类暴政，世界属于三体\n## 一切都会逝去，只有死神永生\n\n推荐观看：  \n[神剪辑！12分钟看完90万字科幻小说神作《三体》\n](https://www.youtube.com/watch?v=HL_o_if5it0)  \n[我的三体(国内粉丝使用minecraft制作)](http://www.bilibili.com/bangumi/i/1704/)\n","slug":"santi","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgw005j9vnzp9x3dk73","content":"<p>买了kindle已经看了七八本书了，其他的书在博客改版后都陆陆续续写了书评了，但是我居然还没有给《三体》写读后感。这两天，世界突然被一个发现震动了：<a href=\"http://www.guokr.com/article/441177/\" target=\"_blank\" rel=\"external\">引力波</a>被证实了。虽然不知道其中的具体含义，但是可能真的如人们所说，引力波的发现可能会像万有引力被发现一样给基础物理学带来飞速的发展。</p>\n<p>简单地说，我最初是因为急着看《三体》才去淘宝买kindle的。对于一个长大了的科幻迷来说，《三体》绝对是不可多得的好书，并且它是国产的，这是我最惊讶的一个部分。不是我看不起国内小说，国内小说总体来说武侠传奇的比较多，描写未来的确实罕见，而能这样引人入胜的，更是凤毛麟角。当然也有可能是由于我读的小说比较少的缘故吧，这部小说在开篇就把我吸引进去了，废寝忘食地看了一个星期。</p>\n<p>全书分为三个部分：《地球往事》、《黑暗森林》、《死神永生》，其中最精彩的部分莫过于黑暗森林了，把宗教、伦理、科幻、爱情等统统融合在一起，体现了其宇宙社会学的深层含义。看了很多的书评，负面评价的原因主要有二，一是叙事手法上，二是科幻知识上相对低级。前者我不好评价，毕竟我对这方面没有研究，我只知道在阅读的时候我被深深地吸入进去了，只知道这本书的想象力至少在国内是极少见到的。(不过说实话，最后一部的结尾，确实有点粗糙，感觉就像是《火影忍者》一样，匆匆结尾，看起来像是文思枯竭了一样)对于后者，我只能说，正式因为此书所用到的物理知识对于一个大学生的我来说，刚好能够理解，不会显得晦涩难懂，我想，这已经很成功了。</p>\n<p><strong>黑暗森林法则</strong>：宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景。<br>佩服作者的想象力，以前的我真的从没想过这一个层面的东西，认为我们就应该一直寻找宇宙中的智慧生物，去寻找另一个文明，现在看来，一切都太艰难了，宇宙中处处存在着猜疑链，你永远不知道另一个文明是怎么看你的，不要像程圣母(程心)一样只用善良的思维去思考这个世界。</p>\n<p><strong>射手假说</strong>：有一名神枪手，在一个靶子上每隔十厘米打一个洞。设想这个靶子的平面上生活着一种二维智能生物，它们中的科学家在对自己的宇宙进行观察后，发现了一个伟大的定律： “宇宙每隔十厘米，必然会有一个洞。”它们把这个神枪手一时兴起的随意行为，看成了自己宇宙中的铁律。<br><strong>农场主假说</strong>：一个农场里有一一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。<br>这两个假说，我也只能仰望了，看过那么多科幻小说和纪录片，我也没能跳出这个牢笼，从外面的世界思考，比如这里，如果调到比我们更高维度来思考，他们也会不会认为我们只是纸上的一些小人儿呢。</p>\n<h2 id=\"消灭人类暴政，世界属于三体\"><a href=\"#消灭人类暴政，世界属于三体\" class=\"headerlink\" title=\"消灭人类暴政，世界属于三体\"></a>消灭人类暴政，世界属于三体</h2><h2 id=\"一切都会逝去，只有死神永生\"><a href=\"#一切都会逝去，只有死神永生\" class=\"headerlink\" title=\"一切都会逝去，只有死神永生\"></a>一切都会逝去，只有死神永生</h2><p>推荐观看：<br><a href=\"https://www.youtube.com/watch?v=HL_o_if5it0\" target=\"_blank\" rel=\"external\">神剪辑！12分钟看完90万字科幻小说神作《三体》\n</a><br><a href=\"http://www.bilibili.com/bangumi/i/1704/\" target=\"_blank\" rel=\"external\">我的三体(国内粉丝使用minecraft制作)</a></p>\n","excerpt":"","more":"<p>买了kindle已经看了七八本书了，其他的书在博客改版后都陆陆续续写了书评了，但是我居然还没有给《三体》写读后感。这两天，世界突然被一个发现震动了：<a href=\"http://www.guokr.com/article/441177/\">引力波</a>被证实了。虽然不知道其中的具体含义，但是可能真的如人们所说，引力波的发现可能会像万有引力被发现一样给基础物理学带来飞速的发展。</p>\n<p>简单地说，我最初是因为急着看《三体》才去淘宝买kindle的。对于一个长大了的科幻迷来说，《三体》绝对是不可多得的好书，并且它是国产的，这是我最惊讶的一个部分。不是我看不起国内小说，国内小说总体来说武侠传奇的比较多，描写未来的确实罕见，而能这样引人入胜的，更是凤毛麟角。当然也有可能是由于我读的小说比较少的缘故吧，这部小说在开篇就把我吸引进去了，废寝忘食地看了一个星期。</p>\n<p>全书分为三个部分：《地球往事》、《黑暗森林》、《死神永生》，其中最精彩的部分莫过于黑暗森林了，把宗教、伦理、科幻、爱情等统统融合在一起，体现了其宇宙社会学的深层含义。看了很多的书评，负面评价的原因主要有二，一是叙事手法上，二是科幻知识上相对低级。前者我不好评价，毕竟我对这方面没有研究，我只知道在阅读的时候我被深深地吸入进去了，只知道这本书的想象力至少在国内是极少见到的。(不过说实话，最后一部的结尾，确实有点粗糙，感觉就像是《火影忍者》一样，匆匆结尾，看起来像是文思枯竭了一样)对于后者，我只能说，正式因为此书所用到的物理知识对于一个大学生的我来说，刚好能够理解，不会显得晦涩难懂，我想，这已经很成功了。</p>\n<p><strong>黑暗森林法则</strong>：宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景。<br>佩服作者的想象力，以前的我真的从没想过这一个层面的东西，认为我们就应该一直寻找宇宙中的智慧生物，去寻找另一个文明，现在看来，一切都太艰难了，宇宙中处处存在着猜疑链，你永远不知道另一个文明是怎么看你的，不要像程圣母(程心)一样只用善良的思维去思考这个世界。</p>\n<p><strong>射手假说</strong>：有一名神枪手，在一个靶子上每隔十厘米打一个洞。设想这个靶子的平面上生活着一种二维智能生物，它们中的科学家在对自己的宇宙进行观察后，发现了一个伟大的定律： “宇宙每隔十厘米，必然会有一个洞。”它们把这个神枪手一时兴起的随意行为，看成了自己宇宙中的铁律。<br><strong>农场主假说</strong>：一个农场里有一一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。<br>这两个假说，我也只能仰望了，看过那么多科幻小说和纪录片，我也没能跳出这个牢笼，从外面的世界思考，比如这里，如果调到比我们更高维度来思考，他们也会不会认为我们只是纸上的一些小人儿呢。</p>\n<h2 id=\"消灭人类暴政，世界属于三体\"><a href=\"#消灭人类暴政，世界属于三体\" class=\"headerlink\" title=\"消灭人类暴政，世界属于三体\"></a>消灭人类暴政，世界属于三体</h2><h2 id=\"一切都会逝去，只有死神永生\"><a href=\"#一切都会逝去，只有死神永生\" class=\"headerlink\" title=\"一切都会逝去，只有死神永生\"></a>一切都会逝去，只有死神永生</h2><p>推荐观看：<br><a href=\"https://www.youtube.com/watch?v=HL_o_if5it0\">神剪辑！12分钟看完90万字科幻小说神作《三体》\n</a><br><a href=\"http://www.bilibili.com/bangumi/i/1704/\">我的三体(国内粉丝使用minecraft制作)</a></p>\n"},{"title":"SSL各种格式证书的转换(JKS to PEM, KEY, CRT)","date":"2015-08-04T03:05:06.000Z","_content":"原文链接：<http://ju.outofmemory.cn/entry/108566>\n\n_fuck，最讨厌java了，有同事说JKS是Java特有的东西，所以必须调用Java才能使用，but，I use Python，nothing is im\npossible，发现使用requests来直接调用其它格式的证书文件就行，当然，Python也可以用pyjks包来将jks转换为其它格式，但没必要那样做，\n因为直接用ssl工具转换就可以一劳永逸了。_\n\nJKS(Java\nKeyStore)是Java的一个证书仓库，包括授权整数和公钥整数等。JDK提供了一个工具keytool用于管理keystore。转换步骤：\n\n  1. 使用keytool导出成PKCS12格式：\n\n        # keytool -importkeystore -srckeystore server.jks -destkeystore server.p12 -srcstoretype jks -deststoretype pkcs12\n    输入目标密钥库口令:  \n\n    再次输入新口令:\n    输入源密钥库口令:  \n\n    已成功导入别名 ca_root 的条目。\n    已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消\n\n  2. 生成pem证书(包含了key，server证书和ca证书)：\n\n        # 生成key 加密的pem证书\n    $ openssl pkcs12 -in server.p12 -out server.pem\n    Enter Import Password:\n    MAC verified OK\n    Enter PEM pass phrase:\n    Verifying - Enter PEM pass phrase:\n\n\n\n\n    # 生成key 非加密的pem证书\n\n\n\n\n    $ openssl pkcs12 -nodes -in server.p12 -out server.pem\n    Enter Import Password:\n    MAC verified OK\n\n  3. 单独导出key：\n\n        # 生成加密的key\n    $ openssl pkcs12 -in tankywoo.p12  -nocerts -out server.key\n    Enter Import Password:\n    MAC verified OK\n    Enter PEM pass phrase:\n    Verifying - Enter PEM pass phrase:\n\n\n\n\n    # 生成非加密的key\n\n\n\n\n    $ openssl pkcs12 -in tankywoo.p12 -nocerts -nodes -out server.key\n    Enter Import Password:\n    MAC verified OK\n\n  4. 单独导出server证书：\n\n        $ openssl pkcs12 -in server.p12  -nokeys -clcerts -out server.crt\n    Enter Import Password:\n    MAC verified OK\n\n  5. 单独导出ca证书：\n\n        $ openssl pkcs12 -in server.p12  -nokeys -cacerts -out ca.crt\n    Enter Import Password:\n    MAC verified OK\n\n# TroubleShooting：\n\n1.至于原文中出现的导入ca_root证书出现错误，它那个方法貌似不管用，这里建议将Java升级到Java8即可成功导入。\n\n2.在Python中使用ssl时(无论是用httplib、ssl还是requests)，可能出现以下错误：\n\n\n\n    Traceback (most recent call last):\n      File \"client.py\", line 10, in <module>\n        ssl_sock.connect(('', 9000))\n      File \"/Users/amk/source/p/python/Lib/ssl.py\", line 204, in connect\n        self.ca_certs)\n    ssl.SSLError: [Errno 0] _ssl.c:327: error:00000000:lib(0):func(0):reason(0)\n\n根本原因就是提供的证书是错误的\n","source":"_posts/ssl-jks-to-pem.md","raw":"---\ntitle: \"SSL各种格式证书的转换(JKS to PEM, KEY, CRT)\"\ndate: 2015-08-04 11:05:06\ncategories: 编程之路\n---\n原文链接：<http://ju.outofmemory.cn/entry/108566>\n\n_fuck，最讨厌java了，有同事说JKS是Java特有的东西，所以必须调用Java才能使用，but，I use Python，nothing is im\npossible，发现使用requests来直接调用其它格式的证书文件就行，当然，Python也可以用pyjks包来将jks转换为其它格式，但没必要那样做，\n因为直接用ssl工具转换就可以一劳永逸了。_\n\nJKS(Java\nKeyStore)是Java的一个证书仓库，包括授权整数和公钥整数等。JDK提供了一个工具keytool用于管理keystore。转换步骤：\n\n  1. 使用keytool导出成PKCS12格式：\n\n        # keytool -importkeystore -srckeystore server.jks -destkeystore server.p12 -srcstoretype jks -deststoretype pkcs12\n    输入目标密钥库口令:  \n\n    再次输入新口令:\n    输入源密钥库口令:  \n\n    已成功导入别名 ca_root 的条目。\n    已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消\n\n  2. 生成pem证书(包含了key，server证书和ca证书)：\n\n        # 生成key 加密的pem证书\n    $ openssl pkcs12 -in server.p12 -out server.pem\n    Enter Import Password:\n    MAC verified OK\n    Enter PEM pass phrase:\n    Verifying - Enter PEM pass phrase:\n\n\n\n\n    # 生成key 非加密的pem证书\n\n\n\n\n    $ openssl pkcs12 -nodes -in server.p12 -out server.pem\n    Enter Import Password:\n    MAC verified OK\n\n  3. 单独导出key：\n\n        # 生成加密的key\n    $ openssl pkcs12 -in tankywoo.p12  -nocerts -out server.key\n    Enter Import Password:\n    MAC verified OK\n    Enter PEM pass phrase:\n    Verifying - Enter PEM pass phrase:\n\n\n\n\n    # 生成非加密的key\n\n\n\n\n    $ openssl pkcs12 -in tankywoo.p12 -nocerts -nodes -out server.key\n    Enter Import Password:\n    MAC verified OK\n\n  4. 单独导出server证书：\n\n        $ openssl pkcs12 -in server.p12  -nokeys -clcerts -out server.crt\n    Enter Import Password:\n    MAC verified OK\n\n  5. 单独导出ca证书：\n\n        $ openssl pkcs12 -in server.p12  -nokeys -cacerts -out ca.crt\n    Enter Import Password:\n    MAC verified OK\n\n# TroubleShooting：\n\n1.至于原文中出现的导入ca_root证书出现错误，它那个方法貌似不管用，这里建议将Java升级到Java8即可成功导入。\n\n2.在Python中使用ssl时(无论是用httplib、ssl还是requests)，可能出现以下错误：\n\n\n\n    Traceback (most recent call last):\n      File \"client.py\", line 10, in <module>\n        ssl_sock.connect(('', 9000))\n      File \"/Users/amk/source/p/python/Lib/ssl.py\", line 204, in connect\n        self.ca_certs)\n    ssl.SSLError: [Errno 0] _ssl.c:327: error:00000000:lib(0):func(0):reason(0)\n\n根本原因就是提供的证书是错误的\n","slug":"ssl-jks-to-pem","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgx005l9vnzikdsn6z0","content":"<p>原文链接：<a href=\"http://ju.outofmemory.cn/entry/108566\" target=\"_blank\" rel=\"external\">http://ju.outofmemory.cn/entry/108566</a></p>\n<p><em>fuck，最讨厌java了，有同事说JKS是Java特有的东西，所以必须调用Java才能使用，but，I use Python，nothing is im<br>possible，发现使用requests来直接调用其它格式的证书文件就行，当然，Python也可以用pyjks包来将jks转换为其它格式，但没必要那样做，<br>因为直接用ssl工具转换就可以一劳永逸了。</em></p>\n<p>JKS(Java<br>KeyStore)是Java的一个证书仓库，包括授权整数和公钥整数等。JDK提供了一个工具keytool用于管理keystore。转换步骤：</p>\n<ol>\n<li><p>使用keytool导出成PKCS12格式：</p>\n<h1 id=\"keytool-importkeystore-srckeystore-server-jks-destkeystore-server-p12-srcstoretype-jks-deststoretype-pkcs12\"><a href=\"#keytool-importkeystore-srckeystore-server-jks-destkeystore-server-p12-srcstoretype-jks-deststoretype-pkcs12\" class=\"headerlink\" title=\"keytool -importkeystore -srckeystore server.jks -destkeystore server.p12 -srcstoretype jks -deststoretype pkcs12\"></a>keytool -importkeystore -srckeystore server.jks -destkeystore server.p12 -srcstoretype jks -deststoretype pkcs12</h1><p>输入目标密钥库口令:  </p>\n<p>再次输入新口令:<br>输入源密钥库口令:  </p>\n<p>已成功导入别名 ca_root 的条目。<br>已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消</p>\n</li>\n<li><p>生成pem证书(包含了key，server证书和ca证书)：</p>\n<h1 id=\"生成key-加密的pem证书\"><a href=\"#生成key-加密的pem证书\" class=\"headerlink\" title=\"生成key 加密的pem证书\"></a>生成key 加密的pem证书</h1><p>$ openssl pkcs12 -in server.p12 -out server.pem<br>Enter Import Password:<br>MAC verified OK<br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:</p>\n</li>\n</ol>\n<pre><code># 生成key 非加密的pem证书\n\n\n\n\n$ openssl pkcs12 -nodes -in server.p12 -out server.pem\nEnter Import Password:\nMAC verified OK\n</code></pre><ol>\n<li><p>单独导出key：</p>\n<h1 id=\"生成加密的key\"><a href=\"#生成加密的key\" class=\"headerlink\" title=\"生成加密的key\"></a>生成加密的key</h1><p>$ openssl pkcs12 -in tankywoo.p12  -nocerts -out server.key<br>Enter Import Password:<br>MAC verified OK<br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:</p>\n</li>\n</ol>\n<pre><code># 生成非加密的key\n\n\n\n\n$ openssl pkcs12 -in tankywoo.p12 -nocerts -nodes -out server.key\nEnter Import Password:\nMAC verified OK\n</code></pre><ol>\n<li><p>单独导出server证书：</p>\n<p>   $ openssl pkcs12 -in server.p12  -nokeys -clcerts -out server.crt<br>Enter Import Password:<br>MAC verified OK</p>\n</li>\n<li><p>单独导出ca证书：</p>\n<p>   $ openssl pkcs12 -in server.p12  -nokeys -cacerts -out ca.crt<br>Enter Import Password:<br>MAC verified OK</p>\n</li>\n</ol>\n<h1 id=\"TroubleShooting：\"><a href=\"#TroubleShooting：\" class=\"headerlink\" title=\"TroubleShooting：\"></a>TroubleShooting：</h1><p>1.至于原文中出现的导入ca_root证书出现错误，它那个方法貌似不管用，这里建议将Java升级到Java8即可成功导入。</p>\n<p>2.在Python中使用ssl时(无论是用httplib、ssl还是requests)，可能出现以下错误：</p>\n<pre><code>Traceback (most recent call last):\n  File &quot;client.py&quot;, line 10, in &lt;module&gt;\n    ssl_sock.connect((&apos;&apos;, 9000))\n  File &quot;/Users/amk/source/p/python/Lib/ssl.py&quot;, line 204, in connect\n    self.ca_certs)\nssl.SSLError: [Errno 0] _ssl.c:327: error:00000000:lib(0):func(0):reason(0)\n</code></pre><p>根本原因就是提供的证书是错误的</p>\n","excerpt":"","more":"<p>原文链接：<a href=\"http://ju.outofmemory.cn/entry/108566\">http://ju.outofmemory.cn/entry/108566</a></p>\n<p><em>fuck，最讨厌java了，有同事说JKS是Java特有的东西，所以必须调用Java才能使用，but，I use Python，nothing is im<br>possible，发现使用requests来直接调用其它格式的证书文件就行，当然，Python也可以用pyjks包来将jks转换为其它格式，但没必要那样做，<br>因为直接用ssl工具转换就可以一劳永逸了。</em></p>\n<p>JKS(Java<br>KeyStore)是Java的一个证书仓库，包括授权整数和公钥整数等。JDK提供了一个工具keytool用于管理keystore。转换步骤：</p>\n<ol>\n<li><p>使用keytool导出成PKCS12格式：</p>\n<h1 id=\"keytool-importkeystore-srckeystore-server-jks-destkeystore-server-p12-srcstoretype-jks-deststoretype-pkcs12\"><a href=\"#keytool-importkeystore-srckeystore-server-jks-destkeystore-server-p12-srcstoretype-jks-deststoretype-pkcs12\" class=\"headerlink\" title=\"keytool -importkeystore -srckeystore server.jks -destkeystore server.p12 -srcstoretype jks -deststoretype pkcs12\"></a>keytool -importkeystore -srckeystore server.jks -destkeystore server.p12 -srcstoretype jks -deststoretype pkcs12</h1><p>输入目标密钥库口令:  </p>\n<p>再次输入新口令:<br>输入源密钥库口令:  </p>\n<p>已成功导入别名 ca_root 的条目。<br>已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消</p>\n</li>\n<li><p>生成pem证书(包含了key，server证书和ca证书)：</p>\n<h1 id=\"生成key-加密的pem证书\"><a href=\"#生成key-加密的pem证书\" class=\"headerlink\" title=\"生成key 加密的pem证书\"></a>生成key 加密的pem证书</h1><p>$ openssl pkcs12 -in server.p12 -out server.pem<br>Enter Import Password:<br>MAC verified OK<br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:</p>\n</li>\n</ol>\n<pre><code># 生成key 非加密的pem证书\n\n\n\n\n$ openssl pkcs12 -nodes -in server.p12 -out server.pem\nEnter Import Password:\nMAC verified OK\n</code></pre><ol>\n<li><p>单独导出key：</p>\n<h1 id=\"生成加密的key\"><a href=\"#生成加密的key\" class=\"headerlink\" title=\"生成加密的key\"></a>生成加密的key</h1><p>$ openssl pkcs12 -in tankywoo.p12  -nocerts -out server.key<br>Enter Import Password:<br>MAC verified OK<br>Enter PEM pass phrase:<br>Verifying - Enter PEM pass phrase:</p>\n</li>\n</ol>\n<pre><code># 生成非加密的key\n\n\n\n\n$ openssl pkcs12 -in tankywoo.p12 -nocerts -nodes -out server.key\nEnter Import Password:\nMAC verified OK\n</code></pre><ol>\n<li><p>单独导出server证书：</p>\n<p>   $ openssl pkcs12 -in server.p12  -nokeys -clcerts -out server.crt<br>Enter Import Password:<br>MAC verified OK</p>\n</li>\n<li><p>单独导出ca证书：</p>\n<p>   $ openssl pkcs12 -in server.p12  -nokeys -cacerts -out ca.crt<br>Enter Import Password:<br>MAC verified OK</p>\n</li>\n</ol>\n<h1 id=\"TroubleShooting：\"><a href=\"#TroubleShooting：\" class=\"headerlink\" title=\"TroubleShooting：\"></a>TroubleShooting：</h1><p>1.至于原文中出现的导入ca_root证书出现错误，它那个方法貌似不管用，这里建议将Java升级到Java8即可成功导入。</p>\n<p>2.在Python中使用ssl时(无论是用httplib、ssl还是requests)，可能出现以下错误：</p>\n<pre><code>Traceback (most recent call last):\n  File &quot;client.py&quot;, line 10, in &lt;module&gt;\n    ssl_sock.connect((&apos;&apos;, 9000))\n  File &quot;/Users/amk/source/p/python/Lib/ssl.py&quot;, line 204, in connect\n    self.ca_certs)\nssl.SSLError: [Errno 0] _ssl.c:327: error:00000000:lib(0):func(0):reason(0)\n</code></pre><p>根本原因就是提供的证书是错误的</p>\n"},{"title":"[转]RESTful API设计指南","date":"2015-04-11T15:24:07.000Z","_content":"原文地址：[阮一峰的网络日志](http://www.ruanyifeng.com/blog/2014/05/restful_api.html \"Link:\nhttp://www.ruanyifeng.com/blog/2014/05/restful_api.html\" )\n\n网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备......）。\n\n因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现\"[API First](http://x.vindicosu\nite.com/click/fbfpc=1;v=5;m=3;l=401071;c=776283;b=3368032;dct=http\\%3A//www.goo\ngle.com.hk/search\\%3Fq\\%3DAPI+first)\"的设计思想。[RESTful API](http://en.wikipedia.org\n/wiki/Representational_state_transfer)是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇[《理解RES\nTful架构》](http://www.ruanyifeng.com/blog/2011/09/restful.html)，探讨如何理解这个概念。\n\n今天，我将介绍RESTful\nAPI的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（[1](http://codeplanet.io/principles-\ngood-restful-api-design/)，[2](https://bourgeois.me/rest/)）。\n\n# 一、协议\n\nAPI与用户的通信协议，总是使用[HTTPs协议](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n。\n\n# 二、域名\n\n应该尽量将API部署在专用域名之下。\n\n```\n    https://api.example.com\n```\n\n如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。\n\n```\n    https://example.org/api/\n```\n\n#  三、版本（Versioning）\n\n应该将API的版本号放入URL。\n\n```\n    https://api.example.com/v1/\n```\n\n另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。[Github](https://developer.github.com/v3/m\nedia/#request-specific-version)采用这种做法。\n\n# 四、路径（Endpoint）\n\n路径又称\"终点\"（endpoint），表示API的具体网址。\n\n在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库\n中的表都是同种记录的\"集合\"（collection），所以API中的名词也应该使用复数。\n\n举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。\n\n  * <https://api.example.com/v1/zoos>\n  * <https://api.example.com/v1/animals>\n  * <https://api.example.com/v1/employees>\n\n# 五、HTTP动词\n\n对于资源的具体操作类型，由HTTP动词表示。\n\n常用的HTTP动词有下面五个（括号里是对应的SQL命令）。\n\n  * GET（SELECT）：从服务器取出资源（一项或多项）。\n  * POST（CREATE）：在服务器新建一个资源。\n  * PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\n  * PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\n  * DELETE（DELETE）：从服务器删除资源。\n还有两个不常用的HTTP动词。\n\n  * HEAD：获取资源的元数据。\n  * OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n下面是一些例子。\n\n  * GET /zoos：列出所有动物园\n  * POST /zoos：新建一个动物园\n  * GET /zoos/ID：获取某个指定动物园的信息\n  * PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）\n  * PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\n  * DELETE /zoos/ID：删除某个动物园\n  * GET /zoos/ID/animals：列出某个指定动物园的所有动物\n  * DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\n\n# 六、过滤信息（Filltering）\n\n如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。\n\n下面是一些常见的参数。\n\n  * ?limit=10：指定返回记录的数量\n  * ?offset=10：指定返回记录的开始位置。\n  * ?page=2&per_page=100：指定第几页，以及每页的记录数。\n  * ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n  * ?animal_type_id=1：指定筛选条件\n参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET\n/animals?zoo_id=ID 的含义是相同的。\n\n# 七、状态码(Status Codes)\n\n服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。\n\n  * 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\n  * 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n  * 202 Accepted - [_]：表示一个请求已经进入后台排队（异步任务）\n  * 204 NO CONTENT - [DELETE]：用户删除数据成功。\n  * 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n  * 401 Unauthorized - [_]：表示用户没有权限（令牌、用户名、密码错误）。\n  * 403 Forbidden - [_] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n  * 404 NOT FOUND - [_]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n  * 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n  * 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n  * 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n  * 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n状态码的完全列表参见[这里](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)。\n\n# 八、错误处理（Error handling）\n\n如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。\n\n```\n    {\n    \terror: \"Invalid API key\"\n    }\n```\n\n# 九、返回结果\n\n针对不同操作，服务器向用户返回的结果应该符合以下规范。\n\n  * GET /collection：返回资源对象的列表（数组）\n  * GET /collection/resource：返回单个资源对象\n  * POST /collection：返回新生成的资源对象\n  * PUT /collection/resource：返回完整的资源对象\n  * PATCH /collection/resource：返回完整的资源对象\n  * DELETE /collection/resource：返回一个空文档\n\n# 十、Hypermedia API\n\nRESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。\n\n比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。\n\n```\n    {\"link\": {\n    \"rel\": \"collection https://www.example.com/zoos\",\n    \"href\": \"https://api.example.com/zoos\",\n    \"title\": \"List of zoos\",\n    \"type\": \"application/vnd.yourformat+json\"\n    }}\n```\n\n上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给\n出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。\n\nHypermedia API的设计被称为[HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)。Github的API\n就是这种设计，访问[api.github.com](https://api.github.com/)会得到一个所有可用API的网址列表。\n\n```\n    {\n    \"current_user_url\": \"https://api.github.com/user\",\n    \"authorizations_url\": \"https://api.github.com/authorizations\",\n    // ...\n    }\n```\n\n从上面可以看到，如果想获取当前用户的信息，应该去访问[api.github.com/user](https://api.github.com/user)，然\n后就得到了下面结果。\n\n```\n    {\n    \"message\": \"Requires authentication\",\n    \"documentation_url\": \"https://developer.github.com/v3\"\n    }\n```\n\n上面代码表示，服务器给出了提示信息，以及文档的网址。\n\n# 十一、其他\n\n（1）API的身份认证应该使用[OAuth\n2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)框架。\n\n（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。\n\n（完）\n\n## 个人总结\nRESTful设计风格是仅仅针对API的设计，其他的，比如新建功能页面的url还是需要自己另外定义的，当然可以在后面直接加参数，比如`GET /zoos?add=1`\n","source":"_posts/restful-api.md","raw":"---\ntitle: \"[转]RESTful API设计指南\"\ndate: 2015-04-11 23:24:07\ncategories: 编程之路\n---\n原文地址：[阮一峰的网络日志](http://www.ruanyifeng.com/blog/2014/05/restful_api.html \"Link:\nhttp://www.ruanyifeng.com/blog/2014/05/restful_api.html\" )\n\n网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备......）。\n\n因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现\"[API First](http://x.vindicosu\nite.com/click/fbfpc=1;v=5;m=3;l=401071;c=776283;b=3368032;dct=http\\%3A//www.goo\ngle.com.hk/search\\%3Fq\\%3DAPI+first)\"的设计思想。[RESTful API](http://en.wikipedia.org\n/wiki/Representational_state_transfer)是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇[《理解RES\nTful架构》](http://www.ruanyifeng.com/blog/2011/09/restful.html)，探讨如何理解这个概念。\n\n今天，我将介绍RESTful\nAPI的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（[1](http://codeplanet.io/principles-\ngood-restful-api-design/)，[2](https://bourgeois.me/rest/)）。\n\n# 一、协议\n\nAPI与用户的通信协议，总是使用[HTTPs协议](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n。\n\n# 二、域名\n\n应该尽量将API部署在专用域名之下。\n\n```\n    https://api.example.com\n```\n\n如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。\n\n```\n    https://example.org/api/\n```\n\n#  三、版本（Versioning）\n\n应该将API的版本号放入URL。\n\n```\n    https://api.example.com/v1/\n```\n\n另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。[Github](https://developer.github.com/v3/m\nedia/#request-specific-version)采用这种做法。\n\n# 四、路径（Endpoint）\n\n路径又称\"终点\"（endpoint），表示API的具体网址。\n\n在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库\n中的表都是同种记录的\"集合\"（collection），所以API中的名词也应该使用复数。\n\n举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。\n\n  * <https://api.example.com/v1/zoos>\n  * <https://api.example.com/v1/animals>\n  * <https://api.example.com/v1/employees>\n\n# 五、HTTP动词\n\n对于资源的具体操作类型，由HTTP动词表示。\n\n常用的HTTP动词有下面五个（括号里是对应的SQL命令）。\n\n  * GET（SELECT）：从服务器取出资源（一项或多项）。\n  * POST（CREATE）：在服务器新建一个资源。\n  * PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\n  * PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\n  * DELETE（DELETE）：从服务器删除资源。\n还有两个不常用的HTTP动词。\n\n  * HEAD：获取资源的元数据。\n  * OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n下面是一些例子。\n\n  * GET /zoos：列出所有动物园\n  * POST /zoos：新建一个动物园\n  * GET /zoos/ID：获取某个指定动物园的信息\n  * PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）\n  * PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）\n  * DELETE /zoos/ID：删除某个动物园\n  * GET /zoos/ID/animals：列出某个指定动物园的所有动物\n  * DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\n\n# 六、过滤信息（Filltering）\n\n如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。\n\n下面是一些常见的参数。\n\n  * ?limit=10：指定返回记录的数量\n  * ?offset=10：指定返回记录的开始位置。\n  * ?page=2&per_page=100：指定第几页，以及每页的记录数。\n  * ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n  * ?animal_type_id=1：指定筛选条件\n参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET\n/animals?zoo_id=ID 的含义是相同的。\n\n# 七、状态码(Status Codes)\n\n服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。\n\n  * 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。\n  * 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。\n  * 202 Accepted - [_]：表示一个请求已经进入后台排队（异步任务）\n  * 204 NO CONTENT - [DELETE]：用户删除数据成功。\n  * 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。\n  * 401 Unauthorized - [_]：表示用户没有权限（令牌、用户名、密码错误）。\n  * 403 Forbidden - [_] 表示用户得到授权（与401错误相对），但是访问是被禁止的。\n  * 404 NOT FOUND - [_]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。\n  * 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。\n  * 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。\n  * 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。\n  * 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n状态码的完全列表参见[这里](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)。\n\n# 八、错误处理（Error handling）\n\n如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。\n\n```\n    {\n    \terror: \"Invalid API key\"\n    }\n```\n\n# 九、返回结果\n\n针对不同操作，服务器向用户返回的结果应该符合以下规范。\n\n  * GET /collection：返回资源对象的列表（数组）\n  * GET /collection/resource：返回单个资源对象\n  * POST /collection：返回新生成的资源对象\n  * PUT /collection/resource：返回完整的资源对象\n  * PATCH /collection/resource：返回完整的资源对象\n  * DELETE /collection/resource：返回一个空文档\n\n# 十、Hypermedia API\n\nRESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。\n\n比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。\n\n```\n    {\"link\": {\n    \"rel\": \"collection https://www.example.com/zoos\",\n    \"href\": \"https://api.example.com/zoos\",\n    \"title\": \"List of zoos\",\n    \"type\": \"application/vnd.yourformat+json\"\n    }}\n```\n\n上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给\n出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。\n\nHypermedia API的设计被称为[HATEOAS](http://en.wikipedia.org/wiki/HATEOAS)。Github的API\n就是这种设计，访问[api.github.com](https://api.github.com/)会得到一个所有可用API的网址列表。\n\n```\n    {\n    \"current_user_url\": \"https://api.github.com/user\",\n    \"authorizations_url\": \"https://api.github.com/authorizations\",\n    // ...\n    }\n```\n\n从上面可以看到，如果想获取当前用户的信息，应该去访问[api.github.com/user](https://api.github.com/user)，然\n后就得到了下面结果。\n\n```\n    {\n    \"message\": \"Requires authentication\",\n    \"documentation_url\": \"https://developer.github.com/v3\"\n    }\n```\n\n上面代码表示，服务器给出了提示信息，以及文档的网址。\n\n# 十一、其他\n\n（1）API的身份认证应该使用[OAuth\n2.0](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)框架。\n\n（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。\n\n（完）\n\n## 个人总结\nRESTful设计风格是仅仅针对API的设计，其他的，比如新建功能页面的url还是需要自己另外定义的，当然可以在后面直接加参数，比如`GET /zoos?add=1`\n","slug":"restful-api","published":1,"updated":"2016-04-13T06:59:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pgz005n9vnztcwkhf78","content":"<p>原文地址：<a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" title=\"Link:\nhttp://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"external\">阮一峰的网络日志</a></p>\n<p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p>\n<p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现”<a href=\"http://x.vindicosu\nite.com/click/fbfpc=1;v=5;m=3;l=401071;c=776283;b=3368032;dct=http\\%3A//www.goo\ngle.com.hk/search\\%3Fq\\%3DAPI+first\" target=\"_blank\" rel=\"external\">API First</a>“的设计思想。<a href=\"http://en.wikipedia.org\n/wiki/Representational_state_transfer\" target=\"_blank\" rel=\"external\">RESTful API</a>是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"external\">《理解RES<br>Tful架构》</a>，探讨如何理解这个概念。</p>\n<p>今天，我将介绍RESTful<br>API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（<a href=\"http://codeplanet.io/principles-\ngood-restful-api-design/\" target=\"_blank\" rel=\"external\">1</a>，<a href=\"https://bourgeois.me/rest/\" target=\"_blank\" rel=\"external\">2</a>）。</p>\n<h1 id=\"一、协议\"><a href=\"#一、协议\" class=\"headerlink\" title=\"一、协议\"></a>一、协议</h1><p>API与用户的通信协议，总是使用<a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">HTTPs协议</a><br>。</p>\n<h1 id=\"二、域名\"><a href=\"#二、域名\" class=\"headerlink\" title=\"二、域名\"></a>二、域名</h1><p>应该尽量将API部署在专用域名之下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.example.com</div></pre></td></tr></table></figure>\n<p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://example.org/api/</div></pre></td></tr></table></figure>\n<h1 id=\"三、版本（Versioning）\"><a href=\"#三、版本（Versioning）\" class=\"headerlink\" title=\"三、版本（Versioning）\"></a>三、版本（Versioning）</h1><p>应该将API的版本号放入URL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.example.com/v1/</div></pre></td></tr></table></figure>\n<p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href=\"https://developer.github.com/v3/m\nedia/#request-specific-version\" target=\"_blank\" rel=\"external\">Github</a>采用这种做法。</p>\n<h1 id=\"四、路径（Endpoint）\"><a href=\"#四、路径（Endpoint）\" class=\"headerlink\" title=\"四、路径（Endpoint）\"></a>四、路径（Endpoint）</h1><p>路径又称”终点”（endpoint），表示API的具体网址。</p>\n<p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库<br>中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p>\n<p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>\n<ul>\n<li><a href=\"https://api.example.com/v1/zoos\" target=\"_blank\" rel=\"external\">https://api.example.com/v1/zoos</a></li>\n<li><a href=\"https://api.example.com/v1/animals\" target=\"_blank\" rel=\"external\">https://api.example.com/v1/animals</a></li>\n<li><a href=\"https://api.example.com/v1/employees\" target=\"_blank\" rel=\"external\">https://api.example.com/v1/employees</a></li>\n</ul>\n<h1 id=\"五、HTTP动词\"><a href=\"#五、HTTP动词\" class=\"headerlink\" title=\"五、HTTP动词\"></a>五、HTTP动词</h1><p>对于资源的具体操作类型，由HTTP动词表示。</p>\n<p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>\n<li>POST（CREATE）：在服务器新建一个资源。</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>\n<li><p>DELETE（DELETE）：从服务器删除资源。<br>还有两个不常用的HTTP动词。</p>\n</li>\n<li><p>HEAD：获取资源的元数据。</p>\n</li>\n<li><p>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。<br>下面是一些例子。</p>\n</li>\n<li><p>GET /zoos：列出所有动物园</p>\n</li>\n<li>POST /zoos：新建一个动物园</li>\n<li>GET /zoos/ID：获取某个指定动物园的信息</li>\n<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>\n<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>\n<li>DELETE /zoos/ID：删除某个动物园</li>\n<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>\n<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>\n</ul>\n<h1 id=\"六、过滤信息（Filltering）\"><a href=\"#六、过滤信息（Filltering）\" class=\"headerlink\" title=\"六、过滤信息（Filltering）\"></a>六、过滤信息（Filltering）</h1><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p>\n<p>下面是一些常见的参数。</p>\n<ul>\n<li>?limit=10：指定返回记录的数量</li>\n<li>?offset=10：指定返回记录的开始位置。</li>\n<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>\n<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>\n<li>?animal_type_id=1：指定筛选条件<br>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET<br>/animals?zoo_id=ID 的含义是相同的。</li>\n</ul>\n<h1 id=\"七、状态码-Status-Codes\"><a href=\"#七、状态码-Status-Codes\" class=\"headerlink\" title=\"七、状态码(Status Codes)\"></a>七、状态码(Status Codes)</h1><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>\n<ul>\n<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>\n<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>\n<li>202 Accepted - [_]：表示一个请求已经进入后台排队（异步任务）</li>\n<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>\n<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>\n<li>401 Unauthorized - [_]：表示用户没有权限（令牌、用户名、密码错误）。</li>\n<li>403 Forbidden - [_] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>\n<li>404 NOT FOUND - [_]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>\n<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>\n<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>\n<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>\n<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>状态码的完全列表参见<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" target=\"_blank\" rel=\"external\">这里</a>。</li>\n</ul>\n<h1 id=\"八、错误处理（Error-handling）\"><a href=\"#八、错误处理（Error-handling）\" class=\"headerlink\" title=\"八、错误处理（Error handling）\"></a>八、错误处理（Error handling）</h1><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\terror: &quot;Invalid API key&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"九、返回结果\"><a href=\"#九、返回结果\" class=\"headerlink\" title=\"九、返回结果\"></a>九、返回结果</h1><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>\n<ul>\n<li>GET /collection：返回资源对象的列表（数组）</li>\n<li>GET /collection/resource：返回单个资源对象</li>\n<li>POST /collection：返回新生成的资源对象</li>\n<li>PUT /collection/resource：返回完整的资源对象</li>\n<li>PATCH /collection/resource：返回完整的资源对象</li>\n<li>DELETE /collection/resource：返回一个空文档</li>\n</ul>\n<h1 id=\"十、Hypermedia-API\"><a href=\"#十、Hypermedia-API\" class=\"headerlink\" title=\"十、Hypermedia API\"></a>十、Hypermedia API</h1><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>\n<p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;link&quot;: &#123;</div><div class=\"line\">&quot;rel&quot;: &quot;collection https://www.example.com/zoos&quot;,</div><div class=\"line\">&quot;href&quot;: &quot;https://api.example.com/zoos&quot;,</div><div class=\"line\">&quot;title&quot;: &quot;List of zoos&quot;,</div><div class=\"line\">&quot;type&quot;: &quot;application/vnd.yourformat+json&quot;</div><div class=\"line\">&#125;&#125;</div></pre></td></tr></table></figure>\n<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给<br>出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>\n<p>Hypermedia API的设计被称为<a href=\"http://en.wikipedia.org/wiki/HATEOAS\" target=\"_blank\" rel=\"external\">HATEOAS</a>。Github的API<br>就是这种设计，访问<a href=\"https://api.github.com/\" target=\"_blank\" rel=\"external\">api.github.com</a>会得到一个所有可用API的网址列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">&quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,</div><div class=\"line\">&quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,</div><div class=\"line\">// ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href=\"https://api.github.com/user\" target=\"_blank\" rel=\"external\">api.github.com/user</a>，然<br>后就得到了下面结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">&quot;message&quot;: &quot;Requires authentication&quot;,</div><div class=\"line\">&quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>\n<h1 id=\"十一、其他\"><a href=\"#十一、其他\" class=\"headerlink\" title=\"十一、其他\"></a>十一、其他</h1><p>（1）API的身份认证应该使用<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"external\">OAuth<br>2.0</a>框架。</p>\n<p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>\n<p>（完）</p>\n<h2 id=\"个人总结\"><a href=\"#个人总结\" class=\"headerlink\" title=\"个人总结\"></a>个人总结</h2><p>RESTful设计风格是仅仅针对API的设计，其他的，比如新建功能页面的url还是需要自己另外定义的，当然可以在后面直接加参数，比如<code>GET /zoos?add=1</code></p>\n","excerpt":"","more":"<p>原文地址：<a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" title=\"Link:\nhttp://www.ruanyifeng.com/blog/2014/05/restful_api.html\">阮一峰的网络日志</a></p>\n<p>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p>\n<p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现”<a href=\"http://x.vindicosu\nite.com/click/fbfpc=1;v=5;m=3;l=401071;c=776283;b=3368032;dct=http\\%3A//www.goo\ngle.com.hk/search\\%3Fq\\%3DAPI+first\">API First</a>“的设计思想。<a href=\"http://en.wikipedia.org\n/wiki/Representational_state_transfer\">RESTful API</a>是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\">《理解RES<br>Tful架构》</a>，探讨如何理解这个概念。</p>\n<p>今天，我将介绍RESTful<br>API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（<a href=\"http://codeplanet.io/principles-\ngood-restful-api-design/\">1</a>，<a href=\"https://bourgeois.me/rest/\">2</a>）。</p>\n<h1 id=\"一、协议\"><a href=\"#一、协议\" class=\"headerlink\" title=\"一、协议\"></a>一、协议</h1><p>API与用户的通信协议，总是使用<a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">HTTPs协议</a><br>。</p>\n<h1 id=\"二、域名\"><a href=\"#二、域名\" class=\"headerlink\" title=\"二、域名\"></a>二、域名</h1><p>应该尽量将API部署在专用域名之下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.example.com</div></pre></td></tr></table></figure>\n<p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://example.org/api/</div></pre></td></tr></table></figure>\n<h1 id=\"三、版本（Versioning）\"><a href=\"#三、版本（Versioning）\" class=\"headerlink\" title=\"三、版本（Versioning）\"></a>三、版本（Versioning）</h1><p>应该将API的版本号放入URL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://api.example.com/v1/</div></pre></td></tr></table></figure>\n<p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href=\"https://developer.github.com/v3/m\nedia/#request-specific-version\">Github</a>采用这种做法。</p>\n<h1 id=\"四、路径（Endpoint）\"><a href=\"#四、路径（Endpoint）\" class=\"headerlink\" title=\"四、路径（Endpoint）\"></a>四、路径（Endpoint）</h1><p>路径又称”终点”（endpoint），表示API的具体网址。</p>\n<p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库<br>中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p>\n<p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p>\n<ul>\n<li><a href=\"https://api.example.com/v1/zoos\">https://api.example.com/v1/zoos</a></li>\n<li><a href=\"https://api.example.com/v1/animals\">https://api.example.com/v1/animals</a></li>\n<li><a href=\"https://api.example.com/v1/employees\">https://api.example.com/v1/employees</a></li>\n</ul>\n<h1 id=\"五、HTTP动词\"><a href=\"#五、HTTP动词\" class=\"headerlink\" title=\"五、HTTP动词\"></a>五、HTTP动词</h1><p>对于资源的具体操作类型，由HTTP动词表示。</p>\n<p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>\n<li>POST（CREATE）：在服务器新建一个资源。</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>\n<li><p>DELETE（DELETE）：从服务器删除资源。<br>还有两个不常用的HTTP动词。</p>\n</li>\n<li><p>HEAD：获取资源的元数据。</p>\n</li>\n<li><p>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。<br>下面是一些例子。</p>\n</li>\n<li><p>GET /zoos：列出所有动物园</p>\n</li>\n<li>POST /zoos：新建一个动物园</li>\n<li>GET /zoos/ID：获取某个指定动物园的信息</li>\n<li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li>\n<li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li>\n<li>DELETE /zoos/ID：删除某个动物园</li>\n<li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li>\n<li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li>\n</ul>\n<h1 id=\"六、过滤信息（Filltering）\"><a href=\"#六、过滤信息（Filltering）\" class=\"headerlink\" title=\"六、过滤信息（Filltering）\"></a>六、过滤信息（Filltering）</h1><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p>\n<p>下面是一些常见的参数。</p>\n<ul>\n<li>?limit=10：指定返回记录的数量</li>\n<li>?offset=10：指定返回记录的开始位置。</li>\n<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>\n<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>\n<li>?animal_type_id=1：指定筛选条件<br>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET<br>/animals?zoo_id=ID 的含义是相同的。</li>\n</ul>\n<h1 id=\"七、状态码-Status-Codes\"><a href=\"#七、状态码-Status-Codes\" class=\"headerlink\" title=\"七、状态码(Status Codes)\"></a>七、状态码(Status Codes)</h1><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p>\n<ul>\n<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>\n<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>\n<li>202 Accepted - [_]：表示一个请求已经进入后台排队（异步任务）</li>\n<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>\n<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>\n<li>401 Unauthorized - [_]：表示用户没有权限（令牌、用户名、密码错误）。</li>\n<li>403 Forbidden - [_] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>\n<li>404 NOT FOUND - [_]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>\n<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>\n<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>\n<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>\n<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。<br>状态码的完全列表参见<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">这里</a>。</li>\n</ul>\n<h1 id=\"八、错误处理（Error-handling）\"><a href=\"#八、错误处理（Error-handling）\" class=\"headerlink\" title=\"八、错误处理（Error handling）\"></a>八、错误处理（Error handling）</h1><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\terror: &quot;Invalid API key&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"九、返回结果\"><a href=\"#九、返回结果\" class=\"headerlink\" title=\"九、返回结果\"></a>九、返回结果</h1><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p>\n<ul>\n<li>GET /collection：返回资源对象的列表（数组）</li>\n<li>GET /collection/resource：返回单个资源对象</li>\n<li>POST /collection：返回新生成的资源对象</li>\n<li>PUT /collection/resource：返回完整的资源对象</li>\n<li>PATCH /collection/resource：返回完整的资源对象</li>\n<li>DELETE /collection/resource：返回一个空文档</li>\n</ul>\n<h1 id=\"十、Hypermedia-API\"><a href=\"#十、Hypermedia-API\" class=\"headerlink\" title=\"十、Hypermedia API\"></a>十、Hypermedia API</h1><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p>\n<p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;link&quot;: &#123;</div><div class=\"line\">&quot;rel&quot;: &quot;collection https://www.example.com/zoos&quot;,</div><div class=\"line\">&quot;href&quot;: &quot;https://api.example.com/zoos&quot;,</div><div class=\"line\">&quot;title&quot;: &quot;List of zoos&quot;,</div><div class=\"line\">&quot;type&quot;: &quot;application/vnd.yourformat+json&quot;</div><div class=\"line\">&#125;&#125;</div></pre></td></tr></table></figure>\n<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给<br>出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>\n<p>Hypermedia API的设计被称为<a href=\"http://en.wikipedia.org/wiki/HATEOAS\">HATEOAS</a>。Github的API<br>就是这种设计，访问<a href=\"https://api.github.com/\">api.github.com</a>会得到一个所有可用API的网址列表。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">&quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,</div><div class=\"line\">&quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,</div><div class=\"line\">// ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href=\"https://api.github.com/user\">api.github.com/user</a>，然<br>后就得到了下面结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">&quot;message&quot;: &quot;Requires authentication&quot;,</div><div class=\"line\">&quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p>\n<h1 id=\"十一、其他\"><a href=\"#十一、其他\" class=\"headerlink\" title=\"十一、其他\"></a>十一、其他</h1><p>（1）API的身份认证应该使用<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">OAuth<br>2.0</a>框架。</p>\n<p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p>\n<p>（完）</p>\n<h2 id=\"个人总结\"><a href=\"#个人总结\" class=\"headerlink\" title=\"个人总结\"></a>个人总结</h2><p>RESTful设计风格是仅仅针对API的设计，其他的，比如新建功能页面的url还是需要自己另外定义的，当然可以在后面直接加参数，比如<code>GET /zoos?add=1</code></p>\n"},{"title":"Sysbench性能测试工具的使用","date":"2014-11-03T09:14:04.000Z","_content":"参考：《MySQL管理之道》\n\n# 简介\n\nSysbench是一个模块化、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。\n\n# 安装\n\n\n\n    sudo apt-get install sysbench\n\n#  参数列表\n\nGeneral options：\n\n\n\n    --num-threads=N          线程数，默认为1\n    --max-requests=N         并发请求限制，默认为10000\n    --max-time=N             最大执行时间，默认为0\n    --forced-shutdown=STRING 最大执行时间后多久强制关闭\n    --thread-stack-size=SIZE 每个线程的栈大小，默认32K\n    --init-rng=[on|off]      初始化随机数生成器，默认off\n    --test=STRING            test to run\n    --debug=[on|off]         打印更多的调试信息，默认off\n    --validate=[on|off]      尽可能执行验证检查，默认off\n    --help=[on|off]          查看帮助\n    --version=[on|off]       查看版本\n\nCompiled-in tests：\n\n\n\n    fileio    磁盘I/O性能测试\n    cpu       CPU性能测试\n    memory    内存分配及传输速度测试\n    threads   POSIX线程性能测试\n    mutex     调度程序性能测试\n    oltp      数据库性能测试(OLTP基准测试)\n\n#  使用举例\n\n测试Mysql的InnoDB存储引擎，其中16个并发连接，最大请求1万个，表记录有9百万条：\n\n\n\n    sysbench --test=oltp -MySQL-table-engine=innodb \\\\\n    --oltp-table-size=9000000 \\\\\n    --max-requests=10000 \\\\\n    --num-threads=16 \\\\\n    --MySQL-host = 127.0.0.1 \\\\\n    --MySQL-port = 3306 \\\\\n    --MySQL-user = root \\\\\n    --MySQL-password = 123456 \\\\\n    --MySQL-db = test \\\\\n    --MySQL-socket=/tmp/MySQL.sock prepare\n","source":"_posts/sysbench-effiency-test.md","raw":"---\ntitle: \"Sysbench性能测试工具的使用\"\ndate: 2014-11-03 17:14:04\ncategories: 编程之路\n---\n参考：《MySQL管理之道》\n\n# 简介\n\nSysbench是一个模块化、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。\n\n# 安装\n\n\n\n    sudo apt-get install sysbench\n\n#  参数列表\n\nGeneral options：\n\n\n\n    --num-threads=N          线程数，默认为1\n    --max-requests=N         并发请求限制，默认为10000\n    --max-time=N             最大执行时间，默认为0\n    --forced-shutdown=STRING 最大执行时间后多久强制关闭\n    --thread-stack-size=SIZE 每个线程的栈大小，默认32K\n    --init-rng=[on|off]      初始化随机数生成器，默认off\n    --test=STRING            test to run\n    --debug=[on|off]         打印更多的调试信息，默认off\n    --validate=[on|off]      尽可能执行验证检查，默认off\n    --help=[on|off]          查看帮助\n    --version=[on|off]       查看版本\n\nCompiled-in tests：\n\n\n\n    fileio    磁盘I/O性能测试\n    cpu       CPU性能测试\n    memory    内存分配及传输速度测试\n    threads   POSIX线程性能测试\n    mutex     调度程序性能测试\n    oltp      数据库性能测试(OLTP基准测试)\n\n#  使用举例\n\n测试Mysql的InnoDB存储引擎，其中16个并发连接，最大请求1万个，表记录有9百万条：\n\n\n\n    sysbench --test=oltp -MySQL-table-engine=innodb \\\\\n    --oltp-table-size=9000000 \\\\\n    --max-requests=10000 \\\\\n    --num-threads=16 \\\\\n    --MySQL-host = 127.0.0.1 \\\\\n    --MySQL-port = 3306 \\\\\n    --MySQL-user = root \\\\\n    --MySQL-password = 123456 \\\\\n    --MySQL-db = test \\\\\n    --MySQL-socket=/tmp/MySQL.sock prepare\n","slug":"sysbench-effiency-test","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2ph0005p9vnzsizlpj9p","content":"<p>参考：《MySQL管理之道》</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Sysbench是一个模块化、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>sudo apt-get install sysbench\n</code></pre><h1 id=\"参数列表\"><a href=\"#参数列表\" class=\"headerlink\" title=\"参数列表\"></a>参数列表</h1><p>General options：</p>\n<pre><code>--num-threads=N          线程数，默认为1\n--max-requests=N         并发请求限制，默认为10000\n--max-time=N             最大执行时间，默认为0\n--forced-shutdown=STRING 最大执行时间后多久强制关闭\n--thread-stack-size=SIZE 每个线程的栈大小，默认32K\n--init-rng=[on|off]      初始化随机数生成器，默认off\n--test=STRING            test to run\n--debug=[on|off]         打印更多的调试信息，默认off\n--validate=[on|off]      尽可能执行验证检查，默认off\n--help=[on|off]          查看帮助\n--version=[on|off]       查看版本\n</code></pre><p>Compiled-in tests：</p>\n<pre><code>fileio    磁盘I/O性能测试\ncpu       CPU性能测试\nmemory    内存分配及传输速度测试\nthreads   POSIX线程性能测试\nmutex     调度程序性能测试\noltp      数据库性能测试(OLTP基准测试)\n</code></pre><h1 id=\"使用举例\"><a href=\"#使用举例\" class=\"headerlink\" title=\"使用举例\"></a>使用举例</h1><p>测试Mysql的InnoDB存储引擎，其中16个并发连接，最大请求1万个，表记录有9百万条：</p>\n<pre><code>sysbench --test=oltp -MySQL-table-engine=innodb \\\\\n--oltp-table-size=9000000 \\\\\n--max-requests=10000 \\\\\n--num-threads=16 \\\\\n--MySQL-host = 127.0.0.1 \\\\\n--MySQL-port = 3306 \\\\\n--MySQL-user = root \\\\\n--MySQL-password = 123456 \\\\\n--MySQL-db = test \\\\\n--MySQL-socket=/tmp/MySQL.sock prepare\n</code></pre>","excerpt":"","more":"<p>参考：《MySQL管理之道》</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Sysbench是一个模块化、跨平台、多线程基准测试工具，主要用于评估测试各种不同系统参数下的数据库负载情况。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>sudo apt-get install sysbench\n</code></pre><h1 id=\"参数列表\"><a href=\"#参数列表\" class=\"headerlink\" title=\"参数列表\"></a>参数列表</h1><p>General options：</p>\n<pre><code>--num-threads=N          线程数，默认为1\n--max-requests=N         并发请求限制，默认为10000\n--max-time=N             最大执行时间，默认为0\n--forced-shutdown=STRING 最大执行时间后多久强制关闭\n--thread-stack-size=SIZE 每个线程的栈大小，默认32K\n--init-rng=[on|off]      初始化随机数生成器，默认off\n--test=STRING            test to run\n--debug=[on|off]         打印更多的调试信息，默认off\n--validate=[on|off]      尽可能执行验证检查，默认off\n--help=[on|off]          查看帮助\n--version=[on|off]       查看版本\n</code></pre><p>Compiled-in tests：</p>\n<pre><code>fileio    磁盘I/O性能测试\ncpu       CPU性能测试\nmemory    内存分配及传输速度测试\nthreads   POSIX线程性能测试\nmutex     调度程序性能测试\noltp      数据库性能测试(OLTP基准测试)\n</code></pre><h1 id=\"使用举例\"><a href=\"#使用举例\" class=\"headerlink\" title=\"使用举例\"></a>使用举例</h1><p>测试Mysql的InnoDB存储引擎，其中16个并发连接，最大请求1万个，表记录有9百万条：</p>\n<pre><code>sysbench --test=oltp -MySQL-table-engine=innodb \\\\\n--oltp-table-size=9000000 \\\\\n--max-requests=10000 \\\\\n--num-threads=16 \\\\\n--MySQL-host = 127.0.0.1 \\\\\n--MySQL-port = 3306 \\\\\n--MySQL-user = root \\\\\n--MySQL-password = 123456 \\\\\n--MySQL-db = test \\\\\n--MySQL-socket=/tmp/MySQL.sock prepare\n</code></pre>"},{"title":"Run for Fun，记第一次迷你马拉松之旅","date":"2016-05-27T13:51:53.000Z","_content":"今天，我顺利地完成了人生第一次的迷你马拉松。\n\n其实在去年，我就最高跑过七公里，当时因为心情失落，所以闷着头跑，一直跑到手脚发麻才停下来。开始实习过后，我就几乎没有跑过步了。在上个公司是下班过后尽量提前几个站下车，然后走着回家。来了现在公司过后好一点，每天能够骑自行车上下班了。所以从体力上我还是觉得自己可以的。不过为了保险起见，在前天我去了石子山体育公园试跑了一下，感觉还不错，只不过跑完了过后腰酸背疼的。直到几天都还在痛。\n\n今天六点钟，我们运维团的几个朋友就起床了，其实是听错了时间，以为8点开跑，结果是8点集合，10点开跑。到那儿过后天一直飘着雨，不过南滨路挨着嘉陵江，风景真的好，更好看的是...如图所示\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_0.JPG)\n运维取经团的几个朋友：\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_1.JPG)\n刚开始跑时，我突然感觉自己脚有点抽筋，于是放慢了一下脚步，之后才渐渐地匀速前进，但是主办方的路标是在是坑人，按常理来说应该是一公里一个提示，结果，它一个公里到两公里中间有一个提示，但是却没提示这时候的距离，只能让人以为这是1.5公里了，并且在折返点离2.5公里的路标是在太远，所以我们预计，总的里程大概在六公里多。折返跑有一个好处是，你能看到最前面的几个人，也能看到最后面的一群人。最后的一百米我还小小的冲刺了一下。其实我每次跑步最后都能够有冲刺的力气，但就是在前面无法提速，每次都是那样的速度，下次比赛我一定要克服这个问题，争取跑进半小时。今天的成绩大概在三十五六分钟。看看中途的我(白衣服短裤那个):\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_2.JPG)\n\n总之，总体感觉真的很爽，虽然这次的比赛都是给公司的员工参加的，也就是说大家尽量在宣传自己的公司，不过，好多好多的人还是跑了个开心，run for fun，这才是比赛的宗旨。仔细想想自己为什么喜欢跑步呢，我想应该是因为跑步这个运动项目，每个人到达终点的距离一样，每个人的路线也都一样，只要坚持就一定可以到达终点，无论名词高低，到达终点后你都会如释重负，心胸特别舒畅。不像其他的运动项目，有很多的技巧、必须经过很多的练习或者场地总是有所限制。\n\n随着马拉松的落幕，我的毕业论文也经过了查重，周末就上传毕业论文了，然后下周就答辩了，希望一切顺利，然后，就可以开始我的全栈工程师实践之旅。\n","source":"_posts/run-for-fun.md","raw":"---\ntitle: \"run for fun，记第一次迷你马拉松之旅\"\ndate: 2016-05-27 21:51:53\ncategories: 平凡之路\n---\n今天，我顺利地完成了人生第一次的迷你马拉松。\n\n其实在去年，我就最高跑过七公里，当时因为心情失落，所以闷着头跑，一直跑到手脚发麻才停下来。开始实习过后，我就几乎没有跑过步了。在上个公司是下班过后尽量提前几个站下车，然后走着回家。来了现在公司过后好一点，每天能够骑自行车上下班了。所以从体力上我还是觉得自己可以的。不过为了保险起见，在前天我去了石子山体育公园试跑了一下，感觉还不错，只不过跑完了过后腰酸背疼的。直到几天都还在痛。\n\n今天六点钟，我们运维团的几个朋友就起床了，其实是听错了时间，以为8点开跑，结果是8点集合，10点开跑。到那儿过后天一直飘着雨，不过南滨路挨着嘉陵江，风景真的好，更好看的是...如图所示\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_0.JPG)\n运维取经团的几个朋友：\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_1.JPG)\n刚开始跑时，我突然感觉自己脚有点抽筋，于是放慢了一下脚步，之后才渐渐地匀速前进，但是主办方的路标是在是坑人，按常理来说应该是一公里一个提示，结果，它一个公里到两公里中间有一个提示，但是却没提示这时候的距离，只能让人以为这是1.5公里了，并且在折返点离2.5公里的路标是在太远，所以我们预计，总的里程大概在六公里多。折返跑有一个好处是，你能看到最前面的几个人，也能看到最后面的一群人。最后的一百米我还小小的冲刺了一下。其实我每次跑步最后都能够有冲刺的力气，但就是在前面无法提速，每次都是那样的速度，下次比赛我一定要克服这个问题，争取跑进半小时。今天的成绩大概在三十五六分钟。看看中途的我(白衣服短裤那个):\n![图片](http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_2.JPG)\n\n总之，总体感觉真的很爽，虽然这次的比赛都是给公司的员工参加的，也就是说大家尽量在宣传自己的公司，不过，好多好多的人还是跑了个开心，run for fun，这才是比赛的宗旨。仔细想想自己为什么喜欢跑步呢，我想应该是因为跑步这个运动项目，每个人到达终点的距离一样，每个人的路线也都一样，只要坚持就一定可以到达终点，无论名词高低，到达终点后你都会如释重负，心胸特别舒畅。不像其他的运动项目，有很多的技巧、必须经过很多的练习或者场地总是有所限制。\n\n随着马拉松的落幕，我的毕业论文也经过了查重，周末就上传毕业论文了，然后下周就答辩了，希望一切顺利，然后，就可以开始我的全栈工程师实践之旅。\n","slug":"run-for-fun","published":1,"updated":"2016-05-27T14:22:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2ph4005r9vnzsjzkstb0","content":"<p>今天，我顺利地完成了人生第一次的迷你马拉松。</p>\n<p>其实在去年，我就最高跑过七公里，当时因为心情失落，所以闷着头跑，一直跑到手脚发麻才停下来。开始实习过后，我就几乎没有跑过步了。在上个公司是下班过后尽量提前几个站下车，然后走着回家。来了现在公司过后好一点，每天能够骑自行车上下班了。所以从体力上我还是觉得自己可以的。不过为了保险起见，在前天我去了石子山体育公园试跑了一下，感觉还不错，只不过跑完了过后腰酸背疼的。直到几天都还在痛。</p>\n<p>今天六点钟，我们运维团的几个朋友就起床了，其实是听错了时间，以为8点开跑，结果是8点集合，10点开跑。到那儿过后天一直飘着雨，不过南滨路挨着嘉陵江，风景真的好，更好看的是…如图所示<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_0.JPG\" alt=\"图片\"><br>运维取经团的几个朋友：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_1.JPG\" alt=\"图片\"><br>刚开始跑时，我突然感觉自己脚有点抽筋，于是放慢了一下脚步，之后才渐渐地匀速前进，但是主办方的路标是在是坑人，按常理来说应该是一公里一个提示，结果，它一个公里到两公里中间有一个提示，但是却没提示这时候的距离，只能让人以为这是1.5公里了，并且在折返点离2.5公里的路标是在太远，所以我们预计，总的里程大概在六公里多。折返跑有一个好处是，你能看到最前面的几个人，也能看到最后面的一群人。最后的一百米我还小小的冲刺了一下。其实我每次跑步最后都能够有冲刺的力气，但就是在前面无法提速，每次都是那样的速度，下次比赛我一定要克服这个问题，争取跑进半小时。今天的成绩大概在三十五六分钟。看看中途的我(白衣服短裤那个):<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_2.JPG\" alt=\"图片\"></p>\n<p>总之，总体感觉真的很爽，虽然这次的比赛都是给公司的员工参加的，也就是说大家尽量在宣传自己的公司，不过，好多好多的人还是跑了个开心，run for fun，这才是比赛的宗旨。仔细想想自己为什么喜欢跑步呢，我想应该是因为跑步这个运动项目，每个人到达终点的距离一样，每个人的路线也都一样，只要坚持就一定可以到达终点，无论名词高低，到达终点后你都会如释重负，心胸特别舒畅。不像其他的运动项目，有很多的技巧、必须经过很多的练习或者场地总是有所限制。</p>\n<p>随着马拉松的落幕，我的毕业论文也经过了查重，周末就上传毕业论文了，然后下周就答辩了，希望一切顺利，然后，就可以开始我的全栈工程师实践之旅。</p>\n","excerpt":"","more":"<p>今天，我顺利地完成了人生第一次的迷你马拉松。</p>\n<p>其实在去年，我就最高跑过七公里，当时因为心情失落，所以闷着头跑，一直跑到手脚发麻才停下来。开始实习过后，我就几乎没有跑过步了。在上个公司是下班过后尽量提前几个站下车，然后走着回家。来了现在公司过后好一点，每天能够骑自行车上下班了。所以从体力上我还是觉得自己可以的。不过为了保险起见，在前天我去了石子山体育公园试跑了一下，感觉还不错，只不过跑完了过后腰酸背疼的。直到几天都还在痛。</p>\n<p>今天六点钟，我们运维团的几个朋友就起床了，其实是听错了时间，以为8点开跑，结果是8点集合，10点开跑。到那儿过后天一直飘着雨，不过南滨路挨着嘉陵江，风景真的好，更好看的是…如图所示<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_0.JPG\" alt=\"图片\"><br>运维取经团的几个朋友：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_1.JPG\" alt=\"图片\"><br>刚开始跑时，我突然感觉自己脚有点抽筋，于是放慢了一下脚步，之后才渐渐地匀速前进，但是主办方的路标是在是坑人，按常理来说应该是一公里一个提示，结果，它一个公里到两公里中间有一个提示，但是却没提示这时候的距离，只能让人以为这是1.5公里了，并且在折返点离2.5公里的路标是在太远，所以我们预计，总的里程大概在六公里多。折返跑有一个好处是，你能看到最前面的几个人，也能看到最后面的一群人。最后的一百米我还小小的冲刺了一下。其实我每次跑步最后都能够有冲刺的力气，但就是在前面无法提速，每次都是那样的速度，下次比赛我一定要克服这个问题，争取跑进半小时。今天的成绩大概在三十五六分钟。看看中途的我(白衣服短裤那个):<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_2.JPG\" alt=\"图片\"></p>\n<p>总之，总体感觉真的很爽，虽然这次的比赛都是给公司的员工参加的，也就是说大家尽量在宣传自己的公司，不过，好多好多的人还是跑了个开心，run for fun，这才是比赛的宗旨。仔细想想自己为什么喜欢跑步呢，我想应该是因为跑步这个运动项目，每个人到达终点的距离一样，每个人的路线也都一样，只要坚持就一定可以到达终点，无论名词高低，到达终点后你都会如释重负，心胸特别舒畅。不像其他的运动项目，有很多的技巧、必须经过很多的练习或者场地总是有所限制。</p>\n<p>随着马拉松的落幕，我的毕业论文也经过了查重，周末就上传毕业论文了，然后下周就答辩了，希望一切顺利，然后，就可以开始我的全栈工程师实践之旅。</p>\n"},{"title":"MacTalk 人生元编程","date":"2016-07-24T10:38:44.000Z","_content":"\n我不知道有多少人因为池老师的一篇《先有Mac还是先有钱》而去买的苹果电脑，我现在也在用rmbp，但我可不是因为这个原因。从大一到大三，我那台宏碁的笔记本一直陪伴在我身边，经历了我各种摧残，更换了无数的操作系统(windows、linux系列的)，曾经最长用了半年的deepin单系统。虽说我自认为我用电脑一定比其他人用得好，毕竟一台三千多的电脑能用出人家五六千电脑的流畅度，但是依然不尽如我意。折腾累了，最终在大三结束刚进入实习期的我就找父母拿钱买了一台15年乞丐版的rmbp。刚好快一年了，这一年，mac带给我最大的感受就是我几乎没有任何感受...我已经完全忘记了去折腾电脑了，重装系统、电脑卡顿、木马病毒，统统都没有，我甚至都忘记了他们的存在了。买windows是买电脑送系统，买mac则是买系统送电脑。mac带给我们更多的是一种享受，我愿意为这样的服务买单。\n\n作为一本talk mac的书籍，当然不乏众多的mac使用技巧，osx的强大，远比我当前的使用方式更强大，还需要我去探索。当然，现在的我已经不再是工具控了，因为我已经找到了一套自己认为最适合自己的工具，不用再为新工具的出现而浪费时间了。除了一些使用技巧外，池健强老师还谈了一些对编程的看法。让我了解了一个人，王小波，对他几乎没有什么认识，我想，我也该去拜读一下他的书了。\n\n关于盗版，我的博客很早就有一篇《学生应该尽量购买正版书籍》，上个月从学校回来，收拾了一箱子舍不得卖的书，几乎全是在当当或者亚马逊上买的，这，也算是我对这些作者表达的基本的尊重。同时，在使用了mac过后，我的电脑／手机都与盗版彻底绝缘了。从此可以问心无愧地进行开发，也希望自己开发的东西有一天能让大众享受，能让用户主动掏钱。以下是池老师关于盗版的言论：\n\n```tex\n1.盗版肯定是不对的，如果用了盗版软件，至少要有愧疚之心。如果你是个穷学生，学习软件开发用了盗版软件，谁忍心责备你呢？但大家千万不能无耻到开篇提到的那位父亲那样，不仅误己，而且误人。 2.程序员也是要吃饭的，你们每个人在自己的电脑上使用的每个软件都是程序员一行行的代码敲出来的。 3.在经济实力允许的基础上，尽可能用正版，尤其是程序员。程序员不支持程序员，还怎么指望别人呢？\n```\n\n池老师也算是很多新一代程序员的领路人，不知道他现在怎么样了，不过，我算是真正走上了这条路了，一切，才刚刚开始。\n\n### 语录\n\n- 反观观国内，很多公司把企业文化作为一种“秀”或“工具”，这就比较扯淡了。我觉得搞好企业文化，就两点： 1.利益，把公司利益和员工联系在一起，好员工钱得给足。 2.人文，少搞或不搞办公室政治，让员工自由一点、开放一点、平等一点，你会获得回报。 对于员工本身来说，不管企业是什么文化，\n- 是啊，人怎么会有那么多时间学习那么多东西呢？其实这个不可能的设定，是在保证你有足够时间看电视、看美剧、刷微博、上网闲逛的基础之上的。只要把上述这些事情消费的时间减少一半，拿来持续学习，你就会发现学习效果是惊人的。\n\n\n- 有一些穿高跟鞋走不到的路，有一些喷着香水闻不到的空气，有一些在楼宇里永远遇不到的人。\n\n\n- 很多时候我们初入江湖，不知深浅，不知道什么事能做，怎么做，为什么要这么做，即使怯生生问了，得到的答复往往是，That's just the way it's done（我们向来这么做），于是我们慢慢也变得成熟、圆滑和懒惰，不再去从深层次思考『为什么要这么做？』因为别人也这么做。慢慢的，这些东西就成为了folklore（陈规陋习）。 一个坏的习惯或传统，可能延续十年、百年、千年，直到那个打破陈规陋习的人出现！ 提问、思考和努力工作，你就会抛弃这些陈规陋习，找到布满荆棘也满是鲜花的另一条鲜活的路。\n- 经验告诉我，优秀的人才是那些一心想着产品的人，而不是关注管理和流程本身。\n- 乔布斯认为，人活着是为了追求极致并分享美好的东西给人类，而不是做三流产品并赚钱。这样社会才能进步，让更多的人欣赏到更美好的东西。微软不过是另一个麦当劳，哈哈。\n- 我以为我是个盖世程序猿，有一天我的程序会奔跑在千万台服务器上。我猜中了前头，可是我猜不着这结局……我们说，呸，你丫从头就错了！ \n- 有人问，你为什么要从事IT技术研发工作？如果是乔布斯，可能的答案是改变世界；如果是人生导师，可能的答案是跟随你心。如果是我回答呢，答案就是如果不从事这个行业的话呢，我还真不知道该如何养家糊口","source":"_posts/renshegnyuanbiancheng.md","raw":"---\ntitle: \"MacTalk 人生元编程\"\ndate: 2016-07-24 18:38:44\ncategories: 编程之路\n---\n\n我不知道有多少人因为池老师的一篇《先有Mac还是先有钱》而去买的苹果电脑，我现在也在用rmbp，但我可不是因为这个原因。从大一到大三，我那台宏碁的笔记本一直陪伴在我身边，经历了我各种摧残，更换了无数的操作系统(windows、linux系列的)，曾经最长用了半年的deepin单系统。虽说我自认为我用电脑一定比其他人用得好，毕竟一台三千多的电脑能用出人家五六千电脑的流畅度，但是依然不尽如我意。折腾累了，最终在大三结束刚进入实习期的我就找父母拿钱买了一台15年乞丐版的rmbp。刚好快一年了，这一年，mac带给我最大的感受就是我几乎没有任何感受...我已经完全忘记了去折腾电脑了，重装系统、电脑卡顿、木马病毒，统统都没有，我甚至都忘记了他们的存在了。买windows是买电脑送系统，买mac则是买系统送电脑。mac带给我们更多的是一种享受，我愿意为这样的服务买单。\n\n作为一本talk mac的书籍，当然不乏众多的mac使用技巧，osx的强大，远比我当前的使用方式更强大，还需要我去探索。当然，现在的我已经不再是工具控了，因为我已经找到了一套自己认为最适合自己的工具，不用再为新工具的出现而浪费时间了。除了一些使用技巧外，池健强老师还谈了一些对编程的看法。让我了解了一个人，王小波，对他几乎没有什么认识，我想，我也该去拜读一下他的书了。\n\n关于盗版，我的博客很早就有一篇《学生应该尽量购买正版书籍》，上个月从学校回来，收拾了一箱子舍不得卖的书，几乎全是在当当或者亚马逊上买的，这，也算是我对这些作者表达的基本的尊重。同时，在使用了mac过后，我的电脑／手机都与盗版彻底绝缘了。从此可以问心无愧地进行开发，也希望自己开发的东西有一天能让大众享受，能让用户主动掏钱。以下是池老师关于盗版的言论：\n\n```tex\n1.盗版肯定是不对的，如果用了盗版软件，至少要有愧疚之心。如果你是个穷学生，学习软件开发用了盗版软件，谁忍心责备你呢？但大家千万不能无耻到开篇提到的那位父亲那样，不仅误己，而且误人。 2.程序员也是要吃饭的，你们每个人在自己的电脑上使用的每个软件都是程序员一行行的代码敲出来的。 3.在经济实力允许的基础上，尽可能用正版，尤其是程序员。程序员不支持程序员，还怎么指望别人呢？\n```\n\n池老师也算是很多新一代程序员的领路人，不知道他现在怎么样了，不过，我算是真正走上了这条路了，一切，才刚刚开始。\n\n### 语录\n\n- 反观观国内，很多公司把企业文化作为一种“秀”或“工具”，这就比较扯淡了。我觉得搞好企业文化，就两点： 1.利益，把公司利益和员工联系在一起，好员工钱得给足。 2.人文，少搞或不搞办公室政治，让员工自由一点、开放一点、平等一点，你会获得回报。 对于员工本身来说，不管企业是什么文化，\n- 是啊，人怎么会有那么多时间学习那么多东西呢？其实这个不可能的设定，是在保证你有足够时间看电视、看美剧、刷微博、上网闲逛的基础之上的。只要把上述这些事情消费的时间减少一半，拿来持续学习，你就会发现学习效果是惊人的。\n\n\n- 有一些穿高跟鞋走不到的路，有一些喷着香水闻不到的空气，有一些在楼宇里永远遇不到的人。\n\n\n- 很多时候我们初入江湖，不知深浅，不知道什么事能做，怎么做，为什么要这么做，即使怯生生问了，得到的答复往往是，That's just the way it's done（我们向来这么做），于是我们慢慢也变得成熟、圆滑和懒惰，不再去从深层次思考『为什么要这么做？』因为别人也这么做。慢慢的，这些东西就成为了folklore（陈规陋习）。 一个坏的习惯或传统，可能延续十年、百年、千年，直到那个打破陈规陋习的人出现！ 提问、思考和努力工作，你就会抛弃这些陈规陋习，找到布满荆棘也满是鲜花的另一条鲜活的路。\n- 经验告诉我，优秀的人才是那些一心想着产品的人，而不是关注管理和流程本身。\n- 乔布斯认为，人活着是为了追求极致并分享美好的东西给人类，而不是做三流产品并赚钱。这样社会才能进步，让更多的人欣赏到更美好的东西。微软不过是另一个麦当劳，哈哈。\n- 我以为我是个盖世程序猿，有一天我的程序会奔跑在千万台服务器上。我猜中了前头，可是我猜不着这结局……我们说，呸，你丫从头就错了！ \n- 有人问，你为什么要从事IT技术研发工作？如果是乔布斯，可能的答案是改变世界；如果是人生导师，可能的答案是跟随你心。如果是我回答呢，答案就是如果不从事这个行业的话呢，我还真不知道该如何养家糊口","slug":"renshegnyuanbiancheng","published":1,"updated":"2016-07-24T13:39:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2ph6005t9vnzdag1o8pq","content":"<p>我不知道有多少人因为池老师的一篇《先有Mac还是先有钱》而去买的苹果电脑，我现在也在用rmbp，但我可不是因为这个原因。从大一到大三，我那台宏碁的笔记本一直陪伴在我身边，经历了我各种摧残，更换了无数的操作系统(windows、linux系列的)，曾经最长用了半年的deepin单系统。虽说我自认为我用电脑一定比其他人用得好，毕竟一台三千多的电脑能用出人家五六千电脑的流畅度，但是依然不尽如我意。折腾累了，最终在大三结束刚进入实习期的我就找父母拿钱买了一台15年乞丐版的rmbp。刚好快一年了，这一年，mac带给我最大的感受就是我几乎没有任何感受…我已经完全忘记了去折腾电脑了，重装系统、电脑卡顿、木马病毒，统统都没有，我甚至都忘记了他们的存在了。买windows是买电脑送系统，买mac则是买系统送电脑。mac带给我们更多的是一种享受，我愿意为这样的服务买单。</p>\n<p>作为一本talk mac的书籍，当然不乏众多的mac使用技巧，osx的强大，远比我当前的使用方式更强大，还需要我去探索。当然，现在的我已经不再是工具控了，因为我已经找到了一套自己认为最适合自己的工具，不用再为新工具的出现而浪费时间了。除了一些使用技巧外，池健强老师还谈了一些对编程的看法。让我了解了一个人，王小波，对他几乎没有什么认识，我想，我也该去拜读一下他的书了。</p>\n<p>关于盗版，我的博客很早就有一篇《学生应该尽量购买正版书籍》，上个月从学校回来，收拾了一箱子舍不得卖的书，几乎全是在当当或者亚马逊上买的，这，也算是我对这些作者表达的基本的尊重。同时，在使用了mac过后，我的电脑／手机都与盗版彻底绝缘了。从此可以问心无愧地进行开发，也希望自己开发的东西有一天能让大众享受，能让用户主动掏钱。以下是池老师关于盗版的言论：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.盗版肯定是不对的，如果用了盗版软件，至少要有愧疚之心。如果你是个穷学生，学习软件开发用了盗版软件，谁忍心责备你呢？但大家千万不能无耻到开篇提到的那位父亲那样，不仅误己，而且误人。 2.程序员也是要吃饭的，你们每个人在自己的电脑上使用的每个软件都是程序员一行行的代码敲出来的。 3.在经济实力允许的基础上，尽可能用正版，尤其是程序员。程序员不支持程序员，还怎么指望别人呢？</div></pre></td></tr></table></figure>\n<p>池老师也算是很多新一代程序员的领路人，不知道他现在怎么样了，不过，我算是真正走上了这条路了，一切，才刚刚开始。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><ul>\n<li>反观观国内，很多公司把企业文化作为一种“秀”或“工具”，这就比较扯淡了。我觉得搞好企业文化，就两点： 1.利益，把公司利益和员工联系在一起，好员工钱得给足。 2.人文，少搞或不搞办公室政治，让员工自由一点、开放一点、平等一点，你会获得回报。 对于员工本身来说，不管企业是什么文化，</li>\n<li>是啊，人怎么会有那么多时间学习那么多东西呢？其实这个不可能的设定，是在保证你有足够时间看电视、看美剧、刷微博、上网闲逛的基础之上的。只要把上述这些事情消费的时间减少一半，拿来持续学习，你就会发现学习效果是惊人的。</li>\n</ul>\n<ul>\n<li>有一些穿高跟鞋走不到的路，有一些喷着香水闻不到的空气，有一些在楼宇里永远遇不到的人。</li>\n</ul>\n<ul>\n<li>很多时候我们初入江湖，不知深浅，不知道什么事能做，怎么做，为什么要这么做，即使怯生生问了，得到的答复往往是，That’s just the way it’s done（我们向来这么做），于是我们慢慢也变得成熟、圆滑和懒惰，不再去从深层次思考『为什么要这么做？』因为别人也这么做。慢慢的，这些东西就成为了folklore（陈规陋习）。 一个坏的习惯或传统，可能延续十年、百年、千年，直到那个打破陈规陋习的人出现！ 提问、思考和努力工作，你就会抛弃这些陈规陋习，找到布满荆棘也满是鲜花的另一条鲜活的路。</li>\n<li>经验告诉我，优秀的人才是那些一心想着产品的人，而不是关注管理和流程本身。</li>\n<li>乔布斯认为，人活着是为了追求极致并分享美好的东西给人类，而不是做三流产品并赚钱。这样社会才能进步，让更多的人欣赏到更美好的东西。微软不过是另一个麦当劳，哈哈。</li>\n<li>我以为我是个盖世程序猿，有一天我的程序会奔跑在千万台服务器上。我猜中了前头，可是我猜不着这结局……我们说，呸，你丫从头就错了！ </li>\n<li>有人问，你为什么要从事IT技术研发工作？如果是乔布斯，可能的答案是改变世界；如果是人生导师，可能的答案是跟随你心。如果是我回答呢，答案就是如果不从事这个行业的话呢，我还真不知道该如何养家糊口</li>\n</ul>\n","excerpt":"","more":"<p>我不知道有多少人因为池老师的一篇《先有Mac还是先有钱》而去买的苹果电脑，我现在也在用rmbp，但我可不是因为这个原因。从大一到大三，我那台宏碁的笔记本一直陪伴在我身边，经历了我各种摧残，更换了无数的操作系统(windows、linux系列的)，曾经最长用了半年的deepin单系统。虽说我自认为我用电脑一定比其他人用得好，毕竟一台三千多的电脑能用出人家五六千电脑的流畅度，但是依然不尽如我意。折腾累了，最终在大三结束刚进入实习期的我就找父母拿钱买了一台15年乞丐版的rmbp。刚好快一年了，这一年，mac带给我最大的感受就是我几乎没有任何感受…我已经完全忘记了去折腾电脑了，重装系统、电脑卡顿、木马病毒，统统都没有，我甚至都忘记了他们的存在了。买windows是买电脑送系统，买mac则是买系统送电脑。mac带给我们更多的是一种享受，我愿意为这样的服务买单。</p>\n<p>作为一本talk mac的书籍，当然不乏众多的mac使用技巧，osx的强大，远比我当前的使用方式更强大，还需要我去探索。当然，现在的我已经不再是工具控了，因为我已经找到了一套自己认为最适合自己的工具，不用再为新工具的出现而浪费时间了。除了一些使用技巧外，池健强老师还谈了一些对编程的看法。让我了解了一个人，王小波，对他几乎没有什么认识，我想，我也该去拜读一下他的书了。</p>\n<p>关于盗版，我的博客很早就有一篇《学生应该尽量购买正版书籍》，上个月从学校回来，收拾了一箱子舍不得卖的书，几乎全是在当当或者亚马逊上买的，这，也算是我对这些作者表达的基本的尊重。同时，在使用了mac过后，我的电脑／手机都与盗版彻底绝缘了。从此可以问心无愧地进行开发，也希望自己开发的东西有一天能让大众享受，能让用户主动掏钱。以下是池老师关于盗版的言论：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.盗版肯定是不对的，如果用了盗版软件，至少要有愧疚之心。如果你是个穷学生，学习软件开发用了盗版软件，谁忍心责备你呢？但大家千万不能无耻到开篇提到的那位父亲那样，不仅误己，而且误人。 2.程序员也是要吃饭的，你们每个人在自己的电脑上使用的每个软件都是程序员一行行的代码敲出来的。 3.在经济实力允许的基础上，尽可能用正版，尤其是程序员。程序员不支持程序员，还怎么指望别人呢？</div></pre></td></tr></table></figure>\n<p>池老师也算是很多新一代程序员的领路人，不知道他现在怎么样了，不过，我算是真正走上了这条路了，一切，才刚刚开始。</p>\n<h3 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h3><ul>\n<li>反观观国内，很多公司把企业文化作为一种“秀”或“工具”，这就比较扯淡了。我觉得搞好企业文化，就两点： 1.利益，把公司利益和员工联系在一起，好员工钱得给足。 2.人文，少搞或不搞办公室政治，让员工自由一点、开放一点、平等一点，你会获得回报。 对于员工本身来说，不管企业是什么文化，</li>\n<li>是啊，人怎么会有那么多时间学习那么多东西呢？其实这个不可能的设定，是在保证你有足够时间看电视、看美剧、刷微博、上网闲逛的基础之上的。只要把上述这些事情消费的时间减少一半，拿来持续学习，你就会发现学习效果是惊人的。</li>\n</ul>\n<ul>\n<li>有一些穿高跟鞋走不到的路，有一些喷着香水闻不到的空气，有一些在楼宇里永远遇不到的人。</li>\n</ul>\n<ul>\n<li>很多时候我们初入江湖，不知深浅，不知道什么事能做，怎么做，为什么要这么做，即使怯生生问了，得到的答复往往是，That’s just the way it’s done（我们向来这么做），于是我们慢慢也变得成熟、圆滑和懒惰，不再去从深层次思考『为什么要这么做？』因为别人也这么做。慢慢的，这些东西就成为了folklore（陈规陋习）。 一个坏的习惯或传统，可能延续十年、百年、千年，直到那个打破陈规陋习的人出现！ 提问、思考和努力工作，你就会抛弃这些陈规陋习，找到布满荆棘也满是鲜花的另一条鲜活的路。</li>\n<li>经验告诉我，优秀的人才是那些一心想着产品的人，而不是关注管理和流程本身。</li>\n<li>乔布斯认为，人活着是为了追求极致并分享美好的东西给人类，而不是做三流产品并赚钱。这样社会才能进步，让更多的人欣赏到更美好的东西。微软不过是另一个麦当劳，哈哈。</li>\n<li>我以为我是个盖世程序猿，有一天我的程序会奔跑在千万台服务器上。我猜中了前头，可是我猜不着这结局……我们说，呸，你丫从头就错了！ </li>\n<li>有人问，你为什么要从事IT技术研发工作？如果是乔布斯，可能的答案是改变世界；如果是人生导师，可能的答案是跟随你心。如果是我回答呢，答案就是如果不从事这个行业的话呢，我还真不知道该如何养家糊口</li>\n</ul>\n"},{"title":"八年英语学习路及后序","date":"2014-01-05T02:35:30.000Z","_content":"(封面图来自Pixabay)\n\n2013年最后一个月，六级终于考完了，仔细回想一下，大概是在2006年上初中后才开始学习英语的，至今已有八年多了。现在终于不用再上专门的英语课了，就写下这篇\n博客纪念一下。\n\n最开始的那位英语老师现在想来都很不爽，音标只上了一节课，之后就再也没有教过我们英语单词该怎么拼，而是完全教我们把单词的读音给背下来，之后很长一段时间都没能适\n应过来。幸好后来换了老师才算对英语入门来了。那时候感觉学英语最重要的就是单词和语法，当然，这也是考试的需要。至于单词，我一直都是最懒的，几乎没怎么记，因为初\n中所要求的词汇量确实很少，懂音标就会写单词了。而语法，当时还真的要记一下，多亏了我超强的做笔记能力，语法也比其它同学的好，记得上了高中后偶尔都还会拿出那本笔\n记来看。  \n\n上了高中后，发现语法并没有那么重要了，因为英语也就那些个语法，什么从句、感叹句什么的，我现在只看得懂，却说不出他们的名字了。也就写作文时用得多点，by\nthe way，我高中的英语作文和语文作文水平都还是中等偏上的。高中强调的是语感和听力。额。。。我的语感可不强，只能拿着文章一句一句分析，听力我就不想提了，\n完全是渣，三十分的听力一般就得一半，我四级听力居然可以得一百多分，奇迹呀！高中的英语老师喜欢让同学们主动去说英语，对于不喜欢表现的我，每次遇到这种情况都只能\n在边上尴尬地走神。\n\n大学的英语，怎么说呢，课堂上完全是要我们去说和听，我知道这种方式是很正确的教育方式，但是我可不想在课堂上说什么，这就导致了我极其讨厌上英语课。四级和六级虽然\n我也花了很多功夫，但是说实话，这两个考试只要多记点单词就行了，四级记了300多个单词，六级记了200多个单词，除去重复的最多不会超过500个单词，我很郁闷那\n些成天抱着一本词汇表的人到底记住了多少，我只是用有道词典把那些常见但就是记不住的单词给记下来，要考试的时候，再拿出来看看而已。  \n八年了，学的真的不咋的，最近，我加入了伯乐在线的技术翻译小组(ID:haofly)，偶尔为他们翻译一些技术文章。一方面我觉得作为一名程序员要有分享精神，把外\n文翻译为中文可以让那些优秀文章得到更广泛的流传；另一方面，我也应该增强一些对英语的兴趣，不能像以前那样，碰到英语文章就退缩了！虽然我没打算以后出国或者跟外国\n人打交道，但是看英语的文章还是得看的。而且才翻译两篇文章就发现了以前学习英语的大问题了。单词可以说个个都认识（当然，现在的翻译软件都能做到这一点），但就是有\n些词汇以及句子连起来的时候不知道该怎么翻译才能通顺。\n\n作为程序员我们可以不具备听说英语的能力，但必须要有看懂技术文章的能力。世界上绝大多数优秀技术文章都是用英语写的，这个观点应该没人会辩驳吧，谁让计算机这东西是\n美国佬发明的呢！\n\nIn a word, 虽然我以后不会再上英语课了，但我不会放弃这个学了八年的工具的。\n","source":"_posts/ten-years-english-learning.md","raw":"---\ntitle: \"八年英语学习路及后序\"\ndate: 2014-01-05 10:35:30\ncategories: 边走边想\n---\n(封面图来自Pixabay)\n\n2013年最后一个月，六级终于考完了，仔细回想一下，大概是在2006年上初中后才开始学习英语的，至今已有八年多了。现在终于不用再上专门的英语课了，就写下这篇\n博客纪念一下。\n\n最开始的那位英语老师现在想来都很不爽，音标只上了一节课，之后就再也没有教过我们英语单词该怎么拼，而是完全教我们把单词的读音给背下来，之后很长一段时间都没能适\n应过来。幸好后来换了老师才算对英语入门来了。那时候感觉学英语最重要的就是单词和语法，当然，这也是考试的需要。至于单词，我一直都是最懒的，几乎没怎么记，因为初\n中所要求的词汇量确实很少，懂音标就会写单词了。而语法，当时还真的要记一下，多亏了我超强的做笔记能力，语法也比其它同学的好，记得上了高中后偶尔都还会拿出那本笔\n记来看。  \n\n上了高中后，发现语法并没有那么重要了，因为英语也就那些个语法，什么从句、感叹句什么的，我现在只看得懂，却说不出他们的名字了。也就写作文时用得多点，by\nthe way，我高中的英语作文和语文作文水平都还是中等偏上的。高中强调的是语感和听力。额。。。我的语感可不强，只能拿着文章一句一句分析，听力我就不想提了，\n完全是渣，三十分的听力一般就得一半，我四级听力居然可以得一百多分，奇迹呀！高中的英语老师喜欢让同学们主动去说英语，对于不喜欢表现的我，每次遇到这种情况都只能\n在边上尴尬地走神。\n\n大学的英语，怎么说呢，课堂上完全是要我们去说和听，我知道这种方式是很正确的教育方式，但是我可不想在课堂上说什么，这就导致了我极其讨厌上英语课。四级和六级虽然\n我也花了很多功夫，但是说实话，这两个考试只要多记点单词就行了，四级记了300多个单词，六级记了200多个单词，除去重复的最多不会超过500个单词，我很郁闷那\n些成天抱着一本词汇表的人到底记住了多少，我只是用有道词典把那些常见但就是记不住的单词给记下来，要考试的时候，再拿出来看看而已。  \n八年了，学的真的不咋的，最近，我加入了伯乐在线的技术翻译小组(ID:haofly)，偶尔为他们翻译一些技术文章。一方面我觉得作为一名程序员要有分享精神，把外\n文翻译为中文可以让那些优秀文章得到更广泛的流传；另一方面，我也应该增强一些对英语的兴趣，不能像以前那样，碰到英语文章就退缩了！虽然我没打算以后出国或者跟外国\n人打交道，但是看英语的文章还是得看的。而且才翻译两篇文章就发现了以前学习英语的大问题了。单词可以说个个都认识（当然，现在的翻译软件都能做到这一点），但就是有\n些词汇以及句子连起来的时候不知道该怎么翻译才能通顺。\n\n作为程序员我们可以不具备听说英语的能力，但必须要有看懂技术文章的能力。世界上绝大多数优秀技术文章都是用英语写的，这个观点应该没人会辩驳吧，谁让计算机这东西是\n美国佬发明的呢！\n\nIn a word, 虽然我以后不会再上英语课了，但我不会放弃这个学了八年的工具的。\n","slug":"ten-years-english-learning","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phd005w9vnzpt9dhzc8","content":"<p>(封面图来自Pixabay)</p>\n<p>2013年最后一个月，六级终于考完了，仔细回想一下，大概是在2006年上初中后才开始学习英语的，至今已有八年多了。现在终于不用再上专门的英语课了，就写下这篇<br>博客纪念一下。</p>\n<p>最开始的那位英语老师现在想来都很不爽，音标只上了一节课，之后就再也没有教过我们英语单词该怎么拼，而是完全教我们把单词的读音给背下来，之后很长一段时间都没能适<br>应过来。幸好后来换了老师才算对英语入门来了。那时候感觉学英语最重要的就是单词和语法，当然，这也是考试的需要。至于单词，我一直都是最懒的，几乎没怎么记，因为初<br>中所要求的词汇量确实很少，懂音标就会写单词了。而语法，当时还真的要记一下，多亏了我超强的做笔记能力，语法也比其它同学的好，记得上了高中后偶尔都还会拿出那本笔<br>记来看。  </p>\n<p>上了高中后，发现语法并没有那么重要了，因为英语也就那些个语法，什么从句、感叹句什么的，我现在只看得懂，却说不出他们的名字了。也就写作文时用得多点，by<br>the way，我高中的英语作文和语文作文水平都还是中等偏上的。高中强调的是语感和听力。额。。。我的语感可不强，只能拿着文章一句一句分析，听力我就不想提了，<br>完全是渣，三十分的听力一般就得一半，我四级听力居然可以得一百多分，奇迹呀！高中的英语老师喜欢让同学们主动去说英语，对于不喜欢表现的我，每次遇到这种情况都只能<br>在边上尴尬地走神。</p>\n<p>大学的英语，怎么说呢，课堂上完全是要我们去说和听，我知道这种方式是很正确的教育方式，但是我可不想在课堂上说什么，这就导致了我极其讨厌上英语课。四级和六级虽然<br>我也花了很多功夫，但是说实话，这两个考试只要多记点单词就行了，四级记了300多个单词，六级记了200多个单词，除去重复的最多不会超过500个单词，我很郁闷那<br>些成天抱着一本词汇表的人到底记住了多少，我只是用有道词典把那些常见但就是记不住的单词给记下来，要考试的时候，再拿出来看看而已。<br>八年了，学的真的不咋的，最近，我加入了伯乐在线的技术翻译小组(ID:haofly)，偶尔为他们翻译一些技术文章。一方面我觉得作为一名程序员要有分享精神，把外<br>文翻译为中文可以让那些优秀文章得到更广泛的流传；另一方面，我也应该增强一些对英语的兴趣，不能像以前那样，碰到英语文章就退缩了！虽然我没打算以后出国或者跟外国<br>人打交道，但是看英语的文章还是得看的。而且才翻译两篇文章就发现了以前学习英语的大问题了。单词可以说个个都认识（当然，现在的翻译软件都能做到这一点），但就是有<br>些词汇以及句子连起来的时候不知道该怎么翻译才能通顺。</p>\n<p>作为程序员我们可以不具备听说英语的能力，但必须要有看懂技术文章的能力。世界上绝大多数优秀技术文章都是用英语写的，这个观点应该没人会辩驳吧，谁让计算机这东西是<br>美国佬发明的呢！</p>\n<p>In a word, 虽然我以后不会再上英语课了，但我不会放弃这个学了八年的工具的。</p>\n","excerpt":"","more":"<p>(封面图来自Pixabay)</p>\n<p>2013年最后一个月，六级终于考完了，仔细回想一下，大概是在2006年上初中后才开始学习英语的，至今已有八年多了。现在终于不用再上专门的英语课了，就写下这篇<br>博客纪念一下。</p>\n<p>最开始的那位英语老师现在想来都很不爽，音标只上了一节课，之后就再也没有教过我们英语单词该怎么拼，而是完全教我们把单词的读音给背下来，之后很长一段时间都没能适<br>应过来。幸好后来换了老师才算对英语入门来了。那时候感觉学英语最重要的就是单词和语法，当然，这也是考试的需要。至于单词，我一直都是最懒的，几乎没怎么记，因为初<br>中所要求的词汇量确实很少，懂音标就会写单词了。而语法，当时还真的要记一下，多亏了我超强的做笔记能力，语法也比其它同学的好，记得上了高中后偶尔都还会拿出那本笔<br>记来看。  </p>\n<p>上了高中后，发现语法并没有那么重要了，因为英语也就那些个语法，什么从句、感叹句什么的，我现在只看得懂，却说不出他们的名字了。也就写作文时用得多点，by<br>the way，我高中的英语作文和语文作文水平都还是中等偏上的。高中强调的是语感和听力。额。。。我的语感可不强，只能拿着文章一句一句分析，听力我就不想提了，<br>完全是渣，三十分的听力一般就得一半，我四级听力居然可以得一百多分，奇迹呀！高中的英语老师喜欢让同学们主动去说英语，对于不喜欢表现的我，每次遇到这种情况都只能<br>在边上尴尬地走神。</p>\n<p>大学的英语，怎么说呢，课堂上完全是要我们去说和听，我知道这种方式是很正确的教育方式，但是我可不想在课堂上说什么，这就导致了我极其讨厌上英语课。四级和六级虽然<br>我也花了很多功夫，但是说实话，这两个考试只要多记点单词就行了，四级记了300多个单词，六级记了200多个单词，除去重复的最多不会超过500个单词，我很郁闷那<br>些成天抱着一本词汇表的人到底记住了多少，我只是用有道词典把那些常见但就是记不住的单词给记下来，要考试的时候，再拿出来看看而已。<br>八年了，学的真的不咋的，最近，我加入了伯乐在线的技术翻译小组(ID:haofly)，偶尔为他们翻译一些技术文章。一方面我觉得作为一名程序员要有分享精神，把外<br>文翻译为中文可以让那些优秀文章得到更广泛的流传；另一方面，我也应该增强一些对英语的兴趣，不能像以前那样，碰到英语文章就退缩了！虽然我没打算以后出国或者跟外国<br>人打交道，但是看英语的文章还是得看的。而且才翻译两篇文章就发现了以前学习英语的大问题了。单词可以说个个都认识（当然，现在的翻译软件都能做到这一点），但就是有<br>些词汇以及句子连起来的时候不知道该怎么翻译才能通顺。</p>\n<p>作为程序员我们可以不具备听说英语的能力，但必须要有看懂技术文章的能力。世界上绝大多数优秀技术文章都是用英语写的，这个观点应该没人会辩驳吧，谁让计算机这东西是<br>美国佬发明的呢！</p>\n<p>In a word, 虽然我以后不会再上英语课了，但我不会放弃这个学了八年的工具的。</p>\n"},{"title":"懒不是最恐怖的，最恐怖的是没发现自己懒","date":"2016-04-03T15:45:50.000Z","_content":"重庆，真的是一座来了就跑不脱的城市。这里每个人干事都风风火火、雷厉风行，从不脱离带水，但是这里的每一个人骨子里貌似都藏着一份“不与世俗同流合污”的精神。磁器口喝茶，植物园赏花，歌乐山看树，朝天门游江，清晨找个公园晨跑，傍晚全家围着看生活麻辣烫，这样的生活，一直以来都是我所期待的，安静、舒适、简单、美好。曾经看过重庆时尚频道冷暖人生栏目的一个广告(应该是09年以前的了，始终找不到那个视频了)，广告语是：当生命在懵懂中灿烂/当情愫在无言中飘零/当我们在百转中千回/其实人生正如季节，冷暖交替/看人生故事，品故事人生。就像这样，当生活麻辣烫看久了，就真的感觉已经离不开这种生活方式了。推荐大家看看《火锅英雄》这部陈坤和白百合主演的富有重庆本色的电影，谈不上精彩，但是重庆的风土人情还是展现得不错的，特别是片中的几处取景，特别不错。\n![重庆](http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy.jpg)\n<center>*haofly拍摄于重庆朝天门*</center>\n以上说的并不是今天要讲的重点，重点是我现在发现在小城市生活与大城市一样，同样要面临很多困难，大城市多的是外界施加给你的压力，而小城市则是自己与自己抗争。如今，终于理解什么叫“努力不一定会成功，但是不努力一定会很舒服”。在大城市，压力是很大，但至少身边有各种拼了命也想要成功的朋友，你自然也不会松懈，但小城市就不一样了，你会感觉每个人好像都是安于现状的，每个人好像都没有多大的追求，当然，我并不了解每一个人，这些也只是表面上给我的感觉而已，但是自己还是潜移默化地被感染了。渐渐地，感觉到自己的棱角被磨平了，说不出年少时的豪言壮语，再提起曾经的梦想也只是一闪而过，生怕自己发现了自己的堕落。\n\n近一年的实习经验经历，不仅没让我越来越强，反而使我觉得在这一年的时间里自己并没有多少成长。我是在吃老本吗？不知道。我是在骄傲吗？不知道。我是温水里的青蛙吗？不知道。仔细想想，我什么都不知道，确实，我已经好久好久没有静下来这么想了。遇到人生第一个瓶颈，我竟不知所措，最终选择视而不见，究其原因，可能是懒，因为懒，所以好多该做的事情没有做，因为懒，根本没有去发现什么事情该做，因为懒，连未来怎么走都不知道，只能走一步是一步。但是每个人不都有轻度的懒癌吗，为什么偏偏就我的懒癌就无可救药吗？\n\n近日发现，身边的人都成长十分迅猛，而自己依然止步不前，心里十分焦虑，仿佛压力越大，行动力反而越差，事情越多就越不想做。清明回家，回想了一下自己近一年的实习，我发现，目前我要克服自己的最大的一个缺点就是反省。不会反省，所以每次我发现自己有点懒惰了，然后就会立马忽略；不会反省，有些事情总是一错再错；不会反省，永远不知道自己什么事情做了，什么事情没做，什么事情做好了，什么事情没做好。总之，“吾日三省吾身”，我要为自己制定一个计划，希望能通过这个计划提高自己的反省能力，并从中找到技术瓶颈的解决办法。\n![](http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy-1.png)\n每天总结一次，并在每周周末形成一篇完整的周报。\n\n看起来又是一篇无用的计划文，但是闹钟已设，毕竟不都说，21天就可以养成一个习惯了吗，加油，还是得多喝鸡汤呀。","source":"_posts/terriable-lazy.md","raw":"---\ntitle: \"懒不是最恐怖的，最恐怖的是没发现自己懒\"\ndate: 2016-04-03 23:45:50\ncategories: 边走边想\n---\n重庆，真的是一座来了就跑不脱的城市。这里每个人干事都风风火火、雷厉风行，从不脱离带水，但是这里的每一个人骨子里貌似都藏着一份“不与世俗同流合污”的精神。磁器口喝茶，植物园赏花，歌乐山看树，朝天门游江，清晨找个公园晨跑，傍晚全家围着看生活麻辣烫，这样的生活，一直以来都是我所期待的，安静、舒适、简单、美好。曾经看过重庆时尚频道冷暖人生栏目的一个广告(应该是09年以前的了，始终找不到那个视频了)，广告语是：当生命在懵懂中灿烂/当情愫在无言中飘零/当我们在百转中千回/其实人生正如季节，冷暖交替/看人生故事，品故事人生。就像这样，当生活麻辣烫看久了，就真的感觉已经离不开这种生活方式了。推荐大家看看《火锅英雄》这部陈坤和白百合主演的富有重庆本色的电影，谈不上精彩，但是重庆的风土人情还是展现得不错的，特别是片中的几处取景，特别不错。\n![重庆](http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy.jpg)\n<center>*haofly拍摄于重庆朝天门*</center>\n以上说的并不是今天要讲的重点，重点是我现在发现在小城市生活与大城市一样，同样要面临很多困难，大城市多的是外界施加给你的压力，而小城市则是自己与自己抗争。如今，终于理解什么叫“努力不一定会成功，但是不努力一定会很舒服”。在大城市，压力是很大，但至少身边有各种拼了命也想要成功的朋友，你自然也不会松懈，但小城市就不一样了，你会感觉每个人好像都是安于现状的，每个人好像都没有多大的追求，当然，我并不了解每一个人，这些也只是表面上给我的感觉而已，但是自己还是潜移默化地被感染了。渐渐地，感觉到自己的棱角被磨平了，说不出年少时的豪言壮语，再提起曾经的梦想也只是一闪而过，生怕自己发现了自己的堕落。\n\n近一年的实习经验经历，不仅没让我越来越强，反而使我觉得在这一年的时间里自己并没有多少成长。我是在吃老本吗？不知道。我是在骄傲吗？不知道。我是温水里的青蛙吗？不知道。仔细想想，我什么都不知道，确实，我已经好久好久没有静下来这么想了。遇到人生第一个瓶颈，我竟不知所措，最终选择视而不见，究其原因，可能是懒，因为懒，所以好多该做的事情没有做，因为懒，根本没有去发现什么事情该做，因为懒，连未来怎么走都不知道，只能走一步是一步。但是每个人不都有轻度的懒癌吗，为什么偏偏就我的懒癌就无可救药吗？\n\n近日发现，身边的人都成长十分迅猛，而自己依然止步不前，心里十分焦虑，仿佛压力越大，行动力反而越差，事情越多就越不想做。清明回家，回想了一下自己近一年的实习，我发现，目前我要克服自己的最大的一个缺点就是反省。不会反省，所以每次我发现自己有点懒惰了，然后就会立马忽略；不会反省，有些事情总是一错再错；不会反省，永远不知道自己什么事情做了，什么事情没做，什么事情做好了，什么事情没做好。总之，“吾日三省吾身”，我要为自己制定一个计划，希望能通过这个计划提高自己的反省能力，并从中找到技术瓶颈的解决办法。\n![](http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy-1.png)\n每天总结一次，并在每周周末形成一篇完整的周报。\n\n看起来又是一篇无用的计划文，但是闹钟已设，毕竟不都说，21天就可以养成一个习惯了吗，加油，还是得多喝鸡汤呀。","slug":"terriable-lazy","published":1,"updated":"2016-04-03T16:37:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phg005y9vnzg0yvm2m2","content":"<p>重庆，真的是一座来了就跑不脱的城市。这里每个人干事都风风火火、雷厉风行，从不脱离带水，但是这里的每一个人骨子里貌似都藏着一份“不与世俗同流合污”的精神。磁器口喝茶，植物园赏花，歌乐山看树，朝天门游江，清晨找个公园晨跑，傍晚全家围着看生活麻辣烫，这样的生活，一直以来都是我所期待的，安静、舒适、简单、美好。曾经看过重庆时尚频道冷暖人生栏目的一个广告(应该是09年以前的了，始终找不到那个视频了)，广告语是：当生命在懵懂中灿烂/当情愫在无言中飘零/当我们在百转中千回/其实人生正如季节，冷暖交替/看人生故事，品故事人生。就像这样，当生活麻辣烫看久了，就真的感觉已经离不开这种生活方式了。推荐大家看看《火锅英雄》这部陈坤和白百合主演的富有重庆本色的电影，谈不上精彩，但是重庆的风土人情还是展现得不错的，特别是片中的几处取景，特别不错。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy.jpg\" alt=\"重庆\"></p>\n<p><center><em>haofly拍摄于重庆朝天门</em></center><br>以上说的并不是今天要讲的重点，重点是我现在发现在小城市生活与大城市一样，同样要面临很多困难，大城市多的是外界施加给你的压力，而小城市则是自己与自己抗争。如今，终于理解什么叫“努力不一定会成功，但是不努力一定会很舒服”。在大城市，压力是很大，但至少身边有各种拼了命也想要成功的朋友，你自然也不会松懈，但小城市就不一样了，你会感觉每个人好像都是安于现状的，每个人好像都没有多大的追求，当然，我并不了解每一个人，这些也只是表面上给我的感觉而已，但是自己还是潜移默化地被感染了。渐渐地，感觉到自己的棱角被磨平了，说不出年少时的豪言壮语，再提起曾经的梦想也只是一闪而过，生怕自己发现了自己的堕落。</p>\n<p>近一年的实习经验经历，不仅没让我越来越强，反而使我觉得在这一年的时间里自己并没有多少成长。我是在吃老本吗？不知道。我是在骄傲吗？不知道。我是温水里的青蛙吗？不知道。仔细想想，我什么都不知道，确实，我已经好久好久没有静下来这么想了。遇到人生第一个瓶颈，我竟不知所措，最终选择视而不见，究其原因，可能是懒，因为懒，所以好多该做的事情没有做，因为懒，根本没有去发现什么事情该做，因为懒，连未来怎么走都不知道，只能走一步是一步。但是每个人不都有轻度的懒癌吗，为什么偏偏就我的懒癌就无可救药吗？</p>\n<p>近日发现，身边的人都成长十分迅猛，而自己依然止步不前，心里十分焦虑，仿佛压力越大，行动力反而越差，事情越多就越不想做。清明回家，回想了一下自己近一年的实习，我发现，目前我要克服自己的最大的一个缺点就是反省。不会反省，所以每次我发现自己有点懒惰了，然后就会立马忽略；不会反省，有些事情总是一错再错；不会反省，永远不知道自己什么事情做了，什么事情没做，什么事情做好了，什么事情没做好。总之，“吾日三省吾身”，我要为自己制定一个计划，希望能通过这个计划提高自己的反省能力，并从中找到技术瓶颈的解决办法。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy-1.png\" alt=\"\"><br>每天总结一次，并在每周周末形成一篇完整的周报。</p>\n<p>看起来又是一篇无用的计划文，但是闹钟已设，毕竟不都说，21天就可以养成一个习惯了吗，加油，还是得多喝鸡汤呀。</p>\n","excerpt":"","more":"<p>重庆，真的是一座来了就跑不脱的城市。这里每个人干事都风风火火、雷厉风行，从不脱离带水，但是这里的每一个人骨子里貌似都藏着一份“不与世俗同流合污”的精神。磁器口喝茶，植物园赏花，歌乐山看树，朝天门游江，清晨找个公园晨跑，傍晚全家围着看生活麻辣烫，这样的生活，一直以来都是我所期待的，安静、舒适、简单、美好。曾经看过重庆时尚频道冷暖人生栏目的一个广告(应该是09年以前的了，始终找不到那个视频了)，广告语是：当生命在懵懂中灿烂/当情愫在无言中飘零/当我们在百转中千回/其实人生正如季节，冷暖交替/看人生故事，品故事人生。就像这样，当生活麻辣烫看久了，就真的感觉已经离不开这种生活方式了。推荐大家看看《火锅英雄》这部陈坤和白百合主演的富有重庆本色的电影，谈不上精彩，但是重庆的风土人情还是展现得不错的，特别是片中的几处取景，特别不错。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy.jpg\" alt=\"重庆\"></p>\n<p><center><em>haofly拍摄于重庆朝天门</em></center><br>以上说的并不是今天要讲的重点，重点是我现在发现在小城市生活与大城市一样，同样要面临很多困难，大城市多的是外界施加给你的压力，而小城市则是自己与自己抗争。如今，终于理解什么叫“努力不一定会成功，但是不努力一定会很舒服”。在大城市，压力是很大，但至少身边有各种拼了命也想要成功的朋友，你自然也不会松懈，但小城市就不一样了，你会感觉每个人好像都是安于现状的，每个人好像都没有多大的追求，当然，我并不了解每一个人，这些也只是表面上给我的感觉而已，但是自己还是潜移默化地被感染了。渐渐地，感觉到自己的棱角被磨平了，说不出年少时的豪言壮语，再提起曾经的梦想也只是一闪而过，生怕自己发现了自己的堕落。</p>\n<p>近一年的实习经验经历，不仅没让我越来越强，反而使我觉得在这一年的时间里自己并没有多少成长。我是在吃老本吗？不知道。我是在骄傲吗？不知道。我是温水里的青蛙吗？不知道。仔细想想，我什么都不知道，确实，我已经好久好久没有静下来这么想了。遇到人生第一个瓶颈，我竟不知所措，最终选择视而不见，究其原因，可能是懒，因为懒，所以好多该做的事情没有做，因为懒，根本没有去发现什么事情该做，因为懒，连未来怎么走都不知道，只能走一步是一步。但是每个人不都有轻度的懒癌吗，为什么偏偏就我的懒癌就无可救药吗？</p>\n<p>近日发现，身边的人都成长十分迅猛，而自己依然止步不前，心里十分焦虑，仿佛压力越大，行动力反而越差，事情越多就越不想做。清明回家，回想了一下自己近一年的实习，我发现，目前我要克服自己的最大的一个缺点就是反省。不会反省，所以每次我发现自己有点懒惰了，然后就会立马忽略；不会反省，有些事情总是一错再错；不会反省，永远不知道自己什么事情做了，什么事情没做，什么事情做好了，什么事情没做好。总之，“吾日三省吾身”，我要为自己制定一个计划，希望能通过这个计划提高自己的反省能力，并从中找到技术瓶颈的解决办法。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy-1.png\" alt=\"\"><br>每天总结一次，并在每周周末形成一篇完整的周报。</p>\n<p>看起来又是一篇无用的计划文，但是闹钟已设，毕竟不都说，21天就可以养成一个习惯了吗，加油，还是得多喝鸡汤呀。</p>\n"},{"title":"那一年的梦想","date":"2012-06-08T07:30:18.000Z","_content":"那一年我们的梦想，梦想当画家、科学家或者宇航员  \n那时候，我们在幼儿园的图书室向老师畅谈  \n那一年我们的梦想，梦想住高楼 开汽车  \n或者想妈妈一样穿着高跟鞋 或者想爸爸一样夹着公文包  \n那时候，我们在小学的校门前向爸妈分享  \n那一年，我们的梦想，梦想着不做值日生 多节体育课  \n或者永远没有补习班  \n那时候，我们在中学的课后向朋友诉说  \n那一年，我们的梦想，梦想着考大学，谈恋爱  \n或者在流浪中享受自由  \n那一年，我们在高中的课桌旁向同桌闲扯  \n那一年，我们的梦想，梦想着有一份工作，一个爱人  \n或者在陌生的城市建一个自己的家  \n那时候，我们在大学的操场上向天空呐喊\n\n那一年我们的梦想离我们这么近，却又那么遥远  \n那一年我们的梦想被多少人忘却  \n又被多少人埋在心底  \n那一年我们的梦想承受着多少无从选择  \n又经受着哪些无奈彷徨  \n那一年我们的梦想几分孤独伴着几分落寞的凄凉  \n那一年我们的梦想在离我们多远的地方独自流浪\n\n曾经梦想当作家的你，可能毕业就没再摸过那只爸爸送给你的钢笔  \n曾经梦想当记者的你，可能毕业就没再主动和人倾诉过你心里的话语  \n曾经梦想当设计师的你，可能毕业就没再关注过那些生活中创意的点点滴滴  \n曾经梦想当教师的你，可能毕业就没再碰过黑板和雪白的粉笔  \n曾经梦想当军人的你，可能毕业就没在任何地方站过一分钟军姿\n\n你是否记得我们曾为了梦想和别人争执不休  \n你是否记得我们曾为了梦想寒窗苦读十几年  \n你是否记得我们曾为了梦想背着行囊离开自己的家乡  \n真想知道现在有多少人还抓着梦想不肯放手  \n真想知道现在有多少人运气好能朝着梦想的地方走\n\n今年，我和很多朋友毕业了慨叹昔日光阴似箭日月如梭  \n今年，我和很多朋友毕业了恍惚中聊起这么多年被遗忘的那些儿时的梦想  \n今年，我和很多朋友毕业了才发现都没能如愿踏上梦想的路  \n今年，我和很多朋友毕业了磕磕绊绊中我们连自己的梦想都快日渐模糊  \n今年，我和很多朋友毕业了责备自己大学的时候究竟为了什么而忽略那些繁华的梦想  \n今年，我和很多朋友毕业了那些梦想让我们沉默的哭了\n\n不知道有多少人在这个城市忘记了自己最初的梦想  \n不知道有多少人如我们一样记起梦想的时候会泪流满面\n\n其实，有的时候我们的梦想很简单  \n梦想有稳定的收入  \n梦想过简单的生活  \n梦想靠自己的双手为自己爱的人打造一个未来  \n梦想在陌生的城市有一个家  \n梦想那位我们忙活了大半辈子的父母过上好一点的生活  \n只有我们知道，在面对很多困难和挑战的时候  \n我们咬着牙坚韧生活的时候  \n我们所做的一切并不仅仅是为了我们自己  \n而更多的是为了我们的父母为了我们的爱人  \n为了他们 我们起早他黑  \n为了他们 我们省吃俭用  \n为了他们 我们从不提一个苦字  \n为了他们 我们背负了一切责任和使命\n\n其实，有的时候，我们的梦想很伟大  \n梦想拥有一段不平凡的人生辉煌  \n梦想缔造行业的一个奇迹  \n梦想引领正义是那些困苦中的人们冲破黑暗  \n梦想帮助更多的人实现他们的梦想  \n但是无论怎样，只要我们还记得自己的梦想，就不要放弃对他的追逐  \n我相信 不管经历多少磨难，我们终究可以实现自己的梦想  \n因为，他就在不远的地方观望着我们  \n想他勇敢的飞奔过去\n\n加油吧，不要因为昨天的沮丧而令今天的梦想黯然失色  \n也不要因短暂的忙碌奔波而忘了我们来时的路\n\n本文内容来自于一个叫《那一年的梦想》的视频，是我在高考前摘录的，在2012年6月8日下午三点半发表于[QQ空间](http://user.qzone.qq.\ncom/896499825/blog/1328543106 \"Link:\nhttp://user.qzone.qq.com/896499825/blog/1328543106\"\n)，那时候我正坐在高考最后一堂的考场里，其实是定时发送的。现在看来，这篇文章依然是那么的让人热血沸腾！\n","source":"_posts/that-year-dream.md","raw":"---\ntitle: \"那一年的梦想\"\ndate: 2012-06-08 15:30:18\ncategories: 边走边想\n---\n那一年我们的梦想，梦想当画家、科学家或者宇航员  \n那时候，我们在幼儿园的图书室向老师畅谈  \n那一年我们的梦想，梦想住高楼 开汽车  \n或者想妈妈一样穿着高跟鞋 或者想爸爸一样夹着公文包  \n那时候，我们在小学的校门前向爸妈分享  \n那一年，我们的梦想，梦想着不做值日生 多节体育课  \n或者永远没有补习班  \n那时候，我们在中学的课后向朋友诉说  \n那一年，我们的梦想，梦想着考大学，谈恋爱  \n或者在流浪中享受自由  \n那一年，我们在高中的课桌旁向同桌闲扯  \n那一年，我们的梦想，梦想着有一份工作，一个爱人  \n或者在陌生的城市建一个自己的家  \n那时候，我们在大学的操场上向天空呐喊\n\n那一年我们的梦想离我们这么近，却又那么遥远  \n那一年我们的梦想被多少人忘却  \n又被多少人埋在心底  \n那一年我们的梦想承受着多少无从选择  \n又经受着哪些无奈彷徨  \n那一年我们的梦想几分孤独伴着几分落寞的凄凉  \n那一年我们的梦想在离我们多远的地方独自流浪\n\n曾经梦想当作家的你，可能毕业就没再摸过那只爸爸送给你的钢笔  \n曾经梦想当记者的你，可能毕业就没再主动和人倾诉过你心里的话语  \n曾经梦想当设计师的你，可能毕业就没再关注过那些生活中创意的点点滴滴  \n曾经梦想当教师的你，可能毕业就没再碰过黑板和雪白的粉笔  \n曾经梦想当军人的你，可能毕业就没在任何地方站过一分钟军姿\n\n你是否记得我们曾为了梦想和别人争执不休  \n你是否记得我们曾为了梦想寒窗苦读十几年  \n你是否记得我们曾为了梦想背着行囊离开自己的家乡  \n真想知道现在有多少人还抓着梦想不肯放手  \n真想知道现在有多少人运气好能朝着梦想的地方走\n\n今年，我和很多朋友毕业了慨叹昔日光阴似箭日月如梭  \n今年，我和很多朋友毕业了恍惚中聊起这么多年被遗忘的那些儿时的梦想  \n今年，我和很多朋友毕业了才发现都没能如愿踏上梦想的路  \n今年，我和很多朋友毕业了磕磕绊绊中我们连自己的梦想都快日渐模糊  \n今年，我和很多朋友毕业了责备自己大学的时候究竟为了什么而忽略那些繁华的梦想  \n今年，我和很多朋友毕业了那些梦想让我们沉默的哭了\n\n不知道有多少人在这个城市忘记了自己最初的梦想  \n不知道有多少人如我们一样记起梦想的时候会泪流满面\n\n其实，有的时候我们的梦想很简单  \n梦想有稳定的收入  \n梦想过简单的生活  \n梦想靠自己的双手为自己爱的人打造一个未来  \n梦想在陌生的城市有一个家  \n梦想那位我们忙活了大半辈子的父母过上好一点的生活  \n只有我们知道，在面对很多困难和挑战的时候  \n我们咬着牙坚韧生活的时候  \n我们所做的一切并不仅仅是为了我们自己  \n而更多的是为了我们的父母为了我们的爱人  \n为了他们 我们起早他黑  \n为了他们 我们省吃俭用  \n为了他们 我们从不提一个苦字  \n为了他们 我们背负了一切责任和使命\n\n其实，有的时候，我们的梦想很伟大  \n梦想拥有一段不平凡的人生辉煌  \n梦想缔造行业的一个奇迹  \n梦想引领正义是那些困苦中的人们冲破黑暗  \n梦想帮助更多的人实现他们的梦想  \n但是无论怎样，只要我们还记得自己的梦想，就不要放弃对他的追逐  \n我相信 不管经历多少磨难，我们终究可以实现自己的梦想  \n因为，他就在不远的地方观望着我们  \n想他勇敢的飞奔过去\n\n加油吧，不要因为昨天的沮丧而令今天的梦想黯然失色  \n也不要因短暂的忙碌奔波而忘了我们来时的路\n\n本文内容来自于一个叫《那一年的梦想》的视频，是我在高考前摘录的，在2012年6月8日下午三点半发表于[QQ空间](http://user.qzone.qq.\ncom/896499825/blog/1328543106 \"Link:\nhttp://user.qzone.qq.com/896499825/blog/1328543106\"\n)，那时候我正坐在高考最后一堂的考场里，其实是定时发送的。现在看来，这篇文章依然是那么的让人热血沸腾！\n","slug":"that-year-dream","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phh00609vnzvrgynsnu","content":"<p>那一年我们的梦想，梦想当画家、科学家或者宇航员<br>那时候，我们在幼儿园的图书室向老师畅谈<br>那一年我们的梦想，梦想住高楼 开汽车<br>或者想妈妈一样穿着高跟鞋 或者想爸爸一样夹着公文包<br>那时候，我们在小学的校门前向爸妈分享<br>那一年，我们的梦想，梦想着不做值日生 多节体育课<br>或者永远没有补习班<br>那时候，我们在中学的课后向朋友诉说<br>那一年，我们的梦想，梦想着考大学，谈恋爱<br>或者在流浪中享受自由<br>那一年，我们在高中的课桌旁向同桌闲扯<br>那一年，我们的梦想，梦想着有一份工作，一个爱人<br>或者在陌生的城市建一个自己的家<br>那时候，我们在大学的操场上向天空呐喊</p>\n<p>那一年我们的梦想离我们这么近，却又那么遥远<br>那一年我们的梦想被多少人忘却<br>又被多少人埋在心底<br>那一年我们的梦想承受着多少无从选择<br>又经受着哪些无奈彷徨<br>那一年我们的梦想几分孤独伴着几分落寞的凄凉<br>那一年我们的梦想在离我们多远的地方独自流浪</p>\n<p>曾经梦想当作家的你，可能毕业就没再摸过那只爸爸送给你的钢笔<br>曾经梦想当记者的你，可能毕业就没再主动和人倾诉过你心里的话语<br>曾经梦想当设计师的你，可能毕业就没再关注过那些生活中创意的点点滴滴<br>曾经梦想当教师的你，可能毕业就没再碰过黑板和雪白的粉笔<br>曾经梦想当军人的你，可能毕业就没在任何地方站过一分钟军姿</p>\n<p>你是否记得我们曾为了梦想和别人争执不休<br>你是否记得我们曾为了梦想寒窗苦读十几年<br>你是否记得我们曾为了梦想背着行囊离开自己的家乡<br>真想知道现在有多少人还抓着梦想不肯放手<br>真想知道现在有多少人运气好能朝着梦想的地方走</p>\n<p>今年，我和很多朋友毕业了慨叹昔日光阴似箭日月如梭<br>今年，我和很多朋友毕业了恍惚中聊起这么多年被遗忘的那些儿时的梦想<br>今年，我和很多朋友毕业了才发现都没能如愿踏上梦想的路<br>今年，我和很多朋友毕业了磕磕绊绊中我们连自己的梦想都快日渐模糊<br>今年，我和很多朋友毕业了责备自己大学的时候究竟为了什么而忽略那些繁华的梦想<br>今年，我和很多朋友毕业了那些梦想让我们沉默的哭了</p>\n<p>不知道有多少人在这个城市忘记了自己最初的梦想<br>不知道有多少人如我们一样记起梦想的时候会泪流满面</p>\n<p>其实，有的时候我们的梦想很简单<br>梦想有稳定的收入<br>梦想过简单的生活<br>梦想靠自己的双手为自己爱的人打造一个未来<br>梦想在陌生的城市有一个家<br>梦想那位我们忙活了大半辈子的父母过上好一点的生活<br>只有我们知道，在面对很多困难和挑战的时候<br>我们咬着牙坚韧生活的时候<br>我们所做的一切并不仅仅是为了我们自己<br>而更多的是为了我们的父母为了我们的爱人<br>为了他们 我们起早他黑<br>为了他们 我们省吃俭用<br>为了他们 我们从不提一个苦字<br>为了他们 我们背负了一切责任和使命</p>\n<p>其实，有的时候，我们的梦想很伟大<br>梦想拥有一段不平凡的人生辉煌<br>梦想缔造行业的一个奇迹<br>梦想引领正义是那些困苦中的人们冲破黑暗<br>梦想帮助更多的人实现他们的梦想<br>但是无论怎样，只要我们还记得自己的梦想，就不要放弃对他的追逐<br>我相信 不管经历多少磨难，我们终究可以实现自己的梦想<br>因为，他就在不远的地方观望着我们<br>想他勇敢的飞奔过去</p>\n<p>加油吧，不要因为昨天的沮丧而令今天的梦想黯然失色<br>也不要因短暂的忙碌奔波而忘了我们来时的路</p>\n<p>本文内容来自于一个叫《那一年的梦想》的视频，是我在高考前摘录的，在2012年6月8日下午三点半发表于<a href=\"http://user.qzone.qq.\ncom/896499825/blog/1328543106\" title=\"Link:\nhttp://user.qzone.qq.com/896499825/blog/1328543106\" target=\"_blank\" rel=\"external\">QQ空间</a>，那时候我正坐在高考最后一堂的考场里，其实是定时发送的。现在看来，这篇文章依然是那么的让人热血沸腾！</p>\n","excerpt":"","more":"<p>那一年我们的梦想，梦想当画家、科学家或者宇航员<br>那时候，我们在幼儿园的图书室向老师畅谈<br>那一年我们的梦想，梦想住高楼 开汽车<br>或者想妈妈一样穿着高跟鞋 或者想爸爸一样夹着公文包<br>那时候，我们在小学的校门前向爸妈分享<br>那一年，我们的梦想，梦想着不做值日生 多节体育课<br>或者永远没有补习班<br>那时候，我们在中学的课后向朋友诉说<br>那一年，我们的梦想，梦想着考大学，谈恋爱<br>或者在流浪中享受自由<br>那一年，我们在高中的课桌旁向同桌闲扯<br>那一年，我们的梦想，梦想着有一份工作，一个爱人<br>或者在陌生的城市建一个自己的家<br>那时候，我们在大学的操场上向天空呐喊</p>\n<p>那一年我们的梦想离我们这么近，却又那么遥远<br>那一年我们的梦想被多少人忘却<br>又被多少人埋在心底<br>那一年我们的梦想承受着多少无从选择<br>又经受着哪些无奈彷徨<br>那一年我们的梦想几分孤独伴着几分落寞的凄凉<br>那一年我们的梦想在离我们多远的地方独自流浪</p>\n<p>曾经梦想当作家的你，可能毕业就没再摸过那只爸爸送给你的钢笔<br>曾经梦想当记者的你，可能毕业就没再主动和人倾诉过你心里的话语<br>曾经梦想当设计师的你，可能毕业就没再关注过那些生活中创意的点点滴滴<br>曾经梦想当教师的你，可能毕业就没再碰过黑板和雪白的粉笔<br>曾经梦想当军人的你，可能毕业就没在任何地方站过一分钟军姿</p>\n<p>你是否记得我们曾为了梦想和别人争执不休<br>你是否记得我们曾为了梦想寒窗苦读十几年<br>你是否记得我们曾为了梦想背着行囊离开自己的家乡<br>真想知道现在有多少人还抓着梦想不肯放手<br>真想知道现在有多少人运气好能朝着梦想的地方走</p>\n<p>今年，我和很多朋友毕业了慨叹昔日光阴似箭日月如梭<br>今年，我和很多朋友毕业了恍惚中聊起这么多年被遗忘的那些儿时的梦想<br>今年，我和很多朋友毕业了才发现都没能如愿踏上梦想的路<br>今年，我和很多朋友毕业了磕磕绊绊中我们连自己的梦想都快日渐模糊<br>今年，我和很多朋友毕业了责备自己大学的时候究竟为了什么而忽略那些繁华的梦想<br>今年，我和很多朋友毕业了那些梦想让我们沉默的哭了</p>\n<p>不知道有多少人在这个城市忘记了自己最初的梦想<br>不知道有多少人如我们一样记起梦想的时候会泪流满面</p>\n<p>其实，有的时候我们的梦想很简单<br>梦想有稳定的收入<br>梦想过简单的生活<br>梦想靠自己的双手为自己爱的人打造一个未来<br>梦想在陌生的城市有一个家<br>梦想那位我们忙活了大半辈子的父母过上好一点的生活<br>只有我们知道，在面对很多困难和挑战的时候<br>我们咬着牙坚韧生活的时候<br>我们所做的一切并不仅仅是为了我们自己<br>而更多的是为了我们的父母为了我们的爱人<br>为了他们 我们起早他黑<br>为了他们 我们省吃俭用<br>为了他们 我们从不提一个苦字<br>为了他们 我们背负了一切责任和使命</p>\n<p>其实，有的时候，我们的梦想很伟大<br>梦想拥有一段不平凡的人生辉煌<br>梦想缔造行业的一个奇迹<br>梦想引领正义是那些困苦中的人们冲破黑暗<br>梦想帮助更多的人实现他们的梦想<br>但是无论怎样，只要我们还记得自己的梦想，就不要放弃对他的追逐<br>我相信 不管经历多少磨难，我们终究可以实现自己的梦想<br>因为，他就在不远的地方观望着我们<br>想他勇敢的飞奔过去</p>\n<p>加油吧，不要因为昨天的沮丧而令今天的梦想黯然失色<br>也不要因短暂的忙碌奔波而忘了我们来时的路</p>\n<p>本文内容来自于一个叫《那一年的梦想》的视频，是我在高考前摘录的，在2012年6月8日下午三点半发表于<a href=\"http://user.qzone.qq.\ncom/896499825/blog/1328543106\" title=\"Link:\nhttp://user.qzone.qq.com/896499825/blog/1328543106\">QQ空间</a>，那时候我正坐在高考最后一堂的考场里，其实是定时发送的。现在看来，这篇文章依然是那么的让人热血沸腾！</p>\n"},{"title":"工作室第一次项目总结","date":"2014-12-22T04:06:16.000Z","_content":"这一个多月来都没发过任何的博文，就是因为一直在忙工作室的项目。而今天我终于了解到，老板貌似已经放弃这个项目了，而且我居然完全不知道。不过，无论怎样，在这次项\n目中我还是学到了很多很多。\n\n首先，简单说一下，我们做的是一个外卖网站，我担任的角色是后端开发和服务器与数据库的运维，前端4人，后端2人，我是后端负责人。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio.png)  \n\n# 团队协作出现的问题\n\n## 1.无需求，无策划，无设计，项目开始后基本只有开发人员\n\n这是最大的弊端，我也是醉了。项目开始前，我一直催老板快把需求拿来，最后拿是拿来了，但是至今我也没看过，当项目正式开始时他就叫前端去设计接口，但是今天突然了解\n到，前端也没有看到过需求。也就是说整个项目做到现在，所有的功能，基本上都是前后端开发人员自己“臆想”出来的。而且整个过程无策划、无设计人员的参与。项目开始几\n天后，我的概念就变成了，完全复(chao)制(xi)另外一个外卖网站。\n\n## 2.前后端缺乏沟通\n\n前期前端的接口出的比较慢，不过我们后端也一直在按自己的想象做着“可能”有的功能，但后端并没有对前端的接口进行审核。当项目进行对接的时候我们才意识到问题的严重\n性。接口基本上对不上，整个网站，全是404，503等错误，怎么办呢？改吧，改的时间居然花费了整个项目1/3的时间，这时候大家才开始加强了沟通。\n\nDeadline是第一生产力(中间就是项目对接的时候)：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio_1.png)  \n另外，虽然老板专门租了一个房间给我们，但距离学校太远，所以几乎没人去那里写代码，我们更多的算是一个远程团队，但完全没有交流。\n\n## 3.分工明确，但不清楚自己和别人具体该做什么\n\n项目里分工应该是明确的，我们后端就按照功能分为了三个部分，前端由于人多，分得有点杂。但我们却不大明确自己和别人具体该做什么。比如我们后端，虽然按功能划分，但\n毕竟有些功能是有交叉的，而没有好好的沟通进一步明确，导致有些功能两个人都以为自己不做，就最后就都没做(由于另外一个后端系大四学长，能力应该比我强，所以我对他\n太放心了，但其实可能他太忙了，并没有太在意这个)。另一个就是不清楚别人做的什么地方，每次遇到前端的问题，不知道该找谁，无论是谁，都说不是自己负责的，看样子他\n们跟我们后端的情况差不多。我觉得分工这些地方一定得形成文档。\n\n## 4.没有测试过程\n\n工作室处于初期，没有专门的测试团队或人员，我觉得这一点无可厚非，完全可以理解。但却没人从来没人去把整个业务流程完整走一遍，只是偶尔老板会主动去走一下，然后发\n现一大堆的问题，然后统一写一个文档发到群里，然后，没多少人在意。\n\n# 个人学到的经验\n\n我也不知道这个项目最终会变成怎么样，但在这次项目中确实学习到了不少东西。\n\n## 1.工具的使用\n\n好吧，我承认，之前基本上没用过PHP的，但是我觉得我的学习能力还是挺快的，基本上很快就熟练了。之前并没有用过框架开发，这次使用的是Laravel框架，前期花\n费了大量的时间学习，对项目为什么要使用框架有了一些了解，并对框架的特性有了一些了解。对于实际的项目，框架是必须的，不可能不使用框架而纯使用PHP的基本语法来\n实现，学习了一个框架看其他的类MVC框架其实都差不多的。 另外，一定要好好利用github和git，github可不仅仅是代码托管的地方，在github上，\n还可以对问题进行跟踪，提交issue。一旦发现了不是自己的bug千万不要憋着，立马提交上去，看不看是他们的事(当然，可能因为我们都是大学生，基本上这算是我们\n的第一个项目，所以基本不会主动去看，我也是后期才意识到的)\n\n## 2.学会沟通\n\n为什么还要去学会沟通，因为项目中沟通和普通的沟通不一样。不要因为某位成员技术不够就无视他(好吧，我一般是被无视的一方，程序员钻牛角尖怎么了？)，也不要因为某\n位成员比你厉害就害怕与其沟通。另外在QQ聊天中如果有问题要提出就一定要一下说完，别说一句顿一下的，不知道为什么80\\%的人都这样。之前我很少在写代码的时候把Q\nQ登录上，但这次项目大家只有在QQ里交谈，所以只能一直在线。一般的情况就是这样：当我在很认真的写代码的时候，QQ突然叫一下，显示“我发现了一个问题”，就等着\n他发具体的问题过来，但许久没发过来(大概1分钟)，于是最小化窗口，继续写代码，一会儿又跳出来，这次发了张截图过来，但是我还是无法看出具体问题，就等他进一步描\n述，又1分钟，最小化，继续写代码，又弹出来QQ，好吧，终于知道问题是什么了，每次都想骂一句，你他妈就不会一次说完吗？\n\n## 3.时间的安排\n\n我认为在本次项目中，我时间安排上还是合理的，不过太投入了。平时都没有去学习其他的东西，因为害怕一学习就会耽误时间，唉，太投入也有错。\n\n## 4.对远程工作的看法\n\n虽然本次项目在概念上不算是远程工作，但大家都是通过QQ交流的，所以在性质上还是比较类似。而且我一直挺关注远程工作的，最近对远程工作也有了一些新的看法。\n_远程工作，必须要有完整的管理流程_ _团队必须及时交流，并提供定时交流的时间_ _项目不同的模块，谁拍板谁负责_\nPS：我很喜欢远程工作的模式，但始终找不到志同道合的人。找一个前端都太难了，但我主要觉得还是性格和价值观上的不同早就的，不过我相信我会找到的。\n","source":"_posts/the-conclusion-of-the-first-project-of-studio.md","raw":"---\ntitle: \"工作室第一次项目总结\"\ndate: 2014-12-22 12:06:16\ncategories: 边走边想\n---\n这一个多月来都没发过任何的博文，就是因为一直在忙工作室的项目。而今天我终于了解到，老板貌似已经放弃这个项目了，而且我居然完全不知道。不过，无论怎样，在这次项\n目中我还是学到了很多很多。\n\n首先，简单说一下，我们做的是一个外卖网站，我担任的角色是后端开发和服务器与数据库的运维，前端4人，后端2人，我是后端负责人。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio.png)  \n\n# 团队协作出现的问题\n\n## 1.无需求，无策划，无设计，项目开始后基本只有开发人员\n\n这是最大的弊端，我也是醉了。项目开始前，我一直催老板快把需求拿来，最后拿是拿来了，但是至今我也没看过，当项目正式开始时他就叫前端去设计接口，但是今天突然了解\n到，前端也没有看到过需求。也就是说整个项目做到现在，所有的功能，基本上都是前后端开发人员自己“臆想”出来的。而且整个过程无策划、无设计人员的参与。项目开始几\n天后，我的概念就变成了，完全复(chao)制(xi)另外一个外卖网站。\n\n## 2.前后端缺乏沟通\n\n前期前端的接口出的比较慢，不过我们后端也一直在按自己的想象做着“可能”有的功能，但后端并没有对前端的接口进行审核。当项目进行对接的时候我们才意识到问题的严重\n性。接口基本上对不上，整个网站，全是404，503等错误，怎么办呢？改吧，改的时间居然花费了整个项目1/3的时间，这时候大家才开始加强了沟通。\n\nDeadline是第一生产力(中间就是项目对接的时候)：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio_1.png)  \n另外，虽然老板专门租了一个房间给我们，但距离学校太远，所以几乎没人去那里写代码，我们更多的算是一个远程团队，但完全没有交流。\n\n## 3.分工明确，但不清楚自己和别人具体该做什么\n\n项目里分工应该是明确的，我们后端就按照功能分为了三个部分，前端由于人多，分得有点杂。但我们却不大明确自己和别人具体该做什么。比如我们后端，虽然按功能划分，但\n毕竟有些功能是有交叉的，而没有好好的沟通进一步明确，导致有些功能两个人都以为自己不做，就最后就都没做(由于另外一个后端系大四学长，能力应该比我强，所以我对他\n太放心了，但其实可能他太忙了，并没有太在意这个)。另一个就是不清楚别人做的什么地方，每次遇到前端的问题，不知道该找谁，无论是谁，都说不是自己负责的，看样子他\n们跟我们后端的情况差不多。我觉得分工这些地方一定得形成文档。\n\n## 4.没有测试过程\n\n工作室处于初期，没有专门的测试团队或人员，我觉得这一点无可厚非，完全可以理解。但却没人从来没人去把整个业务流程完整走一遍，只是偶尔老板会主动去走一下，然后发\n现一大堆的问题，然后统一写一个文档发到群里，然后，没多少人在意。\n\n# 个人学到的经验\n\n我也不知道这个项目最终会变成怎么样，但在这次项目中确实学习到了不少东西。\n\n## 1.工具的使用\n\n好吧，我承认，之前基本上没用过PHP的，但是我觉得我的学习能力还是挺快的，基本上很快就熟练了。之前并没有用过框架开发，这次使用的是Laravel框架，前期花\n费了大量的时间学习，对项目为什么要使用框架有了一些了解，并对框架的特性有了一些了解。对于实际的项目，框架是必须的，不可能不使用框架而纯使用PHP的基本语法来\n实现，学习了一个框架看其他的类MVC框架其实都差不多的。 另外，一定要好好利用github和git，github可不仅仅是代码托管的地方，在github上，\n还可以对问题进行跟踪，提交issue。一旦发现了不是自己的bug千万不要憋着，立马提交上去，看不看是他们的事(当然，可能因为我们都是大学生，基本上这算是我们\n的第一个项目，所以基本不会主动去看，我也是后期才意识到的)\n\n## 2.学会沟通\n\n为什么还要去学会沟通，因为项目中沟通和普通的沟通不一样。不要因为某位成员技术不够就无视他(好吧，我一般是被无视的一方，程序员钻牛角尖怎么了？)，也不要因为某\n位成员比你厉害就害怕与其沟通。另外在QQ聊天中如果有问题要提出就一定要一下说完，别说一句顿一下的，不知道为什么80\\%的人都这样。之前我很少在写代码的时候把Q\nQ登录上，但这次项目大家只有在QQ里交谈，所以只能一直在线。一般的情况就是这样：当我在很认真的写代码的时候，QQ突然叫一下，显示“我发现了一个问题”，就等着\n他发具体的问题过来，但许久没发过来(大概1分钟)，于是最小化窗口，继续写代码，一会儿又跳出来，这次发了张截图过来，但是我还是无法看出具体问题，就等他进一步描\n述，又1分钟，最小化，继续写代码，又弹出来QQ，好吧，终于知道问题是什么了，每次都想骂一句，你他妈就不会一次说完吗？\n\n## 3.时间的安排\n\n我认为在本次项目中，我时间安排上还是合理的，不过太投入了。平时都没有去学习其他的东西，因为害怕一学习就会耽误时间，唉，太投入也有错。\n\n## 4.对远程工作的看法\n\n虽然本次项目在概念上不算是远程工作，但大家都是通过QQ交流的，所以在性质上还是比较类似。而且我一直挺关注远程工作的，最近对远程工作也有了一些新的看法。\n_远程工作，必须要有完整的管理流程_ _团队必须及时交流，并提供定时交流的时间_ _项目不同的模块，谁拍板谁负责_\nPS：我很喜欢远程工作的模式，但始终找不到志同道合的人。找一个前端都太难了，但我主要觉得还是性格和价值观上的不同早就的，不过我相信我会找到的。\n","slug":"the-conclusion-of-the-first-project-of-studio","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phl00629vnzbh1fn80g","content":"<p>这一个多月来都没发过任何的博文，就是因为一直在忙工作室的项目。而今天我终于了解到，老板貌似已经放弃这个项目了，而且我居然完全不知道。不过，无论怎样，在这次项<br>目中我还是学到了很多很多。</p>\n<p>首先，简单说一下，我们做的是一个外卖网站，我担任的角色是后端开发和服务器与数据库的运维，前端4人，后端2人，我是后端负责人。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio.png\" alt=\"\">  </p>\n<h1 id=\"团队协作出现的问题\"><a href=\"#团队协作出现的问题\" class=\"headerlink\" title=\"团队协作出现的问题\"></a>团队协作出现的问题</h1><h2 id=\"1-无需求，无策划，无设计，项目开始后基本只有开发人员\"><a href=\"#1-无需求，无策划，无设计，项目开始后基本只有开发人员\" class=\"headerlink\" title=\"1.无需求，无策划，无设计，项目开始后基本只有开发人员\"></a>1.无需求，无策划，无设计，项目开始后基本只有开发人员</h2><p>这是最大的弊端，我也是醉了。项目开始前，我一直催老板快把需求拿来，最后拿是拿来了，但是至今我也没看过，当项目正式开始时他就叫前端去设计接口，但是今天突然了解<br>到，前端也没有看到过需求。也就是说整个项目做到现在，所有的功能，基本上都是前后端开发人员自己“臆想”出来的。而且整个过程无策划、无设计人员的参与。项目开始几<br>天后，我的概念就变成了，完全复(chao)制(xi)另外一个外卖网站。</p>\n<h2 id=\"2-前后端缺乏沟通\"><a href=\"#2-前后端缺乏沟通\" class=\"headerlink\" title=\"2.前后端缺乏沟通\"></a>2.前后端缺乏沟通</h2><p>前期前端的接口出的比较慢，不过我们后端也一直在按自己的想象做着“可能”有的功能，但后端并没有对前端的接口进行审核。当项目进行对接的时候我们才意识到问题的严重<br>性。接口基本上对不上，整个网站，全是404，503等错误，怎么办呢？改吧，改的时间居然花费了整个项目1/3的时间，这时候大家才开始加强了沟通。</p>\n<p>Deadline是第一生产力(中间就是项目对接的时候)：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio_1.png\" alt=\"\"><br>另外，虽然老板专门租了一个房间给我们，但距离学校太远，所以几乎没人去那里写代码，我们更多的算是一个远程团队，但完全没有交流。</p>\n<h2 id=\"3-分工明确，但不清楚自己和别人具体该做什么\"><a href=\"#3-分工明确，但不清楚自己和别人具体该做什么\" class=\"headerlink\" title=\"3.分工明确，但不清楚自己和别人具体该做什么\"></a>3.分工明确，但不清楚自己和别人具体该做什么</h2><p>项目里分工应该是明确的，我们后端就按照功能分为了三个部分，前端由于人多，分得有点杂。但我们却不大明确自己和别人具体该做什么。比如我们后端，虽然按功能划分，但<br>毕竟有些功能是有交叉的，而没有好好的沟通进一步明确，导致有些功能两个人都以为自己不做，就最后就都没做(由于另外一个后端系大四学长，能力应该比我强，所以我对他<br>太放心了，但其实可能他太忙了，并没有太在意这个)。另一个就是不清楚别人做的什么地方，每次遇到前端的问题，不知道该找谁，无论是谁，都说不是自己负责的，看样子他<br>们跟我们后端的情况差不多。我觉得分工这些地方一定得形成文档。</p>\n<h2 id=\"4-没有测试过程\"><a href=\"#4-没有测试过程\" class=\"headerlink\" title=\"4.没有测试过程\"></a>4.没有测试过程</h2><p>工作室处于初期，没有专门的测试团队或人员，我觉得这一点无可厚非，完全可以理解。但却没人从来没人去把整个业务流程完整走一遍，只是偶尔老板会主动去走一下，然后发<br>现一大堆的问题，然后统一写一个文档发到群里，然后，没多少人在意。</p>\n<h1 id=\"个人学到的经验\"><a href=\"#个人学到的经验\" class=\"headerlink\" title=\"个人学到的经验\"></a>个人学到的经验</h1><p>我也不知道这个项目最终会变成怎么样，但在这次项目中确实学习到了不少东西。</p>\n<h2 id=\"1-工具的使用\"><a href=\"#1-工具的使用\" class=\"headerlink\" title=\"1.工具的使用\"></a>1.工具的使用</h2><p>好吧，我承认，之前基本上没用过PHP的，但是我觉得我的学习能力还是挺快的，基本上很快就熟练了。之前并没有用过框架开发，这次使用的是Laravel框架，前期花<br>费了大量的时间学习，对项目为什么要使用框架有了一些了解，并对框架的特性有了一些了解。对于实际的项目，框架是必须的，不可能不使用框架而纯使用PHP的基本语法来<br>实现，学习了一个框架看其他的类MVC框架其实都差不多的。 另外，一定要好好利用github和git，github可不仅仅是代码托管的地方，在github上，<br>还可以对问题进行跟踪，提交issue。一旦发现了不是自己的bug千万不要憋着，立马提交上去，看不看是他们的事(当然，可能因为我们都是大学生，基本上这算是我们<br>的第一个项目，所以基本不会主动去看，我也是后期才意识到的)</p>\n<h2 id=\"2-学会沟通\"><a href=\"#2-学会沟通\" class=\"headerlink\" title=\"2.学会沟通\"></a>2.学会沟通</h2><p>为什么还要去学会沟通，因为项目中沟通和普通的沟通不一样。不要因为某位成员技术不够就无视他(好吧，我一般是被无视的一方，程序员钻牛角尖怎么了？)，也不要因为某<br>位成员比你厉害就害怕与其沟通。另外在QQ聊天中如果有问题要提出就一定要一下说完，别说一句顿一下的，不知道为什么80\\%的人都这样。之前我很少在写代码的时候把Q<br>Q登录上，但这次项目大家只有在QQ里交谈，所以只能一直在线。一般的情况就是这样：当我在很认真的写代码的时候，QQ突然叫一下，显示“我发现了一个问题”，就等着<br>他发具体的问题过来，但许久没发过来(大概1分钟)，于是最小化窗口，继续写代码，一会儿又跳出来，这次发了张截图过来，但是我还是无法看出具体问题，就等他进一步描<br>述，又1分钟，最小化，继续写代码，又弹出来QQ，好吧，终于知道问题是什么了，每次都想骂一句，你他妈就不会一次说完吗？</p>\n<h2 id=\"3-时间的安排\"><a href=\"#3-时间的安排\" class=\"headerlink\" title=\"3.时间的安排\"></a>3.时间的安排</h2><p>我认为在本次项目中，我时间安排上还是合理的，不过太投入了。平时都没有去学习其他的东西，因为害怕一学习就会耽误时间，唉，太投入也有错。</p>\n<h2 id=\"4-对远程工作的看法\"><a href=\"#4-对远程工作的看法\" class=\"headerlink\" title=\"4.对远程工作的看法\"></a>4.对远程工作的看法</h2><p>虽然本次项目在概念上不算是远程工作，但大家都是通过QQ交流的，所以在性质上还是比较类似。而且我一直挺关注远程工作的，最近对远程工作也有了一些新的看法。<br><em>远程工作，必须要有完整的管理流程</em> <em>团队必须及时交流，并提供定时交流的时间</em> <em>项目不同的模块，谁拍板谁负责</em><br>PS：我很喜欢远程工作的模式，但始终找不到志同道合的人。找一个前端都太难了，但我主要觉得还是性格和价值观上的不同早就的，不过我相信我会找到的。</p>\n","excerpt":"","more":"<p>这一个多月来都没发过任何的博文，就是因为一直在忙工作室的项目。而今天我终于了解到，老板貌似已经放弃这个项目了，而且我居然完全不知道。不过，无论怎样，在这次项<br>目中我还是学到了很多很多。</p>\n<p>首先，简单说一下，我们做的是一个外卖网站，我担任的角色是后端开发和服务器与数据库的运维，前端4人，后端2人，我是后端负责人。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio.png\" alt=\"\">  </p>\n<h1 id=\"团队协作出现的问题\"><a href=\"#团队协作出现的问题\" class=\"headerlink\" title=\"团队协作出现的问题\"></a>团队协作出现的问题</h1><h2 id=\"1-无需求，无策划，无设计，项目开始后基本只有开发人员\"><a href=\"#1-无需求，无策划，无设计，项目开始后基本只有开发人员\" class=\"headerlink\" title=\"1.无需求，无策划，无设计，项目开始后基本只有开发人员\"></a>1.无需求，无策划，无设计，项目开始后基本只有开发人员</h2><p>这是最大的弊端，我也是醉了。项目开始前，我一直催老板快把需求拿来，最后拿是拿来了，但是至今我也没看过，当项目正式开始时他就叫前端去设计接口，但是今天突然了解<br>到，前端也没有看到过需求。也就是说整个项目做到现在，所有的功能，基本上都是前后端开发人员自己“臆想”出来的。而且整个过程无策划、无设计人员的参与。项目开始几<br>天后，我的概念就变成了，完全复(chao)制(xi)另外一个外卖网站。</p>\n<h2 id=\"2-前后端缺乏沟通\"><a href=\"#2-前后端缺乏沟通\" class=\"headerlink\" title=\"2.前后端缺乏沟通\"></a>2.前后端缺乏沟通</h2><p>前期前端的接口出的比较慢，不过我们后端也一直在按自己的想象做着“可能”有的功能，但后端并没有对前端的接口进行审核。当项目进行对接的时候我们才意识到问题的严重<br>性。接口基本上对不上，整个网站，全是404，503等错误，怎么办呢？改吧，改的时间居然花费了整个项目1/3的时间，这时候大家才开始加强了沟通。</p>\n<p>Deadline是第一生产力(中间就是项目对接的时候)：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-conclusion-of-the-first-project-\nof-studio_1.png\" alt=\"\"><br>另外，虽然老板专门租了一个房间给我们，但距离学校太远，所以几乎没人去那里写代码，我们更多的算是一个远程团队，但完全没有交流。</p>\n<h2 id=\"3-分工明确，但不清楚自己和别人具体该做什么\"><a href=\"#3-分工明确，但不清楚自己和别人具体该做什么\" class=\"headerlink\" title=\"3.分工明确，但不清楚自己和别人具体该做什么\"></a>3.分工明确，但不清楚自己和别人具体该做什么</h2><p>项目里分工应该是明确的，我们后端就按照功能分为了三个部分，前端由于人多，分得有点杂。但我们却不大明确自己和别人具体该做什么。比如我们后端，虽然按功能划分，但<br>毕竟有些功能是有交叉的，而没有好好的沟通进一步明确，导致有些功能两个人都以为自己不做，就最后就都没做(由于另外一个后端系大四学长，能力应该比我强，所以我对他<br>太放心了，但其实可能他太忙了，并没有太在意这个)。另一个就是不清楚别人做的什么地方，每次遇到前端的问题，不知道该找谁，无论是谁，都说不是自己负责的，看样子他<br>们跟我们后端的情况差不多。我觉得分工这些地方一定得形成文档。</p>\n<h2 id=\"4-没有测试过程\"><a href=\"#4-没有测试过程\" class=\"headerlink\" title=\"4.没有测试过程\"></a>4.没有测试过程</h2><p>工作室处于初期，没有专门的测试团队或人员，我觉得这一点无可厚非，完全可以理解。但却没人从来没人去把整个业务流程完整走一遍，只是偶尔老板会主动去走一下，然后发<br>现一大堆的问题，然后统一写一个文档发到群里，然后，没多少人在意。</p>\n<h1 id=\"个人学到的经验\"><a href=\"#个人学到的经验\" class=\"headerlink\" title=\"个人学到的经验\"></a>个人学到的经验</h1><p>我也不知道这个项目最终会变成怎么样，但在这次项目中确实学习到了不少东西。</p>\n<h2 id=\"1-工具的使用\"><a href=\"#1-工具的使用\" class=\"headerlink\" title=\"1.工具的使用\"></a>1.工具的使用</h2><p>好吧，我承认，之前基本上没用过PHP的，但是我觉得我的学习能力还是挺快的，基本上很快就熟练了。之前并没有用过框架开发，这次使用的是Laravel框架，前期花<br>费了大量的时间学习，对项目为什么要使用框架有了一些了解，并对框架的特性有了一些了解。对于实际的项目，框架是必须的，不可能不使用框架而纯使用PHP的基本语法来<br>实现，学习了一个框架看其他的类MVC框架其实都差不多的。 另外，一定要好好利用github和git，github可不仅仅是代码托管的地方，在github上，<br>还可以对问题进行跟踪，提交issue。一旦发现了不是自己的bug千万不要憋着，立马提交上去，看不看是他们的事(当然，可能因为我们都是大学生，基本上这算是我们<br>的第一个项目，所以基本不会主动去看，我也是后期才意识到的)</p>\n<h2 id=\"2-学会沟通\"><a href=\"#2-学会沟通\" class=\"headerlink\" title=\"2.学会沟通\"></a>2.学会沟通</h2><p>为什么还要去学会沟通，因为项目中沟通和普通的沟通不一样。不要因为某位成员技术不够就无视他(好吧，我一般是被无视的一方，程序员钻牛角尖怎么了？)，也不要因为某<br>位成员比你厉害就害怕与其沟通。另外在QQ聊天中如果有问题要提出就一定要一下说完，别说一句顿一下的，不知道为什么80\\%的人都这样。之前我很少在写代码的时候把Q<br>Q登录上，但这次项目大家只有在QQ里交谈，所以只能一直在线。一般的情况就是这样：当我在很认真的写代码的时候，QQ突然叫一下，显示“我发现了一个问题”，就等着<br>他发具体的问题过来，但许久没发过来(大概1分钟)，于是最小化窗口，继续写代码，一会儿又跳出来，这次发了张截图过来，但是我还是无法看出具体问题，就等他进一步描<br>述，又1分钟，最小化，继续写代码，又弹出来QQ，好吧，终于知道问题是什么了，每次都想骂一句，你他妈就不会一次说完吗？</p>\n<h2 id=\"3-时间的安排\"><a href=\"#3-时间的安排\" class=\"headerlink\" title=\"3.时间的安排\"></a>3.时间的安排</h2><p>我认为在本次项目中，我时间安排上还是合理的，不过太投入了。平时都没有去学习其他的东西，因为害怕一学习就会耽误时间，唉，太投入也有错。</p>\n<h2 id=\"4-对远程工作的看法\"><a href=\"#4-对远程工作的看法\" class=\"headerlink\" title=\"4.对远程工作的看法\"></a>4.对远程工作的看法</h2><p>虽然本次项目在概念上不算是远程工作，但大家都是通过QQ交流的，所以在性质上还是比较类似。而且我一直挺关注远程工作的，最近对远程工作也有了一些新的看法。<br><em>远程工作，必须要有完整的管理流程</em> <em>团队必须及时交流，并提供定时交流的时间</em> <em>项目不同的模块，谁拍板谁负责</em><br>PS：我很喜欢远程工作的模式，但始终找不到志同道合的人。找一个前端都太难了，但我主要觉得还是性格和价值观上的不同早就的，不过我相信我会找到的。</p>\n"},{"title":"使用Supervisor管理进程","date":"2015-08-11T02:07:33.000Z","_content":"参考文章：<http://segmentfault.com/a/1190000002991175>(原文中还有使用OneAPM安装Python探针的应用，可\n以实时监控web应用数据，暂时还未实践)\n\nsupervisor是使用Python编写的进程管理软件，在实际开发中，一般用它来同时开始一批相关的进程，无论是Django的runserver还是直接管理\nNginx、Apache等，都比较方便，这里是其使用方法：\n\n## 安装\n\n\n\n    # 不要用apt-get的方式安装，如果安装出现unix:///var/run/supervisor.sock no such file这样的错误，那么请参考：http://tuzii.me/diary/522dc528848eea683d7724f2/\\%E8\\%A7\\%A3\\%E5\\%86\\%B3ubuntu-supervisor-unix:var-run-supervisor.sock-no-such-file.\\%E7\\%9A\\%84\\%E6\\%96\\%B9\\%E6\\%B3\\%95\n\n\n\n\n    sudo easy_install supervisor\n    echo_supervisord_conf > supervisord.conf  # 生成一个配置文件\n    sudo supervisord -c supervisord.conf      # 使用该配置文件启动supervisord\n    sudo supervisorctl                        # 进入命令行界面管理进程\n\n## 设置一个进程\n\n\n\n    # 在supervisord.conf里面添加如下内容\n    [program:frontend]                                           # 进程名\n    command=/usr/bin/python manage.py runserver 0.0.0.0:8000     # 启动该进程的命令\n    directory=/media/sf_company/frontend/frontend                # 在执行上面命令前切换到指定目录\n    startsecs=0\n    stopwaitsecs=0\n    autostart=false\n    autorestart=false\n    user=root\n    stdout_logfile=/root/log/8000_access.log                     # 访问日志\n    stderr_logfile=/root/log/8000_error.log                      # 错误日志\n\n\n这样就创建了一个进程，进程的名称为frontend\n\n## supervisorctl常用命令：\n\n\n\n    start name    # 开始一个进程\n    stop name    # 终止一个进程\n    status   # 查看当前管理状态\n","source":"_posts/supervisor-manage-processor.md","raw":"---\ntitle: \"使用Supervisor管理进程\"\ndate: 2015-08-11 10:07:33\ncategories: 编程之路\n---\n参考文章：<http://segmentfault.com/a/1190000002991175>(原文中还有使用OneAPM安装Python探针的应用，可\n以实时监控web应用数据，暂时还未实践)\n\nsupervisor是使用Python编写的进程管理软件，在实际开发中，一般用它来同时开始一批相关的进程，无论是Django的runserver还是直接管理\nNginx、Apache等，都比较方便，这里是其使用方法：\n\n## 安装\n\n\n\n    # 不要用apt-get的方式安装，如果安装出现unix:///var/run/supervisor.sock no such file这样的错误，那么请参考：http://tuzii.me/diary/522dc528848eea683d7724f2/\\%E8\\%A7\\%A3\\%E5\\%86\\%B3ubuntu-supervisor-unix:var-run-supervisor.sock-no-such-file.\\%E7\\%9A\\%84\\%E6\\%96\\%B9\\%E6\\%B3\\%95\n\n\n\n\n    sudo easy_install supervisor\n    echo_supervisord_conf > supervisord.conf  # 生成一个配置文件\n    sudo supervisord -c supervisord.conf      # 使用该配置文件启动supervisord\n    sudo supervisorctl                        # 进入命令行界面管理进程\n\n## 设置一个进程\n\n\n\n    # 在supervisord.conf里面添加如下内容\n    [program:frontend]                                           # 进程名\n    command=/usr/bin/python manage.py runserver 0.0.0.0:8000     # 启动该进程的命令\n    directory=/media/sf_company/frontend/frontend                # 在执行上面命令前切换到指定目录\n    startsecs=0\n    stopwaitsecs=0\n    autostart=false\n    autorestart=false\n    user=root\n    stdout_logfile=/root/log/8000_access.log                     # 访问日志\n    stderr_logfile=/root/log/8000_error.log                      # 错误日志\n\n\n这样就创建了一个进程，进程的名称为frontend\n\n## supervisorctl常用命令：\n\n\n\n    start name    # 开始一个进程\n    stop name    # 终止一个进程\n    status   # 查看当前管理状态\n","slug":"supervisor-manage-processor","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phn00649vnzery2rr2x","content":"<p>参考文章：<a href=\"http://segmentfault.com/a/1190000002991175\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000002991175</a>(原文中还有使用OneAPM安装Python探针的应用，可<br>以实时监控web应用数据，暂时还未实践)</p>\n<p>supervisor是使用Python编写的进程管理软件，在实际开发中，一般用它来同时开始一批相关的进程，无论是Django的runserver还是直接管理<br>Nginx、Apache等，都比较方便，这里是其使用方法：</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code># 不要用apt-get的方式安装，如果安装出现unix:///var/run/supervisor.sock no such file这样的错误，那么请参考：http://tuzii.me/diary/522dc528848eea683d7724f2/\\%E8\\%A7\\%A3\\%E5\\%86\\%B3ubuntu-supervisor-unix:var-run-supervisor.sock-no-such-file.\\%E7\\%9A\\%84\\%E6\\%96\\%B9\\%E6\\%B3\\%95\n\n\n\n\nsudo easy_install supervisor\necho_supervisord_conf &gt; supervisord.conf  # 生成一个配置文件\nsudo supervisord -c supervisord.conf      # 使用该配置文件启动supervisord\nsudo supervisorctl                        # 进入命令行界面管理进程\n</code></pre><h2 id=\"设置一个进程\"><a href=\"#设置一个进程\" class=\"headerlink\" title=\"设置一个进程\"></a>设置一个进程</h2><pre><code># 在supervisord.conf里面添加如下内容\n[program:frontend]                                           # 进程名\ncommand=/usr/bin/python manage.py runserver 0.0.0.0:8000     # 启动该进程的命令\ndirectory=/media/sf_company/frontend/frontend                # 在执行上面命令前切换到指定目录\nstartsecs=0\nstopwaitsecs=0\nautostart=false\nautorestart=false\nuser=root\nstdout_logfile=/root/log/8000_access.log                     # 访问日志\nstderr_logfile=/root/log/8000_error.log                      # 错误日志\n</code></pre><p>这样就创建了一个进程，进程的名称为frontend</p>\n<h2 id=\"supervisorctl常用命令：\"><a href=\"#supervisorctl常用命令：\" class=\"headerlink\" title=\"supervisorctl常用命令：\"></a>supervisorctl常用命令：</h2><pre><code>start name    # 开始一个进程\nstop name    # 终止一个进程\nstatus   # 查看当前管理状态\n</code></pre>","excerpt":"","more":"<p>参考文章：<a href=\"http://segmentfault.com/a/1190000002991175\">http://segmentfault.com/a/1190000002991175</a>(原文中还有使用OneAPM安装Python探针的应用，可<br>以实时监控web应用数据，暂时还未实践)</p>\n<p>supervisor是使用Python编写的进程管理软件，在实际开发中，一般用它来同时开始一批相关的进程，无论是Django的runserver还是直接管理<br>Nginx、Apache等，都比较方便，这里是其使用方法：</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code># 不要用apt-get的方式安装，如果安装出现unix:///var/run/supervisor.sock no such file这样的错误，那么请参考：http://tuzii.me/diary/522dc528848eea683d7724f2/\\%E8\\%A7\\%A3\\%E5\\%86\\%B3ubuntu-supervisor-unix:var-run-supervisor.sock-no-such-file.\\%E7\\%9A\\%84\\%E6\\%96\\%B9\\%E6\\%B3\\%95\n\n\n\n\nsudo easy_install supervisor\necho_supervisord_conf &gt; supervisord.conf  # 生成一个配置文件\nsudo supervisord -c supervisord.conf      # 使用该配置文件启动supervisord\nsudo supervisorctl                        # 进入命令行界面管理进程\n</code></pre><h2 id=\"设置一个进程\"><a href=\"#设置一个进程\" class=\"headerlink\" title=\"设置一个进程\"></a>设置一个进程</h2><pre><code># 在supervisord.conf里面添加如下内容\n[program:frontend]                                           # 进程名\ncommand=/usr/bin/python manage.py runserver 0.0.0.0:8000     # 启动该进程的命令\ndirectory=/media/sf_company/frontend/frontend                # 在执行上面命令前切换到指定目录\nstartsecs=0\nstopwaitsecs=0\nautostart=false\nautorestart=false\nuser=root\nstdout_logfile=/root/log/8000_access.log                     # 访问日志\nstderr_logfile=/root/log/8000_error.log                      # 错误日志\n</code></pre><p>这样就创建了一个进程，进程的名称为frontend</p>\n<h2 id=\"supervisorctl常用命令：\"><a href=\"#supervisorctl常用命令：\" class=\"headerlink\" title=\"supervisorctl常用命令：\"></a>supervisorctl常用命令：</h2><pre><code>start name    # 开始一个进程\nstop name    # 终止一个进程\nstatus   # 查看当前管理状态\n</code></pre>"},{"title":"我所知道的电脑知识——写给身边非计算机专业的人","date":"2014-11-08T14:49:06.000Z","_content":"每个学计算机的同学都会有这么一个困扰：身边的人会问你各种各样的电脑问题，但事实上自己所学的内容和他们的理解根本就不一样。我们学计算机，学的是计算机的原理，不\n是学如何看哪个硬件好不好，我们学的是软件，但不是PS这种软件，我们可以做一个手机APP，但那不是一两天就能做好的。每次跟你们解释的时候由于你们也不理解，所以\n我们也很困扰。所以特写这么一篇科普文章，希望你们能够看看我对电脑的一些常用的知识。(文中有些观点肯定会被懂电脑的人喷，但请理解)\n\n# 1.关于购机\n\n好吧，这是我们最薄弱的一块儿，实话实说，我们真的对硬件不了解，无论是手机或者是电脑。如果非要让我们提供建议，那么很简单，有钱就买苹果，MacBook也有60\n00多的，我就很喜欢。但我肯定买不起，我目前的这台宏碁笔记本3600元买来，加了一根140块钱4G的金士顿DDR3内存条(2012年买的，当时内存条可没如今\n这么贵，而且我是买电脑那里买的，都是水货)，今年又加了一个120G的三星固态硬盘(SSD)，貌似是400多，反正别人送的，我也不知道多少钱。我的电脑嘛，还是\n可以应付很多大型游戏的，显卡是NVIDIA GeForce GT\n630M，在大型游戏方面，极品飞车18之前都能流畅运行。PS：不要说哪款网络游戏能称得上大型游戏，真正的大型游戏都是单机。\n\n在品牌的选择方面，只要不买神舟都行，其实我也不讨厌国产的，但自从看了神舟的官网后，我对神舟就绝望了。在价钱方面，一句话，如果要玩大型游戏或者用专业的软件比如\n视频制作等，一定要4000以上，显卡一定要独立，如果不玩大型游戏，那么3500以上都行，如果不玩游戏，平时只是上上网聊聊天，3000以上都行。在显卡选择方面\n，除非用ADM最顶端的几个型号，不然就买英伟达的。在CPU方面不要追求主频，它并不能代表什么，但一定要用Intel的。硬盘方面，如果不存太多片(你懂得)，3\n00G以上真的够了，最好选择有固态硬盘的，以后装什么软件就不用犹豫装不装在C盘了，一样的神速。内存方面，最好4G及以上。系统方面，不要去纠结预装的什么系统，\n也不要被老板忽悠他装的是正版系统，无论预装的什么，都可以直接叫老板装一个你喜欢的系统，而且是正版的，零成本，跟他说几句，绝对不收钱。windows还有正盗版\n之分，linux绝对是正版且免费的，别被老板忽悠。还有，如果电脑不是触屏的，最好别用win8。\n\n手机嘛，我觉得都差不多，反正我799买来的红米用了一年多了，感觉不错。我买电子产品都有一个预计的使用时间，我预计799的手机用一年就可以了，不过目前看来应该\n可以再多用一年左右的。\n\n另外，关于水货的问题，水货为什么那么便宜，就因为他们不是通过正规渠道获得的，不用上税，电子产品的税率一般在15\\%-20\\%之间吧，也就是说5000的电脑大概税\n收都是850，你知道为什么那么便宜了吧，如果你想要买的连正常价格的80\\%都没有那么就应该多长个心眼，很有可能是盗版或是劣质产品。\n\nPS：我现在的装备：宏碁E1-471G笔记本(3600) + 4G金士顿内存条(140) + 台电x98 Air II平板(949) + 红米手机(799)\n+ 三星22英寸显示器(别人送的) + 三星120G的SSD(别人送的) + 凯酷机械键盘(499) +  \n\n\n说不出名字的鼠标&耳机&游戏手柄(90) =  \n![](http://7xnc86.com1.z0.glb.clouddn.com/the-computer-acknowlodge-i-\nknow_1.jpg)[  \n](http://haofly.net/wp-content/uploads/2014/11/the-info-i-know1.jpg)\n\n# ![](http://7xnc86.com1.z0.glb.clouddn.com/the-computer-knowledge-i-know.jpg)  \n\n# 2.软件方面\n\n正如上面所说，如果想重装系统，这个就可以找计算机专业的了，分分钟给你重装个正版稳定的系统，别到电脑城里去跳坑。盗版系统激活了照样是正版，而且没任何区别。当然\n，学计算机的不会装系统也很正常，学校又没教过。另外，像做图、做视频、做CAD神马的，我们真的没那么多时间去学，而且这些软件根本没必要去学，要使用什么功能，去\n百度一下立马学会。还有，在使用电脑过程中，如果遇到什么问题，比如什么软件打不开安装不上什么的，首先请重启一下，如果还有问题，请把电脑具体的提示截屏过来，不要\n光说遇到个问题。在是否安装电脑管理软件方面，我建议还是装一个比较好，方便管理电脑，比如清理垃圾、关闭开机自启动的软件、安装软件等都很方便的，我个人用的是36\n0，不要喷360，至少在我眼里现在唯一不流氓的软件就是360了(那些说安装完360卸载不干净的，请不要用360软件管家来卸载360安全卫士！)。是否安装补丁\n方面，这个其实安不安装无所谓，只要你平时不拍什么艳照。是否安装杀毒软件方面，凭个人爱好，如果总是感觉电脑有毒，那么安装一下杀一下毒就行了，反正不用的时候你不\n打开就行了。\n\n# 3.购物方面\n\n请尽量用360安全浏览器购物，千万别用IE，360浏览器至少能分辨大量的钓鱼网站。再科普一下如何简单的识别钓鱼网站，一般，如果你的电脑没有木马病毒，是可以直\n接通过浏览器的地址栏看出是不是合法网站的。就比如淘宝嘛，域名是[www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网\n的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对的，无论XXX是什么...](http://www.taobao.c\nom，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对\n的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是\"taobao.com”。如果有其他情况就要注意了，比如www.123taobao.com，www\n.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\\\(tmall.com\\\\)虽然和淘宝是一家的，但是域名不一样\n\"Link: http://www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有\nwww.taobao.com/XXX，这样的也都是对的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是\"taobao.com”。如果有其他情况就要注\n意了，比如www.123taobao.com，www.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\\\(tma\nll.com\\\\)虽然和淘宝是一家的，但是域名不一样\" )。\n\n还有一种钓鱼网站是盗号的网站(请不要太在意QQ号被盗这件事，没什么的，盗你的号一般是改不到你密码的，顶多转发些黄色的盗号网站罢了)，当然如果你QQ号黄钻、红\n钻什么杂七杂八的都是满级或者你在QQ里面有大量的Q币就要注意了。盗号网站也很好识别，一般他们是这样的网站：你打开后会要求你输入QQ帐号和密码，因为他们无法拿\n到腾讯的API，所以必须你手动输入，这种网站一般模仿得像正常的网站，但字体一般都不大对劲，有经验的人一样就能看出来，而且也能通过网址结构判断的。这些网址一般\n非常奇葩，你根本无法从网址看出来和主题有什么关系。\n\n# 4.个人方面\n\n请珍惜你身边的程序员。以下是我从网上整理的一些事实： 1.要嫁就嫁程序员，钱多话少死得早(人好话少壕得早) 2.程序员都很专一，除了计算机就是你\n3.不喝酒不抽烟不发脾气 4.一套衣服穿半年 5.经常加班，而且同事清一色的男人，绝对不会搞外遇\n6.经常加班，所以周末一定会怀着一颗愧疚的心在家陪老婆逛街、看电视、聊天、做家务\n7.只认识0和1，基本没理财能力，一定会主动把所有的钱都交给老婆管，还会千恩万谢地 8.知道既然世界上不存在没有Bug的程序，就更加不会有没有缺点的人，所以\n绝不会老婆太过苛求;知道系统若不经常维护就无法保持稳定运行，所以一定会每天都对老婆精心呵护\n9.嫁给瘦弱的程序员，也许永远无法目睹他像李连杰那样以一敌十的英姿，却也会听到他吼道：“哪个孙子又在QQ上骂你呐？看我不盗了她的号……”\n10.除了每个月买一本书，就没有其它需要花钱的地方，剩下的钱只能变着法的给老婆买各种首饰和衣服 11.每天都读书到深夜，是孩子的好榜样\n12.程序猿都很单纯，虽然 13.程序员很热心。论坛上兄弟们有困难，他们会出手相助。生活中，朋友有电脑问题，他们会帮助解决\n14.程序员很细心。写代码是个细活，不细心就会有bug，真写了bug，还得耐心细心的去找出来。在生活中\n15.程序猿很浪漫，别以为他们每天面对代码就不懂风花雪夜了，没准你们每个第一次他都早已经清清楚地存进了程序里，就等给你一个惊喜呢\n","source":"_posts/the-computer-knowledge-i-know.md","raw":"---\ntitle: \"我所知道的电脑知识——写给身边非计算机专业的人\"\ndate: 2014-11-08 22:49:06\ncategories: 边走边想\n---\n每个学计算机的同学都会有这么一个困扰：身边的人会问你各种各样的电脑问题，但事实上自己所学的内容和他们的理解根本就不一样。我们学计算机，学的是计算机的原理，不\n是学如何看哪个硬件好不好，我们学的是软件，但不是PS这种软件，我们可以做一个手机APP，但那不是一两天就能做好的。每次跟你们解释的时候由于你们也不理解，所以\n我们也很困扰。所以特写这么一篇科普文章，希望你们能够看看我对电脑的一些常用的知识。(文中有些观点肯定会被懂电脑的人喷，但请理解)\n\n# 1.关于购机\n\n好吧，这是我们最薄弱的一块儿，实话实说，我们真的对硬件不了解，无论是手机或者是电脑。如果非要让我们提供建议，那么很简单，有钱就买苹果，MacBook也有60\n00多的，我就很喜欢。但我肯定买不起，我目前的这台宏碁笔记本3600元买来，加了一根140块钱4G的金士顿DDR3内存条(2012年买的，当时内存条可没如今\n这么贵，而且我是买电脑那里买的，都是水货)，今年又加了一个120G的三星固态硬盘(SSD)，貌似是400多，反正别人送的，我也不知道多少钱。我的电脑嘛，还是\n可以应付很多大型游戏的，显卡是NVIDIA GeForce GT\n630M，在大型游戏方面，极品飞车18之前都能流畅运行。PS：不要说哪款网络游戏能称得上大型游戏，真正的大型游戏都是单机。\n\n在品牌的选择方面，只要不买神舟都行，其实我也不讨厌国产的，但自从看了神舟的官网后，我对神舟就绝望了。在价钱方面，一句话，如果要玩大型游戏或者用专业的软件比如\n视频制作等，一定要4000以上，显卡一定要独立，如果不玩大型游戏，那么3500以上都行，如果不玩游戏，平时只是上上网聊聊天，3000以上都行。在显卡选择方面\n，除非用ADM最顶端的几个型号，不然就买英伟达的。在CPU方面不要追求主频，它并不能代表什么，但一定要用Intel的。硬盘方面，如果不存太多片(你懂得)，3\n00G以上真的够了，最好选择有固态硬盘的，以后装什么软件就不用犹豫装不装在C盘了，一样的神速。内存方面，最好4G及以上。系统方面，不要去纠结预装的什么系统，\n也不要被老板忽悠他装的是正版系统，无论预装的什么，都可以直接叫老板装一个你喜欢的系统，而且是正版的，零成本，跟他说几句，绝对不收钱。windows还有正盗版\n之分，linux绝对是正版且免费的，别被老板忽悠。还有，如果电脑不是触屏的，最好别用win8。\n\n手机嘛，我觉得都差不多，反正我799买来的红米用了一年多了，感觉不错。我买电子产品都有一个预计的使用时间，我预计799的手机用一年就可以了，不过目前看来应该\n可以再多用一年左右的。\n\n另外，关于水货的问题，水货为什么那么便宜，就因为他们不是通过正规渠道获得的，不用上税，电子产品的税率一般在15\\%-20\\%之间吧，也就是说5000的电脑大概税\n收都是850，你知道为什么那么便宜了吧，如果你想要买的连正常价格的80\\%都没有那么就应该多长个心眼，很有可能是盗版或是劣质产品。\n\nPS：我现在的装备：宏碁E1-471G笔记本(3600) + 4G金士顿内存条(140) + 台电x98 Air II平板(949) + 红米手机(799)\n+ 三星22英寸显示器(别人送的) + 三星120G的SSD(别人送的) + 凯酷机械键盘(499) +  \n\n\n说不出名字的鼠标&耳机&游戏手柄(90) =  \n![](http://7xnc86.com1.z0.glb.clouddn.com/the-computer-acknowlodge-i-\nknow_1.jpg)[  \n](http://haofly.net/wp-content/uploads/2014/11/the-info-i-know1.jpg)\n\n# ![](http://7xnc86.com1.z0.glb.clouddn.com/the-computer-knowledge-i-know.jpg)  \n\n# 2.软件方面\n\n正如上面所说，如果想重装系统，这个就可以找计算机专业的了，分分钟给你重装个正版稳定的系统，别到电脑城里去跳坑。盗版系统激活了照样是正版，而且没任何区别。当然\n，学计算机的不会装系统也很正常，学校又没教过。另外，像做图、做视频、做CAD神马的，我们真的没那么多时间去学，而且这些软件根本没必要去学，要使用什么功能，去\n百度一下立马学会。还有，在使用电脑过程中，如果遇到什么问题，比如什么软件打不开安装不上什么的，首先请重启一下，如果还有问题，请把电脑具体的提示截屏过来，不要\n光说遇到个问题。在是否安装电脑管理软件方面，我建议还是装一个比较好，方便管理电脑，比如清理垃圾、关闭开机自启动的软件、安装软件等都很方便的，我个人用的是36\n0，不要喷360，至少在我眼里现在唯一不流氓的软件就是360了(那些说安装完360卸载不干净的，请不要用360软件管家来卸载360安全卫士！)。是否安装补丁\n方面，这个其实安不安装无所谓，只要你平时不拍什么艳照。是否安装杀毒软件方面，凭个人爱好，如果总是感觉电脑有毒，那么安装一下杀一下毒就行了，反正不用的时候你不\n打开就行了。\n\n# 3.购物方面\n\n请尽量用360安全浏览器购物，千万别用IE，360浏览器至少能分辨大量的钓鱼网站。再科普一下如何简单的识别钓鱼网站，一般，如果你的电脑没有木马病毒，是可以直\n接通过浏览器的地址栏看出是不是合法网站的。就比如淘宝嘛，域名是[www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网\n的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对的，无论XXX是什么...](http://www.taobao.c\nom，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对\n的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是\"taobao.com”。如果有其他情况就要注意了，比如www.123taobao.com，www\n.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\\\(tmall.com\\\\)虽然和淘宝是一家的，但是域名不一样\n\"Link: http://www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有\nwww.taobao.com/XXX，这样的也都是对的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是\"taobao.com”。如果有其他情况就要注\n意了，比如www.123taobao.com，www.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\\\(tma\nll.com\\\\)虽然和淘宝是一家的，但是域名不一样\" )。\n\n还有一种钓鱼网站是盗号的网站(请不要太在意QQ号被盗这件事，没什么的，盗你的号一般是改不到你密码的，顶多转发些黄色的盗号网站罢了)，当然如果你QQ号黄钻、红\n钻什么杂七杂八的都是满级或者你在QQ里面有大量的Q币就要注意了。盗号网站也很好识别，一般他们是这样的网站：你打开后会要求你输入QQ帐号和密码，因为他们无法拿\n到腾讯的API，所以必须你手动输入，这种网站一般模仿得像正常的网站，但字体一般都不大对劲，有经验的人一样就能看出来，而且也能通过网址结构判断的。这些网址一般\n非常奇葩，你根本无法从网址看出来和主题有什么关系。\n\n# 4.个人方面\n\n请珍惜你身边的程序员。以下是我从网上整理的一些事实： 1.要嫁就嫁程序员，钱多话少死得早(人好话少壕得早) 2.程序员都很专一，除了计算机就是你\n3.不喝酒不抽烟不发脾气 4.一套衣服穿半年 5.经常加班，而且同事清一色的男人，绝对不会搞外遇\n6.经常加班，所以周末一定会怀着一颗愧疚的心在家陪老婆逛街、看电视、聊天、做家务\n7.只认识0和1，基本没理财能力，一定会主动把所有的钱都交给老婆管，还会千恩万谢地 8.知道既然世界上不存在没有Bug的程序，就更加不会有没有缺点的人，所以\n绝不会老婆太过苛求;知道系统若不经常维护就无法保持稳定运行，所以一定会每天都对老婆精心呵护\n9.嫁给瘦弱的程序员，也许永远无法目睹他像李连杰那样以一敌十的英姿，却也会听到他吼道：“哪个孙子又在QQ上骂你呐？看我不盗了她的号……”\n10.除了每个月买一本书，就没有其它需要花钱的地方，剩下的钱只能变着法的给老婆买各种首饰和衣服 11.每天都读书到深夜，是孩子的好榜样\n12.程序猿都很单纯，虽然 13.程序员很热心。论坛上兄弟们有困难，他们会出手相助。生活中，朋友有电脑问题，他们会帮助解决\n14.程序员很细心。写代码是个细活，不细心就会有bug，真写了bug，还得耐心细心的去找出来。在生活中\n15.程序猿很浪漫，别以为他们每天面对代码就不懂风花雪夜了，没准你们每个第一次他都早已经清清楚地存进了程序里，就等给你一个惊喜呢\n","slug":"the-computer-knowledge-i-know","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2php00669vnz5rxzroho","content":"<p>每个学计算机的同学都会有这么一个困扰：身边的人会问你各种各样的电脑问题，但事实上自己所学的内容和他们的理解根本就不一样。我们学计算机，学的是计算机的原理，不<br>是学如何看哪个硬件好不好，我们学的是软件，但不是PS这种软件，我们可以做一个手机APP，但那不是一两天就能做好的。每次跟你们解释的时候由于你们也不理解，所以<br>我们也很困扰。所以特写这么一篇科普文章，希望你们能够看看我对电脑的一些常用的知识。(文中有些观点肯定会被懂电脑的人喷，但请理解)</p>\n<h1 id=\"1-关于购机\"><a href=\"#1-关于购机\" class=\"headerlink\" title=\"1.关于购机\"></a>1.关于购机</h1><p>好吧，这是我们最薄弱的一块儿，实话实说，我们真的对硬件不了解，无论是手机或者是电脑。如果非要让我们提供建议，那么很简单，有钱就买苹果，MacBook也有60<br>00多的，我就很喜欢。但我肯定买不起，我目前的这台宏碁笔记本3600元买来，加了一根140块钱4G的金士顿DDR3内存条(2012年买的，当时内存条可没如今<br>这么贵，而且我是买电脑那里买的，都是水货)，今年又加了一个120G的三星固态硬盘(SSD)，貌似是400多，反正别人送的，我也不知道多少钱。我的电脑嘛，还是<br>可以应付很多大型游戏的，显卡是NVIDIA GeForce GT<br>630M，在大型游戏方面，极品飞车18之前都能流畅运行。PS：不要说哪款网络游戏能称得上大型游戏，真正的大型游戏都是单机。</p>\n<p>在品牌的选择方面，只要不买神舟都行，其实我也不讨厌国产的，但自从看了神舟的官网后，我对神舟就绝望了。在价钱方面，一句话，如果要玩大型游戏或者用专业的软件比如<br>视频制作等，一定要4000以上，显卡一定要独立，如果不玩大型游戏，那么3500以上都行，如果不玩游戏，平时只是上上网聊聊天，3000以上都行。在显卡选择方面<br>，除非用ADM最顶端的几个型号，不然就买英伟达的。在CPU方面不要追求主频，它并不能代表什么，但一定要用Intel的。硬盘方面，如果不存太多片(你懂得)，3<br>00G以上真的够了，最好选择有固态硬盘的，以后装什么软件就不用犹豫装不装在C盘了，一样的神速。内存方面，最好4G及以上。系统方面，不要去纠结预装的什么系统，<br>也不要被老板忽悠他装的是正版系统，无论预装的什么，都可以直接叫老板装一个你喜欢的系统，而且是正版的，零成本，跟他说几句，绝对不收钱。windows还有正盗版<br>之分，linux绝对是正版且免费的，别被老板忽悠。还有，如果电脑不是触屏的，最好别用win8。</p>\n<p>手机嘛，我觉得都差不多，反正我799买来的红米用了一年多了，感觉不错。我买电子产品都有一个预计的使用时间，我预计799的手机用一年就可以了，不过目前看来应该<br>可以再多用一年左右的。</p>\n<p>另外，关于水货的问题，水货为什么那么便宜，就因为他们不是通过正规渠道获得的，不用上税，电子产品的税率一般在15\\%-20\\%之间吧，也就是说5000的电脑大概税<br>收都是850，你知道为什么那么便宜了吧，如果你想要买的连正常价格的80\\%都没有那么就应该多长个心眼，很有可能是盗版或是劣质产品。</p>\n<p>PS：我现在的装备：宏碁E1-471G笔记本(3600) + 4G金士顿内存条(140) + 台电x98 Air II平板(949) + 红米手机(799)</p>\n<ul>\n<li>三星22英寸显示器(别人送的) + 三星120G的SSD(别人送的) + 凯酷机械键盘(499) +  </li>\n</ul>\n<p>说不出名字的鼠标&amp;耳机&amp;游戏手柄(90) =<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-computer-acknowlodge-i-\nknow_1.jpg\" alt=\"\"><a href=\"http://haofly.net/wp-content/uploads/2014/11/the-info-i-know1.jpg\">  \n</a></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-computer-knowledge-i-know.jpg\" alt=\"\"></h1><h1 id=\"2-软件方面\"><a href=\"#2-软件方面\" class=\"headerlink\" title=\"2.软件方面\"></a>2.软件方面</h1><p>正如上面所说，如果想重装系统，这个就可以找计算机专业的了，分分钟给你重装个正版稳定的系统，别到电脑城里去跳坑。盗版系统激活了照样是正版，而且没任何区别。当然<br>，学计算机的不会装系统也很正常，学校又没教过。另外，像做图、做视频、做CAD神马的，我们真的没那么多时间去学，而且这些软件根本没必要去学，要使用什么功能，去<br>百度一下立马学会。还有，在使用电脑过程中，如果遇到什么问题，比如什么软件打不开安装不上什么的，首先请重启一下，如果还有问题，请把电脑具体的提示截屏过来，不要<br>光说遇到个问题。在是否安装电脑管理软件方面，我建议还是装一个比较好，方便管理电脑，比如清理垃圾、关闭开机自启动的软件、安装软件等都很方便的，我个人用的是36<br>0，不要喷360，至少在我眼里现在唯一不流氓的软件就是360了(那些说安装完360卸载不干净的，请不要用360软件管家来卸载360安全卫士！)。是否安装补丁<br>方面，这个其实安不安装无所谓，只要你平时不拍什么艳照。是否安装杀毒软件方面，凭个人爱好，如果总是感觉电脑有毒，那么安装一下杀一下毒就行了，反正不用的时候你不<br>打开就行了。</p>\n<h1 id=\"3-购物方面\"><a href=\"#3-购物方面\" class=\"headerlink\" title=\"3.购物方面\"></a>3.购物方面</h1><p>请尽量用360安全浏览器购物，千万别用IE，360浏览器至少能分辨大量的钓鱼网站。再科普一下如何简单的识别钓鱼网站，一般，如果你的电脑没有木马病毒，是可以直<br>接通过浏览器的地址栏看出是不是合法网站的。就比如淘宝嘛，域名是<a href=\"http://www.taobao.c\nom，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对\n的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是&quot;taobao.com”。如果有其他情况就要注意了，比如www.123taobao.com，www\n.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\\\(tmall.com\\\\\" target=\"_blank\" rel=\"external\">www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网<br>的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对的，无论XXX是什么…</a>虽然和淘宝是一家的，但是域名不一样<br>“Link: <a href=\"http://www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有\" target=\"_blank\" rel=\"external\">http://www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有</a><br>www.taobao.com/XXX，这样的也都是对的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是”taobao.com”。如果有其他情况就要注<br>意了，比如www.123taobao.com，www.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\(tma<br>ll.com\\)虽然和淘宝是一家的，但是域名不一样” )。</p>\n<p>还有一种钓鱼网站是盗号的网站(请不要太在意QQ号被盗这件事，没什么的，盗你的号一般是改不到你密码的，顶多转发些黄色的盗号网站罢了)，当然如果你QQ号黄钻、红<br>钻什么杂七杂八的都是满级或者你在QQ里面有大量的Q币就要注意了。盗号网站也很好识别，一般他们是这样的网站：你打开后会要求你输入QQ帐号和密码，因为他们无法拿<br>到腾讯的API，所以必须你手动输入，这种网站一般模仿得像正常的网站，但字体一般都不大对劲，有经验的人一样就能看出来，而且也能通过网址结构判断的。这些网址一般<br>非常奇葩，你根本无法从网址看出来和主题有什么关系。</p>\n<h1 id=\"4-个人方面\"><a href=\"#4-个人方面\" class=\"headerlink\" title=\"4.个人方面\"></a>4.个人方面</h1><p>请珍惜你身边的程序员。以下是我从网上整理的一些事实： 1.要嫁就嫁程序员，钱多话少死得早(人好话少壕得早) 2.程序员都很专一，除了计算机就是你<br>3.不喝酒不抽烟不发脾气 4.一套衣服穿半年 5.经常加班，而且同事清一色的男人，绝对不会搞外遇<br>6.经常加班，所以周末一定会怀着一颗愧疚的心在家陪老婆逛街、看电视、聊天、做家务<br>7.只认识0和1，基本没理财能力，一定会主动把所有的钱都交给老婆管，还会千恩万谢地 8.知道既然世界上不存在没有Bug的程序，就更加不会有没有缺点的人，所以<br>绝不会老婆太过苛求;知道系统若不经常维护就无法保持稳定运行，所以一定会每天都对老婆精心呵护<br>9.嫁给瘦弱的程序员，也许永远无法目睹他像李连杰那样以一敌十的英姿，却也会听到他吼道：“哪个孙子又在QQ上骂你呐？看我不盗了她的号……”<br>10.除了每个月买一本书，就没有其它需要花钱的地方，剩下的钱只能变着法的给老婆买各种首饰和衣服 11.每天都读书到深夜，是孩子的好榜样<br>12.程序猿都很单纯，虽然 13.程序员很热心。论坛上兄弟们有困难，他们会出手相助。生活中，朋友有电脑问题，他们会帮助解决<br>14.程序员很细心。写代码是个细活，不细心就会有bug，真写了bug，还得耐心细心的去找出来。在生活中<br>15.程序猿很浪漫，别以为他们每天面对代码就不懂风花雪夜了，没准你们每个第一次他都早已经清清楚地存进了程序里，就等给你一个惊喜呢</p>\n","excerpt":"","more":"<p>每个学计算机的同学都会有这么一个困扰：身边的人会问你各种各样的电脑问题，但事实上自己所学的内容和他们的理解根本就不一样。我们学计算机，学的是计算机的原理，不<br>是学如何看哪个硬件好不好，我们学的是软件，但不是PS这种软件，我们可以做一个手机APP，但那不是一两天就能做好的。每次跟你们解释的时候由于你们也不理解，所以<br>我们也很困扰。所以特写这么一篇科普文章，希望你们能够看看我对电脑的一些常用的知识。(文中有些观点肯定会被懂电脑的人喷，但请理解)</p>\n<h1 id=\"1-关于购机\"><a href=\"#1-关于购机\" class=\"headerlink\" title=\"1.关于购机\"></a>1.关于购机</h1><p>好吧，这是我们最薄弱的一块儿，实话实说，我们真的对硬件不了解，无论是手机或者是电脑。如果非要让我们提供建议，那么很简单，有钱就买苹果，MacBook也有60<br>00多的，我就很喜欢。但我肯定买不起，我目前的这台宏碁笔记本3600元买来，加了一根140块钱4G的金士顿DDR3内存条(2012年买的，当时内存条可没如今<br>这么贵，而且我是买电脑那里买的，都是水货)，今年又加了一个120G的三星固态硬盘(SSD)，貌似是400多，反正别人送的，我也不知道多少钱。我的电脑嘛，还是<br>可以应付很多大型游戏的，显卡是NVIDIA GeForce GT<br>630M，在大型游戏方面，极品飞车18之前都能流畅运行。PS：不要说哪款网络游戏能称得上大型游戏，真正的大型游戏都是单机。</p>\n<p>在品牌的选择方面，只要不买神舟都行，其实我也不讨厌国产的，但自从看了神舟的官网后，我对神舟就绝望了。在价钱方面，一句话，如果要玩大型游戏或者用专业的软件比如<br>视频制作等，一定要4000以上，显卡一定要独立，如果不玩大型游戏，那么3500以上都行，如果不玩游戏，平时只是上上网聊聊天，3000以上都行。在显卡选择方面<br>，除非用ADM最顶端的几个型号，不然就买英伟达的。在CPU方面不要追求主频，它并不能代表什么，但一定要用Intel的。硬盘方面，如果不存太多片(你懂得)，3<br>00G以上真的够了，最好选择有固态硬盘的，以后装什么软件就不用犹豫装不装在C盘了，一样的神速。内存方面，最好4G及以上。系统方面，不要去纠结预装的什么系统，<br>也不要被老板忽悠他装的是正版系统，无论预装的什么，都可以直接叫老板装一个你喜欢的系统，而且是正版的，零成本，跟他说几句，绝对不收钱。windows还有正盗版<br>之分，linux绝对是正版且免费的，别被老板忽悠。还有，如果电脑不是触屏的，最好别用win8。</p>\n<p>手机嘛，我觉得都差不多，反正我799买来的红米用了一年多了，感觉不错。我买电子产品都有一个预计的使用时间，我预计799的手机用一年就可以了，不过目前看来应该<br>可以再多用一年左右的。</p>\n<p>另外，关于水货的问题，水货为什么那么便宜，就因为他们不是通过正规渠道获得的，不用上税，电子产品的税率一般在15\\%-20\\%之间吧，也就是说5000的电脑大概税<br>收都是850，你知道为什么那么便宜了吧，如果你想要买的连正常价格的80\\%都没有那么就应该多长个心眼，很有可能是盗版或是劣质产品。</p>\n<p>PS：我现在的装备：宏碁E1-471G笔记本(3600) + 4G金士顿内存条(140) + 台电x98 Air II平板(949) + 红米手机(799)</p>\n<ul>\n<li>三星22英寸显示器(别人送的) + 三星120G的SSD(别人送的) + 凯酷机械键盘(499) +  </li>\n</ul>\n<p>说不出名字的鼠标&amp;耳机&amp;游戏手柄(90) =<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-computer-acknowlodge-i-\nknow_1.jpg\" alt=\"\"><a href=\"http://haofly.net/wp-content/uploads/2014/11/the-info-i-know1.jpg\">  \n</a></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-computer-knowledge-i-know.jpg\" alt=\"\"></h1><h1 id=\"2-软件方面\"><a href=\"#2-软件方面\" class=\"headerlink\" title=\"2.软件方面\"></a>2.软件方面</h1><p>正如上面所说，如果想重装系统，这个就可以找计算机专业的了，分分钟给你重装个正版稳定的系统，别到电脑城里去跳坑。盗版系统激活了照样是正版，而且没任何区别。当然<br>，学计算机的不会装系统也很正常，学校又没教过。另外，像做图、做视频、做CAD神马的，我们真的没那么多时间去学，而且这些软件根本没必要去学，要使用什么功能，去<br>百度一下立马学会。还有，在使用电脑过程中，如果遇到什么问题，比如什么软件打不开安装不上什么的，首先请重启一下，如果还有问题，请把电脑具体的提示截屏过来，不要<br>光说遇到个问题。在是否安装电脑管理软件方面，我建议还是装一个比较好，方便管理电脑，比如清理垃圾、关闭开机自启动的软件、安装软件等都很方便的，我个人用的是36<br>0，不要喷360，至少在我眼里现在唯一不流氓的软件就是360了(那些说安装完360卸载不干净的，请不要用360软件管家来卸载360安全卫士！)。是否安装补丁<br>方面，这个其实安不安装无所谓，只要你平时不拍什么艳照。是否安装杀毒软件方面，凭个人爱好，如果总是感觉电脑有毒，那么安装一下杀一下毒就行了，反正不用的时候你不<br>打开就行了。</p>\n<h1 id=\"3-购物方面\"><a href=\"#3-购物方面\" class=\"headerlink\" title=\"3.购物方面\"></a>3.购物方面</h1><p>请尽量用360安全浏览器购物，千万别用IE，360浏览器至少能分辨大量的钓鱼网站。再科普一下如何简单的识别钓鱼网站，一般，如果你的电脑没有木马病毒，是可以直<br>接通过浏览器的地址栏看出是不是合法网站的。就比如淘宝嘛，域名是<a href=\"http://www.taobao.c\nom，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对\n的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是&quot;taobao.com”。如果有其他情况就要注意了，比如www.123taobao.com，www\n.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\\\(tmall.com\\\\\">www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网<br>的首页，如果点击了其他页面那么就会有www.taobao.com/XXX，这样的也都是对的，无论XXX是什么…</a>虽然和淘宝是一家的，但是域名不一样<br>“Link: <a href=\"http://www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有\">http://www.taobao.com，对于任何网址，前面加不加http://都一样，当然这只是淘宝网的首页，如果点击了其他页面那么就会有</a><br>www.taobao.com/XXX，这样的也都是对的，无论XXX是什么内容，有斜杠也无所谓，因为最重要的就是”taobao.com”。如果有其他情况就要注<br>意了，比如www.123taobao.com，www.tacbao.com，www.taobao.hehe.com，等绝对是钓鱼网站。还有就是天猫\\(tma<br>ll.com\\)虽然和淘宝是一家的，但是域名不一样” )。</p>\n<p>还有一种钓鱼网站是盗号的网站(请不要太在意QQ号被盗这件事，没什么的，盗你的号一般是改不到你密码的，顶多转发些黄色的盗号网站罢了)，当然如果你QQ号黄钻、红<br>钻什么杂七杂八的都是满级或者你在QQ里面有大量的Q币就要注意了。盗号网站也很好识别，一般他们是这样的网站：你打开后会要求你输入QQ帐号和密码，因为他们无法拿<br>到腾讯的API，所以必须你手动输入，这种网站一般模仿得像正常的网站，但字体一般都不大对劲，有经验的人一样就能看出来，而且也能通过网址结构判断的。这些网址一般<br>非常奇葩，你根本无法从网址看出来和主题有什么关系。</p>\n<h1 id=\"4-个人方面\"><a href=\"#4-个人方面\" class=\"headerlink\" title=\"4.个人方面\"></a>4.个人方面</h1><p>请珍惜你身边的程序员。以下是我从网上整理的一些事实： 1.要嫁就嫁程序员，钱多话少死得早(人好话少壕得早) 2.程序员都很专一，除了计算机就是你<br>3.不喝酒不抽烟不发脾气 4.一套衣服穿半年 5.经常加班，而且同事清一色的男人，绝对不会搞外遇<br>6.经常加班，所以周末一定会怀着一颗愧疚的心在家陪老婆逛街、看电视、聊天、做家务<br>7.只认识0和1，基本没理财能力，一定会主动把所有的钱都交给老婆管，还会千恩万谢地 8.知道既然世界上不存在没有Bug的程序，就更加不会有没有缺点的人，所以<br>绝不会老婆太过苛求;知道系统若不经常维护就无法保持稳定运行，所以一定会每天都对老婆精心呵护<br>9.嫁给瘦弱的程序员，也许永远无法目睹他像李连杰那样以一敌十的英姿，却也会听到他吼道：“哪个孙子又在QQ上骂你呐？看我不盗了她的号……”<br>10.除了每个月买一本书，就没有其它需要花钱的地方，剩下的钱只能变着法的给老婆买各种首饰和衣服 11.每天都读书到深夜，是孩子的好榜样<br>12.程序猿都很单纯，虽然 13.程序员很热心。论坛上兄弟们有困难，他们会出手相助。生活中，朋友有电脑问题，他们会帮助解决<br>14.程序员很细心。写代码是个细活，不细心就会有bug，真写了bug，还得耐心细心的去找出来。在生活中<br>15.程序猿很浪漫，别以为他们每天面对代码就不懂风花雪夜了，没准你们每个第一次他都早已经清清楚地存进了程序里，就等给你一个惊喜呢</p>\n"},{"title":"[转]一图胜千言:谈框架和架构的区别","date":"2015-03-28T01:12:20.000Z","_content":"![](http://7xnc86.com1.z0.glb.clouddn.com/the-difference-of-frame-and-\nframework_0.jpg)\n\n该文章是我之前在麦库里收藏的，但不知为何现在已找不到原文链接了，网上都是些转载文章，还不完整。如果作者能看到，希望作者可以联系我。为使文章结构更清晰，下文稍\n有改动。\n\n## 架构和框架的区别\n\n笔者发现，人们对软件架构存在非常多的误解，其中一个最为普遍的误解就是：将架构和框架（Framework）混为一谈。本文阐述了它们的区别。算是对思辨成果的一个\n应用吧。一图胜千言，下图切中肯綮地点出了架构和框架的区别。一句话，框架是软件，架构不是软件。  \n\n\n\n\n**框架**是一种特殊的**软件**，它并不能提供完整无缺的解决方案，而是为你构建解决方案提供良好的基础。框架是**半成品**。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”。\n\n**软件架构不是软件**，而是**关于软件如何设计的重要决策**。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。或许，人们常把架构和框架混为一谈的原因就在于此吧。\n\n理解了本图，我们就很容易理解Frank Buschmann等人在《面向模式的软件体系结构（第一卷）》中为框架所下的定义了，其中也提到了框架和架构的关系：  \n**_框架是一个可实例化的、部分完成的软件系统或子系统，它为一组系统或子系统定义了架构，并提供了构造系统的基本构造块，还为实现特定功能定义了可调整点。在面向对象环境中，框架由抽象类和具体类组成_。**（A framework is a partially complete software (sub-) system that is intended to be instantiated. It defines the architecture for a family of (sub-) systems and provides the basic building blocks to create them. It also defines the places where adaptations for specific functionality should be made. In an object-oriented environment a framework consists of abstract and concrete classes.）\n\n在以前经常和同事、朋友，甚至是合作伙伴之间进行一些技术上的交流，很多时候他们给我的印象是软件“架构”和“框架”被混为一谈，而我也曾经经历过这个阶段。在理解上\n从模糊混淆到有所认识是需要投入足够的时间来进行理解的。软件“架构”和“框架”是两个不同的概念，但它们也是相互关联的。\n\n**软件框架是一特殊的软件，由实际的代码构建而成，是软件系统、子系统的半成品。**软件框架为具体的解决方案提供了基础，提供了基础服务和可扩展点，同时软件框架也建立了一些约束，开发人员在此基础上进行特定业务功能的定制开发。例如，在J2EE企业级应用程序开发中，经常使用struts+spring+hibernate来搭建一个基本的项目结构，在没有其他特殊系统需求的前提下，_这就是一个软件框架_。\n\n**软件架构是引导如何设计软件框架的重要决策**。它决定了软件系统如何划分，在一定程度上描述了被划分的各个部分之间的静态、动态关系。软件架构的决策体现在软件系统的框架中。\n\n**框架（Framework）**是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供了上下文(Context)关系。因此构件库的大规模重用也需要框架。\n\n构件领域框架方法在很大程度上借鉴了硬件技术发展的成就，它是构件技术、软件体系结构研究和应用软件开发三者发展结合的产物。在很多情况下，框架通常以构件库的形式出\n现，但构件库只是框架的一个重要部分。框架的关键还在于框架内对象间的交互模式和控制流模式。\n\n框架比构件可定制性强。在某种程度上，将构件和框架看成两个不同但彼此协作的技术或许更好。框架为构件提供重用的环境，为构件处理错误、交换数据及激活操作提供了标准\n的方法。\n\n应用框架的概念也很简单。它并不是包含构件应用程序的小片程序，而是实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。使用这种框架的编程人员可以在一\n个通用功能已经实现的基础上开始具体的系统开发。框架提供了所有应用期望的默认行为的类集合。具体的应用通过重写子类(该子类属于框架的默认行为)或组装对象来支持应\n用专用的行为。\n\n应用框架强调的是软件的设计重用性和系统的可扩充性,以缩短大型应用软件系统的开发周期，提高开发质量。与传统的基于类库的面向对象重用技术比较，应用框架更注重于面\n向专业领域的软件重用。应用框架具有领域相关性，构件根据框架进行复合而生成可运行的系统。框架的粒度越大，其中包含的领域知识就更加完整。\n\n框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟\n的，不断升级的软件。\n\n框架目前还没有统一的定义，其中Ralph Johnson所给出的定义基本上为大多数研究人员所接受：\n\n一个框架是一个可复用设计，它是由一组抽象类及其实例间协作关系来表达的 【Johnson 98】。\n\n这个定义是从框架内涵的角度来定义框架的，当然也可以从框架用途的角度来给出框架的定义：\n\n一个框架是在一个给定的问题领域内，一个应用程序的一部分设计与实现【Bosch 97】。\n\n从以上两个定义可以看出，框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。_框架将应用系统划分为类和对象，定义类和对象的责任，类和对象如何互相协作\n，以及对象之间的控制线程。_这些共有的设计因素由框架预先定义，应用开发人员只须关注于特定的应用系统**特有部分**。框架刻画了其应用领域所共有的设计决策，所\n以说框架着重于设计复用，尽管框架中可能包含用某种程序设计语言实现的具体类。\n\n一个基于框架开发的应用系统包含一个或多个框架，与框架相关的构件类，以及与应用系统相关的功能扩展。与应用系统相关的扩展包括与应用系统相关的类和对象。应用系统可\n能仅仅复用了面向对象框架的一部分，或者说，它可能需要对框架进行一些适应性修改，以满足系统需求。\n\n面向对象的框架作为一种可复用的软件，在基于框架的软件开发过程中会涉及到框架的开发和利用两个方面的工作。框架的开发阶段在于产生领域中可复用的设计。该阶段的主要\n结果是框架以及与框架相关的构件类。该阶段的一个重要活动是框架的演变和维护。象所有软件一样，框架也易于变化。产生变化的原因很多，如应用出错，业务领域变化，等等\n。\n\n不论是哪一种技术，最终都是为业务发展而服务的。从业务的角度来讲。首先，框架的是为了企业的业务发展和战略规划而服务的，他服从于企业的愿景（vision）；其次\n，框架最重要的目标是提高企业的竞争能力，包括降低成本、提高质量、改善客户满意程度，控制进度等方面。最后，框架实现这一目标的方式是进行有效的知识积累。软件开发\n是一种知识活动，因此知识的聚集和积累是至关重要的。框架能够采用一种结构化的方式对某个特定的业务领域进行描述，也就是将这个领域相关的技术以代码、文档、模型等方\n式固化下来。\n\n### 详细介绍一下框架的作用\n\n一、框架要解决的问题\n\n框架要解决的最重要的一个问题是**技术整合**的问题，在J2EE的框架中，有着各种各样的技术，不同的软件企业需要从J2EE中选择不同的技术，这就使得软件企业\n最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的\n实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。\n\n要理解这一点，我们来举一些例子：\n\n一个做视频流应用的软件企业，他为电广行业提供整体的解决方案。他的优势在于将各种各样的视频硬件、服务器、和管理结合起来，因此他扮演的是一个集成商的角色。因此他\n的核心价值在于使用软件技术将不同的硬件整合起来，并在硬件的整合层面上提供一个统一的管理平台。所以他的精力应该放在解决两个问题：\n\n如何找到一种方法，将不同的硬件整合起来，注意，这里的整合并不是技术整合，而是一种思路上的整合。_首先要考虑的绝对不是要使用什么技术，而是这些硬件需要提供哪些\n服务，需要以什么样的方式进行管理_。因此，这时候做的事情实际上是对领域进行建模。例如，我们定义任何一种硬件都需要提供两种能力，一种是统一的管理接口，用于对所\n有硬件统一管理；另一种是服务接口，系统平台可以查询硬件所能够提供的服务，并调用这些服务。所以，设计的规范将会针对两种能力进行。\n\n另一个问题是如何描述这个管理系统的规范。你需要描述各种管理活动，以及管理中所涉及的不同实体。因为管理系统是针对硬件的管理，所以它是构架在硬件整合平台之上的。\n\n在完成业务层面的设计之后，我们再来看看具体的技术实现。光有规范和设计是不够的，我们还需要选择一个优秀的技术。由于是对不同硬件的整合，我们想到采用Java提供\n的JMX技术。JMX技术适合用来进行系统整合，它定义了一个通用的规范，并给出了远程管理端口的一些默认实现。JMX已经经过了实践的检验，不少的应用服务器都采用\n了以JMX为基础的结构，例如有名的JBoss。JMX已经是一个很好的开始了，但是我们还需要在JMX的基础上再做一些工作。\n\n二、什么要用框架？\n\n因为软件系统发展到今天已经很复杂了，特别是服务器端软件，设计到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只\n需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事物处理，安全性，数据流控制等问题。还有框架一般都经过很多\n人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。\n\n框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的**中间层**。软件为什么要分层？为了实现“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易\n于延展，易于分配资源…总之好处很多啦。\n\n三、为什么要进行框架开发?\n\n**框架的最大好处就是重用**。面向对象系统获得的最大的复用方式就是框架，一个大的应用系统往往可能由多层互相协作的框架组成。\n\n由于框架能重用代码，因此从一已有构件库中建立应用变得非常容易，因为构件都采用框架统一定义的接口，从而使构件间的通信简单。\n\n框架能重用设计。它提供可重用的抽象算法及高层设计，并能将大系统分解成更小的构件，而且能描述构件间的内部接口。这些标准接口使在已有的构件基础上通过组装建立各种\n各样的系统成为可能。只要符合接口定义，新的构件就能插入框架中，构件设计者就能重用构架的bsp;\n框架还能重用分析。所有的人员若按照框架的思想来分析事务，那么就能将它划分为同样的构件，采用相似的解决方法，从而使采用同一框架的分析人员之间能进行沟通。\n\n采用框架技术进行软件开发的主要特点包括：\n\n  * 领域内的软件结构一致性好\n  * 建立更加开放的系统\n  * 重用代码大大增加，软件生产效率和质量也得到了提高\n  * 软件设计人员要专注于对领域的了解，使需求分析更充分\n  * 存储了经验，可以让那些经验丰富的人员去设计框架和领域构件，而不必限于低层编程\n  * 允许采用快速原型技术\n  * 有利于在一个项目内多人协同工作\n  * 大粒度的重用使得平均开发费用降低，开发速度加快，开发人员减少，维护费用降低，而参数化框架使得适应性、灵活性增强\n\n四、与框架相关的概念\n\n1\\\\. 白盒与黑盒框架\n\n框架可分为白盒(White-Box)与黑盒(Black-Box)两种框架。\n\n**基于继承的框架被称为白盒框架**。所谓白盒即具备可视性，被继承的父类的内部实现细节对子类而言都是可知的。利用白盒框架的应用开发者通过衍生子类或重写父类的成员方法来开发系统。子类的实现很大程度上依赖于父类的实现，这种依赖性限制了重用的灵活性和完全性。但解决这种局限性的方法可以是只继承抽象父类，因为抽象类基本上不提供具体的实现。白盒框架是一个程序骨架，而用户衍生出的子类是这个骨架上的附属品。\n\n**基于对象构件组装的框架就是黑盒框架**。应用开发者通过整理、组装对象来获得系统的实现。用户只须了解构件的_外部接口_，无须了解内部的具体实现。另外，组装比继承更为灵活，它能动态地改变，继承只是一个静态编译时的概念。\n\n在理想情况下，任何所需的功能都可通过组装已有的构件得到，事实上可获得的构件远远不能满足需求，有时通过继承获得新的构件比利用已有构件组装新构件更容易，因此白盒\n和黑盒将同时应用于系统的开发中。不过白盒框架趋向于向黑盒框架发展，黑盒框架也是系统开发希望达到的理想目标。\n\n2\\\\. 热点、食谱以及好莱坞原则\n\n成功的框架开发需要确定领域专用的“热点” (Hot spot)。应用开发者在框架的基础上进行开发，只须扩展框架的某些部分，_“热点”就是在应用领域的一种扩展\n槽，开发者根据自己的需要填充这些扩展槽_。“热点”使框架具有灵活性，如在具体的实现中，扩展槽可以被看成是一些抽象类，开发者通过重写抽象方法获得具体实现。\n\n“食谱” (Cookbook)就是描述如何使用框架方法的文档。在“食谱”中包含了许多“烹饪”方法，这些“烹饪”方法相当于一些具体的操作步骤，描述了为解决某一\n专门问题如何使用框架的详细方法。框架的内部设计和实现细节通常不出现在“食谱”中。\n\n框架的一个重要特征就是用户定义的方法经常被框架自身调用，而不是从用户的应用代码中调用。这种机制常称为“好莱坞原则”(Hollywood\nPrinciple)或“别调用我们，我们会调用您”。\n","source":"_posts/the-difference-of-frame-and-framework.md","raw":"---\ntitle: \"[转]一图胜千言:谈框架和架构的区别\"\ndate: 2015-03-28 09:12:20\ncategories: 编程之路\n---\n![](http://7xnc86.com1.z0.glb.clouddn.com/the-difference-of-frame-and-\nframework_0.jpg)\n\n该文章是我之前在麦库里收藏的，但不知为何现在已找不到原文链接了，网上都是些转载文章，还不完整。如果作者能看到，希望作者可以联系我。为使文章结构更清晰，下文稍\n有改动。\n\n## 架构和框架的区别\n\n笔者发现，人们对软件架构存在非常多的误解，其中一个最为普遍的误解就是：将架构和框架（Framework）混为一谈。本文阐述了它们的区别。算是对思辨成果的一个\n应用吧。一图胜千言，下图切中肯綮地点出了架构和框架的区别。一句话，框架是软件，架构不是软件。  \n\n\n\n\n**框架**是一种特殊的**软件**，它并不能提供完整无缺的解决方案，而是为你构建解决方案提供良好的基础。框架是**半成品**。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”。\n\n**软件架构不是软件**，而是**关于软件如何设计的重要决策**。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。或许，人们常把架构和框架混为一谈的原因就在于此吧。\n\n理解了本图，我们就很容易理解Frank Buschmann等人在《面向模式的软件体系结构（第一卷）》中为框架所下的定义了，其中也提到了框架和架构的关系：  \n**_框架是一个可实例化的、部分完成的软件系统或子系统，它为一组系统或子系统定义了架构，并提供了构造系统的基本构造块，还为实现特定功能定义了可调整点。在面向对象环境中，框架由抽象类和具体类组成_。**（A framework is a partially complete software (sub-) system that is intended to be instantiated. It defines the architecture for a family of (sub-) systems and provides the basic building blocks to create them. It also defines the places where adaptations for specific functionality should be made. In an object-oriented environment a framework consists of abstract and concrete classes.）\n\n在以前经常和同事、朋友，甚至是合作伙伴之间进行一些技术上的交流，很多时候他们给我的印象是软件“架构”和“框架”被混为一谈，而我也曾经经历过这个阶段。在理解上\n从模糊混淆到有所认识是需要投入足够的时间来进行理解的。软件“架构”和“框架”是两个不同的概念，但它们也是相互关联的。\n\n**软件框架是一特殊的软件，由实际的代码构建而成，是软件系统、子系统的半成品。**软件框架为具体的解决方案提供了基础，提供了基础服务和可扩展点，同时软件框架也建立了一些约束，开发人员在此基础上进行特定业务功能的定制开发。例如，在J2EE企业级应用程序开发中，经常使用struts+spring+hibernate来搭建一个基本的项目结构，在没有其他特殊系统需求的前提下，_这就是一个软件框架_。\n\n**软件架构是引导如何设计软件框架的重要决策**。它决定了软件系统如何划分，在一定程度上描述了被划分的各个部分之间的静态、动态关系。软件架构的决策体现在软件系统的框架中。\n\n**框架（Framework）**是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供了上下文(Context)关系。因此构件库的大规模重用也需要框架。\n\n构件领域框架方法在很大程度上借鉴了硬件技术发展的成就，它是构件技术、软件体系结构研究和应用软件开发三者发展结合的产物。在很多情况下，框架通常以构件库的形式出\n现，但构件库只是框架的一个重要部分。框架的关键还在于框架内对象间的交互模式和控制流模式。\n\n框架比构件可定制性强。在某种程度上，将构件和框架看成两个不同但彼此协作的技术或许更好。框架为构件提供重用的环境，为构件处理错误、交换数据及激活操作提供了标准\n的方法。\n\n应用框架的概念也很简单。它并不是包含构件应用程序的小片程序，而是实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。使用这种框架的编程人员可以在一\n个通用功能已经实现的基础上开始具体的系统开发。框架提供了所有应用期望的默认行为的类集合。具体的应用通过重写子类(该子类属于框架的默认行为)或组装对象来支持应\n用专用的行为。\n\n应用框架强调的是软件的设计重用性和系统的可扩充性,以缩短大型应用软件系统的开发周期，提高开发质量。与传统的基于类库的面向对象重用技术比较，应用框架更注重于面\n向专业领域的软件重用。应用框架具有领域相关性，构件根据框架进行复合而生成可运行的系统。框架的粒度越大，其中包含的领域知识就更加完整。\n\n框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟\n的，不断升级的软件。\n\n框架目前还没有统一的定义，其中Ralph Johnson所给出的定义基本上为大多数研究人员所接受：\n\n一个框架是一个可复用设计，它是由一组抽象类及其实例间协作关系来表达的 【Johnson 98】。\n\n这个定义是从框架内涵的角度来定义框架的，当然也可以从框架用途的角度来给出框架的定义：\n\n一个框架是在一个给定的问题领域内，一个应用程序的一部分设计与实现【Bosch 97】。\n\n从以上两个定义可以看出，框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。_框架将应用系统划分为类和对象，定义类和对象的责任，类和对象如何互相协作\n，以及对象之间的控制线程。_这些共有的设计因素由框架预先定义，应用开发人员只须关注于特定的应用系统**特有部分**。框架刻画了其应用领域所共有的设计决策，所\n以说框架着重于设计复用，尽管框架中可能包含用某种程序设计语言实现的具体类。\n\n一个基于框架开发的应用系统包含一个或多个框架，与框架相关的构件类，以及与应用系统相关的功能扩展。与应用系统相关的扩展包括与应用系统相关的类和对象。应用系统可\n能仅仅复用了面向对象框架的一部分，或者说，它可能需要对框架进行一些适应性修改，以满足系统需求。\n\n面向对象的框架作为一种可复用的软件，在基于框架的软件开发过程中会涉及到框架的开发和利用两个方面的工作。框架的开发阶段在于产生领域中可复用的设计。该阶段的主要\n结果是框架以及与框架相关的构件类。该阶段的一个重要活动是框架的演变和维护。象所有软件一样，框架也易于变化。产生变化的原因很多，如应用出错，业务领域变化，等等\n。\n\n不论是哪一种技术，最终都是为业务发展而服务的。从业务的角度来讲。首先，框架的是为了企业的业务发展和战略规划而服务的，他服从于企业的愿景（vision）；其次\n，框架最重要的目标是提高企业的竞争能力，包括降低成本、提高质量、改善客户满意程度，控制进度等方面。最后，框架实现这一目标的方式是进行有效的知识积累。软件开发\n是一种知识活动，因此知识的聚集和积累是至关重要的。框架能够采用一种结构化的方式对某个特定的业务领域进行描述，也就是将这个领域相关的技术以代码、文档、模型等方\n式固化下来。\n\n### 详细介绍一下框架的作用\n\n一、框架要解决的问题\n\n框架要解决的最重要的一个问题是**技术整合**的问题，在J2EE的框架中，有着各种各样的技术，不同的软件企业需要从J2EE中选择不同的技术，这就使得软件企业\n最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的\n实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。\n\n要理解这一点，我们来举一些例子：\n\n一个做视频流应用的软件企业，他为电广行业提供整体的解决方案。他的优势在于将各种各样的视频硬件、服务器、和管理结合起来，因此他扮演的是一个集成商的角色。因此他\n的核心价值在于使用软件技术将不同的硬件整合起来，并在硬件的整合层面上提供一个统一的管理平台。所以他的精力应该放在解决两个问题：\n\n如何找到一种方法，将不同的硬件整合起来，注意，这里的整合并不是技术整合，而是一种思路上的整合。_首先要考虑的绝对不是要使用什么技术，而是这些硬件需要提供哪些\n服务，需要以什么样的方式进行管理_。因此，这时候做的事情实际上是对领域进行建模。例如，我们定义任何一种硬件都需要提供两种能力，一种是统一的管理接口，用于对所\n有硬件统一管理；另一种是服务接口，系统平台可以查询硬件所能够提供的服务，并调用这些服务。所以，设计的规范将会针对两种能力进行。\n\n另一个问题是如何描述这个管理系统的规范。你需要描述各种管理活动，以及管理中所涉及的不同实体。因为管理系统是针对硬件的管理，所以它是构架在硬件整合平台之上的。\n\n在完成业务层面的设计之后，我们再来看看具体的技术实现。光有规范和设计是不够的，我们还需要选择一个优秀的技术。由于是对不同硬件的整合，我们想到采用Java提供\n的JMX技术。JMX技术适合用来进行系统整合，它定义了一个通用的规范，并给出了远程管理端口的一些默认实现。JMX已经经过了实践的检验，不少的应用服务器都采用\n了以JMX为基础的结构，例如有名的JBoss。JMX已经是一个很好的开始了，但是我们还需要在JMX的基础上再做一些工作。\n\n二、什么要用框架？\n\n因为软件系统发展到今天已经很复杂了，特别是服务器端软件，设计到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只\n需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事物处理，安全性，数据流控制等问题。还有框架一般都经过很多\n人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。\n\n框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的**中间层**。软件为什么要分层？为了实现“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易\n于延展，易于分配资源…总之好处很多啦。\n\n三、为什么要进行框架开发?\n\n**框架的最大好处就是重用**。面向对象系统获得的最大的复用方式就是框架，一个大的应用系统往往可能由多层互相协作的框架组成。\n\n由于框架能重用代码，因此从一已有构件库中建立应用变得非常容易，因为构件都采用框架统一定义的接口，从而使构件间的通信简单。\n\n框架能重用设计。它提供可重用的抽象算法及高层设计，并能将大系统分解成更小的构件，而且能描述构件间的内部接口。这些标准接口使在已有的构件基础上通过组装建立各种\n各样的系统成为可能。只要符合接口定义，新的构件就能插入框架中，构件设计者就能重用构架的bsp;\n框架还能重用分析。所有的人员若按照框架的思想来分析事务，那么就能将它划分为同样的构件，采用相似的解决方法，从而使采用同一框架的分析人员之间能进行沟通。\n\n采用框架技术进行软件开发的主要特点包括：\n\n  * 领域内的软件结构一致性好\n  * 建立更加开放的系统\n  * 重用代码大大增加，软件生产效率和质量也得到了提高\n  * 软件设计人员要专注于对领域的了解，使需求分析更充分\n  * 存储了经验，可以让那些经验丰富的人员去设计框架和领域构件，而不必限于低层编程\n  * 允许采用快速原型技术\n  * 有利于在一个项目内多人协同工作\n  * 大粒度的重用使得平均开发费用降低，开发速度加快，开发人员减少，维护费用降低，而参数化框架使得适应性、灵活性增强\n\n四、与框架相关的概念\n\n1\\\\. 白盒与黑盒框架\n\n框架可分为白盒(White-Box)与黑盒(Black-Box)两种框架。\n\n**基于继承的框架被称为白盒框架**。所谓白盒即具备可视性，被继承的父类的内部实现细节对子类而言都是可知的。利用白盒框架的应用开发者通过衍生子类或重写父类的成员方法来开发系统。子类的实现很大程度上依赖于父类的实现，这种依赖性限制了重用的灵活性和完全性。但解决这种局限性的方法可以是只继承抽象父类，因为抽象类基本上不提供具体的实现。白盒框架是一个程序骨架，而用户衍生出的子类是这个骨架上的附属品。\n\n**基于对象构件组装的框架就是黑盒框架**。应用开发者通过整理、组装对象来获得系统的实现。用户只须了解构件的_外部接口_，无须了解内部的具体实现。另外，组装比继承更为灵活，它能动态地改变，继承只是一个静态编译时的概念。\n\n在理想情况下，任何所需的功能都可通过组装已有的构件得到，事实上可获得的构件远远不能满足需求，有时通过继承获得新的构件比利用已有构件组装新构件更容易，因此白盒\n和黑盒将同时应用于系统的开发中。不过白盒框架趋向于向黑盒框架发展，黑盒框架也是系统开发希望达到的理想目标。\n\n2\\\\. 热点、食谱以及好莱坞原则\n\n成功的框架开发需要确定领域专用的“热点” (Hot spot)。应用开发者在框架的基础上进行开发，只须扩展框架的某些部分，_“热点”就是在应用领域的一种扩展\n槽，开发者根据自己的需要填充这些扩展槽_。“热点”使框架具有灵活性，如在具体的实现中，扩展槽可以被看成是一些抽象类，开发者通过重写抽象方法获得具体实现。\n\n“食谱” (Cookbook)就是描述如何使用框架方法的文档。在“食谱”中包含了许多“烹饪”方法，这些“烹饪”方法相当于一些具体的操作步骤，描述了为解决某一\n专门问题如何使用框架的详细方法。框架的内部设计和实现细节通常不出现在“食谱”中。\n\n框架的一个重要特征就是用户定义的方法经常被框架自身调用，而不是从用户的应用代码中调用。这种机制常称为“好莱坞原则”(Hollywood\nPrinciple)或“别调用我们，我们会调用您”。\n","slug":"the-difference-of-frame-and-framework","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phv00689vnzpi2yjssz","content":"<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-difference-of-frame-and-\nframework_0.jpg\" alt=\"\"></p>\n<p>该文章是我之前在麦库里收藏的，但不知为何现在已找不到原文链接了，网上都是些转载文章，还不完整。如果作者能看到，希望作者可以联系我。为使文章结构更清晰，下文稍<br>有改动。</p>\n<h2 id=\"架构和框架的区别\"><a href=\"#架构和框架的区别\" class=\"headerlink\" title=\"架构和框架的区别\"></a>架构和框架的区别</h2><p>笔者发现，人们对软件架构存在非常多的误解，其中一个最为普遍的误解就是：将架构和框架（Framework）混为一谈。本文阐述了它们的区别。算是对思辨成果的一个<br>应用吧。一图胜千言，下图切中肯綮地点出了架构和框架的区别。一句话，框架是软件，架构不是软件。  </p>\n<p><strong>框架</strong>是一种特殊的<strong>软件</strong>，它并不能提供完整无缺的解决方案，而是为你构建解决方案提供良好的基础。框架是<strong>半成品</strong>。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”。</p>\n<p><strong>软件架构不是软件</strong>，而是<strong>关于软件如何设计的重要决策</strong>。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。或许，人们常把架构和框架混为一谈的原因就在于此吧。</p>\n<p>理解了本图，我们就很容易理解Frank Buschmann等人在《面向模式的软件体系结构（第一卷）》中为框架所下的定义了，其中也提到了框架和架构的关系：<br><strong><em>框架是一个可实例化的、部分完成的软件系统或子系统，它为一组系统或子系统定义了架构，并提供了构造系统的基本构造块，还为实现特定功能定义了可调整点。在面向对象环境中，框架由抽象类和具体类组成</em>。</strong>（A framework is a partially complete software (sub-) system that is intended to be instantiated. It defines the architecture for a family of (sub-) systems and provides the basic building blocks to create them. It also defines the places where adaptations for specific functionality should be made. In an object-oriented environment a framework consists of abstract and concrete classes.）</p>\n<p>在以前经常和同事、朋友，甚至是合作伙伴之间进行一些技术上的交流，很多时候他们给我的印象是软件“架构”和“框架”被混为一谈，而我也曾经经历过这个阶段。在理解上<br>从模糊混淆到有所认识是需要投入足够的时间来进行理解的。软件“架构”和“框架”是两个不同的概念，但它们也是相互关联的。</p>\n<p><strong>软件框架是一特殊的软件，由实际的代码构建而成，是软件系统、子系统的半成品。</strong>软件框架为具体的解决方案提供了基础，提供了基础服务和可扩展点，同时软件框架也建立了一些约束，开发人员在此基础上进行特定业务功能的定制开发。例如，在J2EE企业级应用程序开发中，经常使用struts+spring+hibernate来搭建一个基本的项目结构，在没有其他特殊系统需求的前提下，<em>这就是一个软件框架</em>。</p>\n<p><strong>软件架构是引导如何设计软件框架的重要决策</strong>。它决定了软件系统如何划分，在一定程度上描述了被划分的各个部分之间的静态、动态关系。软件架构的决策体现在软件系统的框架中。</p>\n<p><strong>框架（Framework）</strong>是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供了上下文(Context)关系。因此构件库的大规模重用也需要框架。</p>\n<p>构件领域框架方法在很大程度上借鉴了硬件技术发展的成就，它是构件技术、软件体系结构研究和应用软件开发三者发展结合的产物。在很多情况下，框架通常以构件库的形式出<br>现，但构件库只是框架的一个重要部分。框架的关键还在于框架内对象间的交互模式和控制流模式。</p>\n<p>框架比构件可定制性强。在某种程度上，将构件和框架看成两个不同但彼此协作的技术或许更好。框架为构件提供重用的环境，为构件处理错误、交换数据及激活操作提供了标准<br>的方法。</p>\n<p>应用框架的概念也很简单。它并不是包含构件应用程序的小片程序，而是实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。使用这种框架的编程人员可以在一<br>个通用功能已经实现的基础上开始具体的系统开发。框架提供了所有应用期望的默认行为的类集合。具体的应用通过重写子类(该子类属于框架的默认行为)或组装对象来支持应<br>用专用的行为。</p>\n<p>应用框架强调的是软件的设计重用性和系统的可扩充性,以缩短大型应用软件系统的开发周期，提高开发质量。与传统的基于类库的面向对象重用技术比较，应用框架更注重于面<br>向专业领域的软件重用。应用框架具有领域相关性，构件根据框架进行复合而生成可运行的系统。框架的粒度越大，其中包含的领域知识就更加完整。</p>\n<p>框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟<br>的，不断升级的软件。</p>\n<p>框架目前还没有统一的定义，其中Ralph Johnson所给出的定义基本上为大多数研究人员所接受：</p>\n<p>一个框架是一个可复用设计，它是由一组抽象类及其实例间协作关系来表达的 【Johnson 98】。</p>\n<p>这个定义是从框架内涵的角度来定义框架的，当然也可以从框架用途的角度来给出框架的定义：</p>\n<p>一个框架是在一个给定的问题领域内，一个应用程序的一部分设计与实现【Bosch 97】。</p>\n<p>从以上两个定义可以看出，框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。<em>框架将应用系统划分为类和对象，定义类和对象的责任，类和对象如何互相协作<br>，以及对象之间的控制线程。</em>这些共有的设计因素由框架预先定义，应用开发人员只须关注于特定的应用系统<strong>特有部分</strong>。框架刻画了其应用领域所共有的设计决策，所<br>以说框架着重于设计复用，尽管框架中可能包含用某种程序设计语言实现的具体类。</p>\n<p>一个基于框架开发的应用系统包含一个或多个框架，与框架相关的构件类，以及与应用系统相关的功能扩展。与应用系统相关的扩展包括与应用系统相关的类和对象。应用系统可<br>能仅仅复用了面向对象框架的一部分，或者说，它可能需要对框架进行一些适应性修改，以满足系统需求。</p>\n<p>面向对象的框架作为一种可复用的软件，在基于框架的软件开发过程中会涉及到框架的开发和利用两个方面的工作。框架的开发阶段在于产生领域中可复用的设计。该阶段的主要<br>结果是框架以及与框架相关的构件类。该阶段的一个重要活动是框架的演变和维护。象所有软件一样，框架也易于变化。产生变化的原因很多，如应用出错，业务领域变化，等等<br>。</p>\n<p>不论是哪一种技术，最终都是为业务发展而服务的。从业务的角度来讲。首先，框架的是为了企业的业务发展和战略规划而服务的，他服从于企业的愿景（vision）；其次<br>，框架最重要的目标是提高企业的竞争能力，包括降低成本、提高质量、改善客户满意程度，控制进度等方面。最后，框架实现这一目标的方式是进行有效的知识积累。软件开发<br>是一种知识活动，因此知识的聚集和积累是至关重要的。框架能够采用一种结构化的方式对某个特定的业务领域进行描述，也就是将这个领域相关的技术以代码、文档、模型等方<br>式固化下来。</p>\n<h3 id=\"详细介绍一下框架的作用\"><a href=\"#详细介绍一下框架的作用\" class=\"headerlink\" title=\"详细介绍一下框架的作用\"></a>详细介绍一下框架的作用</h3><p>一、框架要解决的问题</p>\n<p>框架要解决的最重要的一个问题是<strong>技术整合</strong>的问题，在J2EE的框架中，有着各种各样的技术，不同的软件企业需要从J2EE中选择不同的技术，这就使得软件企业<br>最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的<br>实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。</p>\n<p>要理解这一点，我们来举一些例子：</p>\n<p>一个做视频流应用的软件企业，他为电广行业提供整体的解决方案。他的优势在于将各种各样的视频硬件、服务器、和管理结合起来，因此他扮演的是一个集成商的角色。因此他<br>的核心价值在于使用软件技术将不同的硬件整合起来，并在硬件的整合层面上提供一个统一的管理平台。所以他的精力应该放在解决两个问题：</p>\n<p>如何找到一种方法，将不同的硬件整合起来，注意，这里的整合并不是技术整合，而是一种思路上的整合。<em>首先要考虑的绝对不是要使用什么技术，而是这些硬件需要提供哪些<br>服务，需要以什么样的方式进行管理</em>。因此，这时候做的事情实际上是对领域进行建模。例如，我们定义任何一种硬件都需要提供两种能力，一种是统一的管理接口，用于对所<br>有硬件统一管理；另一种是服务接口，系统平台可以查询硬件所能够提供的服务，并调用这些服务。所以，设计的规范将会针对两种能力进行。</p>\n<p>另一个问题是如何描述这个管理系统的规范。你需要描述各种管理活动，以及管理中所涉及的不同实体。因为管理系统是针对硬件的管理，所以它是构架在硬件整合平台之上的。</p>\n<p>在完成业务层面的设计之后，我们再来看看具体的技术实现。光有规范和设计是不够的，我们还需要选择一个优秀的技术。由于是对不同硬件的整合，我们想到采用Java提供<br>的JMX技术。JMX技术适合用来进行系统整合，它定义了一个通用的规范，并给出了远程管理端口的一些默认实现。JMX已经经过了实践的检验，不少的应用服务器都采用<br>了以JMX为基础的结构，例如有名的JBoss。JMX已经是一个很好的开始了，但是我们还需要在JMX的基础上再做一些工作。</p>\n<p>二、什么要用框架？</p>\n<p>因为软件系统发展到今天已经很复杂了，特别是服务器端软件，设计到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只<br>需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事物处理，安全性，数据流控制等问题。还有框架一般都经过很多<br>人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。</p>\n<p>框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的<strong>中间层</strong>。软件为什么要分层？为了实现“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易<br>于延展，易于分配资源…总之好处很多啦。</p>\n<p>三、为什么要进行框架开发?</p>\n<p><strong>框架的最大好处就是重用</strong>。面向对象系统获得的最大的复用方式就是框架，一个大的应用系统往往可能由多层互相协作的框架组成。</p>\n<p>由于框架能重用代码，因此从一已有构件库中建立应用变得非常容易，因为构件都采用框架统一定义的接口，从而使构件间的通信简单。</p>\n<p>框架能重用设计。它提供可重用的抽象算法及高层设计，并能将大系统分解成更小的构件，而且能描述构件间的内部接口。这些标准接口使在已有的构件基础上通过组装建立各种<br>各样的系统成为可能。只要符合接口定义，新的构件就能插入框架中，构件设计者就能重用构架的bsp;<br>框架还能重用分析。所有的人员若按照框架的思想来分析事务，那么就能将它划分为同样的构件，采用相似的解决方法，从而使采用同一框架的分析人员之间能进行沟通。</p>\n<p>采用框架技术进行软件开发的主要特点包括：</p>\n<ul>\n<li>领域内的软件结构一致性好</li>\n<li>建立更加开放的系统</li>\n<li>重用代码大大增加，软件生产效率和质量也得到了提高</li>\n<li>软件设计人员要专注于对领域的了解，使需求分析更充分</li>\n<li>存储了经验，可以让那些经验丰富的人员去设计框架和领域构件，而不必限于低层编程</li>\n<li>允许采用快速原型技术</li>\n<li>有利于在一个项目内多人协同工作</li>\n<li>大粒度的重用使得平均开发费用降低，开发速度加快，开发人员减少，维护费用降低，而参数化框架使得适应性、灵活性增强</li>\n</ul>\n<p>四、与框架相关的概念</p>\n<p>1\\. 白盒与黑盒框架</p>\n<p>框架可分为白盒(White-Box)与黑盒(Black-Box)两种框架。</p>\n<p><strong>基于继承的框架被称为白盒框架</strong>。所谓白盒即具备可视性，被继承的父类的内部实现细节对子类而言都是可知的。利用白盒框架的应用开发者通过衍生子类或重写父类的成员方法来开发系统。子类的实现很大程度上依赖于父类的实现，这种依赖性限制了重用的灵活性和完全性。但解决这种局限性的方法可以是只继承抽象父类，因为抽象类基本上不提供具体的实现。白盒框架是一个程序骨架，而用户衍生出的子类是这个骨架上的附属品。</p>\n<p><strong>基于对象构件组装的框架就是黑盒框架</strong>。应用开发者通过整理、组装对象来获得系统的实现。用户只须了解构件的<em>外部接口</em>，无须了解内部的具体实现。另外，组装比继承更为灵活，它能动态地改变，继承只是一个静态编译时的概念。</p>\n<p>在理想情况下，任何所需的功能都可通过组装已有的构件得到，事实上可获得的构件远远不能满足需求，有时通过继承获得新的构件比利用已有构件组装新构件更容易，因此白盒<br>和黑盒将同时应用于系统的开发中。不过白盒框架趋向于向黑盒框架发展，黑盒框架也是系统开发希望达到的理想目标。</p>\n<p>2\\. 热点、食谱以及好莱坞原则</p>\n<p>成功的框架开发需要确定领域专用的“热点” (Hot spot)。应用开发者在框架的基础上进行开发，只须扩展框架的某些部分，<em>“热点”就是在应用领域的一种扩展<br>槽，开发者根据自己的需要填充这些扩展槽</em>。“热点”使框架具有灵活性，如在具体的实现中，扩展槽可以被看成是一些抽象类，开发者通过重写抽象方法获得具体实现。</p>\n<p>“食谱” (Cookbook)就是描述如何使用框架方法的文档。在“食谱”中包含了许多“烹饪”方法，这些“烹饪”方法相当于一些具体的操作步骤，描述了为解决某一<br>专门问题如何使用框架的详细方法。框架的内部设计和实现细节通常不出现在“食谱”中。</p>\n<p>框架的一个重要特征就是用户定义的方法经常被框架自身调用，而不是从用户的应用代码中调用。这种机制常称为“好莱坞原则”(Hollywood<br>Principle)或“别调用我们，我们会调用您”。</p>\n","excerpt":"","more":"<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/the-difference-of-frame-and-\nframework_0.jpg\" alt=\"\"></p>\n<p>该文章是我之前在麦库里收藏的，但不知为何现在已找不到原文链接了，网上都是些转载文章，还不完整。如果作者能看到，希望作者可以联系我。为使文章结构更清晰，下文稍<br>有改动。</p>\n<h2 id=\"架构和框架的区别\"><a href=\"#架构和框架的区别\" class=\"headerlink\" title=\"架构和框架的区别\"></a>架构和框架的区别</h2><p>笔者发现，人们对软件架构存在非常多的误解，其中一个最为普遍的误解就是：将架构和框架（Framework）混为一谈。本文阐述了它们的区别。算是对思辨成果的一个<br>应用吧。一图胜千言，下图切中肯綮地点出了架构和框架的区别。一句话，框架是软件，架构不是软件。  </p>\n<p><strong>框架</strong>是一种特殊的<strong>软件</strong>，它并不能提供完整无缺的解决方案，而是为你构建解决方案提供良好的基础。框架是<strong>半成品</strong>。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”。</p>\n<p><strong>软件架构不是软件</strong>，而是<strong>关于软件如何设计的重要决策</strong>。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。或许，人们常把架构和框架混为一谈的原因就在于此吧。</p>\n<p>理解了本图，我们就很容易理解Frank Buschmann等人在《面向模式的软件体系结构（第一卷）》中为框架所下的定义了，其中也提到了框架和架构的关系：<br><strong><em>框架是一个可实例化的、部分完成的软件系统或子系统，它为一组系统或子系统定义了架构，并提供了构造系统的基本构造块，还为实现特定功能定义了可调整点。在面向对象环境中，框架由抽象类和具体类组成</em>。</strong>（A framework is a partially complete software (sub-) system that is intended to be instantiated. It defines the architecture for a family of (sub-) systems and provides the basic building blocks to create them. It also defines the places where adaptations for specific functionality should be made. In an object-oriented environment a framework consists of abstract and concrete classes.）</p>\n<p>在以前经常和同事、朋友，甚至是合作伙伴之间进行一些技术上的交流，很多时候他们给我的印象是软件“架构”和“框架”被混为一谈，而我也曾经经历过这个阶段。在理解上<br>从模糊混淆到有所认识是需要投入足够的时间来进行理解的。软件“架构”和“框架”是两个不同的概念，但它们也是相互关联的。</p>\n<p><strong>软件框架是一特殊的软件，由实际的代码构建而成，是软件系统、子系统的半成品。</strong>软件框架为具体的解决方案提供了基础，提供了基础服务和可扩展点，同时软件框架也建立了一些约束，开发人员在此基础上进行特定业务功能的定制开发。例如，在J2EE企业级应用程序开发中，经常使用struts+spring+hibernate来搭建一个基本的项目结构，在没有其他特殊系统需求的前提下，<em>这就是一个软件框架</em>。</p>\n<p><strong>软件架构是引导如何设计软件框架的重要决策</strong>。它决定了软件系统如何划分，在一定程度上描述了被划分的各个部分之间的静态、动态关系。软件架构的决策体现在软件系统的框架中。</p>\n<p><strong>框架（Framework）</strong>是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供了上下文(Context)关系。因此构件库的大规模重用也需要框架。</p>\n<p>构件领域框架方法在很大程度上借鉴了硬件技术发展的成就，它是构件技术、软件体系结构研究和应用软件开发三者发展结合的产物。在很多情况下，框架通常以构件库的形式出<br>现，但构件库只是框架的一个重要部分。框架的关键还在于框架内对象间的交互模式和控制流模式。</p>\n<p>框架比构件可定制性强。在某种程度上，将构件和框架看成两个不同但彼此协作的技术或许更好。框架为构件提供重用的环境，为构件处理错误、交换数据及激活操作提供了标准<br>的方法。</p>\n<p>应用框架的概念也很简单。它并不是包含构件应用程序的小片程序，而是实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。使用这种框架的编程人员可以在一<br>个通用功能已经实现的基础上开始具体的系统开发。框架提供了所有应用期望的默认行为的类集合。具体的应用通过重写子类(该子类属于框架的默认行为)或组装对象来支持应<br>用专用的行为。</p>\n<p>应用框架强调的是软件的设计重用性和系统的可扩充性,以缩短大型应用软件系统的开发周期，提高开发质量。与传统的基于类库的面向对象重用技术比较，应用框架更注重于面<br>向专业领域的软件重用。应用框架具有领域相关性，构件根据框架进行复合而生成可运行的系统。框架的粒度越大，其中包含的领域知识就更加完整。</p>\n<p>框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟<br>的，不断升级的软件。</p>\n<p>框架目前还没有统一的定义，其中Ralph Johnson所给出的定义基本上为大多数研究人员所接受：</p>\n<p>一个框架是一个可复用设计，它是由一组抽象类及其实例间协作关系来表达的 【Johnson 98】。</p>\n<p>这个定义是从框架内涵的角度来定义框架的，当然也可以从框架用途的角度来给出框架的定义：</p>\n<p>一个框架是在一个给定的问题领域内，一个应用程序的一部分设计与实现【Bosch 97】。</p>\n<p>从以上两个定义可以看出，框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。<em>框架将应用系统划分为类和对象，定义类和对象的责任，类和对象如何互相协作<br>，以及对象之间的控制线程。</em>这些共有的设计因素由框架预先定义，应用开发人员只须关注于特定的应用系统<strong>特有部分</strong>。框架刻画了其应用领域所共有的设计决策，所<br>以说框架着重于设计复用，尽管框架中可能包含用某种程序设计语言实现的具体类。</p>\n<p>一个基于框架开发的应用系统包含一个或多个框架，与框架相关的构件类，以及与应用系统相关的功能扩展。与应用系统相关的扩展包括与应用系统相关的类和对象。应用系统可<br>能仅仅复用了面向对象框架的一部分，或者说，它可能需要对框架进行一些适应性修改，以满足系统需求。</p>\n<p>面向对象的框架作为一种可复用的软件，在基于框架的软件开发过程中会涉及到框架的开发和利用两个方面的工作。框架的开发阶段在于产生领域中可复用的设计。该阶段的主要<br>结果是框架以及与框架相关的构件类。该阶段的一个重要活动是框架的演变和维护。象所有软件一样，框架也易于变化。产生变化的原因很多，如应用出错，业务领域变化，等等<br>。</p>\n<p>不论是哪一种技术，最终都是为业务发展而服务的。从业务的角度来讲。首先，框架的是为了企业的业务发展和战略规划而服务的，他服从于企业的愿景（vision）；其次<br>，框架最重要的目标是提高企业的竞争能力，包括降低成本、提高质量、改善客户满意程度，控制进度等方面。最后，框架实现这一目标的方式是进行有效的知识积累。软件开发<br>是一种知识活动，因此知识的聚集和积累是至关重要的。框架能够采用一种结构化的方式对某个特定的业务领域进行描述，也就是将这个领域相关的技术以代码、文档、模型等方<br>式固化下来。</p>\n<h3 id=\"详细介绍一下框架的作用\"><a href=\"#详细介绍一下框架的作用\" class=\"headerlink\" title=\"详细介绍一下框架的作用\"></a>详细介绍一下框架的作用</h3><p>一、框架要解决的问题</p>\n<p>框架要解决的最重要的一个问题是<strong>技术整合</strong>的问题，在J2EE的框架中，有着各种各样的技术，不同的软件企业需要从J2EE中选择不同的技术，这就使得软件企业<br>最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的<br>实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。</p>\n<p>要理解这一点，我们来举一些例子：</p>\n<p>一个做视频流应用的软件企业，他为电广行业提供整体的解决方案。他的优势在于将各种各样的视频硬件、服务器、和管理结合起来，因此他扮演的是一个集成商的角色。因此他<br>的核心价值在于使用软件技术将不同的硬件整合起来，并在硬件的整合层面上提供一个统一的管理平台。所以他的精力应该放在解决两个问题：</p>\n<p>如何找到一种方法，将不同的硬件整合起来，注意，这里的整合并不是技术整合，而是一种思路上的整合。<em>首先要考虑的绝对不是要使用什么技术，而是这些硬件需要提供哪些<br>服务，需要以什么样的方式进行管理</em>。因此，这时候做的事情实际上是对领域进行建模。例如，我们定义任何一种硬件都需要提供两种能力，一种是统一的管理接口，用于对所<br>有硬件统一管理；另一种是服务接口，系统平台可以查询硬件所能够提供的服务，并调用这些服务。所以，设计的规范将会针对两种能力进行。</p>\n<p>另一个问题是如何描述这个管理系统的规范。你需要描述各种管理活动，以及管理中所涉及的不同实体。因为管理系统是针对硬件的管理，所以它是构架在硬件整合平台之上的。</p>\n<p>在完成业务层面的设计之后，我们再来看看具体的技术实现。光有规范和设计是不够的，我们还需要选择一个优秀的技术。由于是对不同硬件的整合，我们想到采用Java提供<br>的JMX技术。JMX技术适合用来进行系统整合，它定义了一个通用的规范，并给出了远程管理端口的一些默认实现。JMX已经经过了实践的检验，不少的应用服务器都采用<br>了以JMX为基础的结构，例如有名的JBoss。JMX已经是一个很好的开始了，但是我们还需要在JMX的基础上再做一些工作。</p>\n<p>二、什么要用框架？</p>\n<p>因为软件系统发展到今天已经很复杂了，特别是服务器端软件，设计到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只<br>需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事物处理，安全性，数据流控制等问题。还有框架一般都经过很多<br>人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。</p>\n<p>框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的<strong>中间层</strong>。软件为什么要分层？为了实现“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易<br>于延展，易于分配资源…总之好处很多啦。</p>\n<p>三、为什么要进行框架开发?</p>\n<p><strong>框架的最大好处就是重用</strong>。面向对象系统获得的最大的复用方式就是框架，一个大的应用系统往往可能由多层互相协作的框架组成。</p>\n<p>由于框架能重用代码，因此从一已有构件库中建立应用变得非常容易，因为构件都采用框架统一定义的接口，从而使构件间的通信简单。</p>\n<p>框架能重用设计。它提供可重用的抽象算法及高层设计，并能将大系统分解成更小的构件，而且能描述构件间的内部接口。这些标准接口使在已有的构件基础上通过组装建立各种<br>各样的系统成为可能。只要符合接口定义，新的构件就能插入框架中，构件设计者就能重用构架的bsp;<br>框架还能重用分析。所有的人员若按照框架的思想来分析事务，那么就能将它划分为同样的构件，采用相似的解决方法，从而使采用同一框架的分析人员之间能进行沟通。</p>\n<p>采用框架技术进行软件开发的主要特点包括：</p>\n<ul>\n<li>领域内的软件结构一致性好</li>\n<li>建立更加开放的系统</li>\n<li>重用代码大大增加，软件生产效率和质量也得到了提高</li>\n<li>软件设计人员要专注于对领域的了解，使需求分析更充分</li>\n<li>存储了经验，可以让那些经验丰富的人员去设计框架和领域构件，而不必限于低层编程</li>\n<li>允许采用快速原型技术</li>\n<li>有利于在一个项目内多人协同工作</li>\n<li>大粒度的重用使得平均开发费用降低，开发速度加快，开发人员减少，维护费用降低，而参数化框架使得适应性、灵活性增强</li>\n</ul>\n<p>四、与框架相关的概念</p>\n<p>1\\. 白盒与黑盒框架</p>\n<p>框架可分为白盒(White-Box)与黑盒(Black-Box)两种框架。</p>\n<p><strong>基于继承的框架被称为白盒框架</strong>。所谓白盒即具备可视性，被继承的父类的内部实现细节对子类而言都是可知的。利用白盒框架的应用开发者通过衍生子类或重写父类的成员方法来开发系统。子类的实现很大程度上依赖于父类的实现，这种依赖性限制了重用的灵活性和完全性。但解决这种局限性的方法可以是只继承抽象父类，因为抽象类基本上不提供具体的实现。白盒框架是一个程序骨架，而用户衍生出的子类是这个骨架上的附属品。</p>\n<p><strong>基于对象构件组装的框架就是黑盒框架</strong>。应用开发者通过整理、组装对象来获得系统的实现。用户只须了解构件的<em>外部接口</em>，无须了解内部的具体实现。另外，组装比继承更为灵活，它能动态地改变，继承只是一个静态编译时的概念。</p>\n<p>在理想情况下，任何所需的功能都可通过组装已有的构件得到，事实上可获得的构件远远不能满足需求，有时通过继承获得新的构件比利用已有构件组装新构件更容易，因此白盒<br>和黑盒将同时应用于系统的开发中。不过白盒框架趋向于向黑盒框架发展，黑盒框架也是系统开发希望达到的理想目标。</p>\n<p>2\\. 热点、食谱以及好莱坞原则</p>\n<p>成功的框架开发需要确定领域专用的“热点” (Hot spot)。应用开发者在框架的基础上进行开发，只须扩展框架的某些部分，<em>“热点”就是在应用领域的一种扩展<br>槽，开发者根据自己的需要填充这些扩展槽</em>。“热点”使框架具有灵活性，如在具体的实现中，扩展槽可以被看成是一些抽象类，开发者通过重写抽象方法获得具体实现。</p>\n<p>“食谱” (Cookbook)就是描述如何使用框架方法的文档。在“食谱”中包含了许多“烹饪”方法，这些“烹饪”方法相当于一些具体的操作步骤，描述了为解决某一<br>专门问题如何使用框架的详细方法。框架的内部设计和实现细节通常不出现在“食谱”中。</p>\n<p>框架的一个重要特征就是用户定义的方法经常被框架自身调用，而不是从用户的应用代码中调用。这种机制常称为“好莱坞原则”(Hollywood<br>Principle)或“别调用我们，我们会调用您”。</p>\n"},{"title":"《代码的未来》——新一代程序员的未来","date":"2014-09-10T15:58:06.000Z","_content":"作者：[松本行弘](http://zh.wikipedia.org/zh/\\%E6\\%9D\\%BE\\%E6\\%9C\\%AC\\%E8\\%A1\\%8C\\%E5\\%BC\\%98)\n\n松本行弘，编程大师，Ruby语言的发明者\n\n# 关于本书\n\n此书与《黑客与画家》一样，都是作者的个人优秀作品集，《代码的未来》只是其中的一篇文章。他从编程语言的本质出发探索和发现未来程序世界的可能发展。动态语言的不断\n涌现、大数据的持续火热、多核时代的到来，身处浪潮之巅的新一代程序员，我们到底该如何面对？从第一篇文章开始我就发现这一本书和以往的概念性书籍完全不一样，特别是\n语言方面，非常朴实，没有令人深刻的概念，如果有很难懂的东西要么就简单地讲，要么就干脆不讲。《黑客与画家》是属于上个世纪程序员的，而《代码的未来》则是给我们这\n一代程序员看的，书中介绍了很多最新的技术知识，当然不会深入讲解，但也可以带领我们来到时代变革的那扇门前。\n\n# 关于编程\n\n何谓编程？“创造出一种人类和计算机都能够理解的语言（编程语言），并通过这样的语言将人类的意图传达给计算机，这样的行为就叫做编程。”这只是作者所引用的一个观点\n而已，但他并不大赞同，我也这样觉得，我认为，编程本身是一个创造的过程，而且是一个创造生命的过程，现在我们编程和上一辈人的编程目的不大一样，虽然都是为了让机器\n能读懂，但我们更着眼于未来，更着眼于代码所给人类带来的实际好处。编程的本质在于“思考”。正如林纳斯·托瓦兹所说：“Just for fun”。码农、程序猿。\n。。有时候我很喜欢这些称谓，因为这些称谓不是别的行业给我们起的，而是我们自己对自己的一种嘲讽，嘲讽中带有一丝与众不同，这正是现代程序员的乐趣。程序员无疑是互\n联网上最会自嘲的一群人，但苦只有自己知道，乐也只有自己知道。\n\n# 关于编程语言\n\n大一时候的我，刚学完C语言就迫不及待去学习C++语言，以为从面向过程到面向对象就算是编程世界里最重要的一道坎，殊不知，在C和C++大门之外，世界上还有那么可\n爱、好用、强大、简洁的编程语言。通过微博和[Github](https://github.com/)我学习了Python语言，真太美了，原来强大的语言不一定\n要C/C++那么严谨复杂，它也可以做得很简洁。从那以后，我就爱上了动态语言，爱上了脚本语言。很多人说动态语言虽然简洁，但性能上太差，呵呵，那只是曾经，现在的\n动态语言不仅本身进行了足够的性能优化，而且自己要是主动去进行优化，那性能绝对比得上C和C++写出来的程序。  \nGo、Dart、CoffeeScript、Lua、Lisp，虽然很多我都听过，而且也看到很多人在用，但由于目前我精力有限，暂时没有学习新语言的打算。作者的R\nuby语言，我也未曾接触过，看完本书，我对其有了一定的认识，很强大，但我学过Python，我觉得世界上没有比Python更简洁的语言了，而且Python很重\n要的一个特性是强制缩进，所以看看网上的Python代码，几乎不会看见某些人所写的C/C++那种格式混乱的代码。在未来，如果有一门新的语言诞生并得到很好的发展\n，那么他一定是吸收了众多语言的优点，并在此基础之上拥有了自己独一无二的特性，比如垃圾回收，比如异常处理等。\n\n# 关于未来\n\n元编程、云计算、大数据、多核时代，挑战MySQL的NoSQL，随着摩尔定律渐渐地被颠覆，新的时代已经到来了。我们不可能掌握所有的技能，但所有技能我们都应该去\n学习一下\n\n**时代在召唤**~~~~~~~~~\n\n补充一下在书中所看到的我以前未知的知识：  \n_DSL_(Domain Specific Language,\n特定领域语言)：XML、JASON、SQL、正则表达式等都属于外部DSL，而内部DSL是在现有语言中实现DSL，“Programming is a\nprocess of designing DSL for your own application(编程就是为自己的应用程序设计DSL的过程)”  \n_元数据_：描述数据所具有的结构的数据，也就是关于数据本身的数据  \n_元编程_：用程序来编写程序  \n_Roma_(Rakuten On-Memory Architecture)：一种键-\n值存储数据库这种数据库把所有的数据都存放在内存中，采用环状的分布式架构，在运行中可自由增减节点  \n_C10K问题_：在同时连接到服务器的客户端数量超过10000个的环境中，即便是硬件性能足够，依然无法正常提供服务，这是“想当然编程”的副产品数据库的  \n_ACID特性_：Atomicity(原子性)、Consistency(一致性)、Isolation(隔离性)和Durability(持久性)  \n_NoSQL_：是一种数据库的总称，主要代表有ROMA(Rakuten On-Memory Architecture)这样的键-\n值存储型数据库和MongoDB这样的面向文档数据库(存储的是拥有结构的文档)\n","source":"_posts/the-future-of-coding.md","raw":"---\ntitle: \"《代码的未来》——新一代程序员的未来\"\ndate: 2014-09-10 23:58:06\ncategories: 韦编三绝\n---\n作者：[松本行弘](http://zh.wikipedia.org/zh/\\%E6\\%9D\\%BE\\%E6\\%9C\\%AC\\%E8\\%A1\\%8C\\%E5\\%BC\\%98)\n\n松本行弘，编程大师，Ruby语言的发明者\n\n# 关于本书\n\n此书与《黑客与画家》一样，都是作者的个人优秀作品集，《代码的未来》只是其中的一篇文章。他从编程语言的本质出发探索和发现未来程序世界的可能发展。动态语言的不断\n涌现、大数据的持续火热、多核时代的到来，身处浪潮之巅的新一代程序员，我们到底该如何面对？从第一篇文章开始我就发现这一本书和以往的概念性书籍完全不一样，特别是\n语言方面，非常朴实，没有令人深刻的概念，如果有很难懂的东西要么就简单地讲，要么就干脆不讲。《黑客与画家》是属于上个世纪程序员的，而《代码的未来》则是给我们这\n一代程序员看的，书中介绍了很多最新的技术知识，当然不会深入讲解，但也可以带领我们来到时代变革的那扇门前。\n\n# 关于编程\n\n何谓编程？“创造出一种人类和计算机都能够理解的语言（编程语言），并通过这样的语言将人类的意图传达给计算机，这样的行为就叫做编程。”这只是作者所引用的一个观点\n而已，但他并不大赞同，我也这样觉得，我认为，编程本身是一个创造的过程，而且是一个创造生命的过程，现在我们编程和上一辈人的编程目的不大一样，虽然都是为了让机器\n能读懂，但我们更着眼于未来，更着眼于代码所给人类带来的实际好处。编程的本质在于“思考”。正如林纳斯·托瓦兹所说：“Just for fun”。码农、程序猿。\n。。有时候我很喜欢这些称谓，因为这些称谓不是别的行业给我们起的，而是我们自己对自己的一种嘲讽，嘲讽中带有一丝与众不同，这正是现代程序员的乐趣。程序员无疑是互\n联网上最会自嘲的一群人，但苦只有自己知道，乐也只有自己知道。\n\n# 关于编程语言\n\n大一时候的我，刚学完C语言就迫不及待去学习C++语言，以为从面向过程到面向对象就算是编程世界里最重要的一道坎，殊不知，在C和C++大门之外，世界上还有那么可\n爱、好用、强大、简洁的编程语言。通过微博和[Github](https://github.com/)我学习了Python语言，真太美了，原来强大的语言不一定\n要C/C++那么严谨复杂，它也可以做得很简洁。从那以后，我就爱上了动态语言，爱上了脚本语言。很多人说动态语言虽然简洁，但性能上太差，呵呵，那只是曾经，现在的\n动态语言不仅本身进行了足够的性能优化，而且自己要是主动去进行优化，那性能绝对比得上C和C++写出来的程序。  \nGo、Dart、CoffeeScript、Lua、Lisp，虽然很多我都听过，而且也看到很多人在用，但由于目前我精力有限，暂时没有学习新语言的打算。作者的R\nuby语言，我也未曾接触过，看完本书，我对其有了一定的认识，很强大，但我学过Python，我觉得世界上没有比Python更简洁的语言了，而且Python很重\n要的一个特性是强制缩进，所以看看网上的Python代码，几乎不会看见某些人所写的C/C++那种格式混乱的代码。在未来，如果有一门新的语言诞生并得到很好的发展\n，那么他一定是吸收了众多语言的优点，并在此基础之上拥有了自己独一无二的特性，比如垃圾回收，比如异常处理等。\n\n# 关于未来\n\n元编程、云计算、大数据、多核时代，挑战MySQL的NoSQL，随着摩尔定律渐渐地被颠覆，新的时代已经到来了。我们不可能掌握所有的技能，但所有技能我们都应该去\n学习一下\n\n**时代在召唤**~~~~~~~~~\n\n补充一下在书中所看到的我以前未知的知识：  \n_DSL_(Domain Specific Language,\n特定领域语言)：XML、JASON、SQL、正则表达式等都属于外部DSL，而内部DSL是在现有语言中实现DSL，“Programming is a\nprocess of designing DSL for your own application(编程就是为自己的应用程序设计DSL的过程)”  \n_元数据_：描述数据所具有的结构的数据，也就是关于数据本身的数据  \n_元编程_：用程序来编写程序  \n_Roma_(Rakuten On-Memory Architecture)：一种键-\n值存储数据库这种数据库把所有的数据都存放在内存中，采用环状的分布式架构，在运行中可自由增减节点  \n_C10K问题_：在同时连接到服务器的客户端数量超过10000个的环境中，即便是硬件性能足够，依然无法正常提供服务，这是“想当然编程”的副产品数据库的  \n_ACID特性_：Atomicity(原子性)、Consistency(一致性)、Isolation(隔离性)和Durability(持久性)  \n_NoSQL_：是一种数据库的总称，主要代表有ROMA(Rakuten On-Memory Architecture)这样的键-\n值存储型数据库和MongoDB这样的面向文档数据库(存储的是拥有结构的文档)\n","slug":"the-future-of-coding","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2phz006a9vnzwanbvbwt","content":"<p>作者：<a href=\"http://zh.wikipedia.org/zh/\\%E6\\%9D\\%BE\\%E6\\%9C\\%AC\\%E8\\%A1\\%8C\\%E5\\%BC\\%98\" target=\"_blank\" rel=\"external\">松本行弘</a></p>\n<p>松本行弘，编程大师，Ruby语言的发明者</p>\n<h1 id=\"关于本书\"><a href=\"#关于本书\" class=\"headerlink\" title=\"关于本书\"></a>关于本书</h1><p>此书与《黑客与画家》一样，都是作者的个人优秀作品集，《代码的未来》只是其中的一篇文章。他从编程语言的本质出发探索和发现未来程序世界的可能发展。动态语言的不断<br>涌现、大数据的持续火热、多核时代的到来，身处浪潮之巅的新一代程序员，我们到底该如何面对？从第一篇文章开始我就发现这一本书和以往的概念性书籍完全不一样，特别是<br>语言方面，非常朴实，没有令人深刻的概念，如果有很难懂的东西要么就简单地讲，要么就干脆不讲。《黑客与画家》是属于上个世纪程序员的，而《代码的未来》则是给我们这<br>一代程序员看的，书中介绍了很多最新的技术知识，当然不会深入讲解，但也可以带领我们来到时代变革的那扇门前。</p>\n<h1 id=\"关于编程\"><a href=\"#关于编程\" class=\"headerlink\" title=\"关于编程\"></a>关于编程</h1><p>何谓编程？“创造出一种人类和计算机都能够理解的语言（编程语言），并通过这样的语言将人类的意图传达给计算机，这样的行为就叫做编程。”这只是作者所引用的一个观点<br>而已，但他并不大赞同，我也这样觉得，我认为，编程本身是一个创造的过程，而且是一个创造生命的过程，现在我们编程和上一辈人的编程目的不大一样，虽然都是为了让机器<br>能读懂，但我们更着眼于未来，更着眼于代码所给人类带来的实际好处。编程的本质在于“思考”。正如林纳斯·托瓦兹所说：“Just for fun”。码农、程序猿。<br>。。有时候我很喜欢这些称谓，因为这些称谓不是别的行业给我们起的，而是我们自己对自己的一种嘲讽，嘲讽中带有一丝与众不同，这正是现代程序员的乐趣。程序员无疑是互<br>联网上最会自嘲的一群人，但苦只有自己知道，乐也只有自己知道。</p>\n<h1 id=\"关于编程语言\"><a href=\"#关于编程语言\" class=\"headerlink\" title=\"关于编程语言\"></a>关于编程语言</h1><p>大一时候的我，刚学完C语言就迫不及待去学习C++语言，以为从面向过程到面向对象就算是编程世界里最重要的一道坎，殊不知，在C和C++大门之外，世界上还有那么可<br>爱、好用、强大、简洁的编程语言。通过微博和<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github</a>我学习了Python语言，真太美了，原来强大的语言不一定<br>要C/C++那么严谨复杂，它也可以做得很简洁。从那以后，我就爱上了动态语言，爱上了脚本语言。很多人说动态语言虽然简洁，但性能上太差，呵呵，那只是曾经，现在的<br>动态语言不仅本身进行了足够的性能优化，而且自己要是主动去进行优化，那性能绝对比得上C和C++写出来的程序。<br>Go、Dart、CoffeeScript、Lua、Lisp，虽然很多我都听过，而且也看到很多人在用，但由于目前我精力有限，暂时没有学习新语言的打算。作者的R<br>uby语言，我也未曾接触过，看完本书，我对其有了一定的认识，很强大，但我学过Python，我觉得世界上没有比Python更简洁的语言了，而且Python很重<br>要的一个特性是强制缩进，所以看看网上的Python代码，几乎不会看见某些人所写的C/C++那种格式混乱的代码。在未来，如果有一门新的语言诞生并得到很好的发展<br>，那么他一定是吸收了众多语言的优点，并在此基础之上拥有了自己独一无二的特性，比如垃圾回收，比如异常处理等。</p>\n<h1 id=\"关于未来\"><a href=\"#关于未来\" class=\"headerlink\" title=\"关于未来\"></a>关于未来</h1><p>元编程、云计算、大数据、多核时代，挑战MySQL的NoSQL，随着摩尔定律渐渐地被颠覆，新的时代已经到来了。我们不可能掌握所有的技能，但所有技能我们都应该去<br>学习一下</p>\n<p><strong>时代在召唤</strong><del>~</del>~~~~</p>\n<p>补充一下在书中所看到的我以前未知的知识：<br><em>DSL</em>(Domain Specific Language,<br>特定领域语言)：XML、JASON、SQL、正则表达式等都属于外部DSL，而内部DSL是在现有语言中实现DSL，“Programming is a<br>process of designing DSL for your own application(编程就是为自己的应用程序设计DSL的过程)”<br><em>元数据</em>：描述数据所具有的结构的数据，也就是关于数据本身的数据<br><em>元编程</em>：用程序来编写程序<br><em>Roma</em>(Rakuten On-Memory Architecture)：一种键-<br>值存储数据库这种数据库把所有的数据都存放在内存中，采用环状的分布式架构，在运行中可自由增减节点<br><em>C10K问题</em>：在同时连接到服务器的客户端数量超过10000个的环境中，即便是硬件性能足够，依然无法正常提供服务，这是“想当然编程”的副产品数据库的<br><em>ACID特性</em>：Atomicity(原子性)、Consistency(一致性)、Isolation(隔离性)和Durability(持久性)<br><em>NoSQL</em>：是一种数据库的总称，主要代表有ROMA(Rakuten On-Memory Architecture)这样的键-<br>值存储型数据库和MongoDB这样的面向文档数据库(存储的是拥有结构的文档)</p>\n","excerpt":"","more":"<p>作者：<a href=\"http://zh.wikipedia.org/zh/\\%E6\\%9D\\%BE\\%E6\\%9C\\%AC\\%E8\\%A1\\%8C\\%E5\\%BC\\%98\">松本行弘</a></p>\n<p>松本行弘，编程大师，Ruby语言的发明者</p>\n<h1 id=\"关于本书\"><a href=\"#关于本书\" class=\"headerlink\" title=\"关于本书\"></a>关于本书</h1><p>此书与《黑客与画家》一样，都是作者的个人优秀作品集，《代码的未来》只是其中的一篇文章。他从编程语言的本质出发探索和发现未来程序世界的可能发展。动态语言的不断<br>涌现、大数据的持续火热、多核时代的到来，身处浪潮之巅的新一代程序员，我们到底该如何面对？从第一篇文章开始我就发现这一本书和以往的概念性书籍完全不一样，特别是<br>语言方面，非常朴实，没有令人深刻的概念，如果有很难懂的东西要么就简单地讲，要么就干脆不讲。《黑客与画家》是属于上个世纪程序员的，而《代码的未来》则是给我们这<br>一代程序员看的，书中介绍了很多最新的技术知识，当然不会深入讲解，但也可以带领我们来到时代变革的那扇门前。</p>\n<h1 id=\"关于编程\"><a href=\"#关于编程\" class=\"headerlink\" title=\"关于编程\"></a>关于编程</h1><p>何谓编程？“创造出一种人类和计算机都能够理解的语言（编程语言），并通过这样的语言将人类的意图传达给计算机，这样的行为就叫做编程。”这只是作者所引用的一个观点<br>而已，但他并不大赞同，我也这样觉得，我认为，编程本身是一个创造的过程，而且是一个创造生命的过程，现在我们编程和上一辈人的编程目的不大一样，虽然都是为了让机器<br>能读懂，但我们更着眼于未来，更着眼于代码所给人类带来的实际好处。编程的本质在于“思考”。正如林纳斯·托瓦兹所说：“Just for fun”。码农、程序猿。<br>。。有时候我很喜欢这些称谓，因为这些称谓不是别的行业给我们起的，而是我们自己对自己的一种嘲讽，嘲讽中带有一丝与众不同，这正是现代程序员的乐趣。程序员无疑是互<br>联网上最会自嘲的一群人，但苦只有自己知道，乐也只有自己知道。</p>\n<h1 id=\"关于编程语言\"><a href=\"#关于编程语言\" class=\"headerlink\" title=\"关于编程语言\"></a>关于编程语言</h1><p>大一时候的我，刚学完C语言就迫不及待去学习C++语言，以为从面向过程到面向对象就算是编程世界里最重要的一道坎，殊不知，在C和C++大门之外，世界上还有那么可<br>爱、好用、强大、简洁的编程语言。通过微博和<a href=\"https://github.com/\">Github</a>我学习了Python语言，真太美了，原来强大的语言不一定<br>要C/C++那么严谨复杂，它也可以做得很简洁。从那以后，我就爱上了动态语言，爱上了脚本语言。很多人说动态语言虽然简洁，但性能上太差，呵呵，那只是曾经，现在的<br>动态语言不仅本身进行了足够的性能优化，而且自己要是主动去进行优化，那性能绝对比得上C和C++写出来的程序。<br>Go、Dart、CoffeeScript、Lua、Lisp，虽然很多我都听过，而且也看到很多人在用，但由于目前我精力有限，暂时没有学习新语言的打算。作者的R<br>uby语言，我也未曾接触过，看完本书，我对其有了一定的认识，很强大，但我学过Python，我觉得世界上没有比Python更简洁的语言了，而且Python很重<br>要的一个特性是强制缩进，所以看看网上的Python代码，几乎不会看见某些人所写的C/C++那种格式混乱的代码。在未来，如果有一门新的语言诞生并得到很好的发展<br>，那么他一定是吸收了众多语言的优点，并在此基础之上拥有了自己独一无二的特性，比如垃圾回收，比如异常处理等。</p>\n<h1 id=\"关于未来\"><a href=\"#关于未来\" class=\"headerlink\" title=\"关于未来\"></a>关于未来</h1><p>元编程、云计算、大数据、多核时代，挑战MySQL的NoSQL，随着摩尔定律渐渐地被颠覆，新的时代已经到来了。我们不可能掌握所有的技能，但所有技能我们都应该去<br>学习一下</p>\n<p><strong>时代在召唤</strong><del>~</del>~~~~</p>\n<p>补充一下在书中所看到的我以前未知的知识：<br><em>DSL</em>(Domain Specific Language,<br>特定领域语言)：XML、JASON、SQL、正则表达式等都属于外部DSL，而内部DSL是在现有语言中实现DSL，“Programming is a<br>process of designing DSL for your own application(编程就是为自己的应用程序设计DSL的过程)”<br><em>元数据</em>：描述数据所具有的结构的数据，也就是关于数据本身的数据<br><em>元编程</em>：用程序来编写程序<br><em>Roma</em>(Rakuten On-Memory Architecture)：一种键-<br>值存储数据库这种数据库把所有的数据都存放在内存中，采用环状的分布式架构，在运行中可自由增减节点<br><em>C10K问题</em>：在同时连接到服务器的客户端数量超过10000个的环境中，即便是硬件性能足够，依然无法正常提供服务，这是“想当然编程”的副产品数据库的<br><em>ACID特性</em>：Atomicity(原子性)、Consistency(一致性)、Isolation(隔离性)和Durability(持久性)<br><em>NoSQL</em>：是一种数据库的总称，主要代表有ROMA(Rakuten On-Memory Architecture)这样的键-<br>值存储型数据库和MongoDB这样的面向文档数据库(存储的是拥有结构的文档)</p>\n"},{"title":"最大的坏人就是自以为自己在做好事的人","date":"2015-02-27T03:39:35.000Z","_content":"看到知乎上一个问题：为什么有人说日本人冷漠？这是我特别喜欢的一个回答：\n\n日本人有一颗，只要你不影响别人，随便你怎么变态的包容心，和不管自己怎么变态，都不能影响别人的责任感；  \n中国人有一颗，只要你和别人不一样，就觉得你需要教导的温暖爱心，和不管自己多么平庸，都要去影响教导别人的责任感。\n\n我没去过日本，不知道日本人到底是怎么样的，所以这段话暂且抛弃国籍因素，至少我遇到的人，基本上都属于后者，而我自己更愿意做前者。\n\n之前看日本电视剧《Legal High》，从第一季第一集开始我就一直在想，这样的电影到底在宣传一种什么样的价值观，还是纯粹的搞笑，古美门律师到底是好人还是坏\n人呢？直到看到第二季的最后一集，我仿佛明白了一些。日本的电视剧并没有那么强烈刻意地去宣传一种价值观，而是非常微妙的在传达，让观众自己去领悟，自己去总结。\n\n归根结底，是对人性的一种尊重。人也是一种动物，有自己的欲望，无论是对金钱还是对道德都一样，我从不否定。\n\n我不愿强加自己的观点到别人身上去，只要不是自己所关心爱护的，只要不是关乎切身利益的，别人做什么，关我屁事。最讨厌的就是那种自以为自己的道理是正确的，并且并没\n有从自己的那个道理中获得什么的人。\n\n我献血我捐款，不是为了做个好人，也不是因为整个社会都觉得这样对我才去做，而是因为我想通过这样的方式帮助别人  \n我不给路边的乞丐钱财，不为别的，就是觉得他们太懒了  \n姓方的那个校长，我就诅咒他，妨碍社会进步，还让我无法自由上网。  \n很多热门事件我不发表意见，不为别人，因为我知道自己可能没有全面了解事实，当然我绝不是那种不会提意见的人，该说就说，该骂就骂  \n我也经常看那些心灵鸡汤，但只是看看而已，因为我知道，无论别人怎么走，无论马云怎么成功，即使我完全按照别人的生活方式、成长轨迹走，也不会成长为第二个他，当然我\n也不想成为第二个他，要做就做最好的自己。\n\nPS：以上观点只是个人吐槽，无关对错，无关善恶。\n","source":"_posts/the-most-bad-man-is-who-think-to-do-the-good-thing.md","raw":"---\ntitle: \"最大的坏人就是自以为自己在做好事的人\"\ndate: 2015-02-27 11:39:35\ncategories: 边走边想\n---\n看到知乎上一个问题：为什么有人说日本人冷漠？这是我特别喜欢的一个回答：\n\n日本人有一颗，只要你不影响别人，随便你怎么变态的包容心，和不管自己怎么变态，都不能影响别人的责任感；  \n中国人有一颗，只要你和别人不一样，就觉得你需要教导的温暖爱心，和不管自己多么平庸，都要去影响教导别人的责任感。\n\n我没去过日本，不知道日本人到底是怎么样的，所以这段话暂且抛弃国籍因素，至少我遇到的人，基本上都属于后者，而我自己更愿意做前者。\n\n之前看日本电视剧《Legal High》，从第一季第一集开始我就一直在想，这样的电影到底在宣传一种什么样的价值观，还是纯粹的搞笑，古美门律师到底是好人还是坏\n人呢？直到看到第二季的最后一集，我仿佛明白了一些。日本的电视剧并没有那么强烈刻意地去宣传一种价值观，而是非常微妙的在传达，让观众自己去领悟，自己去总结。\n\n归根结底，是对人性的一种尊重。人也是一种动物，有自己的欲望，无论是对金钱还是对道德都一样，我从不否定。\n\n我不愿强加自己的观点到别人身上去，只要不是自己所关心爱护的，只要不是关乎切身利益的，别人做什么，关我屁事。最讨厌的就是那种自以为自己的道理是正确的，并且并没\n有从自己的那个道理中获得什么的人。\n\n我献血我捐款，不是为了做个好人，也不是因为整个社会都觉得这样对我才去做，而是因为我想通过这样的方式帮助别人  \n我不给路边的乞丐钱财，不为别的，就是觉得他们太懒了  \n姓方的那个校长，我就诅咒他，妨碍社会进步，还让我无法自由上网。  \n很多热门事件我不发表意见，不为别人，因为我知道自己可能没有全面了解事实，当然我绝不是那种不会提意见的人，该说就说，该骂就骂  \n我也经常看那些心灵鸡汤，但只是看看而已，因为我知道，无论别人怎么走，无论马云怎么成功，即使我完全按照别人的生活方式、成长轨迹走，也不会成长为第二个他，当然我\n也不想成为第二个他，要做就做最好的自己。\n\nPS：以上观点只是个人吐槽，无关对错，无关善恶。\n","slug":"the-most-bad-man-is-who-think-to-do-the-good-thing","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pi2006c9vnzg2pnodfm","content":"<p>看到知乎上一个问题：为什么有人说日本人冷漠？这是我特别喜欢的一个回答：</p>\n<p>日本人有一颗，只要你不影响别人，随便你怎么变态的包容心，和不管自己怎么变态，都不能影响别人的责任感；<br>中国人有一颗，只要你和别人不一样，就觉得你需要教导的温暖爱心，和不管自己多么平庸，都要去影响教导别人的责任感。</p>\n<p>我没去过日本，不知道日本人到底是怎么样的，所以这段话暂且抛弃国籍因素，至少我遇到的人，基本上都属于后者，而我自己更愿意做前者。</p>\n<p>之前看日本电视剧《Legal High》，从第一季第一集开始我就一直在想，这样的电影到底在宣传一种什么样的价值观，还是纯粹的搞笑，古美门律师到底是好人还是坏<br>人呢？直到看到第二季的最后一集，我仿佛明白了一些。日本的电视剧并没有那么强烈刻意地去宣传一种价值观，而是非常微妙的在传达，让观众自己去领悟，自己去总结。</p>\n<p>归根结底，是对人性的一种尊重。人也是一种动物，有自己的欲望，无论是对金钱还是对道德都一样，我从不否定。</p>\n<p>我不愿强加自己的观点到别人身上去，只要不是自己所关心爱护的，只要不是关乎切身利益的，别人做什么，关我屁事。最讨厌的就是那种自以为自己的道理是正确的，并且并没<br>有从自己的那个道理中获得什么的人。</p>\n<p>我献血我捐款，不是为了做个好人，也不是因为整个社会都觉得这样对我才去做，而是因为我想通过这样的方式帮助别人<br>我不给路边的乞丐钱财，不为别的，就是觉得他们太懒了<br>姓方的那个校长，我就诅咒他，妨碍社会进步，还让我无法自由上网。<br>很多热门事件我不发表意见，不为别人，因为我知道自己可能没有全面了解事实，当然我绝不是那种不会提意见的人，该说就说，该骂就骂<br>我也经常看那些心灵鸡汤，但只是看看而已，因为我知道，无论别人怎么走，无论马云怎么成功，即使我完全按照别人的生活方式、成长轨迹走，也不会成长为第二个他，当然我<br>也不想成为第二个他，要做就做最好的自己。</p>\n<p>PS：以上观点只是个人吐槽，无关对错，无关善恶。</p>\n","excerpt":"","more":"<p>看到知乎上一个问题：为什么有人说日本人冷漠？这是我特别喜欢的一个回答：</p>\n<p>日本人有一颗，只要你不影响别人，随便你怎么变态的包容心，和不管自己怎么变态，都不能影响别人的责任感；<br>中国人有一颗，只要你和别人不一样，就觉得你需要教导的温暖爱心，和不管自己多么平庸，都要去影响教导别人的责任感。</p>\n<p>我没去过日本，不知道日本人到底是怎么样的，所以这段话暂且抛弃国籍因素，至少我遇到的人，基本上都属于后者，而我自己更愿意做前者。</p>\n<p>之前看日本电视剧《Legal High》，从第一季第一集开始我就一直在想，这样的电影到底在宣传一种什么样的价值观，还是纯粹的搞笑，古美门律师到底是好人还是坏<br>人呢？直到看到第二季的最后一集，我仿佛明白了一些。日本的电视剧并没有那么强烈刻意地去宣传一种价值观，而是非常微妙的在传达，让观众自己去领悟，自己去总结。</p>\n<p>归根结底，是对人性的一种尊重。人也是一种动物，有自己的欲望，无论是对金钱还是对道德都一样，我从不否定。</p>\n<p>我不愿强加自己的观点到别人身上去，只要不是自己所关心爱护的，只要不是关乎切身利益的，别人做什么，关我屁事。最讨厌的就是那种自以为自己的道理是正确的，并且并没<br>有从自己的那个道理中获得什么的人。</p>\n<p>我献血我捐款，不是为了做个好人，也不是因为整个社会都觉得这样对我才去做，而是因为我想通过这样的方式帮助别人<br>我不给路边的乞丐钱财，不为别的，就是觉得他们太懒了<br>姓方的那个校长，我就诅咒他，妨碍社会进步，还让我无法自由上网。<br>很多热门事件我不发表意见，不为别人，因为我知道自己可能没有全面了解事实，当然我绝不是那种不会提意见的人，该说就说，该骂就骂<br>我也经常看那些心灵鸡汤，但只是看看而已，因为我知道，无论别人怎么走，无论马云怎么成功，即使我完全按照别人的生活方式、成长轨迹走，也不会成长为第二个他，当然我<br>也不想成为第二个他，要做就做最好的自己。</p>\n<p>PS：以上观点只是个人吐槽，无关对错，无关善恶。</p>\n"},{"title":"2015，没有规划的规划","date":"2015-02-23T14:11:48.000Z","_content":"根据以往的经验，做规划最好是做一些能够量化的目标，这样会更加有行动力。但今年，我不打算这样做，很多时候我觉得我的大学过得太理性了，一点儿都不精彩，每天除了写\n代码就是去学习如何写代码。我不想再每天都窝在寝室了，虽然现实让我不得不面对未来，但今年我想在大量的未知中体会后青春时代的精彩。所以今年，就围绕以下几个关键词\n：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/2015.jpg)\n\n  * 实习：等了好久终于等到今天，终于可以验证这几年的学习成果了，终于可以用自己的双手为未来打拼了。\n  * 减肥：额，说实话，我身高160体重70，但看起来其实不胖的，只是身体已经因为脂肪太多出现一些毛病了，所以今年必须狠下心了。\n  * 健康：自打前年得了肾结石后就非常关注身体健康了，虽然我从来没想过要多长寿，今朝有酒今朝醉呗，但就目前看来再这样宅下去，我真正的人生还没开始就溘然长逝了。\n  * 女朋友：采访过多位学长学姐，十有八九说大学最遗憾的事情就是没有谈恋爱。我不是别人都在谈恋爱我就去谈恋爱，也不是不想谈恋爱，是一直找不到那个人，希望今年能加一把劲。\n  * 换装备：每次回家家人都强烈要求我去买几件成熟的衣服，而我却一直觉得衣服没穿烂就不用去买新的，而且衣服多了对于我这个重度选择困难患者简直是一种折磨，但是，毕竟该找工作了，还是换一换装备吧。\n  * 说到做到：我一直自诩为一个重信用的人，不过总是答应了别人的事情到最后时间却有点畏惧了，归根结底是自己不够勇敢和太爱做承诺了，所以今后一定少说什么承诺，但每个承诺务必保证说到做到。正如漩涡鸣人：说到做到，这就是我的忍道！\n","source":"_posts/the-plan-of-2015.md","raw":"---\ntitle: \"2015，没有规划的规划\"\ndate: 2015-02-23 22:11:48\ncategories: 边走边想\n---\n根据以往的经验，做规划最好是做一些能够量化的目标，这样会更加有行动力。但今年，我不打算这样做，很多时候我觉得我的大学过得太理性了，一点儿都不精彩，每天除了写\n代码就是去学习如何写代码。我不想再每天都窝在寝室了，虽然现实让我不得不面对未来，但今年我想在大量的未知中体会后青春时代的精彩。所以今年，就围绕以下几个关键词\n：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/2015.jpg)\n\n  * 实习：等了好久终于等到今天，终于可以验证这几年的学习成果了，终于可以用自己的双手为未来打拼了。\n  * 减肥：额，说实话，我身高160体重70，但看起来其实不胖的，只是身体已经因为脂肪太多出现一些毛病了，所以今年必须狠下心了。\n  * 健康：自打前年得了肾结石后就非常关注身体健康了，虽然我从来没想过要多长寿，今朝有酒今朝醉呗，但就目前看来再这样宅下去，我真正的人生还没开始就溘然长逝了。\n  * 女朋友：采访过多位学长学姐，十有八九说大学最遗憾的事情就是没有谈恋爱。我不是别人都在谈恋爱我就去谈恋爱，也不是不想谈恋爱，是一直找不到那个人，希望今年能加一把劲。\n  * 换装备：每次回家家人都强烈要求我去买几件成熟的衣服，而我却一直觉得衣服没穿烂就不用去买新的，而且衣服多了对于我这个重度选择困难患者简直是一种折磨，但是，毕竟该找工作了，还是换一换装备吧。\n  * 说到做到：我一直自诩为一个重信用的人，不过总是答应了别人的事情到最后时间却有点畏惧了，归根结底是自己不够勇敢和太爱做承诺了，所以今后一定少说什么承诺，但每个承诺务必保证说到做到。正如漩涡鸣人：说到做到，这就是我的忍道！\n","slug":"the-plan-of-2015","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pig006e9vnzy9y6s8y3","content":"<p>根据以往的经验，做规划最好是做一些能够量化的目标，这样会更加有行动力。但今年，我不打算这样做，很多时候我觉得我的大学过得太理性了，一点儿都不精彩，每天除了写<br>代码就是去学习如何写代码。我不想再每天都窝在寝室了，虽然现实让我不得不面对未来，但今年我想在大量的未知中体会后青春时代的精彩。所以今年，就围绕以下几个关键词<br>：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2015.jpg\" alt=\"\"></p>\n<ul>\n<li>实习：等了好久终于等到今天，终于可以验证这几年的学习成果了，终于可以用自己的双手为未来打拼了。</li>\n<li>减肥：额，说实话，我身高160体重70，但看起来其实不胖的，只是身体已经因为脂肪太多出现一些毛病了，所以今年必须狠下心了。</li>\n<li>健康：自打前年得了肾结石后就非常关注身体健康了，虽然我从来没想过要多长寿，今朝有酒今朝醉呗，但就目前看来再这样宅下去，我真正的人生还没开始就溘然长逝了。</li>\n<li>女朋友：采访过多位学长学姐，十有八九说大学最遗憾的事情就是没有谈恋爱。我不是别人都在谈恋爱我就去谈恋爱，也不是不想谈恋爱，是一直找不到那个人，希望今年能加一把劲。</li>\n<li>换装备：每次回家家人都强烈要求我去买几件成熟的衣服，而我却一直觉得衣服没穿烂就不用去买新的，而且衣服多了对于我这个重度选择困难患者简直是一种折磨，但是，毕竟该找工作了，还是换一换装备吧。</li>\n<li>说到做到：我一直自诩为一个重信用的人，不过总是答应了别人的事情到最后时间却有点畏惧了，归根结底是自己不够勇敢和太爱做承诺了，所以今后一定少说什么承诺，但每个承诺务必保证说到做到。正如漩涡鸣人：说到做到，这就是我的忍道！</li>\n</ul>\n","excerpt":"","more":"<p>根据以往的经验，做规划最好是做一些能够量化的目标，这样会更加有行动力。但今年，我不打算这样做，很多时候我觉得我的大学过得太理性了，一点儿都不精彩，每天除了写<br>代码就是去学习如何写代码。我不想再每天都窝在寝室了，虽然现实让我不得不面对未来，但今年我想在大量的未知中体会后青春时代的精彩。所以今年，就围绕以下几个关键词<br>：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/2015.jpg\" alt=\"\"></p>\n<ul>\n<li>实习：等了好久终于等到今天，终于可以验证这几年的学习成果了，终于可以用自己的双手为未来打拼了。</li>\n<li>减肥：额，说实话，我身高160体重70，但看起来其实不胖的，只是身体已经因为脂肪太多出现一些毛病了，所以今年必须狠下心了。</li>\n<li>健康：自打前年得了肾结石后就非常关注身体健康了，虽然我从来没想过要多长寿，今朝有酒今朝醉呗，但就目前看来再这样宅下去，我真正的人生还没开始就溘然长逝了。</li>\n<li>女朋友：采访过多位学长学姐，十有八九说大学最遗憾的事情就是没有谈恋爱。我不是别人都在谈恋爱我就去谈恋爱，也不是不想谈恋爱，是一直找不到那个人，希望今年能加一把劲。</li>\n<li>换装备：每次回家家人都强烈要求我去买几件成熟的衣服，而我却一直觉得衣服没穿烂就不用去买新的，而且衣服多了对于我这个重度选择困难患者简直是一种折磨，但是，毕竟该找工作了，还是换一换装备吧。</li>\n<li>说到做到：我一直自诩为一个重信用的人，不过总是答应了别人的事情到最后时间却有点畏惧了，归根结底是自己不够勇敢和太爱做承诺了，所以今后一定少说什么承诺，但每个承诺务必保证说到做到。正如漩涡鸣人：说到做到，这就是我的忍道！</li>\n</ul>\n"},{"title":"大三，终结","date":"2015-07-08T15:42:26.000Z","_content":"一不小心，大三就在六月份的忙碌中结束了。\n\n\n\n仿佛每年都有这么一个最忙路的时间段，而且一如往常的，依然发生在六月。这个月发生了好多事，也做了好多事，还有好多事等待我处理。还以为自己有一个月没更新博客了呢\n，看看最近一篇博文，发现其实也只有20来天而已，怎么感觉好久没做自己想做的事情了呢。每天都是忙忙忙，但其实是自己不大会分配时间才导致忙得毫无头绪的。\n\n首先，六月份结束了几门主要的课程，所以我立刻就到之前面试的公司去实习了，逃了几节课，但都没点名，有点儿略微失望，只有点名才会有心跳的感觉嘛。六月十二，一个寒\n窗闲读十几年的学子第一次与别人签订了劳务合同，进入了第一次正式的实习工作，想想都有点儿小激动呢。如今，我来这个公司已经工作大概三周了，感觉还行，我想，暑假过\n后我还会继续呆在这里。\n\n第二件大事就是找房子了。这仿佛是实习生的宿命，特别是去不大的公司，没有住房补贴，没有分配的房子，再没有什么比找房子更伤脑筋更伤身体的了。其实我大可以不去租房\n子，因为每天虽然上下班会花费大概三小时，但是这三小时里我也可以做其它事情嘛，但毕竟，我现在不是一个人了，以前是不会意识到有了女朋友要是没有房子会花更多的钱的\n。。。反正，没有找过房子，永远不知道58同城上到底有多少虚假信息，永远不会怀念在学校1000能住一年的房子，永远不会知道在学校七八块都会被我们骂太贵太难吃的\n食堂在社会上再也不会有了。天秤座遇到租房这种事，还能说什么呢，想死的心都有了。不过还好，最后找了一个远一点，但是安全舒适，还是和朋友合租，房租加上生活费基本\n上和工资持平了。总之，好多好多事情我都不知道，而且以我的性格，别人跟我说我也不大会信所以，总得要自己去体会吧(其实最先已经签了一个房子，但住了一天发现太坑，\n立马退了，还好当时合同签得好，没什么损失)。\n\n再后来就是期末考试的事情了，反正没复习，那个闭卷考试的科目心里没有底，不过对一个已经挂过科还不考研的人来说，已经无所谓了，挂科了最多也就是下学期开学再来半天\n嘛。\n\n在技术方面，这个月真的没怎么学习，就偶尔看了看慕课网上的东西，在学习深度上并没有增加，我想，在公司多待一会儿应该就可以了，至少实战经验要多得多嘛。只是，现在\n的公司在技术深度上可能并没有达到我想要的底部，不过也可能是我对项目了解得不够深，反正这里有高手，等我证明自己比他们强了再说。\n\n其实，这个月最大的感悟是有些事不能忘记，阅读这个东西是绝对不能抛弃的。我现在动不动就发怒；知道自己有梦想，但是平时很少去想过到底怎么去实现，还抛弃了很多应该\n有的所谓的道德方面的思想，反正就是很忙，获得像行尸走肉，没有灵魂的活着。反正就感觉自己挺俗的，我可不想这样，从初中开始我就励志要做一个平凡的人，但，绝不能平\n庸。\n\n忙，并不总是能让人充实，但阅读一定能让人充实。\n","source":"_posts/the-end-of-junior.md","raw":"---\ntitle: \"大三，终结\"\ndate: 2015-07-08 23:42:26\ncategories: 边走边想\n---\n一不小心，大三就在六月份的忙碌中结束了。\n\n\n\n仿佛每年都有这么一个最忙路的时间段，而且一如往常的，依然发生在六月。这个月发生了好多事，也做了好多事，还有好多事等待我处理。还以为自己有一个月没更新博客了呢\n，看看最近一篇博文，发现其实也只有20来天而已，怎么感觉好久没做自己想做的事情了呢。每天都是忙忙忙，但其实是自己不大会分配时间才导致忙得毫无头绪的。\n\n首先，六月份结束了几门主要的课程，所以我立刻就到之前面试的公司去实习了，逃了几节课，但都没点名，有点儿略微失望，只有点名才会有心跳的感觉嘛。六月十二，一个寒\n窗闲读十几年的学子第一次与别人签订了劳务合同，进入了第一次正式的实习工作，想想都有点儿小激动呢。如今，我来这个公司已经工作大概三周了，感觉还行，我想，暑假过\n后我还会继续呆在这里。\n\n第二件大事就是找房子了。这仿佛是实习生的宿命，特别是去不大的公司，没有住房补贴，没有分配的房子，再没有什么比找房子更伤脑筋更伤身体的了。其实我大可以不去租房\n子，因为每天虽然上下班会花费大概三小时，但是这三小时里我也可以做其它事情嘛，但毕竟，我现在不是一个人了，以前是不会意识到有了女朋友要是没有房子会花更多的钱的\n。。。反正，没有找过房子，永远不知道58同城上到底有多少虚假信息，永远不会怀念在学校1000能住一年的房子，永远不会知道在学校七八块都会被我们骂太贵太难吃的\n食堂在社会上再也不会有了。天秤座遇到租房这种事，还能说什么呢，想死的心都有了。不过还好，最后找了一个远一点，但是安全舒适，还是和朋友合租，房租加上生活费基本\n上和工资持平了。总之，好多好多事情我都不知道，而且以我的性格，别人跟我说我也不大会信所以，总得要自己去体会吧(其实最先已经签了一个房子，但住了一天发现太坑，\n立马退了，还好当时合同签得好，没什么损失)。\n\n再后来就是期末考试的事情了，反正没复习，那个闭卷考试的科目心里没有底，不过对一个已经挂过科还不考研的人来说，已经无所谓了，挂科了最多也就是下学期开学再来半天\n嘛。\n\n在技术方面，这个月真的没怎么学习，就偶尔看了看慕课网上的东西，在学习深度上并没有增加，我想，在公司多待一会儿应该就可以了，至少实战经验要多得多嘛。只是，现在\n的公司在技术深度上可能并没有达到我想要的底部，不过也可能是我对项目了解得不够深，反正这里有高手，等我证明自己比他们强了再说。\n\n其实，这个月最大的感悟是有些事不能忘记，阅读这个东西是绝对不能抛弃的。我现在动不动就发怒；知道自己有梦想，但是平时很少去想过到底怎么去实现，还抛弃了很多应该\n有的所谓的道德方面的思想，反正就是很忙，获得像行尸走肉，没有灵魂的活着。反正就感觉自己挺俗的，我可不想这样，从初中开始我就励志要做一个平凡的人，但，绝不能平\n庸。\n\n忙，并不总是能让人充实，但阅读一定能让人充实。\n","slug":"the-end-of-junior","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pik006g9vnz2as378n3","content":"<p>一不小心，大三就在六月份的忙碌中结束了。</p>\n<p>仿佛每年都有这么一个最忙路的时间段，而且一如往常的，依然发生在六月。这个月发生了好多事，也做了好多事，还有好多事等待我处理。还以为自己有一个月没更新博客了呢<br>，看看最近一篇博文，发现其实也只有20来天而已，怎么感觉好久没做自己想做的事情了呢。每天都是忙忙忙，但其实是自己不大会分配时间才导致忙得毫无头绪的。</p>\n<p>首先，六月份结束了几门主要的课程，所以我立刻就到之前面试的公司去实习了，逃了几节课，但都没点名，有点儿略微失望，只有点名才会有心跳的感觉嘛。六月十二，一个寒<br>窗闲读十几年的学子第一次与别人签订了劳务合同，进入了第一次正式的实习工作，想想都有点儿小激动呢。如今，我来这个公司已经工作大概三周了，感觉还行，我想，暑假过<br>后我还会继续呆在这里。</p>\n<p>第二件大事就是找房子了。这仿佛是实习生的宿命，特别是去不大的公司，没有住房补贴，没有分配的房子，再没有什么比找房子更伤脑筋更伤身体的了。其实我大可以不去租房<br>子，因为每天虽然上下班会花费大概三小时，但是这三小时里我也可以做其它事情嘛，但毕竟，我现在不是一个人了，以前是不会意识到有了女朋友要是没有房子会花更多的钱的<br>。。。反正，没有找过房子，永远不知道58同城上到底有多少虚假信息，永远不会怀念在学校1000能住一年的房子，永远不会知道在学校七八块都会被我们骂太贵太难吃的<br>食堂在社会上再也不会有了。天秤座遇到租房这种事，还能说什么呢，想死的心都有了。不过还好，最后找了一个远一点，但是安全舒适，还是和朋友合租，房租加上生活费基本<br>上和工资持平了。总之，好多好多事情我都不知道，而且以我的性格，别人跟我说我也不大会信所以，总得要自己去体会吧(其实最先已经签了一个房子，但住了一天发现太坑，<br>立马退了，还好当时合同签得好，没什么损失)。</p>\n<p>再后来就是期末考试的事情了，反正没复习，那个闭卷考试的科目心里没有底，不过对一个已经挂过科还不考研的人来说，已经无所谓了，挂科了最多也就是下学期开学再来半天<br>嘛。</p>\n<p>在技术方面，这个月真的没怎么学习，就偶尔看了看慕课网上的东西，在学习深度上并没有增加，我想，在公司多待一会儿应该就可以了，至少实战经验要多得多嘛。只是，现在<br>的公司在技术深度上可能并没有达到我想要的底部，不过也可能是我对项目了解得不够深，反正这里有高手，等我证明自己比他们强了再说。</p>\n<p>其实，这个月最大的感悟是有些事不能忘记，阅读这个东西是绝对不能抛弃的。我现在动不动就发怒；知道自己有梦想，但是平时很少去想过到底怎么去实现，还抛弃了很多应该<br>有的所谓的道德方面的思想，反正就是很忙，获得像行尸走肉，没有灵魂的活着。反正就感觉自己挺俗的，我可不想这样，从初中开始我就励志要做一个平凡的人，但，绝不能平<br>庸。</p>\n<p>忙，并不总是能让人充实，但阅读一定能让人充实。</p>\n","excerpt":"","more":"<p>一不小心，大三就在六月份的忙碌中结束了。</p>\n<p>仿佛每年都有这么一个最忙路的时间段，而且一如往常的，依然发生在六月。这个月发生了好多事，也做了好多事，还有好多事等待我处理。还以为自己有一个月没更新博客了呢<br>，看看最近一篇博文，发现其实也只有20来天而已，怎么感觉好久没做自己想做的事情了呢。每天都是忙忙忙，但其实是自己不大会分配时间才导致忙得毫无头绪的。</p>\n<p>首先，六月份结束了几门主要的课程，所以我立刻就到之前面试的公司去实习了，逃了几节课，但都没点名，有点儿略微失望，只有点名才会有心跳的感觉嘛。六月十二，一个寒<br>窗闲读十几年的学子第一次与别人签订了劳务合同，进入了第一次正式的实习工作，想想都有点儿小激动呢。如今，我来这个公司已经工作大概三周了，感觉还行，我想，暑假过<br>后我还会继续呆在这里。</p>\n<p>第二件大事就是找房子了。这仿佛是实习生的宿命，特别是去不大的公司，没有住房补贴，没有分配的房子，再没有什么比找房子更伤脑筋更伤身体的了。其实我大可以不去租房<br>子，因为每天虽然上下班会花费大概三小时，但是这三小时里我也可以做其它事情嘛，但毕竟，我现在不是一个人了，以前是不会意识到有了女朋友要是没有房子会花更多的钱的<br>。。。反正，没有找过房子，永远不知道58同城上到底有多少虚假信息，永远不会怀念在学校1000能住一年的房子，永远不会知道在学校七八块都会被我们骂太贵太难吃的<br>食堂在社会上再也不会有了。天秤座遇到租房这种事，还能说什么呢，想死的心都有了。不过还好，最后找了一个远一点，但是安全舒适，还是和朋友合租，房租加上生活费基本<br>上和工资持平了。总之，好多好多事情我都不知道，而且以我的性格，别人跟我说我也不大会信所以，总得要自己去体会吧(其实最先已经签了一个房子，但住了一天发现太坑，<br>立马退了，还好当时合同签得好，没什么损失)。</p>\n<p>再后来就是期末考试的事情了，反正没复习，那个闭卷考试的科目心里没有底，不过对一个已经挂过科还不考研的人来说，已经无所谓了，挂科了最多也就是下学期开学再来半天<br>嘛。</p>\n<p>在技术方面，这个月真的没怎么学习，就偶尔看了看慕课网上的东西，在学习深度上并没有增加，我想，在公司多待一会儿应该就可以了，至少实战经验要多得多嘛。只是，现在<br>的公司在技术深度上可能并没有达到我想要的底部，不过也可能是我对项目了解得不够深，反正这里有高手，等我证明自己比他们强了再说。</p>\n<p>其实，这个月最大的感悟是有些事不能忘记，阅读这个东西是绝对不能抛弃的。我现在动不动就发怒；知道自己有梦想，但是平时很少去想过到底怎么去实现，还抛弃了很多应该<br>有的所谓的道德方面的思想，反正就是很忙，获得像行尸走肉，没有灵魂的活着。反正就感觉自己挺俗的，我可不想这样，从初中开始我就励志要做一个平凡的人，但，绝不能平<br>庸。</p>\n<p>忙，并不总是能让人充实，但阅读一定能让人充实。</p>\n"},{"title":"致高考的朋友们","date":"2013-06-10T16:38:22.000Z","_content":"或许我的年龄比你们还小，或许我的阅历并不丰富，或许我对大学还了解得不深，但毕竟我已经真真切切地从高考走到了现在，经验也好，吐槽也罢，不求为你们的人生引路，但\n求能为你们拨开一些前面的迷雾，对以后能有更清晰的认识。 其实，很早就想先把这些体会给写上来，不过我是明日复明日的，所以现在才写，唉，偏偏四级考试和期末考试马\n上就要来了，这几天天天泡图书馆，这几篇日志都是在匆忙中完成的，所以写得不怎么好，都很平淡的，你们反正也没事，就当茶余闲谈吧。 在高考结束到知道成绩前这段时间\n真的不要想着去打工，该玩就玩呗，本地的玩完了就去外面旅游去，有什么聚会也尽量地去，你们应该都还没意识到你们离开了天堂吧，高考只是痛苦人生的一个开始，不要想着\n所谓的以后常联系，不要以为大学比高中更闲，无数的论文、无数的活动、无数的不得不给上级看的成绩会压得你喘不过气来，那时候，你连给家里打电话都会觉得忙不过来，那\n时候你才会发现，除了最好的几个朋友之外，其他的朋友后根本不会主动联系你（额。。。好像透露了很多大学的真相，就此打住一下，以免打破你们对大学的憧憬）反正好好玩\n吧！不过，别玩过头了，不要喝太多，不要上通宵，不要做过激的事情，不想让你的人生定格在高考结束，呵呵！珍惜友谊吧，在我看来，友谊这东西从初中到大学，感情会越来\n越淡的，大学或许没什么友谊可言。 还有，有喜欢的人就去表白吧，这时候的爱情真的很美，以后。。。（额，就不说反面的东西了），反正如果暗恋了人家那么久到最后她却\n不知道你会后悔的，不过这也是很多人必须走过路。还有曾经因为学习而分手的恋人，主动去找ta和好吧，所谓的“应该学习的时间”已经过去了，不要等着对方主动来找自己\n，有些人有些事错过了就是一辈子，为什么不坦然面对，缘分有时候也要靠争取。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/to-entrance-examination-friends.jpg)  \n\n然后就是有空想想以后自己想学什么专业，在还不知道分的情况下，就有空想想想读什么专业吧，如果没有确定的目标，那就先想想是工科还是理科，是学技术还是学管理等。（\n这里我也写了些东西的，不过这几天都在复习呀，等几天再打上来吧）无论怎样，在这阶段应该好好剖析一下自己，了解自己对什么感兴趣，以后想成为什么人，是否会一直走在\n追求梦想路上，高考，不是梦想的结束，而是梦想真正的开始。  \n额。。。其实@龚卫也是要写的，哲学家兼心理学家肯定比我讲得好，期待呀\n\n——本文最早发表于QQ空间\n","source":"_posts/to-entrance-examination-friends.md","raw":"---\ntitle: \"致高考的朋友们\"\ndate: 2013-06-11 00:38:22\ncategories: 边走边想\n---\n或许我的年龄比你们还小，或许我的阅历并不丰富，或许我对大学还了解得不深，但毕竟我已经真真切切地从高考走到了现在，经验也好，吐槽也罢，不求为你们的人生引路，但\n求能为你们拨开一些前面的迷雾，对以后能有更清晰的认识。 其实，很早就想先把这些体会给写上来，不过我是明日复明日的，所以现在才写，唉，偏偏四级考试和期末考试马\n上就要来了，这几天天天泡图书馆，这几篇日志都是在匆忙中完成的，所以写得不怎么好，都很平淡的，你们反正也没事，就当茶余闲谈吧。 在高考结束到知道成绩前这段时间\n真的不要想着去打工，该玩就玩呗，本地的玩完了就去外面旅游去，有什么聚会也尽量地去，你们应该都还没意识到你们离开了天堂吧，高考只是痛苦人生的一个开始，不要想着\n所谓的以后常联系，不要以为大学比高中更闲，无数的论文、无数的活动、无数的不得不给上级看的成绩会压得你喘不过气来，那时候，你连给家里打电话都会觉得忙不过来，那\n时候你才会发现，除了最好的几个朋友之外，其他的朋友后根本不会主动联系你（额。。。好像透露了很多大学的真相，就此打住一下，以免打破你们对大学的憧憬）反正好好玩\n吧！不过，别玩过头了，不要喝太多，不要上通宵，不要做过激的事情，不想让你的人生定格在高考结束，呵呵！珍惜友谊吧，在我看来，友谊这东西从初中到大学，感情会越来\n越淡的，大学或许没什么友谊可言。 还有，有喜欢的人就去表白吧，这时候的爱情真的很美，以后。。。（额，就不说反面的东西了），反正如果暗恋了人家那么久到最后她却\n不知道你会后悔的，不过这也是很多人必须走过路。还有曾经因为学习而分手的恋人，主动去找ta和好吧，所谓的“应该学习的时间”已经过去了，不要等着对方主动来找自己\n，有些人有些事错过了就是一辈子，为什么不坦然面对，缘分有时候也要靠争取。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/to-entrance-examination-friends.jpg)  \n\n然后就是有空想想以后自己想学什么专业，在还不知道分的情况下，就有空想想想读什么专业吧，如果没有确定的目标，那就先想想是工科还是理科，是学技术还是学管理等。（\n这里我也写了些东西的，不过这几天都在复习呀，等几天再打上来吧）无论怎样，在这阶段应该好好剖析一下自己，了解自己对什么感兴趣，以后想成为什么人，是否会一直走在\n追求梦想路上，高考，不是梦想的结束，而是梦想真正的开始。  \n额。。。其实@龚卫也是要写的，哲学家兼心理学家肯定比我讲得好，期待呀\n\n——本文最早发表于QQ空间\n","slug":"to-entrance-examination-friends","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pir006i9vnzq8ruvo4v","content":"<p>或许我的年龄比你们还小，或许我的阅历并不丰富，或许我对大学还了解得不深，但毕竟我已经真真切切地从高考走到了现在，经验也好，吐槽也罢，不求为你们的人生引路，但<br>求能为你们拨开一些前面的迷雾，对以后能有更清晰的认识。 其实，很早就想先把这些体会给写上来，不过我是明日复明日的，所以现在才写，唉，偏偏四级考试和期末考试马<br>上就要来了，这几天天天泡图书馆，这几篇日志都是在匆忙中完成的，所以写得不怎么好，都很平淡的，你们反正也没事，就当茶余闲谈吧。 在高考结束到知道成绩前这段时间<br>真的不要想着去打工，该玩就玩呗，本地的玩完了就去外面旅游去，有什么聚会也尽量地去，你们应该都还没意识到你们离开了天堂吧，高考只是痛苦人生的一个开始，不要想着<br>所谓的以后常联系，不要以为大学比高中更闲，无数的论文、无数的活动、无数的不得不给上级看的成绩会压得你喘不过气来，那时候，你连给家里打电话都会觉得忙不过来，那<br>时候你才会发现，除了最好的几个朋友之外，其他的朋友后根本不会主动联系你（额。。。好像透露了很多大学的真相，就此打住一下，以免打破你们对大学的憧憬）反正好好玩<br>吧！不过，别玩过头了，不要喝太多，不要上通宵，不要做过激的事情，不想让你的人生定格在高考结束，呵呵！珍惜友谊吧，在我看来，友谊这东西从初中到大学，感情会越来<br>越淡的，大学或许没什么友谊可言。 还有，有喜欢的人就去表白吧，这时候的爱情真的很美，以后。。。（额，就不说反面的东西了），反正如果暗恋了人家那么久到最后她却<br>不知道你会后悔的，不过这也是很多人必须走过路。还有曾经因为学习而分手的恋人，主动去找ta和好吧，所谓的“应该学习的时间”已经过去了，不要等着对方主动来找自己<br>，有些人有些事错过了就是一辈子，为什么不坦然面对，缘分有时候也要靠争取。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/to-entrance-examination-friends.jpg\" alt=\"\">  </p>\n<p>然后就是有空想想以后自己想学什么专业，在还不知道分的情况下，就有空想想想读什么专业吧，如果没有确定的目标，那就先想想是工科还是理科，是学技术还是学管理等。（<br>这里我也写了些东西的，不过这几天都在复习呀，等几天再打上来吧）无论怎样，在这阶段应该好好剖析一下自己，了解自己对什么感兴趣，以后想成为什么人，是否会一直走在<br>追求梦想路上，高考，不是梦想的结束，而是梦想真正的开始。<br>额。。。其实@龚卫也是要写的，哲学家兼心理学家肯定比我讲得好，期待呀</p>\n<p>——本文最早发表于QQ空间</p>\n","excerpt":"","more":"<p>或许我的年龄比你们还小，或许我的阅历并不丰富，或许我对大学还了解得不深，但毕竟我已经真真切切地从高考走到了现在，经验也好，吐槽也罢，不求为你们的人生引路，但<br>求能为你们拨开一些前面的迷雾，对以后能有更清晰的认识。 其实，很早就想先把这些体会给写上来，不过我是明日复明日的，所以现在才写，唉，偏偏四级考试和期末考试马<br>上就要来了，这几天天天泡图书馆，这几篇日志都是在匆忙中完成的，所以写得不怎么好，都很平淡的，你们反正也没事，就当茶余闲谈吧。 在高考结束到知道成绩前这段时间<br>真的不要想着去打工，该玩就玩呗，本地的玩完了就去外面旅游去，有什么聚会也尽量地去，你们应该都还没意识到你们离开了天堂吧，高考只是痛苦人生的一个开始，不要想着<br>所谓的以后常联系，不要以为大学比高中更闲，无数的论文、无数的活动、无数的不得不给上级看的成绩会压得你喘不过气来，那时候，你连给家里打电话都会觉得忙不过来，那<br>时候你才会发现，除了最好的几个朋友之外，其他的朋友后根本不会主动联系你（额。。。好像透露了很多大学的真相，就此打住一下，以免打破你们对大学的憧憬）反正好好玩<br>吧！不过，别玩过头了，不要喝太多，不要上通宵，不要做过激的事情，不想让你的人生定格在高考结束，呵呵！珍惜友谊吧，在我看来，友谊这东西从初中到大学，感情会越来<br>越淡的，大学或许没什么友谊可言。 还有，有喜欢的人就去表白吧，这时候的爱情真的很美，以后。。。（额，就不说反面的东西了），反正如果暗恋了人家那么久到最后她却<br>不知道你会后悔的，不过这也是很多人必须走过路。还有曾经因为学习而分手的恋人，主动去找ta和好吧，所谓的“应该学习的时间”已经过去了，不要等着对方主动来找自己<br>，有些人有些事错过了就是一辈子，为什么不坦然面对，缘分有时候也要靠争取。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/to-entrance-examination-friends.jpg\" alt=\"\">  </p>\n<p>然后就是有空想想以后自己想学什么专业，在还不知道分的情况下，就有空想想想读什么专业吧，如果没有确定的目标，那就先想想是工科还是理科，是学技术还是学管理等。（<br>这里我也写了些东西的，不过这几天都在复习呀，等几天再打上来吧）无论怎样，在这阶段应该好好剖析一下自己，了解自己对什么感兴趣，以后想成为什么人，是否会一直走在<br>追求梦想路上，高考，不是梦想的结束，而是梦想真正的开始。<br>额。。。其实@龚卫也是要写的，哲学家兼心理学家肯定比我讲得好，期待呀</p>\n<p>——本文最早发表于QQ空间</p>\n"},{"title":"从Tornado谈异步与非阻塞","date":"2016-04-11T15:59:57.000Z","_content":"在做毕业设计的时候，由于后端有一个耗时任务，所以想到了异步，又由于长期使用Python，进而想到了Tornado，然后，我就半个月没做毕设了，说来全是坑啊。在了解异步与阻塞的原理之前我就盲目地想从代码层面去实现，这样只会浪费时间。所以这里我就先描述一下我对这几个概念的理解。\n### 异步与同步：是消息通信机制的层面\n采用异步的时候，程序并不关心该操作的结果，所以并不会有返回结果，比如ajax，一般会给异步操作赋予一个回调函数，通过这个回调函数对结果进行处理，而不是直接将结果返回给外部(在ajax如果return结果则会是一个null值)\n### 阻塞与非阻塞：指程序在等待调用结果时的状态\n如果是阻塞，则程序会一直等待程序返回结果，如果是非阻塞，则不会等待，而继续执行下面或者其他的代码了。\n### 阻塞式IO\n耗时型任务一般分为两类：CPU耗时型任务和IO耗时型任务。CPU指一般的代码运算执行过程，IO一般分为两大类，计算型IO和阻塞式IO。如果仅有一个线程，那么同一时刻只能有一个任务在计算，但如果是阻塞式IO，它可以让它先阻塞掉，然后去计算其他的任务，等到内核告诉程序那边没有被阻塞了就、再回到之前的地方进行之后的运算。\n\n所以，在了解了这些概念过后，我就知道了为什么要发挥tornado的异步特性就得依赖异步库([Tornado官方提供的第三方异步库](https://github.com/tornadoweb/tornado/wiki/Links))，而不是随便一行代码都能变成异步非阻塞式的代码。比如我试验时使用的一个sleep函数：\n\n```\n    def sleep(self):\n        for i in range(100000000):\n            if i % 100000 == 0:\n                print(i)\n        self.set_cookie('setting', 'hao')\n```\n\n看吧，这是一个计算型任务，由于tornado是单进程单线程，所以无论怎么做也不可能实现在访问该请求的时候访问其他请求，因为CPU只能执行当前任务，其他请求必须等到这个请求结束后才能成功，这也是为什么部署tornado的时候几乎都是用nginx+多实例事实上，同理，其他的框架基本上都是需要nginx、apache等配合才能同时服务于多个请求的。Tornado的异步库，几乎都是用来进行阻塞式IO任务的，所以只有他们才能发挥其异步特性。\n\nTornado的异步实现就是将当前请求的协程暂停，等待其返回结果，在等待的过程中当前请求不能继续往下执行，但是如果有其他请求(同样是一个协程)，只要不也是阻塞式IO，那么就会直接去处理其他的请求了。\n\n当然，包括nodejs的异步等，这些统统都是有历史原因的，JavaScript和Python在发展之初都只支持单进程单线程，即使使用多线程技术最多也只能利用到100%的单核，多核在这里似乎并不使用，而如果要使用多进程变成，光靠框架是做不到的，必须自己根据实际需求来处理多进程之前的数据共享、资源竞争等问题。所以，在我的理解里，如果能直接利用多线程编程就不需要用服务端异步，毕竟，多线程的发明本身也是为了解决阻塞式IO的问题。\n\n## 多线程实现异步、非阻塞、并行请求、并行计算\n其实我认为多线程相比于异步非阻塞有很大的优点，不可否认，多线程在线程切换上存在开销，并且在资源竞争上需要写更多的逻辑，稍微控制不好就会导致服务出错，然而，多线程在处理并行任务上有先天的优势，这一点光看名字就看得出来，下面介绍Tornado的多线程和Flask多线程的用法，其中Tornado的多线程是指由程序将当前请求中的代码交由其他线程处理，而flask的多线程就是类似apache服务器，另起一个进程来处理请求。\n\n注意：两者都可以使用global来引用全局变量\n\n#### Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\n\n```\n\timport tornado.ioloop\n\timport tornado.web\n\timport time\n\tfrom concurrent.futures import ThreadPoolExecutor\n\timport tornado.httpclient\n\tfrom tornado.concurrent import run_on_executor\n\n\tclass Executor(ThreadPoolExecutor):\n\t\t_instance = None\n\n    \tdef __new__(cls, *args, **kwargs):\n        \tif not getattr(cls, '_instance', None):\n            \tcls._instance = ThreadPoolExecutor(max_workers=10)\n        \treturn cls._instance\n\n\tclass SleepHandler(tornado.web.RequestHandler):\n    \texecutor = ThreadPoolExecutor(10)\n\n    \tdef get(self):\n      \ttornado.ioloop.IOLoop.instance().add_callback(self.sleep) # 相当于丢到下一个时间循环去  \n        \tself.write(\"when i sleep\")\t\t# 请求会立马返回这个值并断开连接\n\n    \t@run_on_executor\n    \tdef sleep(self):\n        \tfor i in range(100000000):\n            \tif i % 100000 == 0:\n                \tprint(i)\n        \tself.set_cookie('username', 'hao')\n\n        \tprint(\"yes\")\n        \treturn 5\n\n\tclass TestHandler(tornado.web.RequestHandler):\n    \tdef get(self):\n        \tif not self.get_cookie('username'):\n            \tself.write('没有')\n        \telse:\n            \tself.write('有')\n            \t\n\tapplication = tornado.web.Application([\n\t\t(r\"/test\", TestHandler),\n\t\t(r\"/sleep\", SleepHandler),\n\t\t], debug=True)\n\n\tif __name__ == \"__main__\":\n    \tapplication.listen(8888)\n    \ttornado.ioloop.IOLoop.instance().start()\n```\n\n#### flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\n\n```\n\tfrom flask import Flask,request,make_response\n\tapp = Flask(__name__)\n\n\t@app.route('/')\n\tdef hello_world():\n\t\tusername = request.cookies.get('username')\n    \tif username is None:\n       \treturn '没有'\n    \telse:\n        \treturn '有'\n    \treturn username\n\n\t@app.route('/s')\n\tdef sleep():\n    \tfor i in range(100000000):\n        \tif i % 100000 == 0:\n\t\t\t\tprint(i)\n\t\tresp = make_response('ok')\n    \tresp.set_cookie('username', 'the username')\n    \treturn resp\n\n\tif __name__ == '__main__':\n\t\tapp.run(debug=True, threaded=True)\n```\n\n**参考文章**  \n[知乎：怎样理解阻塞非阻塞与同步异步的区别?](https://www.zhihu.com/question/19732473)  \n[Tornado文档：异步非阻塞I/O](http://tornadocn.readthedocs.org/zh/latest/guide/async.html)  \n[Tornado教程：异步Web服务](http://docs.pythontab.com/tornado/introduction-to-tornado/ch5.html)  \n[使用tornado的coroutine进行编程](http://cloudaice.com/tornado-coroutine/)  \n[我在segmentfault的提问：无法理解tornado的异步](https://segmentfault.com/q/1010000004910793?_ea=722806)  ","source":"_posts/tornado-asynchronous.md","raw":"---\ntitle: \"从Tornado谈异步与非阻塞\"\ndate: 2016-04-11 23:59:57\ncategories: 编程之路\n---\n在做毕业设计的时候，由于后端有一个耗时任务，所以想到了异步，又由于长期使用Python，进而想到了Tornado，然后，我就半个月没做毕设了，说来全是坑啊。在了解异步与阻塞的原理之前我就盲目地想从代码层面去实现，这样只会浪费时间。所以这里我就先描述一下我对这几个概念的理解。\n### 异步与同步：是消息通信机制的层面\n采用异步的时候，程序并不关心该操作的结果，所以并不会有返回结果，比如ajax，一般会给异步操作赋予一个回调函数，通过这个回调函数对结果进行处理，而不是直接将结果返回给外部(在ajax如果return结果则会是一个null值)\n### 阻塞与非阻塞：指程序在等待调用结果时的状态\n如果是阻塞，则程序会一直等待程序返回结果，如果是非阻塞，则不会等待，而继续执行下面或者其他的代码了。\n### 阻塞式IO\n耗时型任务一般分为两类：CPU耗时型任务和IO耗时型任务。CPU指一般的代码运算执行过程，IO一般分为两大类，计算型IO和阻塞式IO。如果仅有一个线程，那么同一时刻只能有一个任务在计算，但如果是阻塞式IO，它可以让它先阻塞掉，然后去计算其他的任务，等到内核告诉程序那边没有被阻塞了就、再回到之前的地方进行之后的运算。\n\n所以，在了解了这些概念过后，我就知道了为什么要发挥tornado的异步特性就得依赖异步库([Tornado官方提供的第三方异步库](https://github.com/tornadoweb/tornado/wiki/Links))，而不是随便一行代码都能变成异步非阻塞式的代码。比如我试验时使用的一个sleep函数：\n\n```\n    def sleep(self):\n        for i in range(100000000):\n            if i % 100000 == 0:\n                print(i)\n        self.set_cookie('setting', 'hao')\n```\n\n看吧，这是一个计算型任务，由于tornado是单进程单线程，所以无论怎么做也不可能实现在访问该请求的时候访问其他请求，因为CPU只能执行当前任务，其他请求必须等到这个请求结束后才能成功，这也是为什么部署tornado的时候几乎都是用nginx+多实例事实上，同理，其他的框架基本上都是需要nginx、apache等配合才能同时服务于多个请求的。Tornado的异步库，几乎都是用来进行阻塞式IO任务的，所以只有他们才能发挥其异步特性。\n\nTornado的异步实现就是将当前请求的协程暂停，等待其返回结果，在等待的过程中当前请求不能继续往下执行，但是如果有其他请求(同样是一个协程)，只要不也是阻塞式IO，那么就会直接去处理其他的请求了。\n\n当然，包括nodejs的异步等，这些统统都是有历史原因的，JavaScript和Python在发展之初都只支持单进程单线程，即使使用多线程技术最多也只能利用到100%的单核，多核在这里似乎并不使用，而如果要使用多进程变成，光靠框架是做不到的，必须自己根据实际需求来处理多进程之前的数据共享、资源竞争等问题。所以，在我的理解里，如果能直接利用多线程编程就不需要用服务端异步，毕竟，多线程的发明本身也是为了解决阻塞式IO的问题。\n\n## 多线程实现异步、非阻塞、并行请求、并行计算\n其实我认为多线程相比于异步非阻塞有很大的优点，不可否认，多线程在线程切换上存在开销，并且在资源竞争上需要写更多的逻辑，稍微控制不好就会导致服务出错，然而，多线程在处理并行任务上有先天的优势，这一点光看名字就看得出来，下面介绍Tornado的多线程和Flask多线程的用法，其中Tornado的多线程是指由程序将当前请求中的代码交由其他线程处理，而flask的多线程就是类似apache服务器，另起一个进程来处理请求。\n\n注意：两者都可以使用global来引用全局变量\n\n#### Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\n\n```\n\timport tornado.ioloop\n\timport tornado.web\n\timport time\n\tfrom concurrent.futures import ThreadPoolExecutor\n\timport tornado.httpclient\n\tfrom tornado.concurrent import run_on_executor\n\n\tclass Executor(ThreadPoolExecutor):\n\t\t_instance = None\n\n    \tdef __new__(cls, *args, **kwargs):\n        \tif not getattr(cls, '_instance', None):\n            \tcls._instance = ThreadPoolExecutor(max_workers=10)\n        \treturn cls._instance\n\n\tclass SleepHandler(tornado.web.RequestHandler):\n    \texecutor = ThreadPoolExecutor(10)\n\n    \tdef get(self):\n      \ttornado.ioloop.IOLoop.instance().add_callback(self.sleep) # 相当于丢到下一个时间循环去  \n        \tself.write(\"when i sleep\")\t\t# 请求会立马返回这个值并断开连接\n\n    \t@run_on_executor\n    \tdef sleep(self):\n        \tfor i in range(100000000):\n            \tif i % 100000 == 0:\n                \tprint(i)\n        \tself.set_cookie('username', 'hao')\n\n        \tprint(\"yes\")\n        \treturn 5\n\n\tclass TestHandler(tornado.web.RequestHandler):\n    \tdef get(self):\n        \tif not self.get_cookie('username'):\n            \tself.write('没有')\n        \telse:\n            \tself.write('有')\n            \t\n\tapplication = tornado.web.Application([\n\t\t(r\"/test\", TestHandler),\n\t\t(r\"/sleep\", SleepHandler),\n\t\t], debug=True)\n\n\tif __name__ == \"__main__\":\n    \tapplication.listen(8888)\n    \ttornado.ioloop.IOLoop.instance().start()\n```\n\n#### flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\n\n```\n\tfrom flask import Flask,request,make_response\n\tapp = Flask(__name__)\n\n\t@app.route('/')\n\tdef hello_world():\n\t\tusername = request.cookies.get('username')\n    \tif username is None:\n       \treturn '没有'\n    \telse:\n        \treturn '有'\n    \treturn username\n\n\t@app.route('/s')\n\tdef sleep():\n    \tfor i in range(100000000):\n        \tif i % 100000 == 0:\n\t\t\t\tprint(i)\n\t\tresp = make_response('ok')\n    \tresp.set_cookie('username', 'the username')\n    \treturn resp\n\n\tif __name__ == '__main__':\n\t\tapp.run(debug=True, threaded=True)\n```\n\n**参考文章**  \n[知乎：怎样理解阻塞非阻塞与同步异步的区别?](https://www.zhihu.com/question/19732473)  \n[Tornado文档：异步非阻塞I/O](http://tornadocn.readthedocs.org/zh/latest/guide/async.html)  \n[Tornado教程：异步Web服务](http://docs.pythontab.com/tornado/introduction-to-tornado/ch5.html)  \n[使用tornado的coroutine进行编程](http://cloudaice.com/tornado-coroutine/)  \n[我在segmentfault的提问：无法理解tornado的异步](https://segmentfault.com/q/1010000004910793?_ea=722806)  ","slug":"tornado-asynchronous","published":1,"updated":"2016-04-13T07:00:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pix006k9vnza169gysi","content":"<p>在做毕业设计的时候，由于后端有一个耗时任务，所以想到了异步，又由于长期使用Python，进而想到了Tornado，然后，我就半个月没做毕设了，说来全是坑啊。在了解异步与阻塞的原理之前我就盲目地想从代码层面去实现，这样只会浪费时间。所以这里我就先描述一下我对这几个概念的理解。</p>\n<h3 id=\"异步与同步：是消息通信机制的层面\"><a href=\"#异步与同步：是消息通信机制的层面\" class=\"headerlink\" title=\"异步与同步：是消息通信机制的层面\"></a>异步与同步：是消息通信机制的层面</h3><p>采用异步的时候，程序并不关心该操作的结果，所以并不会有返回结果，比如ajax，一般会给异步操作赋予一个回调函数，通过这个回调函数对结果进行处理，而不是直接将结果返回给外部(在ajax如果return结果则会是一个null值)</p>\n<h3 id=\"阻塞与非阻塞：指程序在等待调用结果时的状态\"><a href=\"#阻塞与非阻塞：指程序在等待调用结果时的状态\" class=\"headerlink\" title=\"阻塞与非阻塞：指程序在等待调用结果时的状态\"></a>阻塞与非阻塞：指程序在等待调用结果时的状态</h3><p>如果是阻塞，则程序会一直等待程序返回结果，如果是非阻塞，则不会等待，而继续执行下面或者其他的代码了。</p>\n<h3 id=\"阻塞式IO\"><a href=\"#阻塞式IO\" class=\"headerlink\" title=\"阻塞式IO\"></a>阻塞式IO</h3><p>耗时型任务一般分为两类：CPU耗时型任务和IO耗时型任务。CPU指一般的代码运算执行过程，IO一般分为两大类，计算型IO和阻塞式IO。如果仅有一个线程，那么同一时刻只能有一个任务在计算，但如果是阻塞式IO，它可以让它先阻塞掉，然后去计算其他的任务，等到内核告诉程序那边没有被阻塞了就、再回到之前的地方进行之后的运算。</p>\n<p>所以，在了解了这些概念过后，我就知道了为什么要发挥tornado的异步特性就得依赖异步库(<a href=\"https://github.com/tornadoweb/tornado/wiki/Links\" target=\"_blank\" rel=\"external\">Tornado官方提供的第三方异步库</a>)，而不是随便一行代码都能变成异步非阻塞式的代码。比如我试验时使用的一个sleep函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sleep(self):</div><div class=\"line\">    for i in range(100000000):</div><div class=\"line\">        if i % 100000 == 0:</div><div class=\"line\">            print(i)</div><div class=\"line\">    self.set_cookie(&apos;setting&apos;, &apos;hao&apos;)</div></pre></td></tr></table></figure>\n<p>看吧，这是一个计算型任务，由于tornado是单进程单线程，所以无论怎么做也不可能实现在访问该请求的时候访问其他请求，因为CPU只能执行当前任务，其他请求必须等到这个请求结束后才能成功，这也是为什么部署tornado的时候几乎都是用nginx+多实例事实上，同理，其他的框架基本上都是需要nginx、apache等配合才能同时服务于多个请求的。Tornado的异步库，几乎都是用来进行阻塞式IO任务的，所以只有他们才能发挥其异步特性。</p>\n<p>Tornado的异步实现就是将当前请求的协程暂停，等待其返回结果，在等待的过程中当前请求不能继续往下执行，但是如果有其他请求(同样是一个协程)，只要不也是阻塞式IO，那么就会直接去处理其他的请求了。</p>\n<p>当然，包括nodejs的异步等，这些统统都是有历史原因的，JavaScript和Python在发展之初都只支持单进程单线程，即使使用多线程技术最多也只能利用到100%的单核，多核在这里似乎并不使用，而如果要使用多进程变成，光靠框架是做不到的，必须自己根据实际需求来处理多进程之前的数据共享、资源竞争等问题。所以，在我的理解里，如果能直接利用多线程编程就不需要用服务端异步，毕竟，多线程的发明本身也是为了解决阻塞式IO的问题。</p>\n<h2 id=\"多线程实现异步、非阻塞、并行请求、并行计算\"><a href=\"#多线程实现异步、非阻塞、并行请求、并行计算\" class=\"headerlink\" title=\"多线程实现异步、非阻塞、并行请求、并行计算\"></a>多线程实现异步、非阻塞、并行请求、并行计算</h2><p>其实我认为多线程相比于异步非阻塞有很大的优点，不可否认，多线程在线程切换上存在开销，并且在资源竞争上需要写更多的逻辑，稍微控制不好就会导致服务出错，然而，多线程在处理并行任务上有先天的优势，这一点光看名字就看得出来，下面介绍Tornado的多线程和Flask多线程的用法，其中Tornado的多线程是指由程序将当前请求中的代码交由其他线程处理，而flask的多线程就是类似apache服务器，另起一个进程来处理请求。</p>\n<p>注意：两者都可以使用global来引用全局变量</p>\n<h4 id=\"Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\"><a href=\"#Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\" class=\"headerlink\" title=\"Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\"></a>Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">import tornado.ioloop</div><div class=\"line\">import tornado.web</div><div class=\"line\">import time</div><div class=\"line\">from concurrent.futures import ThreadPoolExecutor</div><div class=\"line\">import tornado.httpclient</div><div class=\"line\">from tornado.concurrent import run_on_executor</div><div class=\"line\"></div><div class=\"line\">class Executor(ThreadPoolExecutor):</div><div class=\"line\">\t_instance = None</div><div class=\"line\"></div><div class=\"line\">   \tdef __new__(cls, *args, **kwargs):</div><div class=\"line\">       \tif not getattr(cls, &apos;_instance&apos;, None):</div><div class=\"line\">           \tcls._instance = ThreadPoolExecutor(max_workers=10)</div><div class=\"line\">       \treturn cls._instance</div><div class=\"line\"></div><div class=\"line\">class SleepHandler(tornado.web.RequestHandler):</div><div class=\"line\">   \texecutor = ThreadPoolExecutor(10)</div><div class=\"line\"></div><div class=\"line\">   \tdef get(self):</div><div class=\"line\">     \ttornado.ioloop.IOLoop.instance().add_callback(self.sleep) # 相当于丢到下一个时间循环去  </div><div class=\"line\">       \tself.write(&quot;when i sleep&quot;)\t\t# 请求会立马返回这个值并断开连接</div><div class=\"line\"></div><div class=\"line\">   \t@run_on_executor</div><div class=\"line\">   \tdef sleep(self):</div><div class=\"line\">       \tfor i in range(100000000):</div><div class=\"line\">           \tif i % 100000 == 0:</div><div class=\"line\">               \tprint(i)</div><div class=\"line\">       \tself.set_cookie(&apos;username&apos;, &apos;hao&apos;)</div><div class=\"line\"></div><div class=\"line\">       \tprint(&quot;yes&quot;)</div><div class=\"line\">       \treturn 5</div><div class=\"line\"></div><div class=\"line\">class TestHandler(tornado.web.RequestHandler):</div><div class=\"line\">   \tdef get(self):</div><div class=\"line\">       \tif not self.get_cookie(&apos;username&apos;):</div><div class=\"line\">           \tself.write(&apos;没有&apos;)</div><div class=\"line\">       \telse:</div><div class=\"line\">           \tself.write(&apos;有&apos;)</div><div class=\"line\">           \t</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(r&quot;/test&quot;, TestHandler),</div><div class=\"line\">\t(r&quot;/sleep&quot;, SleepHandler),</div><div class=\"line\">\t], debug=True)</div><div class=\"line\"></div><div class=\"line\">if __name__ == &quot;__main__&quot;:</div><div class=\"line\">   \tapplication.listen(8888)</div><div class=\"line\">   \ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<h4 id=\"flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\"><a href=\"#flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\" class=\"headerlink\" title=\"flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\"></a>flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">from flask import Flask,request,make_response</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\">@app.route(&apos;/&apos;)</div><div class=\"line\">def hello_world():</div><div class=\"line\">\tusername = request.cookies.get(&apos;username&apos;)</div><div class=\"line\">   \tif username is None:</div><div class=\"line\">      \treturn &apos;没有&apos;</div><div class=\"line\">   \telse:</div><div class=\"line\">       \treturn &apos;有&apos;</div><div class=\"line\">   \treturn username</div><div class=\"line\"></div><div class=\"line\">@app.route(&apos;/s&apos;)</div><div class=\"line\">def sleep():</div><div class=\"line\">   \tfor i in range(100000000):</div><div class=\"line\">       \tif i % 100000 == 0:</div><div class=\"line\">\t\t\tprint(i)</div><div class=\"line\">\tresp = make_response(&apos;ok&apos;)</div><div class=\"line\">   \tresp.set_cookie(&apos;username&apos;, &apos;the username&apos;)</div><div class=\"line\">   \treturn resp</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\">\tapp.run(debug=True, threaded=True)</div></pre></td></tr></table></figure>\n<p><strong>参考文章</strong><br><a href=\"https://www.zhihu.com/question/19732473\" target=\"_blank\" rel=\"external\">知乎：怎样理解阻塞非阻塞与同步异步的区别?</a><br><a href=\"http://tornadocn.readthedocs.org/zh/latest/guide/async.html\" target=\"_blank\" rel=\"external\">Tornado文档：异步非阻塞I/O</a><br><a href=\"http://docs.pythontab.com/tornado/introduction-to-tornado/ch5.html\" target=\"_blank\" rel=\"external\">Tornado教程：异步Web服务</a><br><a href=\"http://cloudaice.com/tornado-coroutine/\" target=\"_blank\" rel=\"external\">使用tornado的coroutine进行编程</a><br><a href=\"https://segmentfault.com/q/1010000004910793?_ea=722806\" target=\"_blank\" rel=\"external\">我在segmentfault的提问：无法理解tornado的异步</a>  </p>\n","excerpt":"","more":"<p>在做毕业设计的时候，由于后端有一个耗时任务，所以想到了异步，又由于长期使用Python，进而想到了Tornado，然后，我就半个月没做毕设了，说来全是坑啊。在了解异步与阻塞的原理之前我就盲目地想从代码层面去实现，这样只会浪费时间。所以这里我就先描述一下我对这几个概念的理解。</p>\n<h3 id=\"异步与同步：是消息通信机制的层面\"><a href=\"#异步与同步：是消息通信机制的层面\" class=\"headerlink\" title=\"异步与同步：是消息通信机制的层面\"></a>异步与同步：是消息通信机制的层面</h3><p>采用异步的时候，程序并不关心该操作的结果，所以并不会有返回结果，比如ajax，一般会给异步操作赋予一个回调函数，通过这个回调函数对结果进行处理，而不是直接将结果返回给外部(在ajax如果return结果则会是一个null值)</p>\n<h3 id=\"阻塞与非阻塞：指程序在等待调用结果时的状态\"><a href=\"#阻塞与非阻塞：指程序在等待调用结果时的状态\" class=\"headerlink\" title=\"阻塞与非阻塞：指程序在等待调用结果时的状态\"></a>阻塞与非阻塞：指程序在等待调用结果时的状态</h3><p>如果是阻塞，则程序会一直等待程序返回结果，如果是非阻塞，则不会等待，而继续执行下面或者其他的代码了。</p>\n<h3 id=\"阻塞式IO\"><a href=\"#阻塞式IO\" class=\"headerlink\" title=\"阻塞式IO\"></a>阻塞式IO</h3><p>耗时型任务一般分为两类：CPU耗时型任务和IO耗时型任务。CPU指一般的代码运算执行过程，IO一般分为两大类，计算型IO和阻塞式IO。如果仅有一个线程，那么同一时刻只能有一个任务在计算，但如果是阻塞式IO，它可以让它先阻塞掉，然后去计算其他的任务，等到内核告诉程序那边没有被阻塞了就、再回到之前的地方进行之后的运算。</p>\n<p>所以，在了解了这些概念过后，我就知道了为什么要发挥tornado的异步特性就得依赖异步库(<a href=\"https://github.com/tornadoweb/tornado/wiki/Links\">Tornado官方提供的第三方异步库</a>)，而不是随便一行代码都能变成异步非阻塞式的代码。比如我试验时使用的一个sleep函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def sleep(self):</div><div class=\"line\">    for i in range(100000000):</div><div class=\"line\">        if i % 100000 == 0:</div><div class=\"line\">            print(i)</div><div class=\"line\">    self.set_cookie(&apos;setting&apos;, &apos;hao&apos;)</div></pre></td></tr></table></figure>\n<p>看吧，这是一个计算型任务，由于tornado是单进程单线程，所以无论怎么做也不可能实现在访问该请求的时候访问其他请求，因为CPU只能执行当前任务，其他请求必须等到这个请求结束后才能成功，这也是为什么部署tornado的时候几乎都是用nginx+多实例事实上，同理，其他的框架基本上都是需要nginx、apache等配合才能同时服务于多个请求的。Tornado的异步库，几乎都是用来进行阻塞式IO任务的，所以只有他们才能发挥其异步特性。</p>\n<p>Tornado的异步实现就是将当前请求的协程暂停，等待其返回结果，在等待的过程中当前请求不能继续往下执行，但是如果有其他请求(同样是一个协程)，只要不也是阻塞式IO，那么就会直接去处理其他的请求了。</p>\n<p>当然，包括nodejs的异步等，这些统统都是有历史原因的，JavaScript和Python在发展之初都只支持单进程单线程，即使使用多线程技术最多也只能利用到100%的单核，多核在这里似乎并不使用，而如果要使用多进程变成，光靠框架是做不到的，必须自己根据实际需求来处理多进程之前的数据共享、资源竞争等问题。所以，在我的理解里，如果能直接利用多线程编程就不需要用服务端异步，毕竟，多线程的发明本身也是为了解决阻塞式IO的问题。</p>\n<h2 id=\"多线程实现异步、非阻塞、并行请求、并行计算\"><a href=\"#多线程实现异步、非阻塞、并行请求、并行计算\" class=\"headerlink\" title=\"多线程实现异步、非阻塞、并行请求、并行计算\"></a>多线程实现异步、非阻塞、并行请求、并行计算</h2><p>其实我认为多线程相比于异步非阻塞有很大的优点，不可否认，多线程在线程切换上存在开销，并且在资源竞争上需要写更多的逻辑，稍微控制不好就会导致服务出错，然而，多线程在处理并行任务上有先天的优势，这一点光看名字就看得出来，下面介绍Tornado的多线程和Flask多线程的用法，其中Tornado的多线程是指由程序将当前请求中的代码交由其他线程处理，而flask的多线程就是类似apache服务器，另起一个进程来处理请求。</p>\n<p>注意：两者都可以使用global来引用全局变量</p>\n<h4 id=\"Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\"><a href=\"#Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\" class=\"headerlink\" title=\"Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie\"></a>Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">import tornado.ioloop</div><div class=\"line\">import tornado.web</div><div class=\"line\">import time</div><div class=\"line\">from concurrent.futures import ThreadPoolExecutor</div><div class=\"line\">import tornado.httpclient</div><div class=\"line\">from tornado.concurrent import run_on_executor</div><div class=\"line\"></div><div class=\"line\">class Executor(ThreadPoolExecutor):</div><div class=\"line\">\t_instance = None</div><div class=\"line\"></div><div class=\"line\">   \tdef __new__(cls, *args, **kwargs):</div><div class=\"line\">       \tif not getattr(cls, &apos;_instance&apos;, None):</div><div class=\"line\">           \tcls._instance = ThreadPoolExecutor(max_workers=10)</div><div class=\"line\">       \treturn cls._instance</div><div class=\"line\"></div><div class=\"line\">class SleepHandler(tornado.web.RequestHandler):</div><div class=\"line\">   \texecutor = ThreadPoolExecutor(10)</div><div class=\"line\"></div><div class=\"line\">   \tdef get(self):</div><div class=\"line\">     \ttornado.ioloop.IOLoop.instance().add_callback(self.sleep) # 相当于丢到下一个时间循环去  </div><div class=\"line\">       \tself.write(&quot;when i sleep&quot;)\t\t# 请求会立马返回这个值并断开连接</div><div class=\"line\"></div><div class=\"line\">   \t@run_on_executor</div><div class=\"line\">   \tdef sleep(self):</div><div class=\"line\">       \tfor i in range(100000000):</div><div class=\"line\">           \tif i % 100000 == 0:</div><div class=\"line\">               \tprint(i)</div><div class=\"line\">       \tself.set_cookie(&apos;username&apos;, &apos;hao&apos;)</div><div class=\"line\"></div><div class=\"line\">       \tprint(&quot;yes&quot;)</div><div class=\"line\">       \treturn 5</div><div class=\"line\"></div><div class=\"line\">class TestHandler(tornado.web.RequestHandler):</div><div class=\"line\">   \tdef get(self):</div><div class=\"line\">       \tif not self.get_cookie(&apos;username&apos;):</div><div class=\"line\">           \tself.write(&apos;没有&apos;)</div><div class=\"line\">       \telse:</div><div class=\"line\">           \tself.write(&apos;有&apos;)</div><div class=\"line\">           \t</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(r&quot;/test&quot;, TestHandler),</div><div class=\"line\">\t(r&quot;/sleep&quot;, SleepHandler),</div><div class=\"line\">\t], debug=True)</div><div class=\"line\"></div><div class=\"line\">if __name__ == &quot;__main__&quot;:</div><div class=\"line\">   \tapplication.listen(8888)</div><div class=\"line\">   \ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<h4 id=\"flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\"><a href=\"#flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\" class=\"headerlink\" title=\"flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie\"></a>flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">from flask import Flask,request,make_response</div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\">@app.route(&apos;/&apos;)</div><div class=\"line\">def hello_world():</div><div class=\"line\">\tusername = request.cookies.get(&apos;username&apos;)</div><div class=\"line\">   \tif username is None:</div><div class=\"line\">      \treturn &apos;没有&apos;</div><div class=\"line\">   \telse:</div><div class=\"line\">       \treturn &apos;有&apos;</div><div class=\"line\">   \treturn username</div><div class=\"line\"></div><div class=\"line\">@app.route(&apos;/s&apos;)</div><div class=\"line\">def sleep():</div><div class=\"line\">   \tfor i in range(100000000):</div><div class=\"line\">       \tif i % 100000 == 0:</div><div class=\"line\">\t\t\tprint(i)</div><div class=\"line\">\tresp = make_response(&apos;ok&apos;)</div><div class=\"line\">   \tresp.set_cookie(&apos;username&apos;, &apos;the username&apos;)</div><div class=\"line\">   \treturn resp</div><div class=\"line\"></div><div class=\"line\">if __name__ == &apos;__main__&apos;:</div><div class=\"line\">\tapp.run(debug=True, threaded=True)</div></pre></td></tr></table></figure>\n<p><strong>参考文章</strong><br><a href=\"https://www.zhihu.com/question/19732473\">知乎：怎样理解阻塞非阻塞与同步异步的区别?</a><br><a href=\"http://tornadocn.readthedocs.org/zh/latest/guide/async.html\">Tornado文档：异步非阻塞I/O</a><br><a href=\"http://docs.pythontab.com/tornado/introduction-to-tornado/ch5.html\">Tornado教程：异步Web服务</a><br><a href=\"http://cloudaice.com/tornado-coroutine/\">使用tornado的coroutine进行编程</a><br><a href=\"https://segmentfault.com/q/1010000004910793?_ea=722806\">我在segmentfault的提问：无法理解tornado的异步</a>  </p>\n"},{"title":"Ubuntu安装phpmyadmin","date":"2014-11-09T07:26:43.000Z","_content":"参考：<https://www.digitalocean.com/community/tutorials/how-to-install-and-\nsecure-phpmyadmin-on-ubuntu-12-04>\n\n最近由于工作需要，必须得短时间内建立好一个数据库，但是不想在平板电脑上装太多的软件，所以直接在服务器上安装了phpmyadmin，发现其安装方法不是一条ap\nt就能解决的，所以特别记录一下：\n\n系统环境：ubuntu14.04(server) + apache2 + MySQL5.5\n\n安装步骤：\n\n# 1.获取phpmyadmin\n\n\n\n    sudo apt-get install phpmyadmin apache2-utils\n\n#  2.修改配置文件\n\n在apache配置文件里面添加声明：\n\n\n\n    vim /etc/apache2/apache2.conf\n\n\n\n\n    # 在该文件里面添加如下一行即可\n\n\n\n\n    Include /etc/phpmyadmin/apache.conf\n\n#  3.重启服务\n\n\n\n    service apache2 restart\n\n#  4.安全问题\n\nphpmyadmin的远程访问方面的安全问题，我还没去涉及，可以直接参考本文章顶部的参考文章进行配置。\n","source":"_posts/ubuntu-install-phpmyadmin.md","raw":"---\ntitle: \"Ubuntu安装phpmyadmin\"\ndate: 2014-11-09 15:26:43\ncategories: 编程之路\n---\n参考：<https://www.digitalocean.com/community/tutorials/how-to-install-and-\nsecure-phpmyadmin-on-ubuntu-12-04>\n\n最近由于工作需要，必须得短时间内建立好一个数据库，但是不想在平板电脑上装太多的软件，所以直接在服务器上安装了phpmyadmin，发现其安装方法不是一条ap\nt就能解决的，所以特别记录一下：\n\n系统环境：ubuntu14.04(server) + apache2 + MySQL5.5\n\n安装步骤：\n\n# 1.获取phpmyadmin\n\n\n\n    sudo apt-get install phpmyadmin apache2-utils\n\n#  2.修改配置文件\n\n在apache配置文件里面添加声明：\n\n\n\n    vim /etc/apache2/apache2.conf\n\n\n\n\n    # 在该文件里面添加如下一行即可\n\n\n\n\n    Include /etc/phpmyadmin/apache.conf\n\n#  3.重启服务\n\n\n\n    service apache2 restart\n\n#  4.安全问题\n\nphpmyadmin的远程访问方面的安全问题，我还没去涉及，可以直接参考本文章顶部的参考文章进行配置。\n","slug":"ubuntu-install-phpmyadmin","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pjb006m9vnziena0di0","content":"<p>参考：<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-\nsecure-phpmyadmin-on-ubuntu-12-04\" target=\"_blank\" rel=\"external\">https://www.digitalocean.com/community/tutorials/how-to-install-and-\nsecure-phpmyadmin-on-ubuntu-12-04</a></p>\n<p>最近由于工作需要，必须得短时间内建立好一个数据库，但是不想在平板电脑上装太多的软件，所以直接在服务器上安装了phpmyadmin，发现其安装方法不是一条ap<br>t就能解决的，所以特别记录一下：</p>\n<p>系统环境：ubuntu14.04(server) + apache2 + MySQL5.5</p>\n<p>安装步骤：</p>\n<h1 id=\"1-获取phpmyadmin\"><a href=\"#1-获取phpmyadmin\" class=\"headerlink\" title=\"1.获取phpmyadmin\"></a>1.获取phpmyadmin</h1><pre><code>sudo apt-get install phpmyadmin apache2-utils\n</code></pre><h1 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2.修改配置文件\"></a>2.修改配置文件</h1><p>在apache配置文件里面添加声明：</p>\n<pre><code>vim /etc/apache2/apache2.conf\n\n\n\n\n# 在该文件里面添加如下一行即可\n\n\n\n\nInclude /etc/phpmyadmin/apache.conf\n</code></pre><h1 id=\"3-重启服务\"><a href=\"#3-重启服务\" class=\"headerlink\" title=\"3.重启服务\"></a>3.重启服务</h1><pre><code>service apache2 restart\n</code></pre><h1 id=\"4-安全问题\"><a href=\"#4-安全问题\" class=\"headerlink\" title=\"4.安全问题\"></a>4.安全问题</h1><p>phpmyadmin的远程访问方面的安全问题，我还没去涉及，可以直接参考本文章顶部的参考文章进行配置。</p>\n","excerpt":"","more":"<p>参考：<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-\nsecure-phpmyadmin-on-ubuntu-12-04\">https://www.digitalocean.com/community/tutorials/how-to-install-and-\nsecure-phpmyadmin-on-ubuntu-12-04</a></p>\n<p>最近由于工作需要，必须得短时间内建立好一个数据库，但是不想在平板电脑上装太多的软件，所以直接在服务器上安装了phpmyadmin，发现其安装方法不是一条ap<br>t就能解决的，所以特别记录一下：</p>\n<p>系统环境：ubuntu14.04(server) + apache2 + MySQL5.5</p>\n<p>安装步骤：</p>\n<h1 id=\"1-获取phpmyadmin\"><a href=\"#1-获取phpmyadmin\" class=\"headerlink\" title=\"1.获取phpmyadmin\"></a>1.获取phpmyadmin</h1><pre><code>sudo apt-get install phpmyadmin apache2-utils\n</code></pre><h1 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2.修改配置文件\"></a>2.修改配置文件</h1><p>在apache配置文件里面添加声明：</p>\n<pre><code>vim /etc/apache2/apache2.conf\n\n\n\n\n# 在该文件里面添加如下一行即可\n\n\n\n\nInclude /etc/phpmyadmin/apache.conf\n</code></pre><h1 id=\"3-重启服务\"><a href=\"#3-重启服务\" class=\"headerlink\" title=\"3.重启服务\"></a>3.重启服务</h1><pre><code>service apache2 restart\n</code></pre><h1 id=\"4-安全问题\"><a href=\"#4-安全问题\" class=\"headerlink\" title=\"4.安全问题\"></a>4.安全问题</h1><p>phpmyadmin的远程访问方面的安全问题，我还没去涉及，可以直接参考本文章顶部的参考文章进行配置。</p>\n"},{"title":"《天才在做 疯子在右》——他们真的是疯子吗","date":"2015-05-10T02:59:41.000Z","_content":"听了很久这本书的传说，上个月终于买来读完了。读完后，我又产生了一个很大的问题：他们真的是疯子吗？还是，我们才是疯子？到底谁对谁错？他们中是不是有人并不是疯子\n？\n\n好吧，以前一直以为这本书是讲天才是怎么样的，买来后刊封面，我操，“国内第一本精神病人访谈手记”，原来作者是花了那么长的时间去采访，让我们了解到疯子抑或是天才\n真正的内心世界。\n\n我也曾有一位亲人不知道什么原因，后来被送去精神病院了(现在又出来了)。当时他患病的时候，看他那眼神，仿佛一直在思考什么，但是我那时候很怕，大人们更是不会去跟\n一个精神病患者讲太多的话。要是现在，我肯定会视图去了解他，而不是站在一旁远离他。\n\n哲学、文学、天文地理，他们好像比真的天才更天才。这本书，让我重新开始审视身边那些与众人想法不同的人(当然，我认为我也是这样的人)，开始偶尔去深入他们的内心世\n界。曾经的我以为只有我是有梦想、有追求的人，但到了大三，看了很多人，发现，每个人都有这样的想法，更多的人其实都在走自己的路，并不是每个人都在阿谀奉承、追名逐\n利。这本书教会了我用心去观察周围的人和事。\n\n很多人觉得这本书很假，但是无论是否有虚构的部分，这本书都很真。\n\n**经典语录：**\n\n_想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛去看石头，用大海的眼睛去看大海，用动\n物的眼睛去看动物，用人的眼睛去看人。_\n","source":"_posts/tiancaizaizuo,fengzizaiyou.md","raw":"---\ntitle: \"《天才在做 疯子在右》——他们真的是疯子吗\"\ndate: 2015-05-10 10:59:41\ncategories: 韦编三绝\n---\n听了很久这本书的传说，上个月终于买来读完了。读完后，我又产生了一个很大的问题：他们真的是疯子吗？还是，我们才是疯子？到底谁对谁错？他们中是不是有人并不是疯子\n？\n\n好吧，以前一直以为这本书是讲天才是怎么样的，买来后刊封面，我操，“国内第一本精神病人访谈手记”，原来作者是花了那么长的时间去采访，让我们了解到疯子抑或是天才\n真正的内心世界。\n\n我也曾有一位亲人不知道什么原因，后来被送去精神病院了(现在又出来了)。当时他患病的时候，看他那眼神，仿佛一直在思考什么，但是我那时候很怕，大人们更是不会去跟\n一个精神病患者讲太多的话。要是现在，我肯定会视图去了解他，而不是站在一旁远离他。\n\n哲学、文学、天文地理，他们好像比真的天才更天才。这本书，让我重新开始审视身边那些与众人想法不同的人(当然，我认为我也是这样的人)，开始偶尔去深入他们的内心世\n界。曾经的我以为只有我是有梦想、有追求的人，但到了大三，看了很多人，发现，每个人都有这样的想法，更多的人其实都在走自己的路，并不是每个人都在阿谀奉承、追名逐\n利。这本书教会了我用心去观察周围的人和事。\n\n很多人觉得这本书很假，但是无论是否有虚构的部分，这本书都很真。\n\n**经典语录：**\n\n_想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛去看石头，用大海的眼睛去看大海，用动\n物的眼睛去看动物，用人的眼睛去看人。_\n","slug":"tiancaizaizuo,fengzizaiyou","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pjf006o9vnzchrqfzg8","content":"<p>听了很久这本书的传说，上个月终于买来读完了。读完后，我又产生了一个很大的问题：他们真的是疯子吗？还是，我们才是疯子？到底谁对谁错？他们中是不是有人并不是疯子<br>？</p>\n<p>好吧，以前一直以为这本书是讲天才是怎么样的，买来后刊封面，我操，“国内第一本精神病人访谈手记”，原来作者是花了那么长的时间去采访，让我们了解到疯子抑或是天才<br>真正的内心世界。</p>\n<p>我也曾有一位亲人不知道什么原因，后来被送去精神病院了(现在又出来了)。当时他患病的时候，看他那眼神，仿佛一直在思考什么，但是我那时候很怕，大人们更是不会去跟<br>一个精神病患者讲太多的话。要是现在，我肯定会视图去了解他，而不是站在一旁远离他。</p>\n<p>哲学、文学、天文地理，他们好像比真的天才更天才。这本书，让我重新开始审视身边那些与众人想法不同的人(当然，我认为我也是这样的人)，开始偶尔去深入他们的内心世<br>界。曾经的我以为只有我是有梦想、有追求的人，但到了大三，看了很多人，发现，每个人都有这样的想法，更多的人其实都在走自己的路，并不是每个人都在阿谀奉承、追名逐<br>利。这本书教会了我用心去观察周围的人和事。</p>\n<p>很多人觉得这本书很假，但是无论是否有虚构的部分，这本书都很真。</p>\n<p><strong>经典语录：</strong></p>\n<p><em>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛去看石头，用大海的眼睛去看大海，用动<br>物的眼睛去看动物，用人的眼睛去看人。</em></p>\n","excerpt":"","more":"<p>听了很久这本书的传说，上个月终于买来读完了。读完后，我又产生了一个很大的问题：他们真的是疯子吗？还是，我们才是疯子？到底谁对谁错？他们中是不是有人并不是疯子<br>？</p>\n<p>好吧，以前一直以为这本书是讲天才是怎么样的，买来后刊封面，我操，“国内第一本精神病人访谈手记”，原来作者是花了那么长的时间去采访，让我们了解到疯子抑或是天才<br>真正的内心世界。</p>\n<p>我也曾有一位亲人不知道什么原因，后来被送去精神病院了(现在又出来了)。当时他患病的时候，看他那眼神，仿佛一直在思考什么，但是我那时候很怕，大人们更是不会去跟<br>一个精神病患者讲太多的话。要是现在，我肯定会视图去了解他，而不是站在一旁远离他。</p>\n<p>哲学、文学、天文地理，他们好像比真的天才更天才。这本书，让我重新开始审视身边那些与众人想法不同的人(当然，我认为我也是这样的人)，开始偶尔去深入他们的内心世<br>界。曾经的我以为只有我是有梦想、有追求的人，但到了大三，看了很多人，发现，每个人都有这样的想法，更多的人其实都在走自己的路，并不是每个人都在阿谀奉承、追名逐<br>利。这本书教会了我用心去观察周围的人和事。</p>\n<p>很多人觉得这本书很假，但是无论是否有虚构的部分，这本书都很真。</p>\n<p><strong>经典语录：</strong></p>\n<p><em>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛去看石头，用大海的眼睛去看大海，用动<br>物的眼睛去看动物，用人的眼睛去看人。</em></p>\n"},{"title":"致多年后的自己","date":"2014-10-07T05:57:42.000Z","_content":"光阴似箭，日月如梭。日子看起来很慢很慢，但每次回首往事的时候我们又突然发觉时间原来早已在不经意间悄悄溜走了。我想，人在每个时期都有特定的价值观，人总是会改变\n，但是改变这种东西却是可以参考的，只要你还知道曾经的自己到底是什么样的。很多人都会成长为自己曾经讨厌的样子，我还未长大，我不知道这句话是真是假，只知道无数的\n“大人”都对这句话深信不疑，但，至少现在，我还坚持着。\n\n对于这种“致未来”的主题，有时候我想写五年，有时候想写十年，但是我自己也不知道到底什么时候会改变，所以干脆写一篇文章，以后经常提醒自己看看。\n\n# 注：下面列出的所有点，今后都不准删除\n\n## 1.多年以后，你还有梦想吗？\n\n今天的我21岁，如果按照新历来算，今天正好是我21岁的生日。人生大概已经过了四分之一，我，还有梦想。不过，我现在对梦想有点模糊，我知道自己有梦想，但说不出具\n体是什么，只知道心中有一把火，有一个小宇宙。我想要创业，就在重庆创业，到时候能够养活自己、家人以及公司的员工们。我还想要祖国能够实现真正的民主自由，这么大了\n，我也想要行使一下自己的选举权和被选举权，我也想让家人看看twitter和facebook，google是什么样子的。我还想以后能不能通过自己的经济实力来限\n制到政府的某些腐败问题。\n\n## 2.多年以后，你还像当初那样对金钱不敏感吗？\n\n这里之所以说“敏感”，是因为我早已经过了视金钱如粪土的年纪了。现在的我，知道了金钱的作用，钱不是万能的，但没有钱是万万不能的。人是社会动物，不可能离开钱的。\n但是我是绝对不会有拜金主义的，我相信自己永远不会因为钱的问题闹起家庭矛盾，不会因为钱的问题而做伤天害理的事情，不会因为钱的问题而去街头乞讨。哪怕再穷再苦，也\n要通过自己的双手来挣钱。千万别做什么事情都为了钱，钱，够用就行。\n\n## 3.多年以后，你会像现在所想的一样不收礼金吗？\n\n这是一直以来我自认为的一个非常“崇高”的想法。以后自己办生日酒席或者其他人来访的时候，我绝不会理把钱当作礼物的人(当然，仅限于同龄人，上一辈肯定无法理解的，\n没准还怪我不给他们面子)。大家可以送一下礼物，我想，朋友精挑细选的几块钱的礼物绝对比得上两三百一个的红包！\n\n## 4.多年以后，你还会坚持自己的教育方法吗？\n\n没错，一直都觉得自己肯定会是个好爸爸。幼稚的男人绝对会是一个好爸爸的，我会陪孩子一起玩耍，陪他一起疯，而不是让他一个人在旁边受冷落。我会回答孩子一切的问题，\n哪怕我不知道，也不会说“别问这么天真的问题”，而是“来，爸爸教你用谷歌”。每次我说以后自己的孩子如果不想认真读书那不读也行的时候，大人们都说笑我说以后我就不\n这样想了。我想，我会从小教孩子寻找自己的兴趣所在，如果真对读书不感兴趣并且认为读书真的不能给自己的兴趣带来什么，那么，不读吧，去追逐自己想要的东西。无论男女\n，一定要在十八岁前谈一场恋爱，因为多年后他们回忆的时候肯定会怀念那段十分青涩的年华，要知道，你们的爸爸我当年和初恋谈了两年就只牵过一次手哇。但你们要记住，性\n虽然是爱的升华，但在你们身体还未成熟之前，严禁性生活。不要像。。。额。。。 反正争取在他大学阶段就能完全撒手，我和老伴去过二人世界去了。\n\n## 5.多年以后，你还会那么爱学习吗？\n\n其实我一直庆幸自己能踏上计算机这条路，因为计算机行业的人员必须不停地学习。我从小就喜欢看书，无论什么书都看，希望自己这个爱好能一直发扬下去，到时候自己家的书\n房就已经能成为一个小型的图书馆了，那该多好。\n\n## 6.多年以后，你还会爱自己的家庭、爱自己的朋友吗？\n\n现在我的家庭，虽然偶有一些小争执，但是我知道全家六口人都爱着这个家(过年，应该就会有七口人啦)。我和我哥绝不会像其他兄弟一样争过来争过去的。我会一直孝顺爸妈\n，等到我自己有经济能力的时候，我会每年都带他们去进行一次全身体检，我要让他们活得更久，过得更快乐。另外，如果以后有了自己的家庭，我绝对不能成为一个工作狂(目\n前看来，我很有可能成为一个工作狂)，答应老婆的事情一定要实现。我绝对不会让老婆住租来的房子，我绝对不会让怀孕的老婆挤公交车。\n\n现在的我，有一些朋友。希望以后的我不要滥交朋友，朋友绝对不是越多越好，我也希望以后的朋友能体谅我，因为虽然是我朋友，我也不大喜欢和朋友聊心里事的。但我绝对是\n会把你们当作朋友的，要看我有没有把你当作朋友，找我借钱吧，哈哈！\n\n## 7.多年以后，你真的会经常去旅游吗？\n\n今天正是国庆节，我又没出去玩，感觉大学时期出去旅游的基本上都是女生，男生要么宅在寝室要么宅在家里，反正几乎不会出去的。其实我也很想玩，但是找不到同伴(好吧，\n我承认，我不大喜欢和男生一起出去玩)，不过以后有的是时间。很多人说，以后有时间才怪，以后上班什么的绝对没时间。我想，上班有没有时间不是老板能决定的，而是自己\n。时间就像乳沟，挤一挤总会有的。当然，尽量别挑节假日，挑个小小的周末，来一个小小的自驾游，这才是生活啊！\n\n## 8.多年以后，你真的会那么关注健康吗？\n\n现在的我不运动，是因为场地受限，以后自己上下班应该尽量走路或者跑步，身体好的时候，每天来个四五公里。每周给老婆做一个养生的菜，平时嘛做一些家常菜就够了。然后\n，每年来一个全身体检。以前的我说不喝酒，现在已经破戒了。但现在的我依然坚持着不抽烟，以后也会吗？\n\n## 9.多年以后，你会麻木吗？\n\n我想，任何一个接受过教育的人都不应该像鲁迅《藤野先生》里面所写的那样麻木。但现实确实，很多人不敢做自己应该做的事情或者本身就认为那不是自己应该做的事情。多年\n以后，面对香港、台湾问题，我还会这么认真地去分析吗，至少现在的我能够理性地认为，谁都有对有错，但某些人却从来不改变一下自己，反而变本加厉，我草。我爱国，但我\n不爱党。多年以后，面对摔倒的老人，我会不会不计后果地去扶起来呢？现在的我面对这样的情况我都不知道，只能按照本能去做了，本能，好吧，我肯定会去扶的。\n\n## 10.多年以后，你还能回答下面这些问题吗？\n\n你爸爸的生日、妈妈的生日、老婆的生日、朋友的生日、自己的生日是什么时候？ 你的初恋是谁？ 你家乡在哪儿？ 你还记得当年的朋友都有哪些？你现在的朋友又有哪些？\n\n# 最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\n到：“我为什么要和别人一样？”\n","source":"_posts/to-the-future-of-me.md","raw":"---\ntitle: \"致多年后的自己\"\ndate: 2014-10-07 13:57:42\ncategories: 边走边想\n---\n光阴似箭，日月如梭。日子看起来很慢很慢，但每次回首往事的时候我们又突然发觉时间原来早已在不经意间悄悄溜走了。我想，人在每个时期都有特定的价值观，人总是会改变\n，但是改变这种东西却是可以参考的，只要你还知道曾经的自己到底是什么样的。很多人都会成长为自己曾经讨厌的样子，我还未长大，我不知道这句话是真是假，只知道无数的\n“大人”都对这句话深信不疑，但，至少现在，我还坚持着。\n\n对于这种“致未来”的主题，有时候我想写五年，有时候想写十年，但是我自己也不知道到底什么时候会改变，所以干脆写一篇文章，以后经常提醒自己看看。\n\n# 注：下面列出的所有点，今后都不准删除\n\n## 1.多年以后，你还有梦想吗？\n\n今天的我21岁，如果按照新历来算，今天正好是我21岁的生日。人生大概已经过了四分之一，我，还有梦想。不过，我现在对梦想有点模糊，我知道自己有梦想，但说不出具\n体是什么，只知道心中有一把火，有一个小宇宙。我想要创业，就在重庆创业，到时候能够养活自己、家人以及公司的员工们。我还想要祖国能够实现真正的民主自由，这么大了\n，我也想要行使一下自己的选举权和被选举权，我也想让家人看看twitter和facebook，google是什么样子的。我还想以后能不能通过自己的经济实力来限\n制到政府的某些腐败问题。\n\n## 2.多年以后，你还像当初那样对金钱不敏感吗？\n\n这里之所以说“敏感”，是因为我早已经过了视金钱如粪土的年纪了。现在的我，知道了金钱的作用，钱不是万能的，但没有钱是万万不能的。人是社会动物，不可能离开钱的。\n但是我是绝对不会有拜金主义的，我相信自己永远不会因为钱的问题闹起家庭矛盾，不会因为钱的问题而做伤天害理的事情，不会因为钱的问题而去街头乞讨。哪怕再穷再苦，也\n要通过自己的双手来挣钱。千万别做什么事情都为了钱，钱，够用就行。\n\n## 3.多年以后，你会像现在所想的一样不收礼金吗？\n\n这是一直以来我自认为的一个非常“崇高”的想法。以后自己办生日酒席或者其他人来访的时候，我绝不会理把钱当作礼物的人(当然，仅限于同龄人，上一辈肯定无法理解的，\n没准还怪我不给他们面子)。大家可以送一下礼物，我想，朋友精挑细选的几块钱的礼物绝对比得上两三百一个的红包！\n\n## 4.多年以后，你还会坚持自己的教育方法吗？\n\n没错，一直都觉得自己肯定会是个好爸爸。幼稚的男人绝对会是一个好爸爸的，我会陪孩子一起玩耍，陪他一起疯，而不是让他一个人在旁边受冷落。我会回答孩子一切的问题，\n哪怕我不知道，也不会说“别问这么天真的问题”，而是“来，爸爸教你用谷歌”。每次我说以后自己的孩子如果不想认真读书那不读也行的时候，大人们都说笑我说以后我就不\n这样想了。我想，我会从小教孩子寻找自己的兴趣所在，如果真对读书不感兴趣并且认为读书真的不能给自己的兴趣带来什么，那么，不读吧，去追逐自己想要的东西。无论男女\n，一定要在十八岁前谈一场恋爱，因为多年后他们回忆的时候肯定会怀念那段十分青涩的年华，要知道，你们的爸爸我当年和初恋谈了两年就只牵过一次手哇。但你们要记住，性\n虽然是爱的升华，但在你们身体还未成熟之前，严禁性生活。不要像。。。额。。。 反正争取在他大学阶段就能完全撒手，我和老伴去过二人世界去了。\n\n## 5.多年以后，你还会那么爱学习吗？\n\n其实我一直庆幸自己能踏上计算机这条路，因为计算机行业的人员必须不停地学习。我从小就喜欢看书，无论什么书都看，希望自己这个爱好能一直发扬下去，到时候自己家的书\n房就已经能成为一个小型的图书馆了，那该多好。\n\n## 6.多年以后，你还会爱自己的家庭、爱自己的朋友吗？\n\n现在我的家庭，虽然偶有一些小争执，但是我知道全家六口人都爱着这个家(过年，应该就会有七口人啦)。我和我哥绝不会像其他兄弟一样争过来争过去的。我会一直孝顺爸妈\n，等到我自己有经济能力的时候，我会每年都带他们去进行一次全身体检，我要让他们活得更久，过得更快乐。另外，如果以后有了自己的家庭，我绝对不能成为一个工作狂(目\n前看来，我很有可能成为一个工作狂)，答应老婆的事情一定要实现。我绝对不会让老婆住租来的房子，我绝对不会让怀孕的老婆挤公交车。\n\n现在的我，有一些朋友。希望以后的我不要滥交朋友，朋友绝对不是越多越好，我也希望以后的朋友能体谅我，因为虽然是我朋友，我也不大喜欢和朋友聊心里事的。但我绝对是\n会把你们当作朋友的，要看我有没有把你当作朋友，找我借钱吧，哈哈！\n\n## 7.多年以后，你真的会经常去旅游吗？\n\n今天正是国庆节，我又没出去玩，感觉大学时期出去旅游的基本上都是女生，男生要么宅在寝室要么宅在家里，反正几乎不会出去的。其实我也很想玩，但是找不到同伴(好吧，\n我承认，我不大喜欢和男生一起出去玩)，不过以后有的是时间。很多人说，以后有时间才怪，以后上班什么的绝对没时间。我想，上班有没有时间不是老板能决定的，而是自己\n。时间就像乳沟，挤一挤总会有的。当然，尽量别挑节假日，挑个小小的周末，来一个小小的自驾游，这才是生活啊！\n\n## 8.多年以后，你真的会那么关注健康吗？\n\n现在的我不运动，是因为场地受限，以后自己上下班应该尽量走路或者跑步，身体好的时候，每天来个四五公里。每周给老婆做一个养生的菜，平时嘛做一些家常菜就够了。然后\n，每年来一个全身体检。以前的我说不喝酒，现在已经破戒了。但现在的我依然坚持着不抽烟，以后也会吗？\n\n## 9.多年以后，你会麻木吗？\n\n我想，任何一个接受过教育的人都不应该像鲁迅《藤野先生》里面所写的那样麻木。但现实确实，很多人不敢做自己应该做的事情或者本身就认为那不是自己应该做的事情。多年\n以后，面对香港、台湾问题，我还会这么认真地去分析吗，至少现在的我能够理性地认为，谁都有对有错，但某些人却从来不改变一下自己，反而变本加厉，我草。我爱国，但我\n不爱党。多年以后，面对摔倒的老人，我会不会不计后果地去扶起来呢？现在的我面对这样的情况我都不知道，只能按照本能去做了，本能，好吧，我肯定会去扶的。\n\n## 10.多年以后，你还能回答下面这些问题吗？\n\n你爸爸的生日、妈妈的生日、老婆的生日、朋友的生日、自己的生日是什么时候？ 你的初恋是谁？ 你家乡在哪儿？ 你还记得当年的朋友都有哪些？你现在的朋友又有哪些？\n\n# 最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\n到：“我为什么要和别人一样？”\n","slug":"to-the-future-of-me","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pjh006q9vnzw2ckt7p8","content":"<p>光阴似箭，日月如梭。日子看起来很慢很慢，但每次回首往事的时候我们又突然发觉时间原来早已在不经意间悄悄溜走了。我想，人在每个时期都有特定的价值观，人总是会改变<br>，但是改变这种东西却是可以参考的，只要你还知道曾经的自己到底是什么样的。很多人都会成长为自己曾经讨厌的样子，我还未长大，我不知道这句话是真是假，只知道无数的<br>“大人”都对这句话深信不疑，但，至少现在，我还坚持着。</p>\n<p>对于这种“致未来”的主题，有时候我想写五年，有时候想写十年，但是我自己也不知道到底什么时候会改变，所以干脆写一篇文章，以后经常提醒自己看看。</p>\n<h1 id=\"注：下面列出的所有点，今后都不准删除\"><a href=\"#注：下面列出的所有点，今后都不准删除\" class=\"headerlink\" title=\"注：下面列出的所有点，今后都不准删除\"></a>注：下面列出的所有点，今后都不准删除</h1><h2 id=\"1-多年以后，你还有梦想吗？\"><a href=\"#1-多年以后，你还有梦想吗？\" class=\"headerlink\" title=\"1.多年以后，你还有梦想吗？\"></a>1.多年以后，你还有梦想吗？</h2><p>今天的我21岁，如果按照新历来算，今天正好是我21岁的生日。人生大概已经过了四分之一，我，还有梦想。不过，我现在对梦想有点模糊，我知道自己有梦想，但说不出具<br>体是什么，只知道心中有一把火，有一个小宇宙。我想要创业，就在重庆创业，到时候能够养活自己、家人以及公司的员工们。我还想要祖国能够实现真正的民主自由，这么大了<br>，我也想要行使一下自己的选举权和被选举权，我也想让家人看看twitter和facebook，google是什么样子的。我还想以后能不能通过自己的经济实力来限<br>制到政府的某些腐败问题。</p>\n<h2 id=\"2-多年以后，你还像当初那样对金钱不敏感吗？\"><a href=\"#2-多年以后，你还像当初那样对金钱不敏感吗？\" class=\"headerlink\" title=\"2.多年以后，你还像当初那样对金钱不敏感吗？\"></a>2.多年以后，你还像当初那样对金钱不敏感吗？</h2><p>这里之所以说“敏感”，是因为我早已经过了视金钱如粪土的年纪了。现在的我，知道了金钱的作用，钱不是万能的，但没有钱是万万不能的。人是社会动物，不可能离开钱的。<br>但是我是绝对不会有拜金主义的，我相信自己永远不会因为钱的问题闹起家庭矛盾，不会因为钱的问题而做伤天害理的事情，不会因为钱的问题而去街头乞讨。哪怕再穷再苦，也<br>要通过自己的双手来挣钱。千万别做什么事情都为了钱，钱，够用就行。</p>\n<h2 id=\"3-多年以后，你会像现在所想的一样不收礼金吗？\"><a href=\"#3-多年以后，你会像现在所想的一样不收礼金吗？\" class=\"headerlink\" title=\"3.多年以后，你会像现在所想的一样不收礼金吗？\"></a>3.多年以后，你会像现在所想的一样不收礼金吗？</h2><p>这是一直以来我自认为的一个非常“崇高”的想法。以后自己办生日酒席或者其他人来访的时候，我绝不会理把钱当作礼物的人(当然，仅限于同龄人，上一辈肯定无法理解的，<br>没准还怪我不给他们面子)。大家可以送一下礼物，我想，朋友精挑细选的几块钱的礼物绝对比得上两三百一个的红包！</p>\n<h2 id=\"4-多年以后，你还会坚持自己的教育方法吗？\"><a href=\"#4-多年以后，你还会坚持自己的教育方法吗？\" class=\"headerlink\" title=\"4.多年以后，你还会坚持自己的教育方法吗？\"></a>4.多年以后，你还会坚持自己的教育方法吗？</h2><p>没错，一直都觉得自己肯定会是个好爸爸。幼稚的男人绝对会是一个好爸爸的，我会陪孩子一起玩耍，陪他一起疯，而不是让他一个人在旁边受冷落。我会回答孩子一切的问题，<br>哪怕我不知道，也不会说“别问这么天真的问题”，而是“来，爸爸教你用谷歌”。每次我说以后自己的孩子如果不想认真读书那不读也行的时候，大人们都说笑我说以后我就不<br>这样想了。我想，我会从小教孩子寻找自己的兴趣所在，如果真对读书不感兴趣并且认为读书真的不能给自己的兴趣带来什么，那么，不读吧，去追逐自己想要的东西。无论男女<br>，一定要在十八岁前谈一场恋爱，因为多年后他们回忆的时候肯定会怀念那段十分青涩的年华，要知道，你们的爸爸我当年和初恋谈了两年就只牵过一次手哇。但你们要记住，性<br>虽然是爱的升华，但在你们身体还未成熟之前，严禁性生活。不要像。。。额。。。 反正争取在他大学阶段就能完全撒手，我和老伴去过二人世界去了。</p>\n<h2 id=\"5-多年以后，你还会那么爱学习吗？\"><a href=\"#5-多年以后，你还会那么爱学习吗？\" class=\"headerlink\" title=\"5.多年以后，你还会那么爱学习吗？\"></a>5.多年以后，你还会那么爱学习吗？</h2><p>其实我一直庆幸自己能踏上计算机这条路，因为计算机行业的人员必须不停地学习。我从小就喜欢看书，无论什么书都看，希望自己这个爱好能一直发扬下去，到时候自己家的书<br>房就已经能成为一个小型的图书馆了，那该多好。</p>\n<h2 id=\"6-多年以后，你还会爱自己的家庭、爱自己的朋友吗？\"><a href=\"#6-多年以后，你还会爱自己的家庭、爱自己的朋友吗？\" class=\"headerlink\" title=\"6.多年以后，你还会爱自己的家庭、爱自己的朋友吗？\"></a>6.多年以后，你还会爱自己的家庭、爱自己的朋友吗？</h2><p>现在我的家庭，虽然偶有一些小争执，但是我知道全家六口人都爱着这个家(过年，应该就会有七口人啦)。我和我哥绝不会像其他兄弟一样争过来争过去的。我会一直孝顺爸妈<br>，等到我自己有经济能力的时候，我会每年都带他们去进行一次全身体检，我要让他们活得更久，过得更快乐。另外，如果以后有了自己的家庭，我绝对不能成为一个工作狂(目<br>前看来，我很有可能成为一个工作狂)，答应老婆的事情一定要实现。我绝对不会让老婆住租来的房子，我绝对不会让怀孕的老婆挤公交车。</p>\n<p>现在的我，有一些朋友。希望以后的我不要滥交朋友，朋友绝对不是越多越好，我也希望以后的朋友能体谅我，因为虽然是我朋友，我也不大喜欢和朋友聊心里事的。但我绝对是<br>会把你们当作朋友的，要看我有没有把你当作朋友，找我借钱吧，哈哈！</p>\n<h2 id=\"7-多年以后，你真的会经常去旅游吗？\"><a href=\"#7-多年以后，你真的会经常去旅游吗？\" class=\"headerlink\" title=\"7.多年以后，你真的会经常去旅游吗？\"></a>7.多年以后，你真的会经常去旅游吗？</h2><p>今天正是国庆节，我又没出去玩，感觉大学时期出去旅游的基本上都是女生，男生要么宅在寝室要么宅在家里，反正几乎不会出去的。其实我也很想玩，但是找不到同伴(好吧，<br>我承认，我不大喜欢和男生一起出去玩)，不过以后有的是时间。很多人说，以后有时间才怪，以后上班什么的绝对没时间。我想，上班有没有时间不是老板能决定的，而是自己<br>。时间就像乳沟，挤一挤总会有的。当然，尽量别挑节假日，挑个小小的周末，来一个小小的自驾游，这才是生活啊！</p>\n<h2 id=\"8-多年以后，你真的会那么关注健康吗？\"><a href=\"#8-多年以后，你真的会那么关注健康吗？\" class=\"headerlink\" title=\"8.多年以后，你真的会那么关注健康吗？\"></a>8.多年以后，你真的会那么关注健康吗？</h2><p>现在的我不运动，是因为场地受限，以后自己上下班应该尽量走路或者跑步，身体好的时候，每天来个四五公里。每周给老婆做一个养生的菜，平时嘛做一些家常菜就够了。然后<br>，每年来一个全身体检。以前的我说不喝酒，现在已经破戒了。但现在的我依然坚持着不抽烟，以后也会吗？</p>\n<h2 id=\"9-多年以后，你会麻木吗？\"><a href=\"#9-多年以后，你会麻木吗？\" class=\"headerlink\" title=\"9.多年以后，你会麻木吗？\"></a>9.多年以后，你会麻木吗？</h2><p>我想，任何一个接受过教育的人都不应该像鲁迅《藤野先生》里面所写的那样麻木。但现实确实，很多人不敢做自己应该做的事情或者本身就认为那不是自己应该做的事情。多年<br>以后，面对香港、台湾问题，我还会这么认真地去分析吗，至少现在的我能够理性地认为，谁都有对有错，但某些人却从来不改变一下自己，反而变本加厉，我草。我爱国，但我<br>不爱党。多年以后，面对摔倒的老人，我会不会不计后果地去扶起来呢？现在的我面对这样的情况我都不知道，只能按照本能去做了，本能，好吧，我肯定会去扶的。</p>\n<h2 id=\"10-多年以后，你还能回答下面这些问题吗？\"><a href=\"#10-多年以后，你还能回答下面这些问题吗？\" class=\"headerlink\" title=\"10.多年以后，你还能回答下面这些问题吗？\"></a>10.多年以后，你还能回答下面这些问题吗？</h2><p>你爸爸的生日、妈妈的生日、老婆的生日、朋友的生日、自己的生日是什么时候？ 你的初恋是谁？ 你家乡在哪儿？ 你还记得当年的朋友都有哪些？你现在的朋友又有哪些？</p>\n<h1 id=\"最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\"><a href=\"#最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\" class=\"headerlink\" title=\"最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\"></a>最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问</h1><p>到：“我为什么要和别人一样？”</p>\n","excerpt":"","more":"<p>光阴似箭，日月如梭。日子看起来很慢很慢，但每次回首往事的时候我们又突然发觉时间原来早已在不经意间悄悄溜走了。我想，人在每个时期都有特定的价值观，人总是会改变<br>，但是改变这种东西却是可以参考的，只要你还知道曾经的自己到底是什么样的。很多人都会成长为自己曾经讨厌的样子，我还未长大，我不知道这句话是真是假，只知道无数的<br>“大人”都对这句话深信不疑，但，至少现在，我还坚持着。</p>\n<p>对于这种“致未来”的主题，有时候我想写五年，有时候想写十年，但是我自己也不知道到底什么时候会改变，所以干脆写一篇文章，以后经常提醒自己看看。</p>\n<h1 id=\"注：下面列出的所有点，今后都不准删除\"><a href=\"#注：下面列出的所有点，今后都不准删除\" class=\"headerlink\" title=\"注：下面列出的所有点，今后都不准删除\"></a>注：下面列出的所有点，今后都不准删除</h1><h2 id=\"1-多年以后，你还有梦想吗？\"><a href=\"#1-多年以后，你还有梦想吗？\" class=\"headerlink\" title=\"1.多年以后，你还有梦想吗？\"></a>1.多年以后，你还有梦想吗？</h2><p>今天的我21岁，如果按照新历来算，今天正好是我21岁的生日。人生大概已经过了四分之一，我，还有梦想。不过，我现在对梦想有点模糊，我知道自己有梦想，但说不出具<br>体是什么，只知道心中有一把火，有一个小宇宙。我想要创业，就在重庆创业，到时候能够养活自己、家人以及公司的员工们。我还想要祖国能够实现真正的民主自由，这么大了<br>，我也想要行使一下自己的选举权和被选举权，我也想让家人看看twitter和facebook，google是什么样子的。我还想以后能不能通过自己的经济实力来限<br>制到政府的某些腐败问题。</p>\n<h2 id=\"2-多年以后，你还像当初那样对金钱不敏感吗？\"><a href=\"#2-多年以后，你还像当初那样对金钱不敏感吗？\" class=\"headerlink\" title=\"2.多年以后，你还像当初那样对金钱不敏感吗？\"></a>2.多年以后，你还像当初那样对金钱不敏感吗？</h2><p>这里之所以说“敏感”，是因为我早已经过了视金钱如粪土的年纪了。现在的我，知道了金钱的作用，钱不是万能的，但没有钱是万万不能的。人是社会动物，不可能离开钱的。<br>但是我是绝对不会有拜金主义的，我相信自己永远不会因为钱的问题闹起家庭矛盾，不会因为钱的问题而做伤天害理的事情，不会因为钱的问题而去街头乞讨。哪怕再穷再苦，也<br>要通过自己的双手来挣钱。千万别做什么事情都为了钱，钱，够用就行。</p>\n<h2 id=\"3-多年以后，你会像现在所想的一样不收礼金吗？\"><a href=\"#3-多年以后，你会像现在所想的一样不收礼金吗？\" class=\"headerlink\" title=\"3.多年以后，你会像现在所想的一样不收礼金吗？\"></a>3.多年以后，你会像现在所想的一样不收礼金吗？</h2><p>这是一直以来我自认为的一个非常“崇高”的想法。以后自己办生日酒席或者其他人来访的时候，我绝不会理把钱当作礼物的人(当然，仅限于同龄人，上一辈肯定无法理解的，<br>没准还怪我不给他们面子)。大家可以送一下礼物，我想，朋友精挑细选的几块钱的礼物绝对比得上两三百一个的红包！</p>\n<h2 id=\"4-多年以后，你还会坚持自己的教育方法吗？\"><a href=\"#4-多年以后，你还会坚持自己的教育方法吗？\" class=\"headerlink\" title=\"4.多年以后，你还会坚持自己的教育方法吗？\"></a>4.多年以后，你还会坚持自己的教育方法吗？</h2><p>没错，一直都觉得自己肯定会是个好爸爸。幼稚的男人绝对会是一个好爸爸的，我会陪孩子一起玩耍，陪他一起疯，而不是让他一个人在旁边受冷落。我会回答孩子一切的问题，<br>哪怕我不知道，也不会说“别问这么天真的问题”，而是“来，爸爸教你用谷歌”。每次我说以后自己的孩子如果不想认真读书那不读也行的时候，大人们都说笑我说以后我就不<br>这样想了。我想，我会从小教孩子寻找自己的兴趣所在，如果真对读书不感兴趣并且认为读书真的不能给自己的兴趣带来什么，那么，不读吧，去追逐自己想要的东西。无论男女<br>，一定要在十八岁前谈一场恋爱，因为多年后他们回忆的时候肯定会怀念那段十分青涩的年华，要知道，你们的爸爸我当年和初恋谈了两年就只牵过一次手哇。但你们要记住，性<br>虽然是爱的升华，但在你们身体还未成熟之前，严禁性生活。不要像。。。额。。。 反正争取在他大学阶段就能完全撒手，我和老伴去过二人世界去了。</p>\n<h2 id=\"5-多年以后，你还会那么爱学习吗？\"><a href=\"#5-多年以后，你还会那么爱学习吗？\" class=\"headerlink\" title=\"5.多年以后，你还会那么爱学习吗？\"></a>5.多年以后，你还会那么爱学习吗？</h2><p>其实我一直庆幸自己能踏上计算机这条路，因为计算机行业的人员必须不停地学习。我从小就喜欢看书，无论什么书都看，希望自己这个爱好能一直发扬下去，到时候自己家的书<br>房就已经能成为一个小型的图书馆了，那该多好。</p>\n<h2 id=\"6-多年以后，你还会爱自己的家庭、爱自己的朋友吗？\"><a href=\"#6-多年以后，你还会爱自己的家庭、爱自己的朋友吗？\" class=\"headerlink\" title=\"6.多年以后，你还会爱自己的家庭、爱自己的朋友吗？\"></a>6.多年以后，你还会爱自己的家庭、爱自己的朋友吗？</h2><p>现在我的家庭，虽然偶有一些小争执，但是我知道全家六口人都爱着这个家(过年，应该就会有七口人啦)。我和我哥绝不会像其他兄弟一样争过来争过去的。我会一直孝顺爸妈<br>，等到我自己有经济能力的时候，我会每年都带他们去进行一次全身体检，我要让他们活得更久，过得更快乐。另外，如果以后有了自己的家庭，我绝对不能成为一个工作狂(目<br>前看来，我很有可能成为一个工作狂)，答应老婆的事情一定要实现。我绝对不会让老婆住租来的房子，我绝对不会让怀孕的老婆挤公交车。</p>\n<p>现在的我，有一些朋友。希望以后的我不要滥交朋友，朋友绝对不是越多越好，我也希望以后的朋友能体谅我，因为虽然是我朋友，我也不大喜欢和朋友聊心里事的。但我绝对是<br>会把你们当作朋友的，要看我有没有把你当作朋友，找我借钱吧，哈哈！</p>\n<h2 id=\"7-多年以后，你真的会经常去旅游吗？\"><a href=\"#7-多年以后，你真的会经常去旅游吗？\" class=\"headerlink\" title=\"7.多年以后，你真的会经常去旅游吗？\"></a>7.多年以后，你真的会经常去旅游吗？</h2><p>今天正是国庆节，我又没出去玩，感觉大学时期出去旅游的基本上都是女生，男生要么宅在寝室要么宅在家里，反正几乎不会出去的。其实我也很想玩，但是找不到同伴(好吧，<br>我承认，我不大喜欢和男生一起出去玩)，不过以后有的是时间。很多人说，以后有时间才怪，以后上班什么的绝对没时间。我想，上班有没有时间不是老板能决定的，而是自己<br>。时间就像乳沟，挤一挤总会有的。当然，尽量别挑节假日，挑个小小的周末，来一个小小的自驾游，这才是生活啊！</p>\n<h2 id=\"8-多年以后，你真的会那么关注健康吗？\"><a href=\"#8-多年以后，你真的会那么关注健康吗？\" class=\"headerlink\" title=\"8.多年以后，你真的会那么关注健康吗？\"></a>8.多年以后，你真的会那么关注健康吗？</h2><p>现在的我不运动，是因为场地受限，以后自己上下班应该尽量走路或者跑步，身体好的时候，每天来个四五公里。每周给老婆做一个养生的菜，平时嘛做一些家常菜就够了。然后<br>，每年来一个全身体检。以前的我说不喝酒，现在已经破戒了。但现在的我依然坚持着不抽烟，以后也会吗？</p>\n<h2 id=\"9-多年以后，你会麻木吗？\"><a href=\"#9-多年以后，你会麻木吗？\" class=\"headerlink\" title=\"9.多年以后，你会麻木吗？\"></a>9.多年以后，你会麻木吗？</h2><p>我想，任何一个接受过教育的人都不应该像鲁迅《藤野先生》里面所写的那样麻木。但现实确实，很多人不敢做自己应该做的事情或者本身就认为那不是自己应该做的事情。多年<br>以后，面对香港、台湾问题，我还会这么认真地去分析吗，至少现在的我能够理性地认为，谁都有对有错，但某些人却从来不改变一下自己，反而变本加厉，我草。我爱国，但我<br>不爱党。多年以后，面对摔倒的老人，我会不会不计后果地去扶起来呢？现在的我面对这样的情况我都不知道，只能按照本能去做了，本能，好吧，我肯定会去扶的。</p>\n<h2 id=\"10-多年以后，你还能回答下面这些问题吗？\"><a href=\"#10-多年以后，你还能回答下面这些问题吗？\" class=\"headerlink\" title=\"10.多年以后，你还能回答下面这些问题吗？\"></a>10.多年以后，你还能回答下面这些问题吗？</h2><p>你爸爸的生日、妈妈的生日、老婆的生日、朋友的生日、自己的生日是什么时候？ 你的初恋是谁？ 你家乡在哪儿？ 你还记得当年的朋友都有哪些？你现在的朋友又有哪些？</p>\n<h1 id=\"最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\"><a href=\"#最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\" class=\"headerlink\" title=\"最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问\"></a>最后，老的时候，告诉自己，答应自己的，全部做到了。如果没有，那么请尽量别讨厌现在的自己。希望多年以后当有人问“你为什么和别人不一样”的时候，我依然能反问</h1><p>到：“我为什么要和别人一样？”</p>\n"},{"title":"Unitedstack(阿里云)中数据库无法远程登录解决办法","date":"2014-11-10T08:31:10.000Z","_content":"OK，昨晚熬夜到两点都没解决这个问题，不过还好昨晚至少知道了问题没有出现在配置上，而是IP有问题。今天写了一张工单给ustack的客服，终于知道答案了。\n\n**现象**：ustack的云服务器中的mysql数据库无法实现远程登录。\n\n**环境**：Ubuntu14.04(server) + ustack服务器\n\n**解决**：\n\n# 1.修改默认安全组\n\n阿里云没有安全组功能，默认不对端口进行限制\n\nustack的安全组是云主机虚拟网卡上行和下行流量的防火墙，就相当与其NAT的防火墙，而DigitalOcean没有这个东西，不信你可以试试`ifconfi\ng`，该命令在ustack可以看到两张网卡，但是却没有外网ip的网卡，而DigitalOcean则可以直接看到外网ip的网卡切没有内网的ip。以下是usta\nck的默认安全组：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/database-remote-login.png)  \n可以看到其上行流量是完全开放的，但是下行却只开放了几个端口，可以在这里面添加安全规则，也可以自己另外建立安全组，然后在虚拟网卡里面绑定到相应的虚拟网卡就可以\n生效了，然后重启一下服务器(没尝试过不重启会不会生效，反正我是重启了的)。\n\n# 2.MySQL授权root用户远程登录\n\n需要注意的是，最好不要用root用户远程登录，可自己新建一个用户用于远程登录，并限制一些权限，由于我这只是测试用的服务器，所以无所谓。首先在服务器中执行如下\n命令：\n\n\n\n    mysql -u root -p   # 登录MySQL\n    mysql> use mysql;\n    mysql> select host, user from user;   # 查看是否已经分配了权限\n    +-----------+------------------+\n    | host      | user             |\n    +-----------+------------------+\n    | 127.0.0.1 | root             |\n    | ::1       | root             |\n    | localhost | debian-sys-maint |\n    | localhost | root             |\n    | tech      | root             |\n    +-----------+------------------+\n    6 rows in set (0.00 sec)\n    mysql> grant all privileges on 星__.星__ to 'root'@'\\%' identified by 'password' with grant option;\n    mysql> select host, user from user;    # 结果中的\\%就表示所有IP都可以用root用户登录\n    +-----------+------------------+\n    | host      | user             |\n    +-----------+------------------+\n    | \\%         | root             |\n    | 127.0.0.1 | root             |\n    | ::1       | root             |\n    | localhost | debian-sys-maint |\n    | localhost | root             |\n    | tech      | root             |\n    +-----------+------------------+\n    6 rows in set (0.00 sec)\n\n\n#  3.修改MySQL侦听端口\n\n修改MySQL配置文件`/etc/mysql/my.cnf`，将`bind-address`后的值`localhost`修改为ustack服务器的内网IP(\n注意这里修改成的是内网ip，因为ustack是用的NAT方式转发过去的，它本身根本无法识别外网IP)\n\n阿里云需要将bind-address设置为服务器的外网IP\n\nDigitalOcean也要设置为外网IP(DO貌似没有内网IP)\n\n# 4.测试\n\n在另一台电脑上执行`mysql -h 外网IP -uroot -p`，这里的IP是外网IP，如果能访问就表示设置成功了。\n","source":"_posts/unitedstack-database-remote-login.md","raw":"---\ntitle: \"Unitedstack(阿里云)中数据库无法远程登录解决办法\"\ndate: 2014-11-10 16:31:10\ncategories: 编程之路\n---\nOK，昨晚熬夜到两点都没解决这个问题，不过还好昨晚至少知道了问题没有出现在配置上，而是IP有问题。今天写了一张工单给ustack的客服，终于知道答案了。\n\n**现象**：ustack的云服务器中的mysql数据库无法实现远程登录。\n\n**环境**：Ubuntu14.04(server) + ustack服务器\n\n**解决**：\n\n# 1.修改默认安全组\n\n阿里云没有安全组功能，默认不对端口进行限制\n\nustack的安全组是云主机虚拟网卡上行和下行流量的防火墙，就相当与其NAT的防火墙，而DigitalOcean没有这个东西，不信你可以试试`ifconfi\ng`，该命令在ustack可以看到两张网卡，但是却没有外网ip的网卡，而DigitalOcean则可以直接看到外网ip的网卡切没有内网的ip。以下是usta\nck的默认安全组：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/database-remote-login.png)  \n可以看到其上行流量是完全开放的，但是下行却只开放了几个端口，可以在这里面添加安全规则，也可以自己另外建立安全组，然后在虚拟网卡里面绑定到相应的虚拟网卡就可以\n生效了，然后重启一下服务器(没尝试过不重启会不会生效，反正我是重启了的)。\n\n# 2.MySQL授权root用户远程登录\n\n需要注意的是，最好不要用root用户远程登录，可自己新建一个用户用于远程登录，并限制一些权限，由于我这只是测试用的服务器，所以无所谓。首先在服务器中执行如下\n命令：\n\n\n\n    mysql -u root -p   # 登录MySQL\n    mysql> use mysql;\n    mysql> select host, user from user;   # 查看是否已经分配了权限\n    +-----------+------------------+\n    | host      | user             |\n    +-----------+------------------+\n    | 127.0.0.1 | root             |\n    | ::1       | root             |\n    | localhost | debian-sys-maint |\n    | localhost | root             |\n    | tech      | root             |\n    +-----------+------------------+\n    6 rows in set (0.00 sec)\n    mysql> grant all privileges on 星__.星__ to 'root'@'\\%' identified by 'password' with grant option;\n    mysql> select host, user from user;    # 结果中的\\%就表示所有IP都可以用root用户登录\n    +-----------+------------------+\n    | host      | user             |\n    +-----------+------------------+\n    | \\%         | root             |\n    | 127.0.0.1 | root             |\n    | ::1       | root             |\n    | localhost | debian-sys-maint |\n    | localhost | root             |\n    | tech      | root             |\n    +-----------+------------------+\n    6 rows in set (0.00 sec)\n\n\n#  3.修改MySQL侦听端口\n\n修改MySQL配置文件`/etc/mysql/my.cnf`，将`bind-address`后的值`localhost`修改为ustack服务器的内网IP(\n注意这里修改成的是内网ip，因为ustack是用的NAT方式转发过去的，它本身根本无法识别外网IP)\n\n阿里云需要将bind-address设置为服务器的外网IP\n\nDigitalOcean也要设置为外网IP(DO貌似没有内网IP)\n\n# 4.测试\n\n在另一台电脑上执行`mysql -h 外网IP -uroot -p`，这里的IP是外网IP，如果能访问就表示设置成功了。\n","slug":"unitedstack-database-remote-login","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pjl006s9vnz1y4vg88j","content":"<p>OK，昨晚熬夜到两点都没解决这个问题，不过还好昨晚至少知道了问题没有出现在配置上，而是IP有问题。今天写了一张工单给ustack的客服，终于知道答案了。</p>\n<p><strong>现象</strong>：ustack的云服务器中的mysql数据库无法实现远程登录。</p>\n<p><strong>环境</strong>：Ubuntu14.04(server) + ustack服务器</p>\n<p><strong>解决</strong>：</p>\n<h1 id=\"1-修改默认安全组\"><a href=\"#1-修改默认安全组\" class=\"headerlink\" title=\"1.修改默认安全组\"></a>1.修改默认安全组</h1><p>阿里云没有安全组功能，默认不对端口进行限制</p>\n<p>ustack的安全组是云主机虚拟网卡上行和下行流量的防火墙，就相当与其NAT的防火墙，而DigitalOcean没有这个东西，不信你可以试试<code>ifconfi\ng</code>，该命令在ustack可以看到两张网卡，但是却没有外网ip的网卡，而DigitalOcean则可以直接看到外网ip的网卡切没有内网的ip。以下是usta<br>ck的默认安全组：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/database-remote-login.png\" alt=\"\"><br>可以看到其上行流量是完全开放的，但是下行却只开放了几个端口，可以在这里面添加安全规则，也可以自己另外建立安全组，然后在虚拟网卡里面绑定到相应的虚拟网卡就可以<br>生效了，然后重启一下服务器(没尝试过不重启会不会生效，反正我是重启了的)。</p>\n<h1 id=\"2-MySQL授权root用户远程登录\"><a href=\"#2-MySQL授权root用户远程登录\" class=\"headerlink\" title=\"2.MySQL授权root用户远程登录\"></a>2.MySQL授权root用户远程登录</h1><p>需要注意的是，最好不要用root用户远程登录，可自己新建一个用户用于远程登录，并限制一些权限，由于我这只是测试用的服务器，所以无所谓。首先在服务器中执行如下<br>命令：</p>\n<pre><code>mysql -u root -p   # 登录MySQL\nmysql&gt; use mysql;\nmysql&gt; select host, user from user;   # 查看是否已经分配了权限\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| 127.0.0.1 | root             |\n| ::1       | root             |\n| localhost | debian-sys-maint |\n| localhost | root             |\n| tech      | root             |\n+-----------+------------------+\n6 rows in set (0.00 sec)\nmysql&gt; grant all privileges on 星__.星__ to &apos;root&apos;@&apos;\\%&apos; identified by &apos;password&apos; with grant option;\nmysql&gt; select host, user from user;    # 结果中的\\%就表示所有IP都可以用root用户登录\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| \\%         | root             |\n| 127.0.0.1 | root             |\n| ::1       | root             |\n| localhost | debian-sys-maint |\n| localhost | root             |\n| tech      | root             |\n+-----------+------------------+\n6 rows in set (0.00 sec)\n</code></pre><h1 id=\"3-修改MySQL侦听端口\"><a href=\"#3-修改MySQL侦听端口\" class=\"headerlink\" title=\"3.修改MySQL侦听端口\"></a>3.修改MySQL侦听端口</h1><p>修改MySQL配置文件<code>/etc/mysql/my.cnf</code>，将<code>bind-address</code>后的值<code>localhost</code>修改为ustack服务器的内网IP(<br>注意这里修改成的是内网ip，因为ustack是用的NAT方式转发过去的，它本身根本无法识别外网IP)</p>\n<p>阿里云需要将bind-address设置为服务器的外网IP</p>\n<p>DigitalOcean也要设置为外网IP(DO貌似没有内网IP)</p>\n<h1 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h1><p>在另一台电脑上执行<code>mysql -h 外网IP -uroot -p</code>，这里的IP是外网IP，如果能访问就表示设置成功了。</p>\n","excerpt":"","more":"<p>OK，昨晚熬夜到两点都没解决这个问题，不过还好昨晚至少知道了问题没有出现在配置上，而是IP有问题。今天写了一张工单给ustack的客服，终于知道答案了。</p>\n<p><strong>现象</strong>：ustack的云服务器中的mysql数据库无法实现远程登录。</p>\n<p><strong>环境</strong>：Ubuntu14.04(server) + ustack服务器</p>\n<p><strong>解决</strong>：</p>\n<h1 id=\"1-修改默认安全组\"><a href=\"#1-修改默认安全组\" class=\"headerlink\" title=\"1.修改默认安全组\"></a>1.修改默认安全组</h1><p>阿里云没有安全组功能，默认不对端口进行限制</p>\n<p>ustack的安全组是云主机虚拟网卡上行和下行流量的防火墙，就相当与其NAT的防火墙，而DigitalOcean没有这个东西，不信你可以试试<code>ifconfi\ng</code>，该命令在ustack可以看到两张网卡，但是却没有外网ip的网卡，而DigitalOcean则可以直接看到外网ip的网卡切没有内网的ip。以下是usta<br>ck的默认安全组：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/database-remote-login.png\" alt=\"\"><br>可以看到其上行流量是完全开放的，但是下行却只开放了几个端口，可以在这里面添加安全规则，也可以自己另外建立安全组，然后在虚拟网卡里面绑定到相应的虚拟网卡就可以<br>生效了，然后重启一下服务器(没尝试过不重启会不会生效，反正我是重启了的)。</p>\n<h1 id=\"2-MySQL授权root用户远程登录\"><a href=\"#2-MySQL授权root用户远程登录\" class=\"headerlink\" title=\"2.MySQL授权root用户远程登录\"></a>2.MySQL授权root用户远程登录</h1><p>需要注意的是，最好不要用root用户远程登录，可自己新建一个用户用于远程登录，并限制一些权限，由于我这只是测试用的服务器，所以无所谓。首先在服务器中执行如下<br>命令：</p>\n<pre><code>mysql -u root -p   # 登录MySQL\nmysql&gt; use mysql;\nmysql&gt; select host, user from user;   # 查看是否已经分配了权限\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| 127.0.0.1 | root             |\n| ::1       | root             |\n| localhost | debian-sys-maint |\n| localhost | root             |\n| tech      | root             |\n+-----------+------------------+\n6 rows in set (0.00 sec)\nmysql&gt; grant all privileges on 星__.星__ to &apos;root&apos;@&apos;\\%&apos; identified by &apos;password&apos; with grant option;\nmysql&gt; select host, user from user;    # 结果中的\\%就表示所有IP都可以用root用户登录\n+-----------+------------------+\n| host      | user             |\n+-----------+------------------+\n| \\%         | root             |\n| 127.0.0.1 | root             |\n| ::1       | root             |\n| localhost | debian-sys-maint |\n| localhost | root             |\n| tech      | root             |\n+-----------+------------------+\n6 rows in set (0.00 sec)\n</code></pre><h1 id=\"3-修改MySQL侦听端口\"><a href=\"#3-修改MySQL侦听端口\" class=\"headerlink\" title=\"3.修改MySQL侦听端口\"></a>3.修改MySQL侦听端口</h1><p>修改MySQL配置文件<code>/etc/mysql/my.cnf</code>，将<code>bind-address</code>后的值<code>localhost</code>修改为ustack服务器的内网IP(<br>注意这里修改成的是内网ip，因为ustack是用的NAT方式转发过去的，它本身根本无法识别外网IP)</p>\n<p>阿里云需要将bind-address设置为服务器的外网IP</p>\n<p>DigitalOcean也要设置为外网IP(DO貌似没有内网IP)</p>\n<h1 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h1><p>在另一台电脑上执行<code>mysql -h 外网IP -uroot -p</code>，这里的IP是外网IP，如果能访问就表示设置成功了。</p>\n"},{"title":"两年，我的编程路","date":"2013-09-26T11:24:25.000Z","_content":"2011年 人生第一个Hello World，用C语言写的  \n2013年初开始学习C++，不过忙着过四级去了，所以一直到暑假才学完\n\n2013年夏 python Delphi 汇编 Win32汇编\n\n至今保存在电脑里的代码大约有2万多行\n\n下面是几个Hello World！\n\nC语言：或许大多数人的第一门编程语言都是C语言，面向过程的语言，是以后学习其它语言的基础，初学时我看的是谭浩强的书，很多人把他的书贬低得一无是处，但我觉得他\n的书细节讲得好，更重要的是适合中国国情，也适合在中国环境下长大的孩子的思维习惯  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_0.jpg)  \nC++：第一门面向对象的编程语言（好吧，虽然我还没对象），之所以现在不学习Java一是因为这学期没什么时间，二是因为不知道为什么就讨厌Java，就想讨厌做网\n站一样，反正很多人都追的东西我就不喜欢，不过C++真的是一个无底洞啊，感觉永远也学不完  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_1.jpg)  \nPython：一门面向对象的解释型语言，在某些方面也可以算是一门脚本语言，学这门语言主要是因为在编程社区看到的一句话“人生苦短，我用Python”，不知道是\n哪位外国人说的了，原话应该是“Life is short, you need Python”，正在学，还没学完呢  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_2.jpg)  \nDelphi（懒得拉窗口了，直接用Windows API）：跟VB和VC是差不多的，都算是可视化编程环境，直接拉空间就可以做出软件了，它用的是Pascal语\n言，不过由于其坚持收费的性质，越来越不如VB和VC普及了，其广告是“聪明的程序员用Delphi，真正的程序员用C++”，好吧  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_3.jpg)  \n汇编（好久没写了）：由于win7对masm支持不好，所以在winxp环境下写的，虽然上个月才学完，但这个月太忙了，几乎没写了，怎么说呢，学汇编至少现在我不能\n那他来写什么程序，因为现在还没碰到系统底层的东西，能看到那些语句就行了  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_4.jpg)  \n另外，给自己设计了一个logo（草帽+二进制，太有创意了）：要给每一个奇迹打上我的logo\n\n\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_5.jpg)  \n其实这些语言都只学了基础部分，还不会运用到实际中，不过今年是没时间了，明年再说吧，我知道，语言只是工具，代码只是途径，考试只是方法，真正要学到的是思维能力，\n而这学期我明显感觉遇到很多问题思维跟不上了，所以去研究算法导论，这本全世界最权威的算法课程\n\n这学期的主要目标是六级和静态破解，正在学习python、win32汇编和OD\n\n无论怎样，坚持自己的忍道，Change my world by program!\n","source":"_posts/two-years-coding-life.md","raw":"---\ntitle: \"两年，我的编程路\"\ndate: 2013-09-26 19:24:25\ncategories: 边走边想\n---\n2011年 人生第一个Hello World，用C语言写的  \n2013年初开始学习C++，不过忙着过四级去了，所以一直到暑假才学完\n\n2013年夏 python Delphi 汇编 Win32汇编\n\n至今保存在电脑里的代码大约有2万多行\n\n下面是几个Hello World！\n\nC语言：或许大多数人的第一门编程语言都是C语言，面向过程的语言，是以后学习其它语言的基础，初学时我看的是谭浩强的书，很多人把他的书贬低得一无是处，但我觉得他\n的书细节讲得好，更重要的是适合中国国情，也适合在中国环境下长大的孩子的思维习惯  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_0.jpg)  \nC++：第一门面向对象的编程语言（好吧，虽然我还没对象），之所以现在不学习Java一是因为这学期没什么时间，二是因为不知道为什么就讨厌Java，就想讨厌做网\n站一样，反正很多人都追的东西我就不喜欢，不过C++真的是一个无底洞啊，感觉永远也学不完  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_1.jpg)  \nPython：一门面向对象的解释型语言，在某些方面也可以算是一门脚本语言，学这门语言主要是因为在编程社区看到的一句话“人生苦短，我用Python”，不知道是\n哪位外国人说的了，原话应该是“Life is short, you need Python”，正在学，还没学完呢  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_2.jpg)  \nDelphi（懒得拉窗口了，直接用Windows API）：跟VB和VC是差不多的，都算是可视化编程环境，直接拉空间就可以做出软件了，它用的是Pascal语\n言，不过由于其坚持收费的性质，越来越不如VB和VC普及了，其广告是“聪明的程序员用Delphi，真正的程序员用C++”，好吧  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_3.jpg)  \n汇编（好久没写了）：由于win7对masm支持不好，所以在winxp环境下写的，虽然上个月才学完，但这个月太忙了，几乎没写了，怎么说呢，学汇编至少现在我不能\n那他来写什么程序，因为现在还没碰到系统底层的东西，能看到那些语句就行了  \n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_4.jpg)  \n另外，给自己设计了一个logo（草帽+二进制，太有创意了）：要给每一个奇迹打上我的logo\n\n\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_5.jpg)  \n其实这些语言都只学了基础部分，还不会运用到实际中，不过今年是没时间了，明年再说吧，我知道，语言只是工具，代码只是途径，考试只是方法，真正要学到的是思维能力，\n而这学期我明显感觉遇到很多问题思维跟不上了，所以去研究算法导论，这本全世界最权威的算法课程\n\n这学期的主要目标是六级和静态破解，正在学习python、win32汇编和OD\n\n无论怎样，坚持自己的忍道，Change my world by program!\n","slug":"two-years-coding-life","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pjt006u9vnzq6m4q818","content":"<p>2011年 人生第一个Hello World，用C语言写的<br>2013年初开始学习C++，不过忙着过四级去了，所以一直到暑假才学完</p>\n<p>2013年夏 python Delphi 汇编 Win32汇编</p>\n<p>至今保存在电脑里的代码大约有2万多行</p>\n<p>下面是几个Hello World！</p>\n<p>C语言：或许大多数人的第一门编程语言都是C语言，面向过程的语言，是以后学习其它语言的基础，初学时我看的是谭浩强的书，很多人把他的书贬低得一无是处，但我觉得他<br>的书细节讲得好，更重要的是适合中国国情，也适合在中国环境下长大的孩子的思维习惯<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_0.jpg\" alt=\"\"><br>C++：第一门面向对象的编程语言（好吧，虽然我还没对象），之所以现在不学习Java一是因为这学期没什么时间，二是因为不知道为什么就讨厌Java，就想讨厌做网<br>站一样，反正很多人都追的东西我就不喜欢，不过C++真的是一个无底洞啊，感觉永远也学不完<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_1.jpg\" alt=\"\"><br>Python：一门面向对象的解释型语言，在某些方面也可以算是一门脚本语言，学这门语言主要是因为在编程社区看到的一句话“人生苦短，我用Python”，不知道是<br>哪位外国人说的了，原话应该是“Life is short, you need Python”，正在学，还没学完呢<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_2.jpg\" alt=\"\"><br>Delphi（懒得拉窗口了，直接用Windows API）：跟VB和VC是差不多的，都算是可视化编程环境，直接拉空间就可以做出软件了，它用的是Pascal语<br>言，不过由于其坚持收费的性质，越来越不如VB和VC普及了，其广告是“聪明的程序员用Delphi，真正的程序员用C++”，好吧<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_3.jpg\" alt=\"\"><br>汇编（好久没写了）：由于win7对masm支持不好，所以在winxp环境下写的，虽然上个月才学完，但这个月太忙了，几乎没写了，怎么说呢，学汇编至少现在我不能<br>那他来写什么程序，因为现在还没碰到系统底层的东西，能看到那些语句就行了<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_4.jpg\" alt=\"\"><br>另外，给自己设计了一个logo（草帽+二进制，太有创意了）：要给每一个奇迹打上我的logo</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_5.jpg\" alt=\"\"><br>其实这些语言都只学了基础部分，还不会运用到实际中，不过今年是没时间了，明年再说吧，我知道，语言只是工具，代码只是途径，考试只是方法，真正要学到的是思维能力，<br>而这学期我明显感觉遇到很多问题思维跟不上了，所以去研究算法导论，这本全世界最权威的算法课程</p>\n<p>这学期的主要目标是六级和静态破解，正在学习python、win32汇编和OD</p>\n<p>无论怎样，坚持自己的忍道，Change my world by program!</p>\n","excerpt":"","more":"<p>2011年 人生第一个Hello World，用C语言写的<br>2013年初开始学习C++，不过忙着过四级去了，所以一直到暑假才学完</p>\n<p>2013年夏 python Delphi 汇编 Win32汇编</p>\n<p>至今保存在电脑里的代码大约有2万多行</p>\n<p>下面是几个Hello World！</p>\n<p>C语言：或许大多数人的第一门编程语言都是C语言，面向过程的语言，是以后学习其它语言的基础，初学时我看的是谭浩强的书，很多人把他的书贬低得一无是处，但我觉得他<br>的书细节讲得好，更重要的是适合中国国情，也适合在中国环境下长大的孩子的思维习惯<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_0.jpg\" alt=\"\"><br>C++：第一门面向对象的编程语言（好吧，虽然我还没对象），之所以现在不学习Java一是因为这学期没什么时间，二是因为不知道为什么就讨厌Java，就想讨厌做网<br>站一样，反正很多人都追的东西我就不喜欢，不过C++真的是一个无底洞啊，感觉永远也学不完<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_1.jpg\" alt=\"\"><br>Python：一门面向对象的解释型语言，在某些方面也可以算是一门脚本语言，学这门语言主要是因为在编程社区看到的一句话“人生苦短，我用Python”，不知道是<br>哪位外国人说的了，原话应该是“Life is short, you need Python”，正在学，还没学完呢<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_2.jpg\" alt=\"\"><br>Delphi（懒得拉窗口了，直接用Windows API）：跟VB和VC是差不多的，都算是可视化编程环境，直接拉空间就可以做出软件了，它用的是Pascal语<br>言，不过由于其坚持收费的性质，越来越不如VB和VC普及了，其广告是“聪明的程序员用Delphi，真正的程序员用C++”，好吧<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_3.jpg\" alt=\"\"><br>汇编（好久没写了）：由于win7对masm支持不好，所以在winxp环境下写的，虽然上个月才学完，但这个月太忙了，几乎没写了，怎么说呢，学汇编至少现在我不能<br>那他来写什么程序，因为现在还没碰到系统底层的东西，能看到那些语句就行了<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_4.jpg\" alt=\"\"><br>另外，给自己设计了一个logo（草帽+二进制，太有创意了）：要给每一个奇迹打上我的logo</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/two-years-coding-life_5.jpg\" alt=\"\"><br>其实这些语言都只学了基础部分，还不会运用到实际中，不过今年是没时间了，明年再说吧，我知道，语言只是工具，代码只是途径，考试只是方法，真正要学到的是思维能力，<br>而这学期我明显感觉遇到很多问题思维跟不上了，所以去研究算法导论，这本全世界最权威的算法课程</p>\n<p>这学期的主要目标是六级和静态破解，正在学习python、win32汇编和OD</p>\n<p>无论怎样，坚持自己的忍道，Change my world by program!</p>\n"},{"title":"VirtualBox虚拟机(windows系列)与主机共享文件的方法","date":"2014-10-30T00:36:28.000Z","_content":"在我的印象里，虚拟机在安装增强功能后是可以直接互相拖放文件的，但不知道为什么最近几个月我安装的都不行啊，所以这里记录一下通过映射来共享文件的方法。\n\n# 虚拟Linux Server\n\n  1. 和win一样，点击虚拟机的_设备->安装增强功能_\n  2. 不同的是linux_server 上面不会自动弹出安装界面，而是需要挂载在安装，执行如下命令：\n\n        $ sudo mount /dev/cdrom /media/cdrom\n    block device /dev/sr0 is write-protected, mounting read-only\n    $ cd /media/cdrom\n    $ sudo ./VBoxLinuxAdditions.run\n\n  3. 在设置里面添加共享文件夹：   \n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_0.jpg)  \n\n  4. 记住上面的共享的名称，比如company，那么在linux_server里面就可以看到_/media/sf_company_这一个目录。\n  5. 如果在linux_server往那个目录添加东西时出现_Read-only_错误，可能是VirtualBox默认禁止在共享目录里建立链接([stackoverflow解答](http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error \"Link: http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error\" ))，此时应该执行如下命令，其中，VM_NAME表示你的虚拟机的名称，SHARE_NAME表示共享的名称(不加前缀sf_) 如果是windows主机，在cmd里执行：\n\n        VBoxManage.exe setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1\n\n如果是linux主机，在shell里执行：\n\n\n        VBoxManage setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1\n\n# 虚拟Windows\n\n### 1.还是要安装增强功能\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_1.png)  \n\n安装完成后关机，之所以不重启，是因为还有要设置的地方。\n\n### 2.设置共享文件夹\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_2.png)  \n我一般喜欢把共享文件夹设置为固定分配、自动挂载、完全访问权限。\n\n### 3.添加映射\n\n[![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_3.png)  \n](http://haofly.net/wp-content/uploads/2014/10/virtualbox-share-\nfile-4.png)![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-\nshare-file_4.png)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_5.png)  \n点击浏览，找到文件夹，确定\n\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_6.png)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_7.png)  \n成功！\n","source":"_posts/virtualbox-guest-host-share-file.md","raw":"---\ntitle: \"VirtualBox虚拟机(windows系列)与主机共享文件的方法\"\ndate: 2014-10-30 08:36:28\ncategories: 编程之路\n---\n在我的印象里，虚拟机在安装增强功能后是可以直接互相拖放文件的，但不知道为什么最近几个月我安装的都不行啊，所以这里记录一下通过映射来共享文件的方法。\n\n# 虚拟Linux Server\n\n  1. 和win一样，点击虚拟机的_设备->安装增强功能_\n  2. 不同的是linux_server 上面不会自动弹出安装界面，而是需要挂载在安装，执行如下命令：\n\n        $ sudo mount /dev/cdrom /media/cdrom\n    block device /dev/sr0 is write-protected, mounting read-only\n    $ cd /media/cdrom\n    $ sudo ./VBoxLinuxAdditions.run\n\n  3. 在设置里面添加共享文件夹：   \n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_0.jpg)  \n\n  4. 记住上面的共享的名称，比如company，那么在linux_server里面就可以看到_/media/sf_company_这一个目录。\n  5. 如果在linux_server往那个目录添加东西时出现_Read-only_错误，可能是VirtualBox默认禁止在共享目录里建立链接([stackoverflow解答](http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error \"Link: http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error\" ))，此时应该执行如下命令，其中，VM_NAME表示你的虚拟机的名称，SHARE_NAME表示共享的名称(不加前缀sf_) 如果是windows主机，在cmd里执行：\n\n        VBoxManage.exe setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1\n\n如果是linux主机，在shell里执行：\n\n\n        VBoxManage setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1\n\n# 虚拟Windows\n\n### 1.还是要安装增强功能\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_1.png)  \n\n安装完成后关机，之所以不重启，是因为还有要设置的地方。\n\n### 2.设置共享文件夹\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_2.png)  \n我一般喜欢把共享文件夹设置为固定分配、自动挂载、完全访问权限。\n\n### 3.添加映射\n\n[![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_3.png)  \n](http://haofly.net/wp-content/uploads/2014/10/virtualbox-share-\nfile-4.png)![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-\nshare-file_4.png)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_5.png)  \n点击浏览，找到文件夹，确定\n\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_6.png)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_7.png)  \n成功！\n","slug":"virtualbox-guest-host-share-file","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pl600729vnzov1vzqyo","content":"<p>在我的印象里，虚拟机在安装增强功能后是可以直接互相拖放文件的，但不知道为什么最近几个月我安装的都不行啊，所以这里记录一下通过映射来共享文件的方法。</p>\n<h1 id=\"虚拟Linux-Server\"><a href=\"#虚拟Linux-Server\" class=\"headerlink\" title=\"虚拟Linux Server\"></a>虚拟Linux Server</h1><ol>\n<li>和win一样，点击虚拟机的<em>设备-&gt;安装增强功能</em></li>\n<li><p>不同的是linux_server 上面不会自动弹出安装界面，而是需要挂载在安装，执行如下命令：</p>\n<p>   $ sudo mount /dev/cdrom /media/cdrom<br>block device /dev/sr0 is write-protected, mounting read-only<br>$ cd /media/cdrom<br>$ sudo ./VBoxLinuxAdditions.run</p>\n</li>\n<li><p>在设置里面添加共享文件夹：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_0.jpg\" alt=\"\">  </p>\n</li>\n<li><p>记住上面的共享的名称，比如company，那么在linux<em>server里面就可以看到</em>/media/sf<em>company</em>这一个目录。</p>\n</li>\n<li><p>如果在linux_server往那个目录添加东西时出现<em>Read-only</em>错误，可能是VirtualBox默认禁止在共享目录里建立链接(<a href=\"http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error\" title=\"Link: http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error\" target=\"_blank\" rel=\"external\">stackoverflow解答</a>)，此时应该执行如下命令，其中，VM_NAME表示你的虚拟机的名称，SHARE<em>NAME表示共享的名称(不加前缀sf</em>) 如果是windows主机，在cmd里执行：</p>\n<p>   VBoxManage.exe setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1</p>\n</li>\n</ol>\n<p>如果是linux主机，在shell里执行：</p>\n<pre><code>VBoxManage setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1\n</code></pre><h1 id=\"虚拟Windows\"><a href=\"#虚拟Windows\" class=\"headerlink\" title=\"虚拟Windows\"></a>虚拟Windows</h1><h3 id=\"1-还是要安装增强功能\"><a href=\"#1-还是要安装增强功能\" class=\"headerlink\" title=\"1.还是要安装增强功能\"></a>1.还是要安装增强功能</h3><p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_1.png\" alt=\"\">  </p>\n<p>安装完成后关机，之所以不重启，是因为还有要设置的地方。</p>\n<h3 id=\"2-设置共享文件夹\"><a href=\"#2-设置共享文件夹\" class=\"headerlink\" title=\"2.设置共享文件夹\"></a>2.设置共享文件夹</h3><p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_2.png\" alt=\"\"><br>我一般喜欢把共享文件夹设置为固定分配、自动挂载、完全访问权限。</p>\n<h3 id=\"3-添加映射\"><a href=\"#3-添加映射\" class=\"headerlink\" title=\"3.添加映射\"></a>3.添加映射</h3><p><a href=\"http://haofly.net/wp-content/uploads/2014/10/virtualbox-share-\nfile-4.png\"><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_3.png\" alt=\"\">  \n</a><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-\nshare-file_4.png\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_5.png\" alt=\"\"><br>点击浏览，找到文件夹，确定</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_6.png\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_7.png\" alt=\"\"><br>成功！</p>\n","excerpt":"","more":"<p>在我的印象里，虚拟机在安装增强功能后是可以直接互相拖放文件的，但不知道为什么最近几个月我安装的都不行啊，所以这里记录一下通过映射来共享文件的方法。</p>\n<h1 id=\"虚拟Linux-Server\"><a href=\"#虚拟Linux-Server\" class=\"headerlink\" title=\"虚拟Linux Server\"></a>虚拟Linux Server</h1><ol>\n<li>和win一样，点击虚拟机的<em>设备-&gt;安装增强功能</em></li>\n<li><p>不同的是linux_server 上面不会自动弹出安装界面，而是需要挂载在安装，执行如下命令：</p>\n<p>   $ sudo mount /dev/cdrom /media/cdrom<br>block device /dev/sr0 is write-protected, mounting read-only<br>$ cd /media/cdrom<br>$ sudo ./VBoxLinuxAdditions.run</p>\n</li>\n<li><p>在设置里面添加共享文件夹：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_0.jpg\" alt=\"\">  </p>\n</li>\n<li><p>记住上面的共享的名称，比如company，那么在linux<em>server里面就可以看到</em>/media/sf<em>company</em>这一个目录。</p>\n</li>\n<li><p>如果在linux_server往那个目录添加东西时出现<em>Read-only</em>错误，可能是VirtualBox默认禁止在共享目录里建立链接(<a href=\"http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error\" title=\"Link: http://stackoverflow.com/questions/16724543/executing-collectstatic-on-vbox-shared-folder-gives-read-only-error\">stackoverflow解答</a>)，此时应该执行如下命令，其中，VM_NAME表示你的虚拟机的名称，SHARE<em>NAME表示共享的名称(不加前缀sf</em>) 如果是windows主机，在cmd里执行：</p>\n<p>   VBoxManage.exe setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1</p>\n</li>\n</ol>\n<p>如果是linux主机，在shell里执行：</p>\n<pre><code>VBoxManage setextradata VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/SHARE_NAME 1\n</code></pre><h1 id=\"虚拟Windows\"><a href=\"#虚拟Windows\" class=\"headerlink\" title=\"虚拟Windows\"></a>虚拟Windows</h1><h3 id=\"1-还是要安装增强功能\"><a href=\"#1-还是要安装增强功能\" class=\"headerlink\" title=\"1.还是要安装增强功能\"></a>1.还是要安装增强功能</h3><p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_1.png\" alt=\"\">  </p>\n<p>安装完成后关机，之所以不重启，是因为还有要设置的地方。</p>\n<h3 id=\"2-设置共享文件夹\"><a href=\"#2-设置共享文件夹\" class=\"headerlink\" title=\"2.设置共享文件夹\"></a>2.设置共享文件夹</h3><p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_2.png\" alt=\"\"><br>我一般喜欢把共享文件夹设置为固定分配、自动挂载、完全访问权限。</p>\n<h3 id=\"3-添加映射\"><a href=\"#3-添加映射\" class=\"headerlink\" title=\"3.添加映射\"></a>3.添加映射</h3><p><a href=\"http://haofly.net/wp-content/uploads/2014/10/virtualbox-share-\nfile-4.png\"><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_3.png\" alt=\"\">  \n</a><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-\nshare-file_4.png\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_5.png\" alt=\"\"><br>点击浏览，找到文件夹，确定</p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_6.png\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualbox-guest-host-share-\nfile_7.png\" alt=\"\"><br>成功！</p>\n"},{"title":"使用Virtualenv搭建Python3的Django环境","date":"2015-01-24T15:05:39.000Z","_content":"Virtualenv可用于创建独立的Python环境，在这些环境里面可以选择不同的Python版本或者不同的Packages，并且可以在没有root权限的情\n况下在环境里安装新套件，互相不会产生任何的影响。  \n\n以下就是使用Virtualenv搭建Python3.4+Django1.7.4的过程：\n\n## 准备工作\n\n安装Virtualenv和Python3(因为有些Linux发行版默认没有安装Python3的)\n\n\n\n    sudo pip install virtualenv\n    sudo apt-get install python3\n\n## 建立一个新的工作环境\n\n\n\n    virtualenv --no-site-packages --python=python3.4 test_env\n    如果出现The executable python does not exist 错误，那么可以这样使用\n    virtualenv --no-site-packages --python=3.4 test_env\n\n\n其中，--no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净\n\\\\--python=python3.4指定Python的版本未系统已经安装了的Python3.4 test_env是建立的环境的名称\n\n## 进入环境测试并安装Django\n\n使用`source test_env/bin/activate`命令进入开发环境，然后查看Python版本，再使用`pip install\ndjango`安装django\n\n\n\n    ➜  virtualenv    \n\n    ➜  virtualenv  ls\n    test_env\n    ➜  virtualenv  source test_env/bin/activate  # 如果是windows则是source test_env/Script/activate\n    (test_env)➜  virtualenv  python\n    Python 3.4.0 (default, Apr 11 2014, 13:05:11)\n    [GCC 4.8.2] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import django\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named 'django'\n    >>> exit()\n    (test_env)➜  virtualenv  pip install django\n    Collecting django\n      Using cached Django-1.7.3-py2.py3-none-any.whl\n    Installing collected packages: django\n\n\n\n\n    Successfully installed django-1.7.3\n    (test_env)➜  virtualenv  python\n    Python 3.4.0 (default, Apr 11 2014, 13:05:11)\n    [GCC 4.8.2] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import django\n    >>>\n\n\n`import django`没有发生错误，证明已经成功安装Django了\n\n## 开始第一个Django app\n\n\n\n    (test_env)➜  virtualenv  django-admin startproject mysite\n    (test_env)➜  virtualenv  ls\n    mysite  test_env\n    (test_env)➜  virtualenv  cd mysite     \n\n    (test_env)➜  mysite  python manage.py runserver\n    Performing system checks...\n\n\n\n\n    System check identified no issues (0 silenced).\n\n\n\n\n    You have unapplied migrations; your app may not work properly until they are applied.\n    Run 'python manage.py migrate' to apply them.\n\n\n\n\n    January 24, 2015 - 14:52:09\n    Django version 1.7.3, using settings 'mysite.settings'\n    Starting development server at http://127.0.0.1:8000/\n    Quit the server with CONTROL-C.\n    [24/Jan/2015 14:52:17] \"GET / HTTP/1.1\" 200 1759\n\n\n\n\n需要注意的是，新建的项目的文件夹mysite并不是仅仅存在在那个虚拟环境里，而是在实际的文件中，只是运行它使用的是虚拟的环境而已，不信呆会儿退出该虚拟环境后\n，你可以用实体环境在该目录下测试。\n\n现在就可以直接访问<http://127.0.0.1:8000，不需要端口映射，可直接访问，如下>：\n\n## ![](http://7xnc86.com1.z0.glb.clouddn.com/virtualenv-python-django_0.jpg)  \n\n## 退出虚拟环境\n\n最后退出，直接在该环境中使用`deactivate`命令即可退出\n","source":"_posts/virtualenv-python-django.md","raw":"---\ntitle: \"使用Virtualenv搭建Python3的Django环境\"\ndate: 2015-01-24 23:05:39\ncategories: 编程之路\n---\nVirtualenv可用于创建独立的Python环境，在这些环境里面可以选择不同的Python版本或者不同的Packages，并且可以在没有root权限的情\n况下在环境里安装新套件，互相不会产生任何的影响。  \n\n以下就是使用Virtualenv搭建Python3.4+Django1.7.4的过程：\n\n## 准备工作\n\n安装Virtualenv和Python3(因为有些Linux发行版默认没有安装Python3的)\n\n\n\n    sudo pip install virtualenv\n    sudo apt-get install python3\n\n## 建立一个新的工作环境\n\n\n\n    virtualenv --no-site-packages --python=python3.4 test_env\n    如果出现The executable python does not exist 错误，那么可以这样使用\n    virtualenv --no-site-packages --python=3.4 test_env\n\n\n其中，--no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净\n\\\\--python=python3.4指定Python的版本未系统已经安装了的Python3.4 test_env是建立的环境的名称\n\n## 进入环境测试并安装Django\n\n使用`source test_env/bin/activate`命令进入开发环境，然后查看Python版本，再使用`pip install\ndjango`安装django\n\n\n\n    ➜  virtualenv    \n\n    ➜  virtualenv  ls\n    test_env\n    ➜  virtualenv  source test_env/bin/activate  # 如果是windows则是source test_env/Script/activate\n    (test_env)➜  virtualenv  python\n    Python 3.4.0 (default, Apr 11 2014, 13:05:11)\n    [GCC 4.8.2] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import django\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named 'django'\n    >>> exit()\n    (test_env)➜  virtualenv  pip install django\n    Collecting django\n      Using cached Django-1.7.3-py2.py3-none-any.whl\n    Installing collected packages: django\n\n\n\n\n    Successfully installed django-1.7.3\n    (test_env)➜  virtualenv  python\n    Python 3.4.0 (default, Apr 11 2014, 13:05:11)\n    [GCC 4.8.2] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import django\n    >>>\n\n\n`import django`没有发生错误，证明已经成功安装Django了\n\n## 开始第一个Django app\n\n\n\n    (test_env)➜  virtualenv  django-admin startproject mysite\n    (test_env)➜  virtualenv  ls\n    mysite  test_env\n    (test_env)➜  virtualenv  cd mysite     \n\n    (test_env)➜  mysite  python manage.py runserver\n    Performing system checks...\n\n\n\n\n    System check identified no issues (0 silenced).\n\n\n\n\n    You have unapplied migrations; your app may not work properly until they are applied.\n    Run 'python manage.py migrate' to apply them.\n\n\n\n\n    January 24, 2015 - 14:52:09\n    Django version 1.7.3, using settings 'mysite.settings'\n    Starting development server at http://127.0.0.1:8000/\n    Quit the server with CONTROL-C.\n    [24/Jan/2015 14:52:17] \"GET / HTTP/1.1\" 200 1759\n\n\n\n\n需要注意的是，新建的项目的文件夹mysite并不是仅仅存在在那个虚拟环境里，而是在实际的文件中，只是运行它使用的是虚拟的环境而已，不信呆会儿退出该虚拟环境后\n，你可以用实体环境在该目录下测试。\n\n现在就可以直接访问<http://127.0.0.1:8000，不需要端口映射，可直接访问，如下>：\n\n## ![](http://7xnc86.com1.z0.glb.clouddn.com/virtualenv-python-django_0.jpg)  \n\n## 退出虚拟环境\n\n最后退出，直接在该环境中使用`deactivate`命令即可退出\n","slug":"virtualenv-python-django","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pla00739vnz7rrtzavk","content":"<p>Virtualenv可用于创建独立的Python环境，在这些环境里面可以选择不同的Python版本或者不同的Packages，并且可以在没有root权限的情<br>况下在环境里安装新套件，互相不会产生任何的影响。  </p>\n<p>以下就是使用Virtualenv搭建Python3.4+Django1.7.4的过程：</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>安装Virtualenv和Python3(因为有些Linux发行版默认没有安装Python3的)</p>\n<pre><code>sudo pip install virtualenv\nsudo apt-get install python3\n</code></pre><h2 id=\"建立一个新的工作环境\"><a href=\"#建立一个新的工作环境\" class=\"headerlink\" title=\"建立一个新的工作环境\"></a>建立一个新的工作环境</h2><pre><code>virtualenv --no-site-packages --python=python3.4 test_env\n如果出现The executable python does not exist 错误，那么可以这样使用\nvirtualenv --no-site-packages --python=3.4 test_env\n</code></pre><p>其中，–no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净<br>\\–python=python3.4指定Python的版本未系统已经安装了的Python3.4 test_env是建立的环境的名称</p>\n<h2 id=\"进入环境测试并安装Django\"><a href=\"#进入环境测试并安装Django\" class=\"headerlink\" title=\"进入环境测试并安装Django\"></a>进入环境测试并安装Django</h2><p>使用<code>source test_env/bin/activate</code>命令进入开发环境，然后查看Python版本，再使用<code>pip install\ndjango</code>安装django</p>\n<pre><code>➜  virtualenv    \n\n➜  virtualenv  ls\ntest_env\n➜  virtualenv  source test_env/bin/activate  # 如果是windows则是source test_env/Script/activate\n(test_env)➜  virtualenv  python\nPython 3.4.0 (default, Apr 11 2014, 13:05:11)\n[GCC 4.8.2] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import django\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nImportError: No module named &apos;django&apos;\n&gt;&gt;&gt; exit()\n(test_env)➜  virtualenv  pip install django\nCollecting django\n  Using cached Django-1.7.3-py2.py3-none-any.whl\nInstalling collected packages: django\n\n\n\n\nSuccessfully installed django-1.7.3\n(test_env)➜  virtualenv  python\nPython 3.4.0 (default, Apr 11 2014, 13:05:11)\n[GCC 4.8.2] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import django\n&gt;&gt;&gt;\n</code></pre><p><code>import django</code>没有发生错误，证明已经成功安装Django了</p>\n<h2 id=\"开始第一个Django-app\"><a href=\"#开始第一个Django-app\" class=\"headerlink\" title=\"开始第一个Django app\"></a>开始第一个Django app</h2><pre><code>(test_env)➜  virtualenv  django-admin startproject mysite\n(test_env)➜  virtualenv  ls\nmysite  test_env\n(test_env)➜  virtualenv  cd mysite     \n\n(test_env)➜  mysite  python manage.py runserver\nPerforming system checks...\n\n\n\n\nSystem check identified no issues (0 silenced).\n\n\n\n\nYou have unapplied migrations; your app may not work properly until they are applied.\nRun &apos;python manage.py migrate&apos; to apply them.\n\n\n\n\nJanuary 24, 2015 - 14:52:09\nDjango version 1.7.3, using settings &apos;mysite.settings&apos;\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n[24/Jan/2015 14:52:17] &quot;GET / HTTP/1.1&quot; 200 1759\n</code></pre><p>需要注意的是，新建的项目的文件夹mysite并不是仅仅存在在那个虚拟环境里，而是在实际的文件中，只是运行它使用的是虚拟的环境而已，不信呆会儿退出该虚拟环境后<br>，你可以用实体环境在该目录下测试。</p>\n<p>现在就可以直接访问<a href=\"http://127.0.0.1:8000，不需要端口映射，可直接访问，如下\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8000，不需要端口映射，可直接访问，如下</a>：</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualenv-python-django_0.jpg\" alt=\"\"></h2><h2 id=\"退出虚拟环境\"><a href=\"#退出虚拟环境\" class=\"headerlink\" title=\"退出虚拟环境\"></a>退出虚拟环境</h2><p>最后退出，直接在该环境中使用<code>deactivate</code>命令即可退出</p>\n","excerpt":"","more":"<p>Virtualenv可用于创建独立的Python环境，在这些环境里面可以选择不同的Python版本或者不同的Packages，并且可以在没有root权限的情<br>况下在环境里安装新套件，互相不会产生任何的影响。  </p>\n<p>以下就是使用Virtualenv搭建Python3.4+Django1.7.4的过程：</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>安装Virtualenv和Python3(因为有些Linux发行版默认没有安装Python3的)</p>\n<pre><code>sudo pip install virtualenv\nsudo apt-get install python3\n</code></pre><h2 id=\"建立一个新的工作环境\"><a href=\"#建立一个新的工作环境\" class=\"headerlink\" title=\"建立一个新的工作环境\"></a>建立一个新的工作环境</h2><pre><code>virtualenv --no-site-packages --python=python3.4 test_env\n如果出现The executable python does not exist 错误，那么可以这样使用\nvirtualenv --no-site-packages --python=3.4 test_env\n</code></pre><p>其中，–no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净<br>\\–python=python3.4指定Python的版本未系统已经安装了的Python3.4 test_env是建立的环境的名称</p>\n<h2 id=\"进入环境测试并安装Django\"><a href=\"#进入环境测试并安装Django\" class=\"headerlink\" title=\"进入环境测试并安装Django\"></a>进入环境测试并安装Django</h2><p>使用<code>source test_env/bin/activate</code>命令进入开发环境，然后查看Python版本，再使用<code>pip install\ndjango</code>安装django</p>\n<pre><code>➜  virtualenv    \n\n➜  virtualenv  ls\ntest_env\n➜  virtualenv  source test_env/bin/activate  # 如果是windows则是source test_env/Script/activate\n(test_env)➜  virtualenv  python\nPython 3.4.0 (default, Apr 11 2014, 13:05:11)\n[GCC 4.8.2] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import django\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nImportError: No module named &apos;django&apos;\n&gt;&gt;&gt; exit()\n(test_env)➜  virtualenv  pip install django\nCollecting django\n  Using cached Django-1.7.3-py2.py3-none-any.whl\nInstalling collected packages: django\n\n\n\n\nSuccessfully installed django-1.7.3\n(test_env)➜  virtualenv  python\nPython 3.4.0 (default, Apr 11 2014, 13:05:11)\n[GCC 4.8.2] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import django\n&gt;&gt;&gt;\n</code></pre><p><code>import django</code>没有发生错误，证明已经成功安装Django了</p>\n<h2 id=\"开始第一个Django-app\"><a href=\"#开始第一个Django-app\" class=\"headerlink\" title=\"开始第一个Django app\"></a>开始第一个Django app</h2><pre><code>(test_env)➜  virtualenv  django-admin startproject mysite\n(test_env)➜  virtualenv  ls\nmysite  test_env\n(test_env)➜  virtualenv  cd mysite     \n\n(test_env)➜  mysite  python manage.py runserver\nPerforming system checks...\n\n\n\n\nSystem check identified no issues (0 silenced).\n\n\n\n\nYou have unapplied migrations; your app may not work properly until they are applied.\nRun &apos;python manage.py migrate&apos; to apply them.\n\n\n\n\nJanuary 24, 2015 - 14:52:09\nDjango version 1.7.3, using settings &apos;mysite.settings&apos;\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n[24/Jan/2015 14:52:17] &quot;GET / HTTP/1.1&quot; 200 1759\n</code></pre><p>需要注意的是，新建的项目的文件夹mysite并不是仅仅存在在那个虚拟环境里，而是在实际的文件中，只是运行它使用的是虚拟的环境而已，不信呆会儿退出该虚拟环境后<br>，你可以用实体环境在该目录下测试。</p>\n<p>现在就可以直接访问<a href=\"http://127.0.0.1:8000，不需要端口映射，可直接访问，如下\">http://127.0.0.1:8000，不需要端口映射，可直接访问，如下</a>：</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/virtualenv-python-django_0.jpg\" alt=\"\"></h2><h2 id=\"退出虚拟环境\"><a href=\"#退出虚拟环境\" class=\"headerlink\" title=\"退出虚拟环境\"></a>退出虚拟环境</h2><p>最后退出，直接在该环境中使用<code>deactivate</code>命令即可退出</p>\n"},{"title":"Vps上使用nginx反向代理某些你懂的网站","date":"2015-05-16T12:38:05.000Z","_content":"之前在Github的学生计划中获得的$100 Digitalocean支付券放在那里没怎么用，由于今天碰巧登录不上1024，于是想到直接通过自己的vps来做\n反向代理试试(之所以不用shadowsocks，是因为我在DO上搭建的shadowsocks一直都很慢，慢得我无法原谅。。。)\n\n好了，这里说一下ubuntu server上通过nginx反向代理http网站的过程：\n\n首先是一条命令安装nginx`sudo apt-get install nginx`\n\n然后直接修改nginx的server配置文件_/etc/nginx/sites-enabled/default_，修改为如下：\n\n\n\n    server \\{\n            listen 100;  # 指定端口地址\n            server_name localhost;\n\n\n\n\n\n        access_log /var/log/nginx/access_100.log\n        error_log /var/log/nginx/error_100.log;\n        location / \\{\n                sub_filter haofly.net localhost;\n                proxy_pass http://haofly.net;\n                proxy_redirect http://haofly.net  /;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header Referer http://$host;\n        \\}\n\n\n\\}\n\n如果有多个就写多个server，之后就可以使用服务器的IP+端口访问haofly.net网站了。\n\n反向代理的速度和直接访问院网站的速度几乎一样，所以我想到了其它的用途，比如Ubuntu的官方镜像源的代理等。\n","source":"_posts/vps-nginx-reverse-proxy.md","raw":"---\ntitle: \"vps上使用nginx反向代理某些你懂的网站\"\ndate: 2015-05-16 20:38:05\ncategories: 就是爱玩\n---\n之前在Github的学生计划中获得的$100 Digitalocean支付券放在那里没怎么用，由于今天碰巧登录不上1024，于是想到直接通过自己的vps来做\n反向代理试试(之所以不用shadowsocks，是因为我在DO上搭建的shadowsocks一直都很慢，慢得我无法原谅。。。)\n\n好了，这里说一下ubuntu server上通过nginx反向代理http网站的过程：\n\n首先是一条命令安装nginx`sudo apt-get install nginx`\n\n然后直接修改nginx的server配置文件_/etc/nginx/sites-enabled/default_，修改为如下：\n\n\n\n    server \\{\n            listen 100;  # 指定端口地址\n            server_name localhost;\n\n\n\n\n\n        access_log /var/log/nginx/access_100.log\n        error_log /var/log/nginx/error_100.log;\n        location / \\{\n                sub_filter haofly.net localhost;\n                proxy_pass http://haofly.net;\n                proxy_redirect http://haofly.net  /;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header Referer http://$host;\n        \\}\n\n\n\\}\n\n如果有多个就写多个server，之后就可以使用服务器的IP+端口访问haofly.net网站了。\n\n反向代理的速度和直接访问院网站的速度几乎一样，所以我想到了其它的用途，比如Ubuntu的官方镜像源的代理等。\n","slug":"vps-nginx-reverse-proxy","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2plk00749vnzc0e6nupd","content":"<p>之前在Github的学生计划中获得的$100 Digitalocean支付券放在那里没怎么用，由于今天碰巧登录不上1024，于是想到直接通过自己的vps来做<br>反向代理试试(之所以不用shadowsocks，是因为我在DO上搭建的shadowsocks一直都很慢，慢得我无法原谅。。。)</p>\n<p>好了，这里说一下ubuntu server上通过nginx反向代理http网站的过程：</p>\n<p>首先是一条命令安装nginx<code>sudo apt-get install nginx</code></p>\n<p>然后直接修改nginx的server配置文件<em>/etc/nginx/sites-enabled/default</em>，修改为如下：</p>\n<pre><code>server \\{\n        listen 100;  # 指定端口地址\n        server_name localhost;\n\n\n\n\n\n    access_log /var/log/nginx/access_100.log\n    error_log /var/log/nginx/error_100.log;\n    location / \\{\n            sub_filter haofly.net localhost;\n            proxy_pass http://haofly.net;\n            proxy_redirect http://haofly.net  /;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Referer http://$host;\n    \\}\n</code></pre><p>}</p>\n<p>如果有多个就写多个server，之后就可以使用服务器的IP+端口访问haofly.net网站了。</p>\n<p>反向代理的速度和直接访问院网站的速度几乎一样，所以我想到了其它的用途，比如Ubuntu的官方镜像源的代理等。</p>\n","excerpt":"","more":"<p>之前在Github的学生计划中获得的$100 Digitalocean支付券放在那里没怎么用，由于今天碰巧登录不上1024，于是想到直接通过自己的vps来做<br>反向代理试试(之所以不用shadowsocks，是因为我在DO上搭建的shadowsocks一直都很慢，慢得我无法原谅。。。)</p>\n<p>好了，这里说一下ubuntu server上通过nginx反向代理http网站的过程：</p>\n<p>首先是一条命令安装nginx<code>sudo apt-get install nginx</code></p>\n<p>然后直接修改nginx的server配置文件<em>/etc/nginx/sites-enabled/default</em>，修改为如下：</p>\n<pre><code>server \\{\n        listen 100;  # 指定端口地址\n        server_name localhost;\n\n\n\n\n\n    access_log /var/log/nginx/access_100.log\n    error_log /var/log/nginx/error_100.log;\n    location / \\{\n            sub_filter haofly.net localhost;\n            proxy_pass http://haofly.net;\n            proxy_redirect http://haofly.net  /;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Referer http://$host;\n    \\}\n</code></pre><p>}</p>\n<p>如果有多个就写多个server，之后就可以使用服务器的IP+端口访问haofly.net网站了。</p>\n<p>反向代理的速度和直接访问院网站的速度几乎一样，所以我想到了其它的用途，比如Ubuntu的官方镜像源的代理等。</p>\n"},{"title":"等了好久终于等到今天","date":"2012-02-06T16:25:36.000Z","_content":"十几年的风风雨雨，坚持到底，终于让我们看到的底底了!很快了！ 还有四个月，没错，刚好是四个月！\n我们不用再唱”梦想总是遥不可及”了，如今他离我们就这么近，我们从来没有离他这么近过！\n虽然六百分怎么算都不难，但我们都没有实现过，不过没事，还早着呢!实力，运气，人品，我哪样会比别人差？ 等了好久终于等到今天，梦了好久终于要把梦实现\n那些冷漠的人，谢谢你们曾经看轻我，让我不低头，更精彩的活 2012，如果考撇了，就让我伴随着地球一起毁灭吧！哈哈哈哈哈！\n为了我们爱的人，为了爱我们的人，也为了那些曾经有梦想而没有实现的人， 让我们努力吧，让我们试一下吧，为了以后不那么后悔！  \n\n——本文最早发表于QQ空间\n","source":"_posts/wait-until-today.md","raw":"---\ntitle: \"等了好久终于等到今天\"\ndate: 2012-02-07 00:25:36\ncategories: 那时年少\n---\n十几年的风风雨雨，坚持到底，终于让我们看到的底底了!很快了！ 还有四个月，没错，刚好是四个月！\n我们不用再唱”梦想总是遥不可及”了，如今他离我们就这么近，我们从来没有离他这么近过！\n虽然六百分怎么算都不难，但我们都没有实现过，不过没事，还早着呢!实力，运气，人品，我哪样会比别人差？ 等了好久终于等到今天，梦了好久终于要把梦实现\n那些冷漠的人，谢谢你们曾经看轻我，让我不低头，更精彩的活 2012，如果考撇了，就让我伴随着地球一起毁灭吧！哈哈哈哈哈！\n为了我们爱的人，为了爱我们的人，也为了那些曾经有梦想而没有实现的人， 让我们努力吧，让我们试一下吧，为了以后不那么后悔！  \n\n——本文最早发表于QQ空间\n","slug":"wait-until-today","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2plr00769vnz29ch2g6h","content":"<p>十几年的风风雨雨，坚持到底，终于让我们看到的底底了!很快了！ 还有四个月，没错，刚好是四个月！<br>我们不用再唱”梦想总是遥不可及”了，如今他离我们就这么近，我们从来没有离他这么近过！<br>虽然六百分怎么算都不难，但我们都没有实现过，不过没事，还早着呢!实力，运气，人品，我哪样会比别人差？ 等了好久终于等到今天，梦了好久终于要把梦实现<br>那些冷漠的人，谢谢你们曾经看轻我，让我不低头，更精彩的活 2012，如果考撇了，就让我伴随着地球一起毁灭吧！哈哈哈哈哈！<br>为了我们爱的人，为了爱我们的人，也为了那些曾经有梦想而没有实现的人， 让我们努力吧，让我们试一下吧，为了以后不那么后悔！  </p>\n<p>——本文最早发表于QQ空间</p>\n","excerpt":"","more":"<p>十几年的风风雨雨，坚持到底，终于让我们看到的底底了!很快了！ 还有四个月，没错，刚好是四个月！<br>我们不用再唱”梦想总是遥不可及”了，如今他离我们就这么近，我们从来没有离他这么近过！<br>虽然六百分怎么算都不难，但我们都没有实现过，不过没事，还早着呢!实力，运气，人品，我哪样会比别人差？ 等了好久终于等到今天，梦了好久终于要把梦实现<br>那些冷漠的人，谢谢你们曾经看轻我，让我不低头，更精彩的活 2012，如果考撇了，就让我伴随着地球一起毁灭吧！哈哈哈哈哈！<br>为了我们爱的人，为了爱我们的人，也为了那些曾经有梦想而没有实现的人， 让我们努力吧，让我们试一下吧，为了以后不那么后悔！  </p>\n<p>——本文最早发表于QQ空间</p>\n"},{"title":"好想有这样一个人","date":"2014-04-20T10:15:06.000Z","_content":"好想有这样一个人，在我想玩的时候，可以尽力阻止我\n\n好想有这样一个人，会在我想学习的时候，全身心地支持我陪着我。每次去上自习，我会给她买点吃的，每晚送她回寝室的时候，我都会拉着她的小手告诉她，你看，天上的星星\n也没你美\n\n好想有这样一个人，周末可以陪着我出去玩一玩、走一走、谈谈人生、谈谈理想\n\n好想有这样一个人，让我可以为了她的幸福可以不顾一切地奋斗\n\n好想有这样一个人，可以包容我偶尔的懒散、颓废\n\n好想有这样一个人，让我可以为之改变，变得更优秀、更阳光、更积极\n\n好想有这样一个人，爱着爱着，她就成了我生命中的一部分\n\n其实已经忘了这几句话写于什么时候了，只记得是在一个寂寞的晚上，上晚自习后，一个人回寝室，看到路上一对一对的情侣突发此感慨的。呵呵，那时的我还年少！\n","source":"_posts/want-the-one.md","raw":"---\ntitle: \"好想有这样一个人\"\ndate: 2014-04-20 18:15:06\ncategories: 那时年少\n---\n好想有这样一个人，在我想玩的时候，可以尽力阻止我\n\n好想有这样一个人，会在我想学习的时候，全身心地支持我陪着我。每次去上自习，我会给她买点吃的，每晚送她回寝室的时候，我都会拉着她的小手告诉她，你看，天上的星星\n也没你美\n\n好想有这样一个人，周末可以陪着我出去玩一玩、走一走、谈谈人生、谈谈理想\n\n好想有这样一个人，让我可以为了她的幸福可以不顾一切地奋斗\n\n好想有这样一个人，可以包容我偶尔的懒散、颓废\n\n好想有这样一个人，让我可以为之改变，变得更优秀、更阳光、更积极\n\n好想有这样一个人，爱着爱着，她就成了我生命中的一部分\n\n其实已经忘了这几句话写于什么时候了，只记得是在一个寂寞的晚上，上晚自习后，一个人回寝室，看到路上一对一对的情侣突发此感慨的。呵呵，那时的我还年少！\n","slug":"want-the-one","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pn8007a9vnzu2im1pd6","content":"<p>好想有这样一个人，在我想玩的时候，可以尽力阻止我</p>\n<p>好想有这样一个人，会在我想学习的时候，全身心地支持我陪着我。每次去上自习，我会给她买点吃的，每晚送她回寝室的时候，我都会拉着她的小手告诉她，你看，天上的星星<br>也没你美</p>\n<p>好想有这样一个人，周末可以陪着我出去玩一玩、走一走、谈谈人生、谈谈理想</p>\n<p>好想有这样一个人，让我可以为了她的幸福可以不顾一切地奋斗</p>\n<p>好想有这样一个人，可以包容我偶尔的懒散、颓废</p>\n<p>好想有这样一个人，让我可以为之改变，变得更优秀、更阳光、更积极</p>\n<p>好想有这样一个人，爱着爱着，她就成了我生命中的一部分</p>\n<p>其实已经忘了这几句话写于什么时候了，只记得是在一个寂寞的晚上，上晚自习后，一个人回寝室，看到路上一对一对的情侣突发此感慨的。呵呵，那时的我还年少！</p>\n","excerpt":"","more":"<p>好想有这样一个人，在我想玩的时候，可以尽力阻止我</p>\n<p>好想有这样一个人，会在我想学习的时候，全身心地支持我陪着我。每次去上自习，我会给她买点吃的，每晚送她回寝室的时候，我都会拉着她的小手告诉她，你看，天上的星星<br>也没你美</p>\n<p>好想有这样一个人，周末可以陪着我出去玩一玩、走一走、谈谈人生、谈谈理想</p>\n<p>好想有这样一个人，让我可以为了她的幸福可以不顾一切地奋斗</p>\n<p>好想有这样一个人，可以包容我偶尔的懒散、颓废</p>\n<p>好想有这样一个人，让我可以为之改变，变得更优秀、更阳光、更积极</p>\n<p>好想有这样一个人，爱着爱着，她就成了我生命中的一部分</p>\n<p>其实已经忘了这几句话写于什么时候了，只记得是在一个寂寞的晚上，上晚自习后，一个人回寝室，看到路上一对一对的情侣突发此感慨的。呵呵，那时的我还年少！</p>\n"},{"title":"感谢微博——1000条微博纪念","date":"2015-03-09T06:56:35.000Z","_content":"![](http://7xnc86.com1.z0.glb.clouddn.com/weibo_0.png)  \n\n2013年1月7日注册微博至今已经发了1000条微博了。微博带给了我太多的改变，必须在这里感谢一下。\n\n我承认，最先申请微博是因为某苍姓明星，第一个关注的是她，第二个关注的就是创新工场李开复。这两年，社会上发生了太多的事情，开心的不开心的，深沉的悲哀的，都已成\n往事，但感谢微博，这些，我都没有错过。\n\n在我眼里，微信和QQ更多的是熟人的圈子，而微博则更多是围绕着名人或者一个自己感兴趣的圈子。我关注的600人里，IT圈子的人就有300+。有了微博，我不像以前\n那样在大学里按着学校的计划一步一步学，而是学得更有激情，了解到太多学校里可能连老师都不知道的东西。通过微博，我可以了解到在大城市里(我说的是互联网意识高的那\n些城市)的程序员最近都在关注着什么，现在主流的技术是什么，虽然大多数我并不会去接触，但至少我要知道有这些东西，身处“互联网的浪潮”，如果连周围的东西都看不清\n，又怎么能在浪潮之巅尽情弄潮呢！\n\n微博有时也会让人迷失，无聊的时候一遍一遍的刷着，很多人就这样沉迷其中。我不排斥碎片化的消息，但既然是碎片化的消息为何不用碎片化的时间去对待它，而不是让碎片化\n的消息来将我们原本的时间碎片化。\n\n对于微博，现在有很多人唱衰，我不置可否。确实，由于言论审核以及对某些人的打击让微博少了很多的自由，我认为在打击谣言方面，确实是需要Z·F来管理，但是他们在做\n这些事情的时候做得太不明不白了，很多公众根本就不知道它到底做了些什么，这，我也只能呵呵了。另外，微信的兴起，也让微博的地位颤抖了一下，但是我认为微信和微博本\n身并不冲突，侧重点不同，谁都不可能完全取代谁。不过还好，目前看来确实看不到一种可以彻底颠覆微博或者微信模式的社交平台诞生，至少，国内没有。\n\n总之，感谢微博！\n","source":"_posts/weibo.md","raw":"---\ntitle: \"感谢微博——1000条微博纪念\"\ndate: 2015-03-09 14:56:35\ncategories: 边走边想\n---\n![](http://7xnc86.com1.z0.glb.clouddn.com/weibo_0.png)  \n\n2013年1月7日注册微博至今已经发了1000条微博了。微博带给了我太多的改变，必须在这里感谢一下。\n\n我承认，最先申请微博是因为某苍姓明星，第一个关注的是她，第二个关注的就是创新工场李开复。这两年，社会上发生了太多的事情，开心的不开心的，深沉的悲哀的，都已成\n往事，但感谢微博，这些，我都没有错过。\n\n在我眼里，微信和QQ更多的是熟人的圈子，而微博则更多是围绕着名人或者一个自己感兴趣的圈子。我关注的600人里，IT圈子的人就有300+。有了微博，我不像以前\n那样在大学里按着学校的计划一步一步学，而是学得更有激情，了解到太多学校里可能连老师都不知道的东西。通过微博，我可以了解到在大城市里(我说的是互联网意识高的那\n些城市)的程序员最近都在关注着什么，现在主流的技术是什么，虽然大多数我并不会去接触，但至少我要知道有这些东西，身处“互联网的浪潮”，如果连周围的东西都看不清\n，又怎么能在浪潮之巅尽情弄潮呢！\n\n微博有时也会让人迷失，无聊的时候一遍一遍的刷着，很多人就这样沉迷其中。我不排斥碎片化的消息，但既然是碎片化的消息为何不用碎片化的时间去对待它，而不是让碎片化\n的消息来将我们原本的时间碎片化。\n\n对于微博，现在有很多人唱衰，我不置可否。确实，由于言论审核以及对某些人的打击让微博少了很多的自由，我认为在打击谣言方面，确实是需要Z·F来管理，但是他们在做\n这些事情的时候做得太不明不白了，很多公众根本就不知道它到底做了些什么，这，我也只能呵呵了。另外，微信的兴起，也让微博的地位颤抖了一下，但是我认为微信和微博本\n身并不冲突，侧重点不同，谁都不可能完全取代谁。不过还好，目前看来确实看不到一种可以彻底颠覆微博或者微信模式的社交平台诞生，至少，国内没有。\n\n总之，感谢微博！\n","slug":"weibo","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pnb007b9vnz5pe1cnbr","content":"<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/weibo_0.png\" alt=\"\">  </p>\n<p>2013年1月7日注册微博至今已经发了1000条微博了。微博带给了我太多的改变，必须在这里感谢一下。</p>\n<p>我承认，最先申请微博是因为某苍姓明星，第一个关注的是她，第二个关注的就是创新工场李开复。这两年，社会上发生了太多的事情，开心的不开心的，深沉的悲哀的，都已成<br>往事，但感谢微博，这些，我都没有错过。</p>\n<p>在我眼里，微信和QQ更多的是熟人的圈子，而微博则更多是围绕着名人或者一个自己感兴趣的圈子。我关注的600人里，IT圈子的人就有300+。有了微博，我不像以前<br>那样在大学里按着学校的计划一步一步学，而是学得更有激情，了解到太多学校里可能连老师都不知道的东西。通过微博，我可以了解到在大城市里(我说的是互联网意识高的那<br>些城市)的程序员最近都在关注着什么，现在主流的技术是什么，虽然大多数我并不会去接触，但至少我要知道有这些东西，身处“互联网的浪潮”，如果连周围的东西都看不清<br>，又怎么能在浪潮之巅尽情弄潮呢！</p>\n<p>微博有时也会让人迷失，无聊的时候一遍一遍的刷着，很多人就这样沉迷其中。我不排斥碎片化的消息，但既然是碎片化的消息为何不用碎片化的时间去对待它，而不是让碎片化<br>的消息来将我们原本的时间碎片化。</p>\n<p>对于微博，现在有很多人唱衰，我不置可否。确实，由于言论审核以及对某些人的打击让微博少了很多的自由，我认为在打击谣言方面，确实是需要Z·F来管理，但是他们在做<br>这些事情的时候做得太不明不白了，很多公众根本就不知道它到底做了些什么，这，我也只能呵呵了。另外，微信的兴起，也让微博的地位颤抖了一下，但是我认为微信和微博本<br>身并不冲突，侧重点不同，谁都不可能完全取代谁。不过还好，目前看来确实看不到一种可以彻底颠覆微博或者微信模式的社交平台诞生，至少，国内没有。</p>\n<p>总之，感谢微博！</p>\n","excerpt":"","more":"<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/weibo_0.png\" alt=\"\">  </p>\n<p>2013年1月7日注册微博至今已经发了1000条微博了。微博带给了我太多的改变，必须在这里感谢一下。</p>\n<p>我承认，最先申请微博是因为某苍姓明星，第一个关注的是她，第二个关注的就是创新工场李开复。这两年，社会上发生了太多的事情，开心的不开心的，深沉的悲哀的，都已成<br>往事，但感谢微博，这些，我都没有错过。</p>\n<p>在我眼里，微信和QQ更多的是熟人的圈子，而微博则更多是围绕着名人或者一个自己感兴趣的圈子。我关注的600人里，IT圈子的人就有300+。有了微博，我不像以前<br>那样在大学里按着学校的计划一步一步学，而是学得更有激情，了解到太多学校里可能连老师都不知道的东西。通过微博，我可以了解到在大城市里(我说的是互联网意识高的那<br>些城市)的程序员最近都在关注着什么，现在主流的技术是什么，虽然大多数我并不会去接触，但至少我要知道有这些东西，身处“互联网的浪潮”，如果连周围的东西都看不清<br>，又怎么能在浪潮之巅尽情弄潮呢！</p>\n<p>微博有时也会让人迷失，无聊的时候一遍一遍的刷着，很多人就这样沉迷其中。我不排斥碎片化的消息，但既然是碎片化的消息为何不用碎片化的时间去对待它，而不是让碎片化<br>的消息来将我们原本的时间碎片化。</p>\n<p>对于微博，现在有很多人唱衰，我不置可否。确实，由于言论审核以及对某些人的打击让微博少了很多的自由，我认为在打击谣言方面，确实是需要Z·F来管理，但是他们在做<br>这些事情的时候做得太不明不白了，很多公众根本就不知道它到底做了些什么，这，我也只能呵呵了。另外，微信的兴起，也让微博的地位颤抖了一下，但是我认为微信和微博本<br>身并不冲突，侧重点不同，谁都不可能完全取代谁。不过还好，目前看来确实看不到一种可以彻底颠覆微博或者微信模式的社交平台诞生，至少，国内没有。</p>\n<p>总之，感谢微博！</p>\n"},{"title":"Windows + wamp环境下安装Laravel框架","date":"2014-09-20T15:31:13.000Z","_content":"其实官网已经有很详细的[教程](http://v4.golaravel.com/docs/4.2/installation)，但由于其方法太多，身为天秤座的\n我还是喜欢用一个方法，所以在这里把它记录下来。\n\n# 环境：Windows + wamp\n\n# Composer安装\n\n点击下载，下载之后，直接安装即可，安装完成后，就可以在windows的文件窗口中就可以使用右键看到关于composer的几个菜单。\n\n# Laravel安装\n\n首先，使用composer安装laravel的安装器\n\n\n\n    composer global require \"laravel/installer\"\n\n然后再将其加入系统路径(在环境变量里添加如下目录)：\n\n\n\n    C:\\\\Users\\\\haofly\\\\AppData\\\\Roaming\\\\Composer\\\\vendor\\\\bin\n\n之后再打开终端检查是否安装成功，如果出现如下信息表示安装成功了\n\n\n\n    C:\\\\Users\\\\haofly>laravel\n    Laravel Installer version 1.2.0\n\n\n\n\n    Usage:\n     [options] command [arguments]\n\n\n\n\n    Options:\n     --help (-h)           Display this help message\n     --quiet (-q)          Do not output any message\n     --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output,\n    2 for more verbose output and 3 for debug\n     --version (-V)        Display this application version\n     --ansi                Force ANSI output\n     --no-ansi             Disable ANSI output\n     --no-interaction (-n) Do not ask any interactive question\n\n\n\n\n    Available commands:\n     help   Displays help for a command\n     list   Lists commands\n     new    Create a new Laravel application.\n\n\n之后就可以在wamp环境的www目录下执行如下命令即可建立新的项目了：\n\n\n\n    >> laravel new 项目名\n    Crafting application...\n    Generating optimized class loader\n    Compiling common classes\n    Compiling views\n    Application key [.......] set successfully.\n    Application ready! Build something amazing.\n\n# Apache配置\n\n这里就是官网说的不大明显的地方了，害我之前做错了一步。 现在需要打开apache的mod_rewrite模式，打开apache的配置文件httpd.conf\n(我的电脑是D:\\\\wamp\\\\bin\\\\apache\\\\apache2.4.9\\\\conf\\\\httpd.conf)，把下面一行前面的注释去掉\n\n\n\n    LoadModule rewrite_module modules/mod_rewrite.so\n\n\n此时重启wamp服务，就可以访问localhost/laravel/public的欢迎页了  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-wamp-install-laravel.png)  \n\n# 测试环境\n\n在我使用apache设置了虚拟目录后访问[http://localhost:8080即访问到laravel项目，laravel自带了一个登录的页面`http\n://localhost:8080/home`，当然要成功注册和的登录，必须先将默认的...](http://localhost:8080即访问到larav\nel项目，laravel自带了一个登录的页面<code>http://localhost:8080/home</code>，当然要成功注册和的登录，必须先将\n默认的数据库及数据表建立好)：\n\n首先，在数据库的配置文件 `learnlaravel5/.env`里面填好数据库的基本信息\n\n\n\n    DB_HOST=localhost\n    DB_DATABASE=faxie\n    DB_USERNAME=root\n    DB_PASSWORD=mysql\n\n然后执行前移数据库操作\n\n\n\n    php artisan migrate\n\n如果能成功建立好数据库，那么就能够注册和登录了。\n\n# Laravel的基本配置\n\nlaravel的配置文件在app.php里(我的电脑是D:\\\\wamp\\\\www\\\\laravel\\\\app\\\\config下的app.php)，可以配置如下信息：\n\n'debug' => false 可以改为true，需要注意的是在实际发布中千万不能使用true，不然可能被用户看到重要信息\n如果要配置数据库，可以在下面对应的数据库里面选择并修改。\n","source":"_posts/windows-wamp-install-laravel.md","raw":"---\ntitle: \"windows + wamp环境下安装Laravel框架\"\ndate: 2014-09-20 23:31:13\ncategories: 编程之路\n---\n其实官网已经有很详细的[教程](http://v4.golaravel.com/docs/4.2/installation)，但由于其方法太多，身为天秤座的\n我还是喜欢用一个方法，所以在这里把它记录下来。\n\n# 环境：Windows + wamp\n\n# Composer安装\n\n点击下载，下载之后，直接安装即可，安装完成后，就可以在windows的文件窗口中就可以使用右键看到关于composer的几个菜单。\n\n# Laravel安装\n\n首先，使用composer安装laravel的安装器\n\n\n\n    composer global require \"laravel/installer\"\n\n然后再将其加入系统路径(在环境变量里添加如下目录)：\n\n\n\n    C:\\\\Users\\\\haofly\\\\AppData\\\\Roaming\\\\Composer\\\\vendor\\\\bin\n\n之后再打开终端检查是否安装成功，如果出现如下信息表示安装成功了\n\n\n\n    C:\\\\Users\\\\haofly>laravel\n    Laravel Installer version 1.2.0\n\n\n\n\n    Usage:\n     [options] command [arguments]\n\n\n\n\n    Options:\n     --help (-h)           Display this help message\n     --quiet (-q)          Do not output any message\n     --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output,\n    2 for more verbose output and 3 for debug\n     --version (-V)        Display this application version\n     --ansi                Force ANSI output\n     --no-ansi             Disable ANSI output\n     --no-interaction (-n) Do not ask any interactive question\n\n\n\n\n    Available commands:\n     help   Displays help for a command\n     list   Lists commands\n     new    Create a new Laravel application.\n\n\n之后就可以在wamp环境的www目录下执行如下命令即可建立新的项目了：\n\n\n\n    >> laravel new 项目名\n    Crafting application...\n    Generating optimized class loader\n    Compiling common classes\n    Compiling views\n    Application key [.......] set successfully.\n    Application ready! Build something amazing.\n\n# Apache配置\n\n这里就是官网说的不大明显的地方了，害我之前做错了一步。 现在需要打开apache的mod_rewrite模式，打开apache的配置文件httpd.conf\n(我的电脑是D:\\\\wamp\\\\bin\\\\apache\\\\apache2.4.9\\\\conf\\\\httpd.conf)，把下面一行前面的注释去掉\n\n\n\n    LoadModule rewrite_module modules/mod_rewrite.so\n\n\n此时重启wamp服务，就可以访问localhost/laravel/public的欢迎页了  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-wamp-install-laravel.png)  \n\n# 测试环境\n\n在我使用apache设置了虚拟目录后访问[http://localhost:8080即访问到laravel项目，laravel自带了一个登录的页面`http\n://localhost:8080/home`，当然要成功注册和的登录，必须先将默认的...](http://localhost:8080即访问到larav\nel项目，laravel自带了一个登录的页面<code>http://localhost:8080/home</code>，当然要成功注册和的登录，必须先将\n默认的数据库及数据表建立好)：\n\n首先，在数据库的配置文件 `learnlaravel5/.env`里面填好数据库的基本信息\n\n\n\n    DB_HOST=localhost\n    DB_DATABASE=faxie\n    DB_USERNAME=root\n    DB_PASSWORD=mysql\n\n然后执行前移数据库操作\n\n\n\n    php artisan migrate\n\n如果能成功建立好数据库，那么就能够注册和登录了。\n\n# Laravel的基本配置\n\nlaravel的配置文件在app.php里(我的电脑是D:\\\\wamp\\\\www\\\\laravel\\\\app\\\\config下的app.php)，可以配置如下信息：\n\n'debug' => false 可以改为true，需要注意的是在实际发布中千万不能使用true，不然可能被用户看到重要信息\n如果要配置数据库，可以在下面对应的数据库里面选择并修改。\n","slug":"windows-wamp-install-laravel","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pne007c9vnzpp3x085s","content":"<p>其实官网已经有很详细的<a href=\"http://v4.golaravel.com/docs/4.2/installation\" target=\"_blank\" rel=\"external\">教程</a>，但由于其方法太多，身为天秤座的<br>我还是喜欢用一个方法，所以在这里把它记录下来。</p>\n<h1 id=\"环境：Windows-wamp\"><a href=\"#环境：Windows-wamp\" class=\"headerlink\" title=\"环境：Windows + wamp\"></a>环境：Windows + wamp</h1><h1 id=\"Composer安装\"><a href=\"#Composer安装\" class=\"headerlink\" title=\"Composer安装\"></a>Composer安装</h1><p>点击下载，下载之后，直接安装即可，安装完成后，就可以在windows的文件窗口中就可以使用右键看到关于composer的几个菜单。</p>\n<h1 id=\"Laravel安装\"><a href=\"#Laravel安装\" class=\"headerlink\" title=\"Laravel安装\"></a>Laravel安装</h1><p>首先，使用composer安装laravel的安装器</p>\n<pre><code>composer global require &quot;laravel/installer&quot;\n</code></pre><p>然后再将其加入系统路径(在环境变量里添加如下目录)：</p>\n<pre><code>C:\\\\Users\\\\haofly\\\\AppData\\\\Roaming\\\\Composer\\\\vendor\\\\bin\n</code></pre><p>之后再打开终端检查是否安装成功，如果出现如下信息表示安装成功了</p>\n<pre><code>C:\\\\Users\\\\haofly&gt;laravel\nLaravel Installer version 1.2.0\n\n\n\n\nUsage:\n [options] command [arguments]\n\n\n\n\nOptions:\n --help (-h)           Display this help message\n --quiet (-q)          Do not output any message\n --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output,\n2 for more verbose output and 3 for debug\n --version (-V)        Display this application version\n --ansi                Force ANSI output\n --no-ansi             Disable ANSI output\n --no-interaction (-n) Do not ask any interactive question\n\n\n\n\nAvailable commands:\n help   Displays help for a command\n list   Lists commands\n new    Create a new Laravel application.\n</code></pre><p>之后就可以在wamp环境的www目录下执行如下命令即可建立新的项目了：</p>\n<pre><code>&gt;&gt; laravel new 项目名\nCrafting application...\nGenerating optimized class loader\nCompiling common classes\nCompiling views\nApplication key [.......] set successfully.\nApplication ready! Build something amazing.\n</code></pre><h1 id=\"Apache配置\"><a href=\"#Apache配置\" class=\"headerlink\" title=\"Apache配置\"></a>Apache配置</h1><p>这里就是官网说的不大明显的地方了，害我之前做错了一步。 现在需要打开apache的mod_rewrite模式，打开apache的配置文件httpd.conf<br>(我的电脑是D:\\wamp\\bin\\apache\\apache2.4.9\\conf\\httpd.conf)，把下面一行前面的注释去掉</p>\n<pre><code>LoadModule rewrite_module modules/mod_rewrite.so\n</code></pre><p>此时重启wamp服务，就可以访问localhost/laravel/public的欢迎页了<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-wamp-install-laravel.png\" alt=\"\">  </p>\n<h1 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h1><p>在我使用apache设置了虚拟目录后访问<a href=\"http://localhost:8080即访问到larav\nel项目，laravel自带了一个登录的页面&lt;code&gt;http://localhost:8080/home&lt;/code&gt;，当然要成功注册和的登录，必须先将\n默认的数据库及数据表建立好\" target=\"_blank\" rel=\"external\">http://localhost:8080即访问到laravel项目，laravel自带了一个登录的页面<code>http\n://localhost:8080/home</code>，当然要成功注册和的登录，必须先将默认的…</a>：</p>\n<p>首先，在数据库的配置文件 <code>learnlaravel5/.env</code>里面填好数据库的基本信息</p>\n<pre><code>DB_HOST=localhost\nDB_DATABASE=faxie\nDB_USERNAME=root\nDB_PASSWORD=mysql\n</code></pre><p>然后执行前移数据库操作</p>\n<pre><code>php artisan migrate\n</code></pre><p>如果能成功建立好数据库，那么就能够注册和登录了。</p>\n<h1 id=\"Laravel的基本配置\"><a href=\"#Laravel的基本配置\" class=\"headerlink\" title=\"Laravel的基本配置\"></a>Laravel的基本配置</h1><p>laravel的配置文件在app.php里(我的电脑是D:\\wamp\\www\\laravel\\app\\config下的app.php)，可以配置如下信息：</p>\n<p>‘debug’ =&gt; false 可以改为true，需要注意的是在实际发布中千万不能使用true，不然可能被用户看到重要信息<br>如果要配置数据库，可以在下面对应的数据库里面选择并修改。</p>\n","excerpt":"","more":"<p>其实官网已经有很详细的<a href=\"http://v4.golaravel.com/docs/4.2/installation\">教程</a>，但由于其方法太多，身为天秤座的<br>我还是喜欢用一个方法，所以在这里把它记录下来。</p>\n<h1 id=\"环境：Windows-wamp\"><a href=\"#环境：Windows-wamp\" class=\"headerlink\" title=\"环境：Windows + wamp\"></a>环境：Windows + wamp</h1><h1 id=\"Composer安装\"><a href=\"#Composer安装\" class=\"headerlink\" title=\"Composer安装\"></a>Composer安装</h1><p>点击下载，下载之后，直接安装即可，安装完成后，就可以在windows的文件窗口中就可以使用右键看到关于composer的几个菜单。</p>\n<h1 id=\"Laravel安装\"><a href=\"#Laravel安装\" class=\"headerlink\" title=\"Laravel安装\"></a>Laravel安装</h1><p>首先，使用composer安装laravel的安装器</p>\n<pre><code>composer global require &quot;laravel/installer&quot;\n</code></pre><p>然后再将其加入系统路径(在环境变量里添加如下目录)：</p>\n<pre><code>C:\\\\Users\\\\haofly\\\\AppData\\\\Roaming\\\\Composer\\\\vendor\\\\bin\n</code></pre><p>之后再打开终端检查是否安装成功，如果出现如下信息表示安装成功了</p>\n<pre><code>C:\\\\Users\\\\haofly&gt;laravel\nLaravel Installer version 1.2.0\n\n\n\n\nUsage:\n [options] command [arguments]\n\n\n\n\nOptions:\n --help (-h)           Display this help message\n --quiet (-q)          Do not output any message\n --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output,\n2 for more verbose output and 3 for debug\n --version (-V)        Display this application version\n --ansi                Force ANSI output\n --no-ansi             Disable ANSI output\n --no-interaction (-n) Do not ask any interactive question\n\n\n\n\nAvailable commands:\n help   Displays help for a command\n list   Lists commands\n new    Create a new Laravel application.\n</code></pre><p>之后就可以在wamp环境的www目录下执行如下命令即可建立新的项目了：</p>\n<pre><code>&gt;&gt; laravel new 项目名\nCrafting application...\nGenerating optimized class loader\nCompiling common classes\nCompiling views\nApplication key [.......] set successfully.\nApplication ready! Build something amazing.\n</code></pre><h1 id=\"Apache配置\"><a href=\"#Apache配置\" class=\"headerlink\" title=\"Apache配置\"></a>Apache配置</h1><p>这里就是官网说的不大明显的地方了，害我之前做错了一步。 现在需要打开apache的mod_rewrite模式，打开apache的配置文件httpd.conf<br>(我的电脑是D:\\wamp\\bin\\apache\\apache2.4.9\\conf\\httpd.conf)，把下面一行前面的注释去掉</p>\n<pre><code>LoadModule rewrite_module modules/mod_rewrite.so\n</code></pre><p>此时重启wamp服务，就可以访问localhost/laravel/public的欢迎页了<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-wamp-install-laravel.png\" alt=\"\">  </p>\n<h1 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h1><p>在我使用apache设置了虚拟目录后访问<a href=\"http://localhost:8080即访问到larav\nel项目，laravel自带了一个登录的页面&lt;code&gt;http://localhost:8080/home&lt;/code&gt;，当然要成功注册和的登录，必须先将\n默认的数据库及数据表建立好\">http://localhost:8080即访问到laravel项目，laravel自带了一个登录的页面<code>http\n://localhost:8080/home</code>，当然要成功注册和的登录，必须先将默认的…</a>：</p>\n<p>首先，在数据库的配置文件 <code>learnlaravel5/.env</code>里面填好数据库的基本信息</p>\n<pre><code>DB_HOST=localhost\nDB_DATABASE=faxie\nDB_USERNAME=root\nDB_PASSWORD=mysql\n</code></pre><p>然后执行前移数据库操作</p>\n<pre><code>php artisan migrate\n</code></pre><p>如果能成功建立好数据库，那么就能够注册和登录了。</p>\n<h1 id=\"Laravel的基本配置\"><a href=\"#Laravel的基本配置\" class=\"headerlink\" title=\"Laravel的基本配置\"></a>Laravel的基本配置</h1><p>laravel的配置文件在app.php里(我的电脑是D:\\wamp\\www\\laravel\\app\\config下的app.php)，可以配置如下信息：</p>\n<p>‘debug’ =&gt; false 可以改为true，需要注意的是在实际发布中千万不能使用true，不然可能被用户看到重要信息<br>如果要配置数据库，可以在下面对应的数据库里面选择并修改。</p>\n"},{"title":"windows环境下Vagrant(Docker)的安装、打包以及Vagrant Manager的安","date":"2014-12-29T11:08:00.000Z","_content":"_Docker：是一个开放源代码软件专案，在软件容器下自动布署应用程序，借此在Linux操作系统上，提供了一个额外的软件抽象层，以及操作系统层虚拟化的自动管\n理机制[2]。Docker利用Linux内核中的资源分离机制，例如cgroups，以及Linux内核名称空间，来建立独立的软件容器（containers）。\n这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。(维基百科)_\n\nDocker无疑是2014年人们谈论最多的虚拟开发环境构建工具，在我看来它是VirtualBox虚拟机最佳的替代方案，使用它的理由有三点：\n1.轻量级，一个box只需要几百兆(Vagrant) 2.部署方便，有现成的[base\nboxes可供下载](http://www.vagrantbox.es/)(Vagrant)，并且可以自己制作Image\n3.运行流畅，几秒开机，占用内存十分的少(在我的电脑上，它甚至比Chrome占用的内存还要少)\n\n而本文所要说的Vagrant这是其在Windows上的替代方案，它是使用VirtualBox动态创建和配置虚拟环境。它基于Ruby，但必须依赖其他的虚拟环境\n构建工具，比如VirtualBox或者VM等。下面主要介绍其安装部署过程。\n\n**注：有一个快速的生成Vagrantfile的网站：<https://puphpet.com，可以选择不同的操作系统，不同的开发环境(lamp,lnmp)，如果设置了apache的域名，那么需要修改主机的host文>件**\n\n**基础环境：Windows 7 + Git for Windows**\n\n  1. ## 下载并安装基本工具\n\nOracle VM VirtualBox：<https://www.virtualbox.org/wiki/Downloads>\nVagrant：<https://www.vagrantup.com/downloads.html>\n安装完Vargrant后，可以直接在bash里查看是否安装成功\n\n\n        $vagrant -v\n    Vagrant 1.7.1\n\n  2. ## 下载box\n\nVagrant提供了一些常用的人们已经打包好了的box镜像，当然可以使用vargrant命令进行下载，但是总没有迅雷快吧，所以直接去官网下载：<http:/\n/www.vagrantbox.es/> 其中，我选择的是Ubuntu Server Trusty 14.04 amd64：<https://oss-bin\naries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box>[\n](https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-\namd64-vmwarefusion.box)注意是virtualbox版本还是vmware版本，大小只有399M\n\n  3. ## 初始化工作目录\n\n`vagrant init`  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_1.jpg)  \n此时会生成一个Vagrantfile文件，它就是该虚拟机的配置文件，可在里面配置端口或者文件的映射规则。\n**注**：其实添加box可以在任意位置添加，vagrant应该只是记录了其路径，然后`vagrant init +\nname`才是初始化的时候指定所需要的box，而默认的`vagrant init`会默认去寻找名为base的镜像。  \n\n  4. ## 添加镜像\n\n`vagrant box add`  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_2.jpg)  \n其中\"base\"就是你给镜像取的名字，`vagrant box\nlist`可以列出当前所有的box(不仅仅是该目录)，需要注意的是，由于我之前添加了一个同名的镜像，并且没删除干净，所以这里添加了一个`--force`参数\n\n  5. ## 启动\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_3.jpg)  \n这就是其启动过程，可以发现它的一些基本设置：如SSH端口为2222，用户名密码均是vagrant，/vagrant映射到本地的F:/docker/ubunt\nu-server\n\n  6. ## 连接进入\n\n当虚拟机启动后，可以使用SSH连接工具XShell或者putty进行登录： 地址：127.0.0.1 端口：2222(虚拟机不同，端口会变的)\n用户名：vagrant 密码：vagrant 或者直接使用vagrant命令登录：`vagrant ssh`  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_4.jpg)  \n到这里，就可以确定安装完成了。 PS：所有创建了的box也都可以通过VirtualBox进行查看和配置：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.jpg)  \n\n# Vagrant box的打包\n\n通常，官网的list列表并不能提供我们自己所需要的运行环境，比如我有时候需要14.04的LAMP环境或者LNAMP环境，但又不想每次都重新安装一下，这时候就\n可以去官网下载一个干净的base，对其修改后打包成自己的box，以后谁要用就直接取，里面已经安装好了所需要的环境了，打包很简单，使用的是`vagrant\npackage`命令，但首先得启动该虚拟机：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.png)  \n注意我在该虚拟机的root用户目录里新建了一个名为`haofly`的文件，待会儿方便证明其确实是我修改后的box，下面只需要将`package.box`添加\n到vagrant即可使用它来创建新的虚拟机了，为了方便管理，我将其复制了出来并重命名为`ubuntu-14.04-amd64-lamp-20141225.b\nox`：  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_6.jpg)  \n\n# Vagrant Manager的安装\n\nvagrant\nmanager是一个正在开发中的vagrant的管理工具，主页在[https://github.com/lanayotech/vagrant-\nmanager-windows ](https://github.com/lanayotech/vagrant-manager-windows \"Link:\nhttps://github.com/lanayotech/vagrant-manager-windows\" )\n\n安装步骤：\n\n  1. 下载安装 到其releases列表进行下载：<https://github.com/lanayotech/vagrant-manager-windows/releases> 然后直接运行安装即可。不过要是出现以下错误   \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_7.jpg)  \n[ ](http://haofly.net/wp-content/uploads/2014/12/windows-install-\nvagrant5.jpg)表示你的电脑没有安装`.NETFramwork 4.5`那么就去安装，但如果这里点击“是”那么会跳到4.5.2去，我没安装上，所以\n之后直接下载了4.5([下载地址](http://www.microsoft.com/zh-\ncn/download/details.aspx?id=30653))安装上了\n\n  2. 界面   \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_8.jpg)  \n它没什么单独的界面，就是在右下角的一个控制图表，点击就可以了。\n\n  3. 需要注意的是：vagrant manager目前存在一个很大的缺陷就是只能操作C盘下的box，不然什么操作都会出现错误 _A Vagrant environment or target machine is required to run this command. Run `vagrant init` to create a new Vagrant environment. Or, get an ID of a target machine from `vagrant global-status` to run this command on. A final option is to change to a directory with a Vagrantfile and to try again. _其实，开发人员也一直在关注着这个问题：<https://github.com/lanayotech/vagrant-manager-windows/issues/8>\n\n# 附\n\nVagrant常用命令：\n\nvagrant box add name：添加box vagrant box list：列出当前所有的box vagrant box remove\nname：列出某个box(名字就是自己给取的，比如上面的base) vagrant box repackage name：对某个box重新打包\nvagrant init [name]：初始化当前目录为工作目录 vagrant up [name]：启动虚拟机 vagrant destroy\n[name]：删除虚拟机 vagrant suspend [name]：暂停某个box vagrant reload [name]：重新加载 vagrant\nresume [name]：恢复虚拟机 vagrant halt [name]：关闭虚拟机 vagrant ssh：连接虚拟机 vagrant\npackage --output name：如果对虚拟机的配置进行修改过后，如果想把当前环境打包，可使用这个命令 vagrant\nstatus：查看虚拟机状态\n\n## TroubleShooting\n\n  1. 在linux环境下，共享目录的权限无权限问题： `Vagrant Synced Folders Permissions` 解决方法是在Vagrantfile里面进行如下配置：\n\n        config.vm.synced_folder \"/docker/ubuntu/\", \"/var/www/html\",\n        id: \"vagrant-root\",\n        owner: \"nobody\",\n        group: \"nobody\",\n        mount_options: [\"dmode=775,fmode=664\"]\n\n  2. 连接mysql数据库出现如下错误：\n\n        Lost connection to MySQL server at 'reading initial communication packet', system error: 0\n\n那么应该是mysql的bind-address未配置正确，应该将其改为eth0的地址，而不是该虚拟机的IP地址，当然，改为0.0.0.0也行\n\n  3. 集群(同时开启多个虚拟机，虚拟机之间通过IP访问)，vagrantfile可以这样配置，例如：\n\n        # -_- mode: ruby -_-\n\n\n\n\n    # vi: set ft=ruby :\n\n\n\n\n    Vagrant.configure(2) do |config|\n        config.vm.define :master do |master|\n            master.vm.provider \"virtualbox\" do |v|\n                v.memory = \"1024\"\n                #v.gui = true\n            end\n            master.vm.box = \"django\"\n            master.vm.hostname = \"master\"\n            master.vm.network \"private_network\", ip: \"192.168.111.10\"\n            master.vm.network \"forwarded_port\", guest: 8000, host: 8000\n            master.vm.network \"forwarded_port\", guest: 3306, host: 3307\n            master.vm.synced_folder \"F:/workspace/wh_operation\", \"/django\"\n        end\n\n\n\n\n        config.vm.define :slave do |slave|\n        slave.vm.provider \"virtualbox\" do |v|\n            v.memory = \"1024\"\n            #v.gui = true\n        end\n        slave.vm.box = \"django\"\n        slave.vm.hostname = \"slave\"\n        slave.vm.network \"private_network\", ip: \"192.168.111.11\"\n    end\n\n\nend\n","source":"_posts/windows-install-vagrant.md","raw":"---\ntitle: \"windows环境下Vagrant(Docker)的安装、打包以及Vagrant Manager的安\"\ndate: 2014-12-29 19:08:00\ncategories: 编程之路\n---\n_Docker：是一个开放源代码软件专案，在软件容器下自动布署应用程序，借此在Linux操作系统上，提供了一个额外的软件抽象层，以及操作系统层虚拟化的自动管\n理机制[2]。Docker利用Linux内核中的资源分离机制，例如cgroups，以及Linux内核名称空间，来建立独立的软件容器（containers）。\n这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。(维基百科)_\n\nDocker无疑是2014年人们谈论最多的虚拟开发环境构建工具，在我看来它是VirtualBox虚拟机最佳的替代方案，使用它的理由有三点：\n1.轻量级，一个box只需要几百兆(Vagrant) 2.部署方便，有现成的[base\nboxes可供下载](http://www.vagrantbox.es/)(Vagrant)，并且可以自己制作Image\n3.运行流畅，几秒开机，占用内存十分的少(在我的电脑上，它甚至比Chrome占用的内存还要少)\n\n而本文所要说的Vagrant这是其在Windows上的替代方案，它是使用VirtualBox动态创建和配置虚拟环境。它基于Ruby，但必须依赖其他的虚拟环境\n构建工具，比如VirtualBox或者VM等。下面主要介绍其安装部署过程。\n\n**注：有一个快速的生成Vagrantfile的网站：<https://puphpet.com，可以选择不同的操作系统，不同的开发环境(lamp,lnmp)，如果设置了apache的域名，那么需要修改主机的host文>件**\n\n**基础环境：Windows 7 + Git for Windows**\n\n  1. ## 下载并安装基本工具\n\nOracle VM VirtualBox：<https://www.virtualbox.org/wiki/Downloads>\nVagrant：<https://www.vagrantup.com/downloads.html>\n安装完Vargrant后，可以直接在bash里查看是否安装成功\n\n\n        $vagrant -v\n    Vagrant 1.7.1\n\n  2. ## 下载box\n\nVagrant提供了一些常用的人们已经打包好了的box镜像，当然可以使用vargrant命令进行下载，但是总没有迅雷快吧，所以直接去官网下载：<http:/\n/www.vagrantbox.es/> 其中，我选择的是Ubuntu Server Trusty 14.04 amd64：<https://oss-bin\naries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box>[\n](https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-\namd64-vmwarefusion.box)注意是virtualbox版本还是vmware版本，大小只有399M\n\n  3. ## 初始化工作目录\n\n`vagrant init`  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_1.jpg)  \n此时会生成一个Vagrantfile文件，它就是该虚拟机的配置文件，可在里面配置端口或者文件的映射规则。\n**注**：其实添加box可以在任意位置添加，vagrant应该只是记录了其路径，然后`vagrant init +\nname`才是初始化的时候指定所需要的box，而默认的`vagrant init`会默认去寻找名为base的镜像。  \n\n  4. ## 添加镜像\n\n`vagrant box add`  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_2.jpg)  \n其中\"base\"就是你给镜像取的名字，`vagrant box\nlist`可以列出当前所有的box(不仅仅是该目录)，需要注意的是，由于我之前添加了一个同名的镜像，并且没删除干净，所以这里添加了一个`--force`参数\n\n  5. ## 启动\n\n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_3.jpg)  \n这就是其启动过程，可以发现它的一些基本设置：如SSH端口为2222，用户名密码均是vagrant，/vagrant映射到本地的F:/docker/ubunt\nu-server\n\n  6. ## 连接进入\n\n当虚拟机启动后，可以使用SSH连接工具XShell或者putty进行登录： 地址：127.0.0.1 端口：2222(虚拟机不同，端口会变的)\n用户名：vagrant 密码：vagrant 或者直接使用vagrant命令登录：`vagrant ssh`  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_4.jpg)  \n到这里，就可以确定安装完成了。 PS：所有创建了的box也都可以通过VirtualBox进行查看和配置：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.jpg)  \n\n# Vagrant box的打包\n\n通常，官网的list列表并不能提供我们自己所需要的运行环境，比如我有时候需要14.04的LAMP环境或者LNAMP环境，但又不想每次都重新安装一下，这时候就\n可以去官网下载一个干净的base，对其修改后打包成自己的box，以后谁要用就直接取，里面已经安装好了所需要的环境了，打包很简单，使用的是`vagrant\npackage`命令，但首先得启动该虚拟机：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.png)  \n注意我在该虚拟机的root用户目录里新建了一个名为`haofly`的文件，待会儿方便证明其确实是我修改后的box，下面只需要将`package.box`添加\n到vagrant即可使用它来创建新的虚拟机了，为了方便管理，我将其复制了出来并重命名为`ubuntu-14.04-amd64-lamp-20141225.b\nox`：  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_6.jpg)  \n\n# Vagrant Manager的安装\n\nvagrant\nmanager是一个正在开发中的vagrant的管理工具，主页在[https://github.com/lanayotech/vagrant-\nmanager-windows ](https://github.com/lanayotech/vagrant-manager-windows \"Link:\nhttps://github.com/lanayotech/vagrant-manager-windows\" )\n\n安装步骤：\n\n  1. 下载安装 到其releases列表进行下载：<https://github.com/lanayotech/vagrant-manager-windows/releases> 然后直接运行安装即可。不过要是出现以下错误   \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_7.jpg)  \n[ ](http://haofly.net/wp-content/uploads/2014/12/windows-install-\nvagrant5.jpg)表示你的电脑没有安装`.NETFramwork 4.5`那么就去安装，但如果这里点击“是”那么会跳到4.5.2去，我没安装上，所以\n之后直接下载了4.5([下载地址](http://www.microsoft.com/zh-\ncn/download/details.aspx?id=30653))安装上了\n\n  2. 界面   \n![](http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_8.jpg)  \n它没什么单独的界面，就是在右下角的一个控制图表，点击就可以了。\n\n  3. 需要注意的是：vagrant manager目前存在一个很大的缺陷就是只能操作C盘下的box，不然什么操作都会出现错误 _A Vagrant environment or target machine is required to run this command. Run `vagrant init` to create a new Vagrant environment. Or, get an ID of a target machine from `vagrant global-status` to run this command on. A final option is to change to a directory with a Vagrantfile and to try again. _其实，开发人员也一直在关注着这个问题：<https://github.com/lanayotech/vagrant-manager-windows/issues/8>\n\n# 附\n\nVagrant常用命令：\n\nvagrant box add name：添加box vagrant box list：列出当前所有的box vagrant box remove\nname：列出某个box(名字就是自己给取的，比如上面的base) vagrant box repackage name：对某个box重新打包\nvagrant init [name]：初始化当前目录为工作目录 vagrant up [name]：启动虚拟机 vagrant destroy\n[name]：删除虚拟机 vagrant suspend [name]：暂停某个box vagrant reload [name]：重新加载 vagrant\nresume [name]：恢复虚拟机 vagrant halt [name]：关闭虚拟机 vagrant ssh：连接虚拟机 vagrant\npackage --output name：如果对虚拟机的配置进行修改过后，如果想把当前环境打包，可使用这个命令 vagrant\nstatus：查看虚拟机状态\n\n## TroubleShooting\n\n  1. 在linux环境下，共享目录的权限无权限问题： `Vagrant Synced Folders Permissions` 解决方法是在Vagrantfile里面进行如下配置：\n\n        config.vm.synced_folder \"/docker/ubuntu/\", \"/var/www/html\",\n        id: \"vagrant-root\",\n        owner: \"nobody\",\n        group: \"nobody\",\n        mount_options: [\"dmode=775,fmode=664\"]\n\n  2. 连接mysql数据库出现如下错误：\n\n        Lost connection to MySQL server at 'reading initial communication packet', system error: 0\n\n那么应该是mysql的bind-address未配置正确，应该将其改为eth0的地址，而不是该虚拟机的IP地址，当然，改为0.0.0.0也行\n\n  3. 集群(同时开启多个虚拟机，虚拟机之间通过IP访问)，vagrantfile可以这样配置，例如：\n\n        # -_- mode: ruby -_-\n\n\n\n\n    # vi: set ft=ruby :\n\n\n\n\n    Vagrant.configure(2) do |config|\n        config.vm.define :master do |master|\n            master.vm.provider \"virtualbox\" do |v|\n                v.memory = \"1024\"\n                #v.gui = true\n            end\n            master.vm.box = \"django\"\n            master.vm.hostname = \"master\"\n            master.vm.network \"private_network\", ip: \"192.168.111.10\"\n            master.vm.network \"forwarded_port\", guest: 8000, host: 8000\n            master.vm.network \"forwarded_port\", guest: 3306, host: 3307\n            master.vm.synced_folder \"F:/workspace/wh_operation\", \"/django\"\n        end\n\n\n\n\n        config.vm.define :slave do |slave|\n        slave.vm.provider \"virtualbox\" do |v|\n            v.memory = \"1024\"\n            #v.gui = true\n        end\n        slave.vm.box = \"django\"\n        slave.vm.hostname = \"slave\"\n        slave.vm.network \"private_network\", ip: \"192.168.111.11\"\n    end\n\n\nend\n","slug":"windows-install-vagrant","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2png007e9vnzn5xfsg42","content":"<p><em>Docker：是一个开放源代码软件专案，在软件容器下自动布署应用程序，借此在Linux操作系统上，提供了一个额外的软件抽象层，以及操作系统层虚拟化的自动管<br>理机制[2]。Docker利用Linux内核中的资源分离机制，例如cgroups，以及Linux内核名称空间，来建立独立的软件容器（containers）。<br>这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。(维基百科)</em></p>\n<p>Docker无疑是2014年人们谈论最多的虚拟开发环境构建工具，在我看来它是VirtualBox虚拟机最佳的替代方案，使用它的理由有三点：<br>1.轻量级，一个box只需要几百兆(Vagrant) 2.部署方便，有现成的<a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">base<br>boxes可供下载</a>(Vagrant)，并且可以自己制作Image<br>3.运行流畅，几秒开机，占用内存十分的少(在我的电脑上，它甚至比Chrome占用的内存还要少)</p>\n<p>而本文所要说的Vagrant这是其在Windows上的替代方案，它是使用VirtualBox动态创建和配置虚拟环境。它基于Ruby，但必须依赖其他的虚拟环境<br>构建工具，比如VirtualBox或者VM等。下面主要介绍其安装部署过程。</p>\n<p><strong>注：有一个快速的生成Vagrantfile的网站：<a href=\"https://puphpet.com，可以选择不同的操作系统，不同的开发环境(lamp,lnmp)，如果设置了apache的域名，那么需要修改主机的host文\" target=\"_blank\" rel=\"external\">https://puphpet.com，可以选择不同的操作系统，不同的开发环境(lamp,lnmp)，如果设置了apache的域名，那么需要修改主机的host文</a>件</strong></p>\n<p><strong>基础环境：Windows 7 + Git for Windows</strong></p>\n<ol>\n<li><h2 id=\"下载并安装基本工具\"><a href=\"#下载并安装基本工具\" class=\"headerlink\" title=\"下载并安装基本工具\"></a>下载并安装基本工具</h2></li>\n</ol>\n<p>Oracle VM VirtualBox：<a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">https://www.virtualbox.org/wiki/Downloads</a><br>Vagrant：<a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"external\">https://www.vagrantup.com/downloads.html</a><br>安装完Vargrant后，可以直接在bash里查看是否安装成功</p>\n<pre><code>    $vagrant -v\nVagrant 1.7.1\n</code></pre><ol>\n<li><h2 id=\"下载box\"><a href=\"#下载box\" class=\"headerlink\" title=\"下载box\"></a>下载box</h2></li>\n</ol>\n<p>Vagrant提供了一些常用的人们已经打包好了的box镜像，当然可以使用vargrant命令进行下载，但是总没有迅雷快吧，所以直接去官网下载：<a href=\"http:/\n/www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">http:/\n/www.vagrantbox.es/</a> 其中，我选择的是Ubuntu Server Trusty 14.04 amd64：<a href=\"https://oss-bin\naries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box\" target=\"_blank\" rel=\"external\">https://oss-bin\naries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box</a><a href=\"https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-\namd64-vmwarefusion.box\" target=\"_blank\" rel=\"external\">\n</a>注意是virtualbox版本还是vmware版本，大小只有399M</p>\n<ol>\n<li><h2 id=\"初始化工作目录\"><a href=\"#初始化工作目录\" class=\"headerlink\" title=\"初始化工作目录\"></a>初始化工作目录</h2></li>\n</ol>\n<p><code>vagrant init</code><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_1.jpg\" alt=\"\"><br>此时会生成一个Vagrantfile文件，它就是该虚拟机的配置文件，可在里面配置端口或者文件的映射规则。<br><strong>注</strong>：其实添加box可以在任意位置添加，vagrant应该只是记录了其路径，然后<code>vagrant init +\nname</code>才是初始化的时候指定所需要的box，而默认的<code>vagrant init</code>会默认去寻找名为base的镜像。  </p>\n<ol>\n<li><h2 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h2></li>\n</ol>\n<p><code>vagrant box add</code><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_2.jpg\" alt=\"\"><br>其中”base”就是你给镜像取的名字，<code>vagrant box\nlist</code>可以列出当前所有的box(不仅仅是该目录)，需要注意的是，由于我之前添加了一个同名的镜像，并且没删除干净，所以这里添加了一个<code>--force</code>参数</p>\n<ol>\n<li><h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2></li>\n</ol>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_3.jpg\" alt=\"\"><br>这就是其启动过程，可以发现它的一些基本设置：如SSH端口为2222，用户名密码均是vagrant，/vagrant映射到本地的F:/docker/ubunt<br>u-server</p>\n<ol>\n<li><h2 id=\"连接进入\"><a href=\"#连接进入\" class=\"headerlink\" title=\"连接进入\"></a>连接进入</h2></li>\n</ol>\n<p>当虚拟机启动后，可以使用SSH连接工具XShell或者putty进行登录： 地址：127.0.0.1 端口：2222(虚拟机不同，端口会变的)<br>用户名：vagrant 密码：vagrant 或者直接使用vagrant命令登录：<code>vagrant ssh</code><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_4.jpg\" alt=\"\"><br>到这里，就可以确定安装完成了。 PS：所有创建了的box也都可以通过VirtualBox进行查看和配置：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.jpg\" alt=\"\">  </p>\n<h1 id=\"Vagrant-box的打包\"><a href=\"#Vagrant-box的打包\" class=\"headerlink\" title=\"Vagrant box的打包\"></a>Vagrant box的打包</h1><p>通常，官网的list列表并不能提供我们自己所需要的运行环境，比如我有时候需要14.04的LAMP环境或者LNAMP环境，但又不想每次都重新安装一下，这时候就<br>可以去官网下载一个干净的base，对其修改后打包成自己的box，以后谁要用就直接取，里面已经安装好了所需要的环境了，打包很简单，使用的是<code>vagrant\npackage</code>命令，但首先得启动该虚拟机：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.png\" alt=\"\"><br>注意我在该虚拟机的root用户目录里新建了一个名为<code>haofly</code>的文件，待会儿方便证明其确实是我修改后的box，下面只需要将<code>package.box</code>添加<br>到vagrant即可使用它来创建新的虚拟机了，为了方便管理，我将其复制了出来并重命名为<code>ubuntu-14.04-amd64-lamp-20141225.b\nox</code>：  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_6.jpg\" alt=\"\">  </p>\n<h1 id=\"Vagrant-Manager的安装\"><a href=\"#Vagrant-Manager的安装\" class=\"headerlink\" title=\"Vagrant Manager的安装\"></a>Vagrant Manager的安装</h1><p>vagrant<br>manager是一个正在开发中的vagrant的管理工具，主页在<a href=\"https://github.com/lanayotech/vagrant-manager-windows\" title=\"Link:\nhttps://github.com/lanayotech/vagrant-manager-windows\" target=\"_blank\" rel=\"external\">https://github.com/lanayotech/vagrant-<br>manager-windows </a></p>\n<p>安装步骤：</p>\n<ol>\n<li><p>下载安装 到其releases列表进行下载：<a href=\"https://github.com/lanayotech/vagrant-manager-windows/releases\" target=\"_blank\" rel=\"external\">https://github.com/lanayotech/vagrant-manager-windows/releases</a> 然后直接运行安装即可。不过要是出现以下错误<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_7.jpg\" alt=\"\"><br><a href=\"http://haofly.net/wp-content/uploads/2014/12/windows-install-\nvagrant5.jpg\"> </a>表示你的电脑没有安装<code>.NETFramwork 4.5</code>那么就去安装，但如果这里点击“是”那么会跳到4.5.2去，我没安装上，所以<br>之后直接下载了4.5(<a href=\"http://www.microsoft.com/zh-\ncn/download/details.aspx?id=30653\" target=\"_blank\" rel=\"external\">下载地址</a>)安装上了</p>\n</li>\n<li><p>界面<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_8.jpg\" alt=\"\"><br>它没什么单独的界面，就是在右下角的一个控制图表，点击就可以了。</p>\n</li>\n<li><p>需要注意的是：vagrant manager目前存在一个很大的缺陷就是只能操作C盘下的box，不然什么操作都会出现错误 <em>A Vagrant environment or target machine is required to run this command. Run <code>vagrant init</code> to create a new Vagrant environment. Or, get an ID of a target machine from <code>vagrant global-status</code> to run this command on. A final option is to change to a directory with a Vagrantfile and to try again. </em>其实，开发人员也一直在关注着这个问题：<a href=\"https://github.com/lanayotech/vagrant-manager-windows/issues/8\" target=\"_blank\" rel=\"external\">https://github.com/lanayotech/vagrant-manager-windows/issues/8</a></p>\n</li>\n</ol>\n<h1 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h1><p>Vagrant常用命令：</p>\n<p>vagrant box add name：添加box vagrant box list：列出当前所有的box vagrant box remove<br>name：列出某个box(名字就是自己给取的，比如上面的base) vagrant box repackage name：对某个box重新打包<br>vagrant init [name]：初始化当前目录为工作目录 vagrant up [name]：启动虚拟机 vagrant destroy<br>[name]：删除虚拟机 vagrant suspend [name]：暂停某个box vagrant reload [name]：重新加载 vagrant<br>resume [name]：恢复虚拟机 vagrant halt [name]：关闭虚拟机 vagrant ssh：连接虚拟机 vagrant<br>package –output name：如果对虚拟机的配置进行修改过后，如果想把当前环境打包，可使用这个命令 vagrant<br>status：查看虚拟机状态</p>\n<h2 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h2><ol>\n<li><p>在linux环境下，共享目录的权限无权限问题： <code>Vagrant Synced Folders Permissions</code> 解决方法是在Vagrantfile里面进行如下配置：</p>\n<p>   config.vm.synced_folder “/docker/ubuntu/“, “/var/www/html”,<br>   id: “vagrant-root”,<br>   owner: “nobody”,<br>   group: “nobody”,<br>   mount_options: [“dmode=775,fmode=664”]</p>\n</li>\n<li><p>连接mysql数据库出现如下错误：</p>\n<p>   Lost connection to MySQL server at ‘reading initial communication packet’, system error: 0</p>\n</li>\n</ol>\n<p>那么应该是mysql的bind-address未配置正确，应该将其改为eth0的地址，而不是该虚拟机的IP地址，当然，改为0.0.0.0也行</p>\n<ol>\n<li><p>集群(同时开启多个虚拟机，虚拟机之间通过IP访问)，vagrantfile可以这样配置，例如：</p>\n<h1 id=\"mode-ruby\"><a href=\"#mode-ruby\" class=\"headerlink\" title=\"-- mode: ruby --\"></a>-<em>- mode: ruby -</em>-</h1></li>\n</ol>\n<pre><code># vi: set ft=ruby :\n\n\n\n\nVagrant.configure(2) do |config|\n    config.vm.define :master do |master|\n        master.vm.provider &quot;virtualbox&quot; do |v|\n            v.memory = &quot;1024&quot;\n            #v.gui = true\n        end\n        master.vm.box = &quot;django&quot;\n        master.vm.hostname = &quot;master&quot;\n        master.vm.network &quot;private_network&quot;, ip: &quot;192.168.111.10&quot;\n        master.vm.network &quot;forwarded_port&quot;, guest: 8000, host: 8000\n        master.vm.network &quot;forwarded_port&quot;, guest: 3306, host: 3307\n        master.vm.synced_folder &quot;F:/workspace/wh_operation&quot;, &quot;/django&quot;\n    end\n\n\n\n\n    config.vm.define :slave do |slave|\n    slave.vm.provider &quot;virtualbox&quot; do |v|\n        v.memory = &quot;1024&quot;\n        #v.gui = true\n    end\n    slave.vm.box = &quot;django&quot;\n    slave.vm.hostname = &quot;slave&quot;\n    slave.vm.network &quot;private_network&quot;, ip: &quot;192.168.111.11&quot;\nend\n</code></pre><p>end</p>\n","excerpt":"","more":"<p><em>Docker：是一个开放源代码软件专案，在软件容器下自动布署应用程序，借此在Linux操作系统上，提供了一个额外的软件抽象层，以及操作系统层虚拟化的自动管<br>理机制[2]。Docker利用Linux内核中的资源分离机制，例如cgroups，以及Linux内核名称空间，来建立独立的软件容器（containers）。<br>这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。(维基百科)</em></p>\n<p>Docker无疑是2014年人们谈论最多的虚拟开发环境构建工具，在我看来它是VirtualBox虚拟机最佳的替代方案，使用它的理由有三点：<br>1.轻量级，一个box只需要几百兆(Vagrant) 2.部署方便，有现成的<a href=\"http://www.vagrantbox.es/\">base<br>boxes可供下载</a>(Vagrant)，并且可以自己制作Image<br>3.运行流畅，几秒开机，占用内存十分的少(在我的电脑上，它甚至比Chrome占用的内存还要少)</p>\n<p>而本文所要说的Vagrant这是其在Windows上的替代方案，它是使用VirtualBox动态创建和配置虚拟环境。它基于Ruby，但必须依赖其他的虚拟环境<br>构建工具，比如VirtualBox或者VM等。下面主要介绍其安装部署过程。</p>\n<p><strong>注：有一个快速的生成Vagrantfile的网站：<a href=\"https://puphpet.com，可以选择不同的操作系统，不同的开发环境(lamp,lnmp)，如果设置了apache的域名，那么需要修改主机的host文\">https://puphpet.com，可以选择不同的操作系统，不同的开发环境(lamp,lnmp)，如果设置了apache的域名，那么需要修改主机的host文</a>件</strong></p>\n<p><strong>基础环境：Windows 7 + Git for Windows</strong></p>\n<ol>\n<li><h2 id=\"下载并安装基本工具\"><a href=\"#下载并安装基本工具\" class=\"headerlink\" title=\"下载并安装基本工具\"></a>下载并安装基本工具</h2></li>\n</ol>\n<p>Oracle VM VirtualBox：<a href=\"https://www.virtualbox.org/wiki/Downloads\">https://www.virtualbox.org/wiki/Downloads</a><br>Vagrant：<a href=\"https://www.vagrantup.com/downloads.html\">https://www.vagrantup.com/downloads.html</a><br>安装完Vargrant后，可以直接在bash里查看是否安装成功</p>\n<pre><code>    $vagrant -v\nVagrant 1.7.1\n</code></pre><ol>\n<li><h2 id=\"下载box\"><a href=\"#下载box\" class=\"headerlink\" title=\"下载box\"></a>下载box</h2></li>\n</ol>\n<p>Vagrant提供了一些常用的人们已经打包好了的box镜像，当然可以使用vargrant命令进行下载，但是总没有迅雷快吧，所以直接去官网下载：<a href=\"http:/\n/www.vagrantbox.es/\">http:/\n/www.vagrantbox.es/</a> 其中，我选择的是Ubuntu Server Trusty 14.04 amd64：<a href=\"https://oss-bin\naries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box\">https://oss-bin\naries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box</a><a href=\"https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-\namd64-vmwarefusion.box\">\n</a>注意是virtualbox版本还是vmware版本，大小只有399M</p>\n<ol>\n<li><h2 id=\"初始化工作目录\"><a href=\"#初始化工作目录\" class=\"headerlink\" title=\"初始化工作目录\"></a>初始化工作目录</h2></li>\n</ol>\n<p><code>vagrant init</code><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_1.jpg\" alt=\"\"><br>此时会生成一个Vagrantfile文件，它就是该虚拟机的配置文件，可在里面配置端口或者文件的映射规则。<br><strong>注</strong>：其实添加box可以在任意位置添加，vagrant应该只是记录了其路径，然后<code>vagrant init +\nname</code>才是初始化的时候指定所需要的box，而默认的<code>vagrant init</code>会默认去寻找名为base的镜像。  </p>\n<ol>\n<li><h2 id=\"添加镜像\"><a href=\"#添加镜像\" class=\"headerlink\" title=\"添加镜像\"></a>添加镜像</h2></li>\n</ol>\n<p><code>vagrant box add</code><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_2.jpg\" alt=\"\"><br>其中”base”就是你给镜像取的名字，<code>vagrant box\nlist</code>可以列出当前所有的box(不仅仅是该目录)，需要注意的是，由于我之前添加了一个同名的镜像，并且没删除干净，所以这里添加了一个<code>--force</code>参数</p>\n<ol>\n<li><h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2></li>\n</ol>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_3.jpg\" alt=\"\"><br>这就是其启动过程，可以发现它的一些基本设置：如SSH端口为2222，用户名密码均是vagrant，/vagrant映射到本地的F:/docker/ubunt<br>u-server</p>\n<ol>\n<li><h2 id=\"连接进入\"><a href=\"#连接进入\" class=\"headerlink\" title=\"连接进入\"></a>连接进入</h2></li>\n</ol>\n<p>当虚拟机启动后，可以使用SSH连接工具XShell或者putty进行登录： 地址：127.0.0.1 端口：2222(虚拟机不同，端口会变的)<br>用户名：vagrant 密码：vagrant 或者直接使用vagrant命令登录：<code>vagrant ssh</code><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_4.jpg\" alt=\"\"><br>到这里，就可以确定安装完成了。 PS：所有创建了的box也都可以通过VirtualBox进行查看和配置：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.jpg\" alt=\"\">  </p>\n<h1 id=\"Vagrant-box的打包\"><a href=\"#Vagrant-box的打包\" class=\"headerlink\" title=\"Vagrant box的打包\"></a>Vagrant box的打包</h1><p>通常，官网的list列表并不能提供我们自己所需要的运行环境，比如我有时候需要14.04的LAMP环境或者LNAMP环境，但又不想每次都重新安装一下，这时候就<br>可以去官网下载一个干净的base，对其修改后打包成自己的box，以后谁要用就直接取，里面已经安装好了所需要的环境了，打包很简单，使用的是<code>vagrant\npackage</code>命令，但首先得启动该虚拟机：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_5.png\" alt=\"\"><br>注意我在该虚拟机的root用户目录里新建了一个名为<code>haofly</code>的文件，待会儿方便证明其确实是我修改后的box，下面只需要将<code>package.box</code>添加<br>到vagrant即可使用它来创建新的虚拟机了，为了方便管理，我将其复制了出来并重命名为<code>ubuntu-14.04-amd64-lamp-20141225.b\nox</code>：  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_6.jpg\" alt=\"\">  </p>\n<h1 id=\"Vagrant-Manager的安装\"><a href=\"#Vagrant-Manager的安装\" class=\"headerlink\" title=\"Vagrant Manager的安装\"></a>Vagrant Manager的安装</h1><p>vagrant<br>manager是一个正在开发中的vagrant的管理工具，主页在<a href=\"https://github.com/lanayotech/vagrant-manager-windows\" title=\"Link:\nhttps://github.com/lanayotech/vagrant-manager-windows\">https://github.com/lanayotech/vagrant-<br>manager-windows </a></p>\n<p>安装步骤：</p>\n<ol>\n<li><p>下载安装 到其releases列表进行下载：<a href=\"https://github.com/lanayotech/vagrant-manager-windows/releases\">https://github.com/lanayotech/vagrant-manager-windows/releases</a> 然后直接运行安装即可。不过要是出现以下错误<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_7.jpg\" alt=\"\"><br><a href=\"http://haofly.net/wp-content/uploads/2014/12/windows-install-\nvagrant5.jpg\"> </a>表示你的电脑没有安装<code>.NETFramwork 4.5</code>那么就去安装，但如果这里点击“是”那么会跳到4.5.2去，我没安装上，所以<br>之后直接下载了4.5(<a href=\"http://www.microsoft.com/zh-\ncn/download/details.aspx?id=30653\">下载地址</a>)安装上了</p>\n</li>\n<li><p>界面<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/windows-install-vagrant_8.jpg\" alt=\"\"><br>它没什么单独的界面，就是在右下角的一个控制图表，点击就可以了。</p>\n</li>\n<li><p>需要注意的是：vagrant manager目前存在一个很大的缺陷就是只能操作C盘下的box，不然什么操作都会出现错误 <em>A Vagrant environment or target machine is required to run this command. Run <code>vagrant init</code> to create a new Vagrant environment. Or, get an ID of a target machine from <code>vagrant global-status</code> to run this command on. A final option is to change to a directory with a Vagrantfile and to try again. </em>其实，开发人员也一直在关注着这个问题：<a href=\"https://github.com/lanayotech/vagrant-manager-windows/issues/8\">https://github.com/lanayotech/vagrant-manager-windows/issues/8</a></p>\n</li>\n</ol>\n<h1 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h1><p>Vagrant常用命令：</p>\n<p>vagrant box add name：添加box vagrant box list：列出当前所有的box vagrant box remove<br>name：列出某个box(名字就是自己给取的，比如上面的base) vagrant box repackage name：对某个box重新打包<br>vagrant init [name]：初始化当前目录为工作目录 vagrant up [name]：启动虚拟机 vagrant destroy<br>[name]：删除虚拟机 vagrant suspend [name]：暂停某个box vagrant reload [name]：重新加载 vagrant<br>resume [name]：恢复虚拟机 vagrant halt [name]：关闭虚拟机 vagrant ssh：连接虚拟机 vagrant<br>package –output name：如果对虚拟机的配置进行修改过后，如果想把当前环境打包，可使用这个命令 vagrant<br>status：查看虚拟机状态</p>\n<h2 id=\"TroubleShooting\"><a href=\"#TroubleShooting\" class=\"headerlink\" title=\"TroubleShooting\"></a>TroubleShooting</h2><ol>\n<li><p>在linux环境下，共享目录的权限无权限问题： <code>Vagrant Synced Folders Permissions</code> 解决方法是在Vagrantfile里面进行如下配置：</p>\n<p>   config.vm.synced_folder “/docker/ubuntu/“, “/var/www/html”,<br>   id: “vagrant-root”,<br>   owner: “nobody”,<br>   group: “nobody”,<br>   mount_options: [“dmode=775,fmode=664”]</p>\n</li>\n<li><p>连接mysql数据库出现如下错误：</p>\n<p>   Lost connection to MySQL server at ‘reading initial communication packet’, system error: 0</p>\n</li>\n</ol>\n<p>那么应该是mysql的bind-address未配置正确，应该将其改为eth0的地址，而不是该虚拟机的IP地址，当然，改为0.0.0.0也行</p>\n<ol>\n<li><p>集群(同时开启多个虚拟机，虚拟机之间通过IP访问)，vagrantfile可以这样配置，例如：</p>\n<h1 id=\"mode-ruby\"><a href=\"#mode-ruby\" class=\"headerlink\" title=\"-- mode: ruby --\"></a>-<em>- mode: ruby -</em>-</h1></li>\n</ol>\n<pre><code># vi: set ft=ruby :\n\n\n\n\nVagrant.configure(2) do |config|\n    config.vm.define :master do |master|\n        master.vm.provider &quot;virtualbox&quot; do |v|\n            v.memory = &quot;1024&quot;\n            #v.gui = true\n        end\n        master.vm.box = &quot;django&quot;\n        master.vm.hostname = &quot;master&quot;\n        master.vm.network &quot;private_network&quot;, ip: &quot;192.168.111.10&quot;\n        master.vm.network &quot;forwarded_port&quot;, guest: 8000, host: 8000\n        master.vm.network &quot;forwarded_port&quot;, guest: 3306, host: 3307\n        master.vm.synced_folder &quot;F:/workspace/wh_operation&quot;, &quot;/django&quot;\n    end\n\n\n\n\n    config.vm.define :slave do |slave|\n    slave.vm.provider &quot;virtualbox&quot; do |v|\n        v.memory = &quot;1024&quot;\n        #v.gui = true\n    end\n    slave.vm.box = &quot;django&quot;\n    slave.vm.hostname = &quot;slave&quot;\n    slave.vm.network &quot;private_network&quot;, ip: &quot;192.168.111.11&quot;\nend\n</code></pre><p>end</p>\n"},{"title":"《谁的青春不迷茫》","date":"2014-04-15T02:30:54.000Z","_content":"[《谁的青春不迷茫》——刘同](http://www.amazon.cn/\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B\n8\\%8D\\%E8\\%BF\\%B7\\%E8\\%8C\\%AB-\\%E5\\%88\\%98\\%E5\\%90\\%8C/dp/B00A67K0A2/ref=sr_1_1?ie=UTF8&qid\n=1399975828&sr=8-1&keywords=\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B8\\%8D\\%E8\\%B\nF\\%B7\\%E8\\%8C\\%AB) 刘同这个人无疑是一个成功的人，他是一个隐士，是一个大隐隐于朝的隐士.是啊，谁的青春都有迷茫的时候，就像我现在一样.在这个时候我\n们要做得首先是要认识自己。按照书中的提示，我做了如下反思：\n\n## 前后十年\n\n### 十年前\n\n十年前，我只有十岁，收到人生第一个蛋糕.那时候的我应该是在读四年级，仔细回想四年级的生活，发现也没多少东西可回忆的.那时候的我性格怎么说呢，比较懦弱吧，作为\n一个全校成绩最差的班级里成绩最好的学生，一直都有着丢不掉的光环，当然也是经常受调皮的学生欺负的对象，我在这里之所以说的是成绩最差，是因为我那些同学们都是很可\n爱的，他们只是成绩差，调皮点，其它没什么不好的。而且他们之中现在还在上大学的没有几个了，孩子最大的应该有三岁了吧，其他人找工作、结婚生子都有，有时候看看他们\n的空间，都过得挺快乐的.哪像我，居然还在上学.那时候的我最大的梦想应该是要成为一个科学家吧，当时只知道科学家这个东西，完全不知道科学家要干什么.那时候憧憬着\n上更高的学校，幻想着十年后的现在应该是无拘无束，一个人在外，完全不用再听父母唠叨，在家里也有发言权了，可以过自己想要的生活.那时候我每天就是六点过就起床，主\n要原因是养成了习惯，起床自己炒饭吃.那时候喜欢着，额，几个女生，当时什么都不知道，就单纯的喜欢，就想在一起玩儿.\n\n### 现在\n\n现在的我真的在读大学了，20岁，一个不高不低的年级，做着很多大学生都在做的事，也经历着很多大学生都要经历的东西.大二的我，正处于人生最迷茫的时期，根本不知道\n自己的梦想是什么，也不知道自己未来想要的生活到底是什么.面对就业和未来的压力，完全不知所措。家里人还好，并没有给我施加太多的压力，爸爸还说要给我房子付首付，\n虽然很开心，但我可不愿意让爸爸再去辛苦了.这学期初步决定不去考研了，所以我也知道接下来的两年里我会比考研的更累，最近是在跟着米建勋学模式识别，跟着陈龙分析一\n个软件，课内的作业也挺多的，虽然课很少，但事情太多了.而且我还给自己布置了任务，比如学习coursera的课程，坚持写博客文章等等。还有很多事，班级主页、a\ncm比赛，真的好忙，而且很多都是我自己想做的，是我自己给自己的压力太多了吗，还是我真的不够坚强，努力得还不够.我现在很想找一个女朋友，要求很简单，能看上我就\n行(哈哈，这要求貌似也是最难得，谁会找一个身高只有一米六的男生呢).希望我能早点找到命中的她.\n\n### 十年后\n\n十年后，我三十岁，孩子应该能叫爸爸了，房子应该也有了，不过贷款肯定没还完，车子我可没有奢侈，应该是过上了自己想要的生活的，我的妻子一定是一个贤妻良母，她能把\n家里管理的井井有条，而且还能在自己喜欢的事业上有所收获.那时候的我最大的梦想应该是退休过后和另一半到处去旅游，盼望着早点退休.我有一套自认为非常好的育儿方案\n，保证可以让他在大学期间就可以自食其力并且活得开开心心的。那样我们也可以早点退休啦.\n\n### 自问自答：\n\n20岁时你最大的梦想是什么？ 找一个女朋友 20岁时你的状态是什么样子？ 每天都很忙，却不知道未来该怎么走 你觉得20岁时一个人必须要尝试的一件事，是什么？\n一个人旅行 你对自己目前的状态满意吗？ 不满意，太迷茫了 你是否觉得生活越来越充满压力，你如何面对压力？ 压力太多了，只有靠做事来防止自己去想\n爱情、事业、友情、娱乐，你如何排序？ 爱情、友情、事业、娱乐 如果让你用一种动物来形容自己，你觉得什么比较合适，为什么？\n狗，每天都累得趴下，身体还好一点，大脑到了睡的时候完全是一种懵的状态 如果时光可以倒流，你还会给自己规划另外一种人生吗？什么样的人生？\n也许不会吧，我喜欢计算机，如果可以倒流，我倒是想早一点接触计算机 在你成长过程中感觉走的最关键的一步是什么？ 选择了计算机\n\n### 语录：\n\n_**你觉得孤独就对了，那是让你认识自己的机会；你觉得不被理解就对了，那是让你认清朋友的机会；你觉得黑暗就对了，那是让你发现光芒的机会；你觉得无助就对了，那\n样你才能知道谁是你的贵人；你觉得迷茫就对了，谁的青春不迷茫**_ _**成长中每一次低头，都是对自己的肯定**_ _**“我很好”不是指你终于熬到了有钱，有\n了朋友，有了人照顾的日子。而是你终于可以习惯没有钱，没有朋友，没有人照顾的日子.“我很好”是告诉他们，你越来越能接受现实，而不是越来越现实**_\n_**成长不就是这样吗？不是学到就是得到**_\n_**你成长中所遇到的问题，都是为你量身定做的。解决了，你就成为了你这类人当众的幸存者。不解决，你永远也不知道自己可能成为谁**_\n_**因为年轻，所以没有选择，只能试试**_ _**骑不快的单车，载满你的忧郁**_ _**我们之所以战斗，不是为了改变世界，而是为了不让世界改变我们**_\n_**人生最大的冒险就是不冒险**_ _**很多人闯进你的生命里，只为给你上一课，然后转身匆匆就走**_\n_**有时候，你没那么重要，轻一点，或许活得更好**_ _**我们留住一些什么，只是想证明从前**_\n_**说到底，所有的理由还是不适合，不是你生命的那个人，就不要因此而让自己困扰了**_ _**“活在自己的年龄里”是件重要的事**_\n_**如果要在自己年轻的时候做更多的梦，就一定要找到那些和你一起做梦的朋友**_ _**笑一笑，对方就败了**_\n_**不要因为曾经的伤害，而失去获取再次深爱的机会**_ _**要知道以后的路，那就不叫人生了.那叫任命**_\n_**我们都需要一见钟情很多人，两情相悦一些人，最后才会白头偕老一个人**_ _**人生有两种境界，一种是痛而不言，另一种是笑而不语**_\n_**失去了才觉得美丽，那年那月，我们其实并不懂得珍惜**_\n","source":"_posts/whose-youth-is-not-confused.md","raw":"---\ntitle: \"《谁的青春不迷茫》\"\ndate: 2014-04-15 10:30:54\ncategories: 韦编三绝\n---\n[《谁的青春不迷茫》——刘同](http://www.amazon.cn/\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B\n8\\%8D\\%E8\\%BF\\%B7\\%E8\\%8C\\%AB-\\%E5\\%88\\%98\\%E5\\%90\\%8C/dp/B00A67K0A2/ref=sr_1_1?ie=UTF8&qid\n=1399975828&sr=8-1&keywords=\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B8\\%8D\\%E8\\%B\nF\\%B7\\%E8\\%8C\\%AB) 刘同这个人无疑是一个成功的人，他是一个隐士，是一个大隐隐于朝的隐士.是啊，谁的青春都有迷茫的时候，就像我现在一样.在这个时候我\n们要做得首先是要认识自己。按照书中的提示，我做了如下反思：\n\n## 前后十年\n\n### 十年前\n\n十年前，我只有十岁，收到人生第一个蛋糕.那时候的我应该是在读四年级，仔细回想四年级的生活，发现也没多少东西可回忆的.那时候的我性格怎么说呢，比较懦弱吧，作为\n一个全校成绩最差的班级里成绩最好的学生，一直都有着丢不掉的光环，当然也是经常受调皮的学生欺负的对象，我在这里之所以说的是成绩最差，是因为我那些同学们都是很可\n爱的，他们只是成绩差，调皮点，其它没什么不好的。而且他们之中现在还在上大学的没有几个了，孩子最大的应该有三岁了吧，其他人找工作、结婚生子都有，有时候看看他们\n的空间，都过得挺快乐的.哪像我，居然还在上学.那时候的我最大的梦想应该是要成为一个科学家吧，当时只知道科学家这个东西，完全不知道科学家要干什么.那时候憧憬着\n上更高的学校，幻想着十年后的现在应该是无拘无束，一个人在外，完全不用再听父母唠叨，在家里也有发言权了，可以过自己想要的生活.那时候我每天就是六点过就起床，主\n要原因是养成了习惯，起床自己炒饭吃.那时候喜欢着，额，几个女生，当时什么都不知道，就单纯的喜欢，就想在一起玩儿.\n\n### 现在\n\n现在的我真的在读大学了，20岁，一个不高不低的年级，做着很多大学生都在做的事，也经历着很多大学生都要经历的东西.大二的我，正处于人生最迷茫的时期，根本不知道\n自己的梦想是什么，也不知道自己未来想要的生活到底是什么.面对就业和未来的压力，完全不知所措。家里人还好，并没有给我施加太多的压力，爸爸还说要给我房子付首付，\n虽然很开心，但我可不愿意让爸爸再去辛苦了.这学期初步决定不去考研了，所以我也知道接下来的两年里我会比考研的更累，最近是在跟着米建勋学模式识别，跟着陈龙分析一\n个软件，课内的作业也挺多的，虽然课很少，但事情太多了.而且我还给自己布置了任务，比如学习coursera的课程，坚持写博客文章等等。还有很多事，班级主页、a\ncm比赛，真的好忙，而且很多都是我自己想做的，是我自己给自己的压力太多了吗，还是我真的不够坚强，努力得还不够.我现在很想找一个女朋友，要求很简单，能看上我就\n行(哈哈，这要求貌似也是最难得，谁会找一个身高只有一米六的男生呢).希望我能早点找到命中的她.\n\n### 十年后\n\n十年后，我三十岁，孩子应该能叫爸爸了，房子应该也有了，不过贷款肯定没还完，车子我可没有奢侈，应该是过上了自己想要的生活的，我的妻子一定是一个贤妻良母，她能把\n家里管理的井井有条，而且还能在自己喜欢的事业上有所收获.那时候的我最大的梦想应该是退休过后和另一半到处去旅游，盼望着早点退休.我有一套自认为非常好的育儿方案\n，保证可以让他在大学期间就可以自食其力并且活得开开心心的。那样我们也可以早点退休啦.\n\n### 自问自答：\n\n20岁时你最大的梦想是什么？ 找一个女朋友 20岁时你的状态是什么样子？ 每天都很忙，却不知道未来该怎么走 你觉得20岁时一个人必须要尝试的一件事，是什么？\n一个人旅行 你对自己目前的状态满意吗？ 不满意，太迷茫了 你是否觉得生活越来越充满压力，你如何面对压力？ 压力太多了，只有靠做事来防止自己去想\n爱情、事业、友情、娱乐，你如何排序？ 爱情、友情、事业、娱乐 如果让你用一种动物来形容自己，你觉得什么比较合适，为什么？\n狗，每天都累得趴下，身体还好一点，大脑到了睡的时候完全是一种懵的状态 如果时光可以倒流，你还会给自己规划另外一种人生吗？什么样的人生？\n也许不会吧，我喜欢计算机，如果可以倒流，我倒是想早一点接触计算机 在你成长过程中感觉走的最关键的一步是什么？ 选择了计算机\n\n### 语录：\n\n_**你觉得孤独就对了，那是让你认识自己的机会；你觉得不被理解就对了，那是让你认清朋友的机会；你觉得黑暗就对了，那是让你发现光芒的机会；你觉得无助就对了，那\n样你才能知道谁是你的贵人；你觉得迷茫就对了，谁的青春不迷茫**_ _**成长中每一次低头，都是对自己的肯定**_ _**“我很好”不是指你终于熬到了有钱，有\n了朋友，有了人照顾的日子。而是你终于可以习惯没有钱，没有朋友，没有人照顾的日子.“我很好”是告诉他们，你越来越能接受现实，而不是越来越现实**_\n_**成长不就是这样吗？不是学到就是得到**_\n_**你成长中所遇到的问题，都是为你量身定做的。解决了，你就成为了你这类人当众的幸存者。不解决，你永远也不知道自己可能成为谁**_\n_**因为年轻，所以没有选择，只能试试**_ _**骑不快的单车，载满你的忧郁**_ _**我们之所以战斗，不是为了改变世界，而是为了不让世界改变我们**_\n_**人生最大的冒险就是不冒险**_ _**很多人闯进你的生命里，只为给你上一课，然后转身匆匆就走**_\n_**有时候，你没那么重要，轻一点，或许活得更好**_ _**我们留住一些什么，只是想证明从前**_\n_**说到底，所有的理由还是不适合，不是你生命的那个人，就不要因此而让自己困扰了**_ _**“活在自己的年龄里”是件重要的事**_\n_**如果要在自己年轻的时候做更多的梦，就一定要找到那些和你一起做梦的朋友**_ _**笑一笑，对方就败了**_\n_**不要因为曾经的伤害，而失去获取再次深爱的机会**_ _**要知道以后的路，那就不叫人生了.那叫任命**_\n_**我们都需要一见钟情很多人，两情相悦一些人，最后才会白头偕老一个人**_ _**人生有两种境界，一种是痛而不言，另一种是笑而不语**_\n_**失去了才觉得美丽，那年那月，我们其实并不懂得珍惜**_\n","slug":"whose-youth-is-not-confused","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pnl007g9vnzqged2lu8","content":"<p><a href=\"http://www.amazon.cn/\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B\n8\\%8D\\%E8\\%BF\\%B7\\%E8\\%8C\\%AB-\\%E5\\%88\\%98\\%E5\\%90\\%8C/dp/B00A67K0A2/ref=sr_1_1?ie=UTF8&amp;qid\n=1399975828&amp;sr=8-1&amp;keywords=\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B8\\%8D\\%E8\\%B\nF\\%B7\\%E8\\%8C\\%AB\" target=\"_blank\" rel=\"external\">《谁的青春不迷茫》——刘同</a> 刘同这个人无疑是一个成功的人，他是一个隐士，是一个大隐隐于朝的隐士.是啊，谁的青春都有迷茫的时候，就像我现在一样.在这个时候我<br>们要做得首先是要认识自己。按照书中的提示，我做了如下反思：</p>\n<h2 id=\"前后十年\"><a href=\"#前后十年\" class=\"headerlink\" title=\"前后十年\"></a>前后十年</h2><h3 id=\"十年前\"><a href=\"#十年前\" class=\"headerlink\" title=\"十年前\"></a>十年前</h3><p>十年前，我只有十岁，收到人生第一个蛋糕.那时候的我应该是在读四年级，仔细回想四年级的生活，发现也没多少东西可回忆的.那时候的我性格怎么说呢，比较懦弱吧，作为<br>一个全校成绩最差的班级里成绩最好的学生，一直都有着丢不掉的光环，当然也是经常受调皮的学生欺负的对象，我在这里之所以说的是成绩最差，是因为我那些同学们都是很可<br>爱的，他们只是成绩差，调皮点，其它没什么不好的。而且他们之中现在还在上大学的没有几个了，孩子最大的应该有三岁了吧，其他人找工作、结婚生子都有，有时候看看他们<br>的空间，都过得挺快乐的.哪像我，居然还在上学.那时候的我最大的梦想应该是要成为一个科学家吧，当时只知道科学家这个东西，完全不知道科学家要干什么.那时候憧憬着<br>上更高的学校，幻想着十年后的现在应该是无拘无束，一个人在外，完全不用再听父母唠叨，在家里也有发言权了，可以过自己想要的生活.那时候我每天就是六点过就起床，主<br>要原因是养成了习惯，起床自己炒饭吃.那时候喜欢着，额，几个女生，当时什么都不知道，就单纯的喜欢，就想在一起玩儿.</p>\n<h3 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h3><p>现在的我真的在读大学了，20岁，一个不高不低的年级，做着很多大学生都在做的事，也经历着很多大学生都要经历的东西.大二的我，正处于人生最迷茫的时期，根本不知道<br>自己的梦想是什么，也不知道自己未来想要的生活到底是什么.面对就业和未来的压力，完全不知所措。家里人还好，并没有给我施加太多的压力，爸爸还说要给我房子付首付，<br>虽然很开心，但我可不愿意让爸爸再去辛苦了.这学期初步决定不去考研了，所以我也知道接下来的两年里我会比考研的更累，最近是在跟着米建勋学模式识别，跟着陈龙分析一<br>个软件，课内的作业也挺多的，虽然课很少，但事情太多了.而且我还给自己布置了任务，比如学习coursera的课程，坚持写博客文章等等。还有很多事，班级主页、a<br>cm比赛，真的好忙，而且很多都是我自己想做的，是我自己给自己的压力太多了吗，还是我真的不够坚强，努力得还不够.我现在很想找一个女朋友，要求很简单，能看上我就<br>行(哈哈，这要求貌似也是最难得，谁会找一个身高只有一米六的男生呢).希望我能早点找到命中的她.</p>\n<h3 id=\"十年后\"><a href=\"#十年后\" class=\"headerlink\" title=\"十年后\"></a>十年后</h3><p>十年后，我三十岁，孩子应该能叫爸爸了，房子应该也有了，不过贷款肯定没还完，车子我可没有奢侈，应该是过上了自己想要的生活的，我的妻子一定是一个贤妻良母，她能把<br>家里管理的井井有条，而且还能在自己喜欢的事业上有所收获.那时候的我最大的梦想应该是退休过后和另一半到处去旅游，盼望着早点退休.我有一套自认为非常好的育儿方案<br>，保证可以让他在大学期间就可以自食其力并且活得开开心心的。那样我们也可以早点退休啦.</p>\n<h3 id=\"自问自答：\"><a href=\"#自问自答：\" class=\"headerlink\" title=\"自问自答：\"></a>自问自答：</h3><p>20岁时你最大的梦想是什么？ 找一个女朋友 20岁时你的状态是什么样子？ 每天都很忙，却不知道未来该怎么走 你觉得20岁时一个人必须要尝试的一件事，是什么？<br>一个人旅行 你对自己目前的状态满意吗？ 不满意，太迷茫了 你是否觉得生活越来越充满压力，你如何面对压力？ 压力太多了，只有靠做事来防止自己去想<br>爱情、事业、友情、娱乐，你如何排序？ 爱情、友情、事业、娱乐 如果让你用一种动物来形容自己，你觉得什么比较合适，为什么？<br>狗，每天都累得趴下，身体还好一点，大脑到了睡的时候完全是一种懵的状态 如果时光可以倒流，你还会给自己规划另外一种人生吗？什么样的人生？<br>也许不会吧，我喜欢计算机，如果可以倒流，我倒是想早一点接触计算机 在你成长过程中感觉走的最关键的一步是什么？ 选择了计算机</p>\n<h3 id=\"语录：\"><a href=\"#语录：\" class=\"headerlink\" title=\"语录：\"></a>语录：</h3><p><em><strong>你觉得孤独就对了，那是让你认识自己的机会；你觉得不被理解就对了，那是让你认清朋友的机会；你觉得黑暗就对了，那是让你发现光芒的机会；你觉得无助就对了，那<br>样你才能知道谁是你的贵人；你觉得迷茫就对了，谁的青春不迷茫</strong></em> <em><strong>成长中每一次低头，都是对自己的肯定</strong></em> <em><strong>“我很好”不是指你终于熬到了有钱，有<br>了朋友，有了人照顾的日子。而是你终于可以习惯没有钱，没有朋友，没有人照顾的日子.“我很好”是告诉他们，你越来越能接受现实，而不是越来越现实</strong></em><br><em><strong>成长不就是这样吗？不是学到就是得到</strong></em><br><em><strong>你成长中所遇到的问题，都是为你量身定做的。解决了，你就成为了你这类人当众的幸存者。不解决，你永远也不知道自己可能成为谁</strong></em><br><em><strong>因为年轻，所以没有选择，只能试试</strong></em> <em><strong>骑不快的单车，载满你的忧郁</strong></em> <em><strong>我们之所以战斗，不是为了改变世界，而是为了不让世界改变我们</strong></em><br><em><strong>人生最大的冒险就是不冒险</strong></em> <em><strong>很多人闯进你的生命里，只为给你上一课，然后转身匆匆就走</strong></em><br><em><strong>有时候，你没那么重要，轻一点，或许活得更好</strong></em> <em><strong>我们留住一些什么，只是想证明从前</strong></em><br><em><strong>说到底，所有的理由还是不适合，不是你生命的那个人，就不要因此而让自己困扰了</strong></em> <em><strong>“活在自己的年龄里”是件重要的事</strong></em><br><em><strong>如果要在自己年轻的时候做更多的梦，就一定要找到那些和你一起做梦的朋友</strong></em> <em><strong>笑一笑，对方就败了</strong></em><br><em><strong>不要因为曾经的伤害，而失去获取再次深爱的机会</strong></em> <em><strong>要知道以后的路，那就不叫人生了.那叫任命</strong></em><br><em><strong>我们都需要一见钟情很多人，两情相悦一些人，最后才会白头偕老一个人</strong></em> <em><strong>人生有两种境界，一种是痛而不言，另一种是笑而不语</strong></em><br><em><strong>失去了才觉得美丽，那年那月，我们其实并不懂得珍惜</strong></em></p>\n","excerpt":"","more":"<p><a href=\"http://www.amazon.cn/\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B\n8\\%8D\\%E8\\%BF\\%B7\\%E8\\%8C\\%AB-\\%E5\\%88\\%98\\%E5\\%90\\%8C/dp/B00A67K0A2/ref=sr_1_1?ie=UTF8&amp;qid\n=1399975828&amp;sr=8-1&amp;keywords=\\%E8\\%B0\\%81\\%E7\\%9A\\%84\\%E9\\%9D\\%92\\%E6\\%98\\%A5\\%E4\\%B8\\%8D\\%E8\\%B\nF\\%B7\\%E8\\%8C\\%AB\">《谁的青春不迷茫》——刘同</a> 刘同这个人无疑是一个成功的人，他是一个隐士，是一个大隐隐于朝的隐士.是啊，谁的青春都有迷茫的时候，就像我现在一样.在这个时候我<br>们要做得首先是要认识自己。按照书中的提示，我做了如下反思：</p>\n<h2 id=\"前后十年\"><a href=\"#前后十年\" class=\"headerlink\" title=\"前后十年\"></a>前后十年</h2><h3 id=\"十年前\"><a href=\"#十年前\" class=\"headerlink\" title=\"十年前\"></a>十年前</h3><p>十年前，我只有十岁，收到人生第一个蛋糕.那时候的我应该是在读四年级，仔细回想四年级的生活，发现也没多少东西可回忆的.那时候的我性格怎么说呢，比较懦弱吧，作为<br>一个全校成绩最差的班级里成绩最好的学生，一直都有着丢不掉的光环，当然也是经常受调皮的学生欺负的对象，我在这里之所以说的是成绩最差，是因为我那些同学们都是很可<br>爱的，他们只是成绩差，调皮点，其它没什么不好的。而且他们之中现在还在上大学的没有几个了，孩子最大的应该有三岁了吧，其他人找工作、结婚生子都有，有时候看看他们<br>的空间，都过得挺快乐的.哪像我，居然还在上学.那时候的我最大的梦想应该是要成为一个科学家吧，当时只知道科学家这个东西，完全不知道科学家要干什么.那时候憧憬着<br>上更高的学校，幻想着十年后的现在应该是无拘无束，一个人在外，完全不用再听父母唠叨，在家里也有发言权了，可以过自己想要的生活.那时候我每天就是六点过就起床，主<br>要原因是养成了习惯，起床自己炒饭吃.那时候喜欢着，额，几个女生，当时什么都不知道，就单纯的喜欢，就想在一起玩儿.</p>\n<h3 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h3><p>现在的我真的在读大学了，20岁，一个不高不低的年级，做着很多大学生都在做的事，也经历着很多大学生都要经历的东西.大二的我，正处于人生最迷茫的时期，根本不知道<br>自己的梦想是什么，也不知道自己未来想要的生活到底是什么.面对就业和未来的压力，完全不知所措。家里人还好，并没有给我施加太多的压力，爸爸还说要给我房子付首付，<br>虽然很开心，但我可不愿意让爸爸再去辛苦了.这学期初步决定不去考研了，所以我也知道接下来的两年里我会比考研的更累，最近是在跟着米建勋学模式识别，跟着陈龙分析一<br>个软件，课内的作业也挺多的，虽然课很少，但事情太多了.而且我还给自己布置了任务，比如学习coursera的课程，坚持写博客文章等等。还有很多事，班级主页、a<br>cm比赛，真的好忙，而且很多都是我自己想做的，是我自己给自己的压力太多了吗，还是我真的不够坚强，努力得还不够.我现在很想找一个女朋友，要求很简单，能看上我就<br>行(哈哈，这要求貌似也是最难得，谁会找一个身高只有一米六的男生呢).希望我能早点找到命中的她.</p>\n<h3 id=\"十年后\"><a href=\"#十年后\" class=\"headerlink\" title=\"十年后\"></a>十年后</h3><p>十年后，我三十岁，孩子应该能叫爸爸了，房子应该也有了，不过贷款肯定没还完，车子我可没有奢侈，应该是过上了自己想要的生活的，我的妻子一定是一个贤妻良母，她能把<br>家里管理的井井有条，而且还能在自己喜欢的事业上有所收获.那时候的我最大的梦想应该是退休过后和另一半到处去旅游，盼望着早点退休.我有一套自认为非常好的育儿方案<br>，保证可以让他在大学期间就可以自食其力并且活得开开心心的。那样我们也可以早点退休啦.</p>\n<h3 id=\"自问自答：\"><a href=\"#自问自答：\" class=\"headerlink\" title=\"自问自答：\"></a>自问自答：</h3><p>20岁时你最大的梦想是什么？ 找一个女朋友 20岁时你的状态是什么样子？ 每天都很忙，却不知道未来该怎么走 你觉得20岁时一个人必须要尝试的一件事，是什么？<br>一个人旅行 你对自己目前的状态满意吗？ 不满意，太迷茫了 你是否觉得生活越来越充满压力，你如何面对压力？ 压力太多了，只有靠做事来防止自己去想<br>爱情、事业、友情、娱乐，你如何排序？ 爱情、友情、事业、娱乐 如果让你用一种动物来形容自己，你觉得什么比较合适，为什么？<br>狗，每天都累得趴下，身体还好一点，大脑到了睡的时候完全是一种懵的状态 如果时光可以倒流，你还会给自己规划另外一种人生吗？什么样的人生？<br>也许不会吧，我喜欢计算机，如果可以倒流，我倒是想早一点接触计算机 在你成长过程中感觉走的最关键的一步是什么？ 选择了计算机</p>\n<h3 id=\"语录：\"><a href=\"#语录：\" class=\"headerlink\" title=\"语录：\"></a>语录：</h3><p><em><strong>你觉得孤独就对了，那是让你认识自己的机会；你觉得不被理解就对了，那是让你认清朋友的机会；你觉得黑暗就对了，那是让你发现光芒的机会；你觉得无助就对了，那<br>样你才能知道谁是你的贵人；你觉得迷茫就对了，谁的青春不迷茫</strong></em> <em><strong>成长中每一次低头，都是对自己的肯定</strong></em> <em><strong>“我很好”不是指你终于熬到了有钱，有<br>了朋友，有了人照顾的日子。而是你终于可以习惯没有钱，没有朋友，没有人照顾的日子.“我很好”是告诉他们，你越来越能接受现实，而不是越来越现实</strong></em><br><em><strong>成长不就是这样吗？不是学到就是得到</strong></em><br><em><strong>你成长中所遇到的问题，都是为你量身定做的。解决了，你就成为了你这类人当众的幸存者。不解决，你永远也不知道自己可能成为谁</strong></em><br><em><strong>因为年轻，所以没有选择，只能试试</strong></em> <em><strong>骑不快的单车，载满你的忧郁</strong></em> <em><strong>我们之所以战斗，不是为了改变世界，而是为了不让世界改变我们</strong></em><br><em><strong>人生最大的冒险就是不冒险</strong></em> <em><strong>很多人闯进你的生命里，只为给你上一课，然后转身匆匆就走</strong></em><br><em><strong>有时候，你没那么重要，轻一点，或许活得更好</strong></em> <em><strong>我们留住一些什么，只是想证明从前</strong></em><br><em><strong>说到底，所有的理由还是不适合，不是你生命的那个人，就不要因此而让自己困扰了</strong></em> <em><strong>“活在自己的年龄里”是件重要的事</strong></em><br><em><strong>如果要在自己年轻的时候做更多的梦，就一定要找到那些和你一起做梦的朋友</strong></em> <em><strong>笑一笑，对方就败了</strong></em><br><em><strong>不要因为曾经的伤害，而失去获取再次深爱的机会</strong></em> <em><strong>要知道以后的路，那就不叫人生了.那叫任命</strong></em><br><em><strong>我们都需要一见钟情很多人，两情相悦一些人，最后才会白头偕老一个人</strong></em> <em><strong>人生有两种境界，一种是痛而不言，另一种是笑而不语</strong></em><br><em><strong>失去了才觉得美丽，那年那月，我们其实并不懂得珍惜</strong></em></p>\n"},{"title":"七牛镜像存储之Wordpress插件的安装及测试","date":"2014-08-28T23:52:28.000Z","_content":"七牛镜像存储介绍\n\n镜像存储就是将自己服务器上的静态内容使用七牛云存储作为镜像服务器，这样网站的用户在访问页面的时候访问的其实是七牛云里面的数据，网站本身的服务器可不放置该静态\n资源，这样不仅可以大大减少自己网站的所用空间，还能显著提升访问速度。(本文所有图片均已使用七牛插件做镜像工具，可以查看图片链接，显示的是qiniu.com)\n。下面是用户类别以及各种优惠：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_0.jpg)  \n简单操作过程\n\n1.注册并新建一个空间：[官网操作指南](https://portal.qiniu.com/tutorial/index \"Link:\nhttps://portal.qiniu.com/tutorial/index\" )\n\n2.对空间进行设置：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_1.jpg)  \n在镜像存储中设置自己的域名，域名设置可以绑定自己的域名，但是只能标准用户使用，我们可以直接使用七牛提供的二级域名\n\n3.wordpress获取插件并安装，插件名称为：WPJAM 七牛镜像存储\n\n4.设置七牛镜像存储插件  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_2.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_3.jpg)  \n其中，ACCESS KEY和SECRET KEY在七牛网站的帐号设置里面的密钥处获取\n\n本地设置：主要设置的是要保存文件的后缀  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_4.jpg)其它地方均不用设置，但写完博\n客并发布后，可以看到七牛空间上已经有刚才上传在wordpress的图片等了，此时就可以在wordpress多媒体里删除该图片，图片依然可以访问。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_5.jpg)  \n","source":"_posts/wordpress-qiniu.md","raw":"---\ntitle: \"七牛镜像存储之wordpress插件的安装及测试\"\ndate: 2014-08-29 07:52:28\ncategories: 编程之路\n---\n七牛镜像存储介绍\n\n镜像存储就是将自己服务器上的静态内容使用七牛云存储作为镜像服务器，这样网站的用户在访问页面的时候访问的其实是七牛云里面的数据，网站本身的服务器可不放置该静态\n资源，这样不仅可以大大减少自己网站的所用空间，还能显著提升访问速度。(本文所有图片均已使用七牛插件做镜像工具，可以查看图片链接，显示的是qiniu.com)\n。下面是用户类别以及各种优惠：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_0.jpg)  \n简单操作过程\n\n1.注册并新建一个空间：[官网操作指南](https://portal.qiniu.com/tutorial/index \"Link:\nhttps://portal.qiniu.com/tutorial/index\" )\n\n2.对空间进行设置：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_1.jpg)  \n在镜像存储中设置自己的域名，域名设置可以绑定自己的域名，但是只能标准用户使用，我们可以直接使用七牛提供的二级域名\n\n3.wordpress获取插件并安装，插件名称为：WPJAM 七牛镜像存储\n\n4.设置七牛镜像存储插件  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_2.jpg)  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_3.jpg)  \n其中，ACCESS KEY和SECRET KEY在七牛网站的帐号设置里面的密钥处获取\n\n本地设置：主要设置的是要保存文件的后缀  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_4.jpg)其它地方均不用设置，但写完博\n客并发布后，可以看到七牛空间上已经有刚才上传在wordpress的图片等了，此时就可以在wordpress多媒体里删除该图片，图片依然可以访问。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_5.jpg)  \n","slug":"wordpress-qiniu","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pnu007i9vnzs8lup7nm","content":"<p>七牛镜像存储介绍</p>\n<p>镜像存储就是将自己服务器上的静态内容使用七牛云存储作为镜像服务器，这样网站的用户在访问页面的时候访问的其实是七牛云里面的数据，网站本身的服务器可不放置该静态<br>资源，这样不仅可以大大减少自己网站的所用空间，还能显著提升访问速度。(本文所有图片均已使用七牛插件做镜像工具，可以查看图片链接，显示的是qiniu.com)<br>。下面是用户类别以及各种优惠：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_0.jpg\" alt=\"\"><br>简单操作过程</p>\n<p>1.注册并新建一个空间：<a href=\"https://portal.qiniu.com/tutorial/index\" title=\"Link:\nhttps://portal.qiniu.com/tutorial/index\" target=\"_blank\" rel=\"external\">官网操作指南</a></p>\n<p>2.对空间进行设置：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_1.jpg\" alt=\"\"><br>在镜像存储中设置自己的域名，域名设置可以绑定自己的域名，但是只能标准用户使用，我们可以直接使用七牛提供的二级域名</p>\n<p>3.wordpress获取插件并安装，插件名称为：WPJAM 七牛镜像存储</p>\n<p>4.设置七牛镜像存储插件<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_2.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_3.jpg\" alt=\"\"><br>其中，ACCESS KEY和SECRET KEY在七牛网站的帐号设置里面的密钥处获取</p>\n<p>本地设置：主要设置的是要保存文件的后缀  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_4.jpg\" alt=\"\">其它地方均不用设置，但写完博<br>客并发布后，可以看到七牛空间上已经有刚才上传在wordpress的图片等了，此时就可以在wordpress多媒体里删除该图片，图片依然可以访问。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_5.jpg\" alt=\"\">  </p>\n","excerpt":"","more":"<p>七牛镜像存储介绍</p>\n<p>镜像存储就是将自己服务器上的静态内容使用七牛云存储作为镜像服务器，这样网站的用户在访问页面的时候访问的其实是七牛云里面的数据，网站本身的服务器可不放置该静态<br>资源，这样不仅可以大大减少自己网站的所用空间，还能显著提升访问速度。(本文所有图片均已使用七牛插件做镜像工具，可以查看图片链接，显示的是qiniu.com)<br>。下面是用户类别以及各种优惠：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_0.jpg\" alt=\"\"><br>简单操作过程</p>\n<p>1.注册并新建一个空间：<a href=\"https://portal.qiniu.com/tutorial/index\" title=\"Link:\nhttps://portal.qiniu.com/tutorial/index\">官网操作指南</a></p>\n<p>2.对空间进行设置：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_1.jpg\" alt=\"\"><br>在镜像存储中设置自己的域名，域名设置可以绑定自己的域名，但是只能标准用户使用，我们可以直接使用七牛提供的二级域名</p>\n<p>3.wordpress获取插件并安装，插件名称为：WPJAM 七牛镜像存储</p>\n<p>4.设置七牛镜像存储插件<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_2.jpg\" alt=\"\"><br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_3.jpg\" alt=\"\"><br>其中，ACCESS KEY和SECRET KEY在七牛网站的帐号设置里面的密钥处获取</p>\n<p>本地设置：主要设置的是要保存文件的后缀  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_4.jpg\" alt=\"\">其它地方均不用设置，但写完博<br>客并发布后，可以看到七牛空间上已经有刚才上传在wordpress的图片等了，此时就可以在wordpress多媒体里删除该图片，图片依然可以访问。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/wordpress-qiniu_5.jpg\" alt=\"\">  </p>\n"},{"title":"《我依然爱你，我只是不喜欢你了》——谁都不知道爱情是什么样","date":"2016-05-14T10:19:29.000Z","_content":"爱情是甜美的？爱情是苦涩的？花花世界，谁又能说得清呢。\n\n《我依然爱你，我只是不喜欢你了》这本书是无意间在以前一位喜欢过的女生的一篇微博看到的，光看标题就有一种台湾的那种小清新爱情片的味道，看了一下简洁，是讲爱情的不是讲分手的爱情的，所以果断入手，毕竟和女朋友还处在热恋期，不知道为什么，我们俩热恋期咋这么长呢。\n\n全书是由几十个小小的爱情故事汇聚而成，不知道真的是作者身边朋友的经历还是有很多朋友主动向作者倾诉的呢，我也好希望我身边能有一位情感专家，有什么心里问题她都能迎刃而解，什么心里话都能对她说，但是至今我的朋友圈也没出现过这样的人。作为书评，在这里我并不打算把我对爱情的理解写出来，因为也许可能大概我也写不出来，有些东西，在心里，就够了，是万万不能用我那笨拙的文字功底写出来的。另外，看了看豆瓣上的评分，其实还算不错，但是下面的有些评论我就不大赞成了。平淡、口水文，对于爱情来说，这样子有错吗？如果真的觉得平淡就觉得这是一本烂书，那我是该说你们不懂文学，还是该说你们不懂爱情呢？至少在我，一看到这个书名，就觉得这就是一本平平淡淡的书，就是一本贴近生活的书。这本书也绝不是一本只讲故事不走心的故事集，应该说它是很走心的，谁都可以深陷进那一个个的故事，也谁都可以从中体会到什么。\n\n小井岩(作者)是个温柔的人，只有温柔的人，人们才会想他倾诉吧。很多时候，我也想做一个温柔的男朋友。虽然我比我女朋友小，我也很幼稚。和她刚在一起的时候就觉得她是那种很有气质型的，没想到，现在已经被我”调教“成一个每天都会向我撒娇的可爱女孩子了，虽然我也每天撒娇。她很好，我是她第五个男朋友，她是我第三个女朋友，我们谁都不知道会不会一直走下去，但又一直都朝着一直走下去的目标努力着。不仅我们过去爱的是人渣还是真的错过，过去的都已经翻篇了，就像我最开始说的以前喜欢过的那个女生，我现在女朋友也知道我以前喜欢过她，但是女朋友并不会阻止我和她聊天，说了半天，我到底想说什么呢，我也不知道。反正，米娜，有爱到来的时候就好好爱吧，不要刻意去回避，也不要刻意去追逐，一切随缘，不矫揉造作的爱，才是最真最纯的爱。(不要问我为什么不多谈谈书中的内容，因为看了大半年了吧，已经忘记了，只能从kindle里的笔记中找一点点当时的体会)\n\n#### 语录\n我知道我已离开你的世界，也知道，彼此不再有交集，然而心中某块地方，始终无法抹去存在的痕迹。我依然爱你，我只是知道，自己不能再像以前那样喜欢你了。 依然祝你，平安幸福。\n\n“你知道年轻的时候穷最大的问题是什么吗？”  \n“什么？”  \n“以为所有得不到的一切都是穷的错。眼睛盯着遥远的地方看不到身边一朵花的美丽。”\n\n对那时的我来说，爱情是什么并不重要，就像我知道苹果就是苹果，而不需要知道它是蔷薇科还是落叶乔木；就像当我遇见你，我就知道遇见了爱情。\n\n最温暖的相处模式，就是两个人在一起的时候，有一种自然而然的舒适氛围，能够消解心中的那些戾气，恢复成最放松而且淡然的自己。没有强烈的惴惴不安，也没有莫名的看不顺眼，没有所有那些消耗神经的累的东西。只要我知道你在，一切就都很好。\n\n真的有些人，让你相信人是有上辈子的，不然为何一相见就可以自然而然跳过试探、了解、熟悉的人际程序直接成为那个直达灵魂的亲密之人。\n\n做个称职的前任吧，不纠缠，不打扰，不撩拨。心里那些残存的想念，是怀念和感激。放下心中那多愁善感的郁金香，才会开出畅然伸展的蓝莲花。\n\n我觉得真正爱一个人的表现肯定是努力使自己和对方变得更好，怎么会是拉着对方一起下沉呢？\n\n我不认为一辈子只爱一个人是件可惜的事，也不认为一辈子爱过很多人就是一件不道德的事。\n\n秒速五厘米间，樱花蹁跹了看客；人生聚散离合，伊人明媚了岁月。\n\n如果我们费尽所有心力，都不能在那个心爱的心上留下一个深一点的痕迹，这不是对方的错，也不是你的错。因为不是你不努力，而是对方跑得太快，飞得太高。\n\n感动不是爱情，爱情根本不需要这么累，你追我跑，那是狩猎，我又不是猎物！\n\n\n#### 最后献上知乎的几位朋友对\"我爱你，我只是不再喜欢你了\"的[解释](https://www.zhihu.com/question/31681497)\n《One Day》里安妮海瑟薇的一句台词 我无法控制自己对你的难以忘怀 可是我关于你的一切已经再也没有了期待。\t——[Pengsiya](https://www.zhihu.com/people/peng-si-ya)  \n我会想起我们的过去，却不会再去想我们的未来。\t——[兵荒马乱](https://www.zhihu.com/people/bing-huang-ma-luan-66)  \n“不介意孤独，比爱你舒服”\t——[江白粥](https://www.zhihu.com/people/bai-zhou-12-64-95)  \n我还是曾经的那个我，你已经不是曾经的那个你了。 —— [鬼木知](https://www.zhihu.com/people/gui-mu-zhi)","source":"_posts/woyiranainiwozhishibuxihuannile.md","raw":"---\ntitle: \"《我依然爱你，我只是不喜欢你了》——谁都不知道爱情是什么样\"\ndate: 2016-05-14 18:19:29\ncategories: 韦编三绝\n---\n爱情是甜美的？爱情是苦涩的？花花世界，谁又能说得清呢。\n\n《我依然爱你，我只是不喜欢你了》这本书是无意间在以前一位喜欢过的女生的一篇微博看到的，光看标题就有一种台湾的那种小清新爱情片的味道，看了一下简洁，是讲爱情的不是讲分手的爱情的，所以果断入手，毕竟和女朋友还处在热恋期，不知道为什么，我们俩热恋期咋这么长呢。\n\n全书是由几十个小小的爱情故事汇聚而成，不知道真的是作者身边朋友的经历还是有很多朋友主动向作者倾诉的呢，我也好希望我身边能有一位情感专家，有什么心里问题她都能迎刃而解，什么心里话都能对她说，但是至今我的朋友圈也没出现过这样的人。作为书评，在这里我并不打算把我对爱情的理解写出来，因为也许可能大概我也写不出来，有些东西，在心里，就够了，是万万不能用我那笨拙的文字功底写出来的。另外，看了看豆瓣上的评分，其实还算不错，但是下面的有些评论我就不大赞成了。平淡、口水文，对于爱情来说，这样子有错吗？如果真的觉得平淡就觉得这是一本烂书，那我是该说你们不懂文学，还是该说你们不懂爱情呢？至少在我，一看到这个书名，就觉得这就是一本平平淡淡的书，就是一本贴近生活的书。这本书也绝不是一本只讲故事不走心的故事集，应该说它是很走心的，谁都可以深陷进那一个个的故事，也谁都可以从中体会到什么。\n\n小井岩(作者)是个温柔的人，只有温柔的人，人们才会想他倾诉吧。很多时候，我也想做一个温柔的男朋友。虽然我比我女朋友小，我也很幼稚。和她刚在一起的时候就觉得她是那种很有气质型的，没想到，现在已经被我”调教“成一个每天都会向我撒娇的可爱女孩子了，虽然我也每天撒娇。她很好，我是她第五个男朋友，她是我第三个女朋友，我们谁都不知道会不会一直走下去，但又一直都朝着一直走下去的目标努力着。不仅我们过去爱的是人渣还是真的错过，过去的都已经翻篇了，就像我最开始说的以前喜欢过的那个女生，我现在女朋友也知道我以前喜欢过她，但是女朋友并不会阻止我和她聊天，说了半天，我到底想说什么呢，我也不知道。反正，米娜，有爱到来的时候就好好爱吧，不要刻意去回避，也不要刻意去追逐，一切随缘，不矫揉造作的爱，才是最真最纯的爱。(不要问我为什么不多谈谈书中的内容，因为看了大半年了吧，已经忘记了，只能从kindle里的笔记中找一点点当时的体会)\n\n#### 语录\n我知道我已离开你的世界，也知道，彼此不再有交集，然而心中某块地方，始终无法抹去存在的痕迹。我依然爱你，我只是知道，自己不能再像以前那样喜欢你了。 依然祝你，平安幸福。\n\n“你知道年轻的时候穷最大的问题是什么吗？”  \n“什么？”  \n“以为所有得不到的一切都是穷的错。眼睛盯着遥远的地方看不到身边一朵花的美丽。”\n\n对那时的我来说，爱情是什么并不重要，就像我知道苹果就是苹果，而不需要知道它是蔷薇科还是落叶乔木；就像当我遇见你，我就知道遇见了爱情。\n\n最温暖的相处模式，就是两个人在一起的时候，有一种自然而然的舒适氛围，能够消解心中的那些戾气，恢复成最放松而且淡然的自己。没有强烈的惴惴不安，也没有莫名的看不顺眼，没有所有那些消耗神经的累的东西。只要我知道你在，一切就都很好。\n\n真的有些人，让你相信人是有上辈子的，不然为何一相见就可以自然而然跳过试探、了解、熟悉的人际程序直接成为那个直达灵魂的亲密之人。\n\n做个称职的前任吧，不纠缠，不打扰，不撩拨。心里那些残存的想念，是怀念和感激。放下心中那多愁善感的郁金香，才会开出畅然伸展的蓝莲花。\n\n我觉得真正爱一个人的表现肯定是努力使自己和对方变得更好，怎么会是拉着对方一起下沉呢？\n\n我不认为一辈子只爱一个人是件可惜的事，也不认为一辈子爱过很多人就是一件不道德的事。\n\n秒速五厘米间，樱花蹁跹了看客；人生聚散离合，伊人明媚了岁月。\n\n如果我们费尽所有心力，都不能在那个心爱的心上留下一个深一点的痕迹，这不是对方的错，也不是你的错。因为不是你不努力，而是对方跑得太快，飞得太高。\n\n感动不是爱情，爱情根本不需要这么累，你追我跑，那是狩猎，我又不是猎物！\n\n\n#### 最后献上知乎的几位朋友对\"我爱你，我只是不再喜欢你了\"的[解释](https://www.zhihu.com/question/31681497)\n《One Day》里安妮海瑟薇的一句台词 我无法控制自己对你的难以忘怀 可是我关于你的一切已经再也没有了期待。\t——[Pengsiya](https://www.zhihu.com/people/peng-si-ya)  \n我会想起我们的过去，却不会再去想我们的未来。\t——[兵荒马乱](https://www.zhihu.com/people/bing-huang-ma-luan-66)  \n“不介意孤独，比爱你舒服”\t——[江白粥](https://www.zhihu.com/people/bai-zhou-12-64-95)  \n我还是曾经的那个我，你已经不是曾经的那个你了。 —— [鬼木知](https://www.zhihu.com/people/gui-mu-zhi)","slug":"woyiranainiwozhishibuxihuannile","published":1,"updated":"2016-05-14T11:07:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pny007k9vnzx7guihu5","content":"<p>爱情是甜美的？爱情是苦涩的？花花世界，谁又能说得清呢。</p>\n<p>《我依然爱你，我只是不喜欢你了》这本书是无意间在以前一位喜欢过的女生的一篇微博看到的，光看标题就有一种台湾的那种小清新爱情片的味道，看了一下简洁，是讲爱情的不是讲分手的爱情的，所以果断入手，毕竟和女朋友还处在热恋期，不知道为什么，我们俩热恋期咋这么长呢。</p>\n<p>全书是由几十个小小的爱情故事汇聚而成，不知道真的是作者身边朋友的经历还是有很多朋友主动向作者倾诉的呢，我也好希望我身边能有一位情感专家，有什么心里问题她都能迎刃而解，什么心里话都能对她说，但是至今我的朋友圈也没出现过这样的人。作为书评，在这里我并不打算把我对爱情的理解写出来，因为也许可能大概我也写不出来，有些东西，在心里，就够了，是万万不能用我那笨拙的文字功底写出来的。另外，看了看豆瓣上的评分，其实还算不错，但是下面的有些评论我就不大赞成了。平淡、口水文，对于爱情来说，这样子有错吗？如果真的觉得平淡就觉得这是一本烂书，那我是该说你们不懂文学，还是该说你们不懂爱情呢？至少在我，一看到这个书名，就觉得这就是一本平平淡淡的书，就是一本贴近生活的书。这本书也绝不是一本只讲故事不走心的故事集，应该说它是很走心的，谁都可以深陷进那一个个的故事，也谁都可以从中体会到什么。</p>\n<p>小井岩(作者)是个温柔的人，只有温柔的人，人们才会想他倾诉吧。很多时候，我也想做一个温柔的男朋友。虽然我比我女朋友小，我也很幼稚。和她刚在一起的时候就觉得她是那种很有气质型的，没想到，现在已经被我”调教“成一个每天都会向我撒娇的可爱女孩子了，虽然我也每天撒娇。她很好，我是她第五个男朋友，她是我第三个女朋友，我们谁都不知道会不会一直走下去，但又一直都朝着一直走下去的目标努力着。不仅我们过去爱的是人渣还是真的错过，过去的都已经翻篇了，就像我最开始说的以前喜欢过的那个女生，我现在女朋友也知道我以前喜欢过她，但是女朋友并不会阻止我和她聊天，说了半天，我到底想说什么呢，我也不知道。反正，米娜，有爱到来的时候就好好爱吧，不要刻意去回避，也不要刻意去追逐，一切随缘，不矫揉造作的爱，才是最真最纯的爱。(不要问我为什么不多谈谈书中的内容，因为看了大半年了吧，已经忘记了，只能从kindle里的笔记中找一点点当时的体会)</p>\n<h4 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h4><p>我知道我已离开你的世界，也知道，彼此不再有交集，然而心中某块地方，始终无法抹去存在的痕迹。我依然爱你，我只是知道，自己不能再像以前那样喜欢你了。 依然祝你，平安幸福。</p>\n<p>“你知道年轻的时候穷最大的问题是什么吗？”<br>“什么？”<br>“以为所有得不到的一切都是穷的错。眼睛盯着遥远的地方看不到身边一朵花的美丽。”</p>\n<p>对那时的我来说，爱情是什么并不重要，就像我知道苹果就是苹果，而不需要知道它是蔷薇科还是落叶乔木；就像当我遇见你，我就知道遇见了爱情。</p>\n<p>最温暖的相处模式，就是两个人在一起的时候，有一种自然而然的舒适氛围，能够消解心中的那些戾气，恢复成最放松而且淡然的自己。没有强烈的惴惴不安，也没有莫名的看不顺眼，没有所有那些消耗神经的累的东西。只要我知道你在，一切就都很好。</p>\n<p>真的有些人，让你相信人是有上辈子的，不然为何一相见就可以自然而然跳过试探、了解、熟悉的人际程序直接成为那个直达灵魂的亲密之人。</p>\n<p>做个称职的前任吧，不纠缠，不打扰，不撩拨。心里那些残存的想念，是怀念和感激。放下心中那多愁善感的郁金香，才会开出畅然伸展的蓝莲花。</p>\n<p>我觉得真正爱一个人的表现肯定是努力使自己和对方变得更好，怎么会是拉着对方一起下沉呢？</p>\n<p>我不认为一辈子只爱一个人是件可惜的事，也不认为一辈子爱过很多人就是一件不道德的事。</p>\n<p>秒速五厘米间，樱花蹁跹了看客；人生聚散离合，伊人明媚了岁月。</p>\n<p>如果我们费尽所有心力，都不能在那个心爱的心上留下一个深一点的痕迹，这不是对方的错，也不是你的错。因为不是你不努力，而是对方跑得太快，飞得太高。</p>\n<p>感动不是爱情，爱情根本不需要这么累，你追我跑，那是狩猎，我又不是猎物！</p>\n<h4 id=\"最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释\"><a href=\"#最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释\" class=\"headerlink\" title=\"最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释\"></a>最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的<a href=\"https://www.zhihu.com/question/31681497\" target=\"_blank\" rel=\"external\">解释</a></h4><p>《One Day》里安妮海瑟薇的一句台词 我无法控制自己对你的难以忘怀 可是我关于你的一切已经再也没有了期待。    ——<a href=\"https://www.zhihu.com/people/peng-si-ya\" target=\"_blank\" rel=\"external\">Pengsiya</a><br>我会想起我们的过去，却不会再去想我们的未来。    ——<a href=\"https://www.zhihu.com/people/bing-huang-ma-luan-66\" target=\"_blank\" rel=\"external\">兵荒马乱</a><br>“不介意孤独，比爱你舒服”    ——<a href=\"https://www.zhihu.com/people/bai-zhou-12-64-95\" target=\"_blank\" rel=\"external\">江白粥</a><br>我还是曾经的那个我，你已经不是曾经的那个你了。 —— <a href=\"https://www.zhihu.com/people/gui-mu-zhi\" target=\"_blank\" rel=\"external\">鬼木知</a></p>\n","excerpt":"","more":"<p>爱情是甜美的？爱情是苦涩的？花花世界，谁又能说得清呢。</p>\n<p>《我依然爱你，我只是不喜欢你了》这本书是无意间在以前一位喜欢过的女生的一篇微博看到的，光看标题就有一种台湾的那种小清新爱情片的味道，看了一下简洁，是讲爱情的不是讲分手的爱情的，所以果断入手，毕竟和女朋友还处在热恋期，不知道为什么，我们俩热恋期咋这么长呢。</p>\n<p>全书是由几十个小小的爱情故事汇聚而成，不知道真的是作者身边朋友的经历还是有很多朋友主动向作者倾诉的呢，我也好希望我身边能有一位情感专家，有什么心里问题她都能迎刃而解，什么心里话都能对她说，但是至今我的朋友圈也没出现过这样的人。作为书评，在这里我并不打算把我对爱情的理解写出来，因为也许可能大概我也写不出来，有些东西，在心里，就够了，是万万不能用我那笨拙的文字功底写出来的。另外，看了看豆瓣上的评分，其实还算不错，但是下面的有些评论我就不大赞成了。平淡、口水文，对于爱情来说，这样子有错吗？如果真的觉得平淡就觉得这是一本烂书，那我是该说你们不懂文学，还是该说你们不懂爱情呢？至少在我，一看到这个书名，就觉得这就是一本平平淡淡的书，就是一本贴近生活的书。这本书也绝不是一本只讲故事不走心的故事集，应该说它是很走心的，谁都可以深陷进那一个个的故事，也谁都可以从中体会到什么。</p>\n<p>小井岩(作者)是个温柔的人，只有温柔的人，人们才会想他倾诉吧。很多时候，我也想做一个温柔的男朋友。虽然我比我女朋友小，我也很幼稚。和她刚在一起的时候就觉得她是那种很有气质型的，没想到，现在已经被我”调教“成一个每天都会向我撒娇的可爱女孩子了，虽然我也每天撒娇。她很好，我是她第五个男朋友，她是我第三个女朋友，我们谁都不知道会不会一直走下去，但又一直都朝着一直走下去的目标努力着。不仅我们过去爱的是人渣还是真的错过，过去的都已经翻篇了，就像我最开始说的以前喜欢过的那个女生，我现在女朋友也知道我以前喜欢过她，但是女朋友并不会阻止我和她聊天，说了半天，我到底想说什么呢，我也不知道。反正，米娜，有爱到来的时候就好好爱吧，不要刻意去回避，也不要刻意去追逐，一切随缘，不矫揉造作的爱，才是最真最纯的爱。(不要问我为什么不多谈谈书中的内容，因为看了大半年了吧，已经忘记了，只能从kindle里的笔记中找一点点当时的体会)</p>\n<h4 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h4><p>我知道我已离开你的世界，也知道，彼此不再有交集，然而心中某块地方，始终无法抹去存在的痕迹。我依然爱你，我只是知道，自己不能再像以前那样喜欢你了。 依然祝你，平安幸福。</p>\n<p>“你知道年轻的时候穷最大的问题是什么吗？”<br>“什么？”<br>“以为所有得不到的一切都是穷的错。眼睛盯着遥远的地方看不到身边一朵花的美丽。”</p>\n<p>对那时的我来说，爱情是什么并不重要，就像我知道苹果就是苹果，而不需要知道它是蔷薇科还是落叶乔木；就像当我遇见你，我就知道遇见了爱情。</p>\n<p>最温暖的相处模式，就是两个人在一起的时候，有一种自然而然的舒适氛围，能够消解心中的那些戾气，恢复成最放松而且淡然的自己。没有强烈的惴惴不安，也没有莫名的看不顺眼，没有所有那些消耗神经的累的东西。只要我知道你在，一切就都很好。</p>\n<p>真的有些人，让你相信人是有上辈子的，不然为何一相见就可以自然而然跳过试探、了解、熟悉的人际程序直接成为那个直达灵魂的亲密之人。</p>\n<p>做个称职的前任吧，不纠缠，不打扰，不撩拨。心里那些残存的想念，是怀念和感激。放下心中那多愁善感的郁金香，才会开出畅然伸展的蓝莲花。</p>\n<p>我觉得真正爱一个人的表现肯定是努力使自己和对方变得更好，怎么会是拉着对方一起下沉呢？</p>\n<p>我不认为一辈子只爱一个人是件可惜的事，也不认为一辈子爱过很多人就是一件不道德的事。</p>\n<p>秒速五厘米间，樱花蹁跹了看客；人生聚散离合，伊人明媚了岁月。</p>\n<p>如果我们费尽所有心力，都不能在那个心爱的心上留下一个深一点的痕迹，这不是对方的错，也不是你的错。因为不是你不努力，而是对方跑得太快，飞得太高。</p>\n<p>感动不是爱情，爱情根本不需要这么累，你追我跑，那是狩猎，我又不是猎物！</p>\n<h4 id=\"最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释\"><a href=\"#最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释\" class=\"headerlink\" title=\"最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释\"></a>最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的<a href=\"https://www.zhihu.com/question/31681497\">解释</a></h4><p>《One Day》里安妮海瑟薇的一句台词 我无法控制自己对你的难以忘怀 可是我关于你的一切已经再也没有了期待。    ——<a href=\"https://www.zhihu.com/people/peng-si-ya\">Pengsiya</a><br>我会想起我们的过去，却不会再去想我们的未来。    ——<a href=\"https://www.zhihu.com/people/bing-huang-ma-luan-66\">兵荒马乱</a><br>“不介意孤独，比爱你舒服”    ——<a href=\"https://www.zhihu.com/people/bai-zhou-12-64-95\">江白粥</a><br>我还是曾经的那个我，你已经不是曾经的那个你了。 —— <a href=\"https://www.zhihu.com/people/gui-mu-zhi\">鬼木知</a></p>\n"},{"title":"《悟空传》读后感","date":"2014-05-18T14:02:13.000Z","_content":"[《悟空传》——今何在](http://www.amazon.cn/\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0-\\%E4\\%BB\\%8A\\%E4\\%BD\\%\n95\\%E5\\%9C\\%A8/dp/B0053O6412/ref=sr_1_1?s=books&ie=UTF8&qid=1400049182&sr=1-1&key\nwords=\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0)\n\n五百年真的很久吗，或许那只是一个梦。我不明白是否选择任何一个方向，都会游向同一个宿命。\n\n我其实很少看网络文学的，《悟空传》同以前看过的网络作品不一样，一般的网络小说无非就是穿越、无敌什么的，而这本书并没有很强的故事情节，更多的是对人的思考。看完\n书评，这本书居然已经畅销十年了，影响了多少人的青春，这无疑是像我这种后青春时代的大学生最值得推荐的一本网络文学作品。就像周星驰的《大话西游》一样(以前不了解\n，百度一下居然是94年的)，十年前看我笑了，十年后我看哭了。或许真要等到我们老去的那一天，才能完全懂得其中真谛。\n\n\n经历十八年的奋斗，今天，我们终于站在了象牙塔下，可在如今的我看来，大学或许更多的是磨掉了我们的锐气。曾经的我们梦想有一天成为科学家，飞行员，英雄，而如今，我\n们只是希望能找到一个好点的工作。记得我在高考的前几天写了一篇日志，[《那一年的梦想》](http://user.qzone.qq.com/896499825\n/2)来自网络上的一篇文章，当时我是定时在6月8日下午3:00发表的，也就是高考考试最后的英语的时候。还记得那一天我原本以为最后一堂考完了，会是大肆地庆祝，\n放声地高歌，可英语考完那一刹那，我却突然感到异常的平静，没有料想中的那么美好，晚上的散伙饭，我们也吃得没什么激情，或许那时候我们就已经意识到，我们的青春，要\n走完了，迎接我们的不知道是什么。\n\n人生之路越走越远，改变是避免不了的。我们努力去理解命运，但这并不是我们任命的借口。我不想我以后的人生就在一个一个的写字间里度过，我不会，三藏也不会，“我要这\n天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散”。紧箍咒永远锁不了我的心。五百年能改变什么？五百年前，悟空要天下再无他战\n不胜之物！五百年后，他要战胜的却是被金箍禁锢的自己！五百年前，三藏与如来赌这世间世人的命运是否皆由众神控制！五百年后，他依旧不相信那西天真经是他要找寻的答案\n！\n\n成败不重要，重要的是我们用于去拼，哪怕百般阻挡，也不要自己先投降。\n\n西游不死，传说不灭。齐天大圣孙悟空永远留在我的心中！\n\n语录\n\n**_我要这天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散 _**  \n**_如果失去是苦，你还怕不怕付出/如果坠落是苦，你还要不要幸福/如果迷乱是苦，该开始还是结束/如果追求是苦，这是坚强还是执迷不悟 _**  \n**_我心中爱你美丽，又怎能嘴上装四大皆空 _**  \n**_这个世界有你不能到达的地方，有你不应到达的地方，有你一辈子也不会去到达的地方，你的世界并不如你想象的那么大，界限也许就在你身边，可你却以为你可以去任何地方。 _**  \n**_只因心高嫌地窄，立心端要破瑶天 _**  \n**_负尽千重罪，练就不死心 _**  \n**_若是不悟，千里万里，也是枉然；若是悟了，脚下便是灵山 _**  \n**_天下万物，皆来于空，可这众生爱痴，从何处来？天下万物，又终归于空，那人来到尘世浮沉，为的又是什么 _**  \n**_是不是选择任何一个方向，都会游向同一个宿命？_**\n\n**_  \n_**\n","source":"_posts/wukongzhuan.md","raw":"---\ntitle: \"《悟空传》读后感\"\ndate: 2014-05-18 22:02:13\ncategories: 韦编三绝\n---\n[《悟空传》——今何在](http://www.amazon.cn/\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0-\\%E4\\%BB\\%8A\\%E4\\%BD\\%\n95\\%E5\\%9C\\%A8/dp/B0053O6412/ref=sr_1_1?s=books&ie=UTF8&qid=1400049182&sr=1-1&key\nwords=\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0)\n\n五百年真的很久吗，或许那只是一个梦。我不明白是否选择任何一个方向，都会游向同一个宿命。\n\n我其实很少看网络文学的，《悟空传》同以前看过的网络作品不一样，一般的网络小说无非就是穿越、无敌什么的，而这本书并没有很强的故事情节，更多的是对人的思考。看完\n书评，这本书居然已经畅销十年了，影响了多少人的青春，这无疑是像我这种后青春时代的大学生最值得推荐的一本网络文学作品。就像周星驰的《大话西游》一样(以前不了解\n，百度一下居然是94年的)，十年前看我笑了，十年后我看哭了。或许真要等到我们老去的那一天，才能完全懂得其中真谛。\n\n\n经历十八年的奋斗，今天，我们终于站在了象牙塔下，可在如今的我看来，大学或许更多的是磨掉了我们的锐气。曾经的我们梦想有一天成为科学家，飞行员，英雄，而如今，我\n们只是希望能找到一个好点的工作。记得我在高考的前几天写了一篇日志，[《那一年的梦想》](http://user.qzone.qq.com/896499825\n/2)来自网络上的一篇文章，当时我是定时在6月8日下午3:00发表的，也就是高考考试最后的英语的时候。还记得那一天我原本以为最后一堂考完了，会是大肆地庆祝，\n放声地高歌，可英语考完那一刹那，我却突然感到异常的平静，没有料想中的那么美好，晚上的散伙饭，我们也吃得没什么激情，或许那时候我们就已经意识到，我们的青春，要\n走完了，迎接我们的不知道是什么。\n\n人生之路越走越远，改变是避免不了的。我们努力去理解命运，但这并不是我们任命的借口。我不想我以后的人生就在一个一个的写字间里度过，我不会，三藏也不会，“我要这\n天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散”。紧箍咒永远锁不了我的心。五百年能改变什么？五百年前，悟空要天下再无他战\n不胜之物！五百年后，他要战胜的却是被金箍禁锢的自己！五百年前，三藏与如来赌这世间世人的命运是否皆由众神控制！五百年后，他依旧不相信那西天真经是他要找寻的答案\n！\n\n成败不重要，重要的是我们用于去拼，哪怕百般阻挡，也不要自己先投降。\n\n西游不死，传说不灭。齐天大圣孙悟空永远留在我的心中！\n\n语录\n\n**_我要这天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散 _**  \n**_如果失去是苦，你还怕不怕付出/如果坠落是苦，你还要不要幸福/如果迷乱是苦，该开始还是结束/如果追求是苦，这是坚强还是执迷不悟 _**  \n**_我心中爱你美丽，又怎能嘴上装四大皆空 _**  \n**_这个世界有你不能到达的地方，有你不应到达的地方，有你一辈子也不会去到达的地方，你的世界并不如你想象的那么大，界限也许就在你身边，可你却以为你可以去任何地方。 _**  \n**_只因心高嫌地窄，立心端要破瑶天 _**  \n**_负尽千重罪，练就不死心 _**  \n**_若是不悟，千里万里，也是枉然；若是悟了，脚下便是灵山 _**  \n**_天下万物，皆来于空，可这众生爱痴，从何处来？天下万物，又终归于空，那人来到尘世浮沉，为的又是什么 _**  \n**_是不是选择任何一个方向，都会游向同一个宿命？_**\n\n**_  \n_**\n","slug":"wukongzhuan","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2po1007m9vnzwsngnog6","content":"<p><a href=\"http://www.amazon.cn/\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0-\\%E4\\%BB\\%8A\\%E4\\%BD\\%\n95\\%E5\\%9C\\%A8/dp/B0053O6412/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1400049182&amp;sr=1-1&amp;key\nwords=\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0\" target=\"_blank\" rel=\"external\">《悟空传》——今何在</a></p>\n<p>五百年真的很久吗，或许那只是一个梦。我不明白是否选择任何一个方向，都会游向同一个宿命。</p>\n<p>我其实很少看网络文学的，《悟空传》同以前看过的网络作品不一样，一般的网络小说无非就是穿越、无敌什么的，而这本书并没有很强的故事情节，更多的是对人的思考。看完<br>书评，这本书居然已经畅销十年了，影响了多少人的青春，这无疑是像我这种后青春时代的大学生最值得推荐的一本网络文学作品。就像周星驰的《大话西游》一样(以前不了解<br>，百度一下居然是94年的)，十年前看我笑了，十年后我看哭了。或许真要等到我们老去的那一天，才能完全懂得其中真谛。</p>\n<p>经历十八年的奋斗，今天，我们终于站在了象牙塔下，可在如今的我看来，大学或许更多的是磨掉了我们的锐气。曾经的我们梦想有一天成为科学家，飞行员，英雄，而如今，我<br>们只是希望能找到一个好点的工作。记得我在高考的前几天写了一篇日志，<a href=\"http://user.qzone.qq.com/896499825\n/2\" target=\"_blank\" rel=\"external\">《那一年的梦想》</a>来自网络上的一篇文章，当时我是定时在6月8日下午3:00发表的，也就是高考考试最后的英语的时候。还记得那一天我原本以为最后一堂考完了，会是大肆地庆祝，<br>放声地高歌，可英语考完那一刹那，我却突然感到异常的平静，没有料想中的那么美好，晚上的散伙饭，我们也吃得没什么激情，或许那时候我们就已经意识到，我们的青春，要<br>走完了，迎接我们的不知道是什么。</p>\n<p>人生之路越走越远，改变是避免不了的。我们努力去理解命运，但这并不是我们任命的借口。我不想我以后的人生就在一个一个的写字间里度过，我不会，三藏也不会，“我要这<br>天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散”。紧箍咒永远锁不了我的心。五百年能改变什么？五百年前，悟空要天下再无他战<br>不胜之物！五百年后，他要战胜的却是被金箍禁锢的自己！五百年前，三藏与如来赌这世间世人的命运是否皆由众神控制！五百年后，他依旧不相信那西天真经是他要找寻的答案<br>！</p>\n<p>成败不重要，重要的是我们用于去拼，哪怕百般阻挡，也不要自己先投降。</p>\n<p>西游不死，传说不灭。齐天大圣孙悟空永远留在我的心中！</p>\n<p>语录</p>\n<p><strong><em>我要这天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散 </em></strong><br><strong><em>如果失去是苦，你还怕不怕付出/如果坠落是苦，你还要不要幸福/如果迷乱是苦，该开始还是结束/如果追求是苦，这是坚强还是执迷不悟 </em></strong><br><strong><em>我心中爱你美丽，又怎能嘴上装四大皆空 </em></strong><br><strong><em>这个世界有你不能到达的地方，有你不应到达的地方，有你一辈子也不会去到达的地方，你的世界并不如你想象的那么大，界限也许就在你身边，可你却以为你可以去任何地方。 </em></strong><br><strong><em>只因心高嫌地窄，立心端要破瑶天 </em></strong><br><strong><em>负尽千重罪，练就不死心 </em></strong><br><strong><em>若是不悟，千里万里，也是枉然；若是悟了，脚下便是灵山 </em></strong><br><strong><em>天下万物，皆来于空，可这众生爱痴，从何处来？天下万物，又终归于空，那人来到尘世浮沉，为的又是什么 </em></strong><br><strong><em>是不是选择任何一个方向，都会游向同一个宿命？</em></strong></p>\n<hr>\n<hr>\n","excerpt":"","more":"<p><a href=\"http://www.amazon.cn/\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0-\\%E4\\%BB\\%8A\\%E4\\%BD\\%\n95\\%E5\\%9C\\%A8/dp/B0053O6412/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1400049182&amp;sr=1-1&amp;key\nwords=\\%E6\\%82\\%9F\\%E7\\%A9\\%BA\\%E4\\%BC\\%A0\">《悟空传》——今何在</a></p>\n<p>五百年真的很久吗，或许那只是一个梦。我不明白是否选择任何一个方向，都会游向同一个宿命。</p>\n<p>我其实很少看网络文学的，《悟空传》同以前看过的网络作品不一样，一般的网络小说无非就是穿越、无敌什么的，而这本书并没有很强的故事情节，更多的是对人的思考。看完<br>书评，这本书居然已经畅销十年了，影响了多少人的青春，这无疑是像我这种后青春时代的大学生最值得推荐的一本网络文学作品。就像周星驰的《大话西游》一样(以前不了解<br>，百度一下居然是94年的)，十年前看我笑了，十年后我看哭了。或许真要等到我们老去的那一天，才能完全懂得其中真谛。</p>\n<p>经历十八年的奋斗，今天，我们终于站在了象牙塔下，可在如今的我看来，大学或许更多的是磨掉了我们的锐气。曾经的我们梦想有一天成为科学家，飞行员，英雄，而如今，我<br>们只是希望能找到一个好点的工作。记得我在高考的前几天写了一篇日志，<a href=\"http://user.qzone.qq.com/896499825\n/2\">《那一年的梦想》</a>来自网络上的一篇文章，当时我是定时在6月8日下午3:00发表的，也就是高考考试最后的英语的时候。还记得那一天我原本以为最后一堂考完了，会是大肆地庆祝，<br>放声地高歌，可英语考完那一刹那，我却突然感到异常的平静，没有料想中的那么美好，晚上的散伙饭，我们也吃得没什么激情，或许那时候我们就已经意识到，我们的青春，要<br>走完了，迎接我们的不知道是什么。</p>\n<p>人生之路越走越远，改变是避免不了的。我们努力去理解命运，但这并不是我们任命的借口。我不想我以后的人生就在一个一个的写字间里度过，我不会，三藏也不会，“我要这<br>天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散”。紧箍咒永远锁不了我的心。五百年能改变什么？五百年前，悟空要天下再无他战<br>不胜之物！五百年后，他要战胜的却是被金箍禁锢的自己！五百年前，三藏与如来赌这世间世人的命运是否皆由众神控制！五百年后，他依旧不相信那西天真经是他要找寻的答案<br>！</p>\n<p>成败不重要，重要的是我们用于去拼，哪怕百般阻挡，也不要自己先投降。</p>\n<p>西游不死，传说不灭。齐天大圣孙悟空永远留在我的心中！</p>\n<p>语录</p>\n<p><strong><em>我要这天，再遮不住我眼；要这地，再埋不了我心；要这众生，都明白我意；要那诸佛，都烟消云散 </em></strong><br><strong><em>如果失去是苦，你还怕不怕付出/如果坠落是苦，你还要不要幸福/如果迷乱是苦，该开始还是结束/如果追求是苦，这是坚强还是执迷不悟 </em></strong><br><strong><em>我心中爱你美丽，又怎能嘴上装四大皆空 </em></strong><br><strong><em>这个世界有你不能到达的地方，有你不应到达的地方，有你一辈子也不会去到达的地方，你的世界并不如你想象的那么大，界限也许就在你身边，可你却以为你可以去任何地方。 </em></strong><br><strong><em>只因心高嫌地窄，立心端要破瑶天 </em></strong><br><strong><em>负尽千重罪，练就不死心 </em></strong><br><strong><em>若是不悟，千里万里，也是枉然；若是悟了，脚下便是灵山 </em></strong><br><strong><em>天下万物，皆来于空，可这众生爱痴，从何处来？天下万物，又终归于空，那人来到尘世浮沉，为的又是什么 </em></strong><br><strong><em>是不是选择任何一个方向，都会游向同一个宿命？</em></strong></p>\n<hr>\n<hr>\n"},{"title":"我不后悔（为你写诗）","date":"2010-04-05T02:51:27.000Z","_content":"记得我曾经说过：\n\n有梦想的人绝不会在\n\n飞翔中迷失方向\n\n而现在呢？\n\n……\n\n也许我长大了\n\n也许我爱上学习了\n\n也许我已成为了现代人\n\n也许……\n\n但我却清楚地意识到\n\n我正在迷失自我\n\n上高中以后\n\n一方面爱上了学习\n\n另一方面也爱上了玩儿\n\n上高中以后\n\n我对音乐不再抱有享受感\n\n而是为了能唱才去听歌\n\n上高中以后\n\n看见别的人成双成对\n\n心里总会有莫名的冲动\n\n但最终还是会压下去\n\n还记得初三的日子吗？\n\n我们两对写诗都产生了兴趣\n\n可我总没你写得好\n\n我想是因为你能对一切大自然中\n\n美的东西产生联想\n\n所以我的内心才没你那么丰富\n\n当我最终傻傻地明白你不爱我后\n\n我并不伤心，也不后悔\n\n至少我曾爱过\n\n究竟还有多少人值得我去爱？\n\n究竟谁才是我最后爱的人呢？\n\n管他的呢！\n\n至少我相信\n\n我付出了，总会有回报\n\n此刻，有时我喜欢的一首歌：\n\n我不后悔 我曾爱过\n\n只是天涯 从此寂寞\n\n远去的渡口 彼岸的灯火\n\n人在河流只许漂泊\n\n我不后悔 被你爱过\n\n只是不能 走到最后\n\n短暂的幸福 拥有就足够\n\n只要舍得就会快乐 会快乐\n\n最近在整理以前在各个网站的博客，突然发现了这篇，虽然早已没有了当年的想法，但这毕竟是我曾经青春的见证，所以决定把它留下来，并附上当时的时间2010年。\n\n——整理于2014年7月4日\n\n  \n\n","source":"_posts/write-poem.md","raw":"---\ntitle: \"我不后悔（为你写诗）\"\ndate: 2010-04-05 10:51:27\ncategories: 那时年少\n---\n记得我曾经说过：\n\n有梦想的人绝不会在\n\n飞翔中迷失方向\n\n而现在呢？\n\n……\n\n也许我长大了\n\n也许我爱上学习了\n\n也许我已成为了现代人\n\n也许……\n\n但我却清楚地意识到\n\n我正在迷失自我\n\n上高中以后\n\n一方面爱上了学习\n\n另一方面也爱上了玩儿\n\n上高中以后\n\n我对音乐不再抱有享受感\n\n而是为了能唱才去听歌\n\n上高中以后\n\n看见别的人成双成对\n\n心里总会有莫名的冲动\n\n但最终还是会压下去\n\n还记得初三的日子吗？\n\n我们两对写诗都产生了兴趣\n\n可我总没你写得好\n\n我想是因为你能对一切大自然中\n\n美的东西产生联想\n\n所以我的内心才没你那么丰富\n\n当我最终傻傻地明白你不爱我后\n\n我并不伤心，也不后悔\n\n至少我曾爱过\n\n究竟还有多少人值得我去爱？\n\n究竟谁才是我最后爱的人呢？\n\n管他的呢！\n\n至少我相信\n\n我付出了，总会有回报\n\n此刻，有时我喜欢的一首歌：\n\n我不后悔 我曾爱过\n\n只是天涯 从此寂寞\n\n远去的渡口 彼岸的灯火\n\n人在河流只许漂泊\n\n我不后悔 被你爱过\n\n只是不能 走到最后\n\n短暂的幸福 拥有就足够\n\n只要舍得就会快乐 会快乐\n\n最近在整理以前在各个网站的博客，突然发现了这篇，虽然早已没有了当年的想法，但这毕竟是我曾经青春的见证，所以决定把它留下来，并附上当时的时间2010年。\n\n——整理于2014年7月4日\n\n  \n\n","slug":"write-poem","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2poj007o9vnz6wiuqqnf","content":"<p>记得我曾经说过：</p>\n<p>有梦想的人绝不会在</p>\n<p>飞翔中迷失方向</p>\n<p>而现在呢？</p>\n<p>……</p>\n<p>也许我长大了</p>\n<p>也许我爱上学习了</p>\n<p>也许我已成为了现代人</p>\n<p>也许……</p>\n<p>但我却清楚地意识到</p>\n<p>我正在迷失自我</p>\n<p>上高中以后</p>\n<p>一方面爱上了学习</p>\n<p>另一方面也爱上了玩儿</p>\n<p>上高中以后</p>\n<p>我对音乐不再抱有享受感</p>\n<p>而是为了能唱才去听歌</p>\n<p>上高中以后</p>\n<p>看见别的人成双成对</p>\n<p>心里总会有莫名的冲动</p>\n<p>但最终还是会压下去</p>\n<p>还记得初三的日子吗？</p>\n<p>我们两对写诗都产生了兴趣</p>\n<p>可我总没你写得好</p>\n<p>我想是因为你能对一切大自然中</p>\n<p>美的东西产生联想</p>\n<p>所以我的内心才没你那么丰富</p>\n<p>当我最终傻傻地明白你不爱我后</p>\n<p>我并不伤心，也不后悔</p>\n<p>至少我曾爱过</p>\n<p>究竟还有多少人值得我去爱？</p>\n<p>究竟谁才是我最后爱的人呢？</p>\n<p>管他的呢！</p>\n<p>至少我相信</p>\n<p>我付出了，总会有回报</p>\n<p>此刻，有时我喜欢的一首歌：</p>\n<p>我不后悔 我曾爱过</p>\n<p>只是天涯 从此寂寞</p>\n<p>远去的渡口 彼岸的灯火</p>\n<p>人在河流只许漂泊</p>\n<p>我不后悔 被你爱过</p>\n<p>只是不能 走到最后</p>\n<p>短暂的幸福 拥有就足够</p>\n<p>只要舍得就会快乐 会快乐</p>\n<p>最近在整理以前在各个网站的博客，突然发现了这篇，虽然早已没有了当年的想法，但这毕竟是我曾经青春的见证，所以决定把它留下来，并附上当时的时间2010年。</p>\n<p>——整理于2014年7月4日</p>\n","excerpt":"","more":"<p>记得我曾经说过：</p>\n<p>有梦想的人绝不会在</p>\n<p>飞翔中迷失方向</p>\n<p>而现在呢？</p>\n<p>……</p>\n<p>也许我长大了</p>\n<p>也许我爱上学习了</p>\n<p>也许我已成为了现代人</p>\n<p>也许……</p>\n<p>但我却清楚地意识到</p>\n<p>我正在迷失自我</p>\n<p>上高中以后</p>\n<p>一方面爱上了学习</p>\n<p>另一方面也爱上了玩儿</p>\n<p>上高中以后</p>\n<p>我对音乐不再抱有享受感</p>\n<p>而是为了能唱才去听歌</p>\n<p>上高中以后</p>\n<p>看见别的人成双成对</p>\n<p>心里总会有莫名的冲动</p>\n<p>但最终还是会压下去</p>\n<p>还记得初三的日子吗？</p>\n<p>我们两对写诗都产生了兴趣</p>\n<p>可我总没你写得好</p>\n<p>我想是因为你能对一切大自然中</p>\n<p>美的东西产生联想</p>\n<p>所以我的内心才没你那么丰富</p>\n<p>当我最终傻傻地明白你不爱我后</p>\n<p>我并不伤心，也不后悔</p>\n<p>至少我曾爱过</p>\n<p>究竟还有多少人值得我去爱？</p>\n<p>究竟谁才是我最后爱的人呢？</p>\n<p>管他的呢！</p>\n<p>至少我相信</p>\n<p>我付出了，总会有回报</p>\n<p>此刻，有时我喜欢的一首歌：</p>\n<p>我不后悔 我曾爱过</p>\n<p>只是天涯 从此寂寞</p>\n<p>远去的渡口 彼岸的灯火</p>\n<p>人在河流只许漂泊</p>\n<p>我不后悔 被你爱过</p>\n<p>只是不能 走到最后</p>\n<p>短暂的幸福 拥有就足够</p>\n<p>只要舍得就会快乐 会快乐</p>\n<p>最近在整理以前在各个网站的博客，突然发现了这篇，虽然早已没有了当年的想法，但这毕竟是我曾经青春的见证，所以决定把它留下来，并附上当时的时间2010年。</p>\n<p>——整理于2014年7月4日</p>\n"},{"title":"Web状态代码解释及常见出错原因","date":"2014-12-27T07:16:40.000Z","_content":"由于在实际项目中，经常遇到前后端传递错误代码，或者发现错误代码的情况，而每次遇到都不一定能快速找到原因，所以这里就把常见的错误代码列出来，并附上我在实际开发\n中所遇到的问题的原因。\n\n\n\n### 1xx消息\n\n  * 100：continu\n  * 101：Switching Protocols\n  * 102：Processing\n\n### 2xx成功：表示请求成功\n\n  * 200：OK，请求成功就返回它\n  * 201：created\n  * 202：accepted\n  * 203：non-authoritative information\n  * 204：no content\n  * 205：reset contentt\n  * 206：partial content\n  * 207 multi-status\n\n###  3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\n\n  * 300：multiplechoices\n  * 301：moved permanently\n  * 302：temporarily moved，暂时性转移，一般是在代码中使用有redirect时产生的\n  * 303：see other\n  * 304：not modified\n  * 305：use proxy\n  * 306：switch proxy\n  * 307：temporary redirect\n\n###  4xx请求错误：用于指出客户端的错误\n\n  * 400：bad request\n  * 401：unauthorized\n  * 402：payment required\n  * 403：禁止访问，一般是未给代码赋予相应的权限导致无法访问\n  * 404：not found，未找到资源，可能是该文件被删除或路由指向错误.\n  * 405：资源被禁止，可能是访问该代码段需要某前提条件，如laravel的filter，例如没有登录等\n  * 406：not acceptable\n  * 407：proxy authentication required\n  * 408：request timeout\n  * 409：conflict\n  * 410：gone\n  * 411：length required\n  * 412：precondition failed\n  * 413：request entity too large\n  * 414：request-uri too long\n  * 415：unsupported media type\n  * 416：requested range not satisfiable\n  * 417：expectation failed\n  * 421：there are too many connection\n  * 422：未找到属性，可能是拼写错误，laravel里面validate的验证失败返回值也是422\n  * 424：failed dependency\n  * 425：unordered collection\n  * 426：upgrade required\n  * 429：retry with\n\n###  5：用于支持服务器错误\n\n  * 500：内部服务器错误，一般是代码在执行中发生了错误，没有做异常处理\n  * 501：not implemented\n  * 502：bad gateway\n  * 503：服务不可用\n  * 504：Gateway Time-out，是代理服务器尝试执行请求时，未能及时从上游服务器收到响应\n  * 505：http version not supported\n  * 506：variant also negotiates\n  * 507：insufficient storage\n  * 509：bandwidth limit exceeded\n  * 510：not extended\n","source":"_posts/web-status-code.md","raw":"---\ntitle: \"Web状态代码解释及常见出错原因\"\ndate: 2014-12-27 15:16:40\ncategories: 编程之路\n---\n由于在实际项目中，经常遇到前后端传递错误代码，或者发现错误代码的情况，而每次遇到都不一定能快速找到原因，所以这里就把常见的错误代码列出来，并附上我在实际开发\n中所遇到的问题的原因。\n\n\n\n### 1xx消息\n\n  * 100：continu\n  * 101：Switching Protocols\n  * 102：Processing\n\n### 2xx成功：表示请求成功\n\n  * 200：OK，请求成功就返回它\n  * 201：created\n  * 202：accepted\n  * 203：non-authoritative information\n  * 204：no content\n  * 205：reset contentt\n  * 206：partial content\n  * 207 multi-status\n\n###  3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\n\n  * 300：multiplechoices\n  * 301：moved permanently\n  * 302：temporarily moved，暂时性转移，一般是在代码中使用有redirect时产生的\n  * 303：see other\n  * 304：not modified\n  * 305：use proxy\n  * 306：switch proxy\n  * 307：temporary redirect\n\n###  4xx请求错误：用于指出客户端的错误\n\n  * 400：bad request\n  * 401：unauthorized\n  * 402：payment required\n  * 403：禁止访问，一般是未给代码赋予相应的权限导致无法访问\n  * 404：not found，未找到资源，可能是该文件被删除或路由指向错误.\n  * 405：资源被禁止，可能是访问该代码段需要某前提条件，如laravel的filter，例如没有登录等\n  * 406：not acceptable\n  * 407：proxy authentication required\n  * 408：request timeout\n  * 409：conflict\n  * 410：gone\n  * 411：length required\n  * 412：precondition failed\n  * 413：request entity too large\n  * 414：request-uri too long\n  * 415：unsupported media type\n  * 416：requested range not satisfiable\n  * 417：expectation failed\n  * 421：there are too many connection\n  * 422：未找到属性，可能是拼写错误，laravel里面validate的验证失败返回值也是422\n  * 424：failed dependency\n  * 425：unordered collection\n  * 426：upgrade required\n  * 429：retry with\n\n###  5：用于支持服务器错误\n\n  * 500：内部服务器错误，一般是代码在执行中发生了错误，没有做异常处理\n  * 501：not implemented\n  * 502：bad gateway\n  * 503：服务不可用\n  * 504：Gateway Time-out，是代理服务器尝试执行请求时，未能及时从上游服务器收到响应\n  * 505：http version not supported\n  * 506：variant also negotiates\n  * 507：insufficient storage\n  * 509：bandwidth limit exceeded\n  * 510：not extended\n","slug":"web-status-code","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2por007q9vnzn7nv3xp7","content":"<p>由于在实际项目中，经常遇到前后端传递错误代码，或者发现错误代码的情况，而每次遇到都不一定能快速找到原因，所以这里就把常见的错误代码列出来，并附上我在实际开发<br>中所遇到的问题的原因。</p>\n<h3 id=\"1xx消息\"><a href=\"#1xx消息\" class=\"headerlink\" title=\"1xx消息\"></a>1xx消息</h3><ul>\n<li>100：continu</li>\n<li>101：Switching Protocols</li>\n<li>102：Processing</li>\n</ul>\n<h3 id=\"2xx成功：表示请求成功\"><a href=\"#2xx成功：表示请求成功\" class=\"headerlink\" title=\"2xx成功：表示请求成功\"></a>2xx成功：表示请求成功</h3><ul>\n<li>200：OK，请求成功就返回它</li>\n<li>201：created</li>\n<li>202：accepted</li>\n<li>203：non-authoritative information</li>\n<li>204：no content</li>\n<li>205：reset contentt</li>\n<li>206：partial content</li>\n<li>207 multi-status</li>\n</ul>\n<h3 id=\"3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\"><a href=\"#3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\" class=\"headerlink\" title=\"3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\"></a>3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息</h3><ul>\n<li>300：multiplechoices</li>\n<li>301：moved permanently</li>\n<li>302：temporarily moved，暂时性转移，一般是在代码中使用有redirect时产生的</li>\n<li>303：see other</li>\n<li>304：not modified</li>\n<li>305：use proxy</li>\n<li>306：switch proxy</li>\n<li>307：temporary redirect</li>\n</ul>\n<h3 id=\"4xx请求错误：用于指出客户端的错误\"><a href=\"#4xx请求错误：用于指出客户端的错误\" class=\"headerlink\" title=\"4xx请求错误：用于指出客户端的错误\"></a>4xx请求错误：用于指出客户端的错误</h3><ul>\n<li>400：bad request</li>\n<li>401：unauthorized</li>\n<li>402：payment required</li>\n<li>403：禁止访问，一般是未给代码赋予相应的权限导致无法访问</li>\n<li>404：not found，未找到资源，可能是该文件被删除或路由指向错误.</li>\n<li>405：资源被禁止，可能是访问该代码段需要某前提条件，如laravel的filter，例如没有登录等</li>\n<li>406：not acceptable</li>\n<li>407：proxy authentication required</li>\n<li>408：request timeout</li>\n<li>409：conflict</li>\n<li>410：gone</li>\n<li>411：length required</li>\n<li>412：precondition failed</li>\n<li>413：request entity too large</li>\n<li>414：request-uri too long</li>\n<li>415：unsupported media type</li>\n<li>416：requested range not satisfiable</li>\n<li>417：expectation failed</li>\n<li>421：there are too many connection</li>\n<li>422：未找到属性，可能是拼写错误，laravel里面validate的验证失败返回值也是422</li>\n<li>424：failed dependency</li>\n<li>425：unordered collection</li>\n<li>426：upgrade required</li>\n<li>429：retry with</li>\n</ul>\n<h3 id=\"5：用于支持服务器错误\"><a href=\"#5：用于支持服务器错误\" class=\"headerlink\" title=\"5：用于支持服务器错误\"></a>5：用于支持服务器错误</h3><ul>\n<li>500：内部服务器错误，一般是代码在执行中发生了错误，没有做异常处理</li>\n<li>501：not implemented</li>\n<li>502：bad gateway</li>\n<li>503：服务不可用</li>\n<li>504：Gateway Time-out，是代理服务器尝试执行请求时，未能及时从上游服务器收到响应</li>\n<li>505：http version not supported</li>\n<li>506：variant also negotiates</li>\n<li>507：insufficient storage</li>\n<li>509：bandwidth limit exceeded</li>\n<li>510：not extended</li>\n</ul>\n","excerpt":"","more":"<p>由于在实际项目中，经常遇到前后端传递错误代码，或者发现错误代码的情况，而每次遇到都不一定能快速找到原因，所以这里就把常见的错误代码列出来，并附上我在实际开发<br>中所遇到的问题的原因。</p>\n<h3 id=\"1xx消息\"><a href=\"#1xx消息\" class=\"headerlink\" title=\"1xx消息\"></a>1xx消息</h3><ul>\n<li>100：continu</li>\n<li>101：Switching Protocols</li>\n<li>102：Processing</li>\n</ul>\n<h3 id=\"2xx成功：表示请求成功\"><a href=\"#2xx成功：表示请求成功\" class=\"headerlink\" title=\"2xx成功：表示请求成功\"></a>2xx成功：表示请求成功</h3><ul>\n<li>200：OK，请求成功就返回它</li>\n<li>201：created</li>\n<li>202：accepted</li>\n<li>203：non-authoritative information</li>\n<li>204：no content</li>\n<li>205：reset contentt</li>\n<li>206：partial content</li>\n<li>207 multi-status</li>\n</ul>\n<h3 id=\"3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\"><a href=\"#3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\" class=\"headerlink\" title=\"3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息\"></a>3xx重定向：用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息</h3><ul>\n<li>300：multiplechoices</li>\n<li>301：moved permanently</li>\n<li>302：temporarily moved，暂时性转移，一般是在代码中使用有redirect时产生的</li>\n<li>303：see other</li>\n<li>304：not modified</li>\n<li>305：use proxy</li>\n<li>306：switch proxy</li>\n<li>307：temporary redirect</li>\n</ul>\n<h3 id=\"4xx请求错误：用于指出客户端的错误\"><a href=\"#4xx请求错误：用于指出客户端的错误\" class=\"headerlink\" title=\"4xx请求错误：用于指出客户端的错误\"></a>4xx请求错误：用于指出客户端的错误</h3><ul>\n<li>400：bad request</li>\n<li>401：unauthorized</li>\n<li>402：payment required</li>\n<li>403：禁止访问，一般是未给代码赋予相应的权限导致无法访问</li>\n<li>404：not found，未找到资源，可能是该文件被删除或路由指向错误.</li>\n<li>405：资源被禁止，可能是访问该代码段需要某前提条件，如laravel的filter，例如没有登录等</li>\n<li>406：not acceptable</li>\n<li>407：proxy authentication required</li>\n<li>408：request timeout</li>\n<li>409：conflict</li>\n<li>410：gone</li>\n<li>411：length required</li>\n<li>412：precondition failed</li>\n<li>413：request entity too large</li>\n<li>414：request-uri too long</li>\n<li>415：unsupported media type</li>\n<li>416：requested range not satisfiable</li>\n<li>417：expectation failed</li>\n<li>421：there are too many connection</li>\n<li>422：未找到属性，可能是拼写错误，laravel里面validate的验证失败返回值也是422</li>\n<li>424：failed dependency</li>\n<li>425：unordered collection</li>\n<li>426：upgrade required</li>\n<li>429：retry with</li>\n</ul>\n<h3 id=\"5：用于支持服务器错误\"><a href=\"#5：用于支持服务器错误\" class=\"headerlink\" title=\"5：用于支持服务器错误\"></a>5：用于支持服务器错误</h3><ul>\n<li>500：内部服务器错误，一般是代码在执行中发生了错误，没有做异常处理</li>\n<li>501：not implemented</li>\n<li>502：bad gateway</li>\n<li>503：服务不可用</li>\n<li>504：Gateway Time-out，是代理服务器尝试执行请求时，未能及时从上游服务器收到响应</li>\n<li>505：http version not supported</li>\n<li>506：variant also negotiates</li>\n<li>507：insufficient storage</li>\n<li>509：bandwidth limit exceeded</li>\n<li>510：not extended</li>\n</ul>\n"},{"title":"Web框架特点及应用场景","date":"2016-03-29T09:06:21.000Z","_content":"我用的框架还是不少的\n\n# Python\n## Django\n- 全面无轮子\n- 后台管理类网站\n- 快速开发\n- 自带ORM\n- 速度最慢的\n\n## Tornado\n- 异步要求大的地方\n- 轻量快速\n\n## Flask\n- 轻量快速\n- 后台接口\n- 几个里面速度最快的\n\n# PHP\n## Laravel\n- 全面无轮子\n","source":"_posts/web-application-scenarios.md","raw":"---\ntitle: \"web框架特点及应用场景\"\ndate: 2016-03-29 17:06:21\ncategories: 编程之路\n---\n我用的框架还是不少的\n\n# Python\n## Django\n- 全面无轮子\n- 后台管理类网站\n- 快速开发\n- 自带ORM\n- 速度最慢的\n\n## Tornado\n- 异步要求大的地方\n- 轻量快速\n\n## Flask\n- 轻量快速\n- 后台接口\n- 几个里面速度最快的\n\n# PHP\n## Laravel\n- 全面无轮子\n","slug":"web-application-scenarios","published":1,"updated":"2016-03-28T09:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pow007s9vnzooy0ydu1","content":"<p>我用的框架还是不少的</p>\n<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><h2 id=\"Django\"><a href=\"#Django\" class=\"headerlink\" title=\"Django\"></a>Django</h2><ul>\n<li>全面无轮子</li>\n<li>后台管理类网站</li>\n<li>快速开发</li>\n<li>自带ORM</li>\n<li>速度最慢的</li>\n</ul>\n<h2 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h2><ul>\n<li>异步要求大的地方</li>\n<li>轻量快速</li>\n</ul>\n<h2 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h2><ul>\n<li>轻量快速</li>\n<li>后台接口</li>\n<li>几个里面速度最快的</li>\n</ul>\n<h1 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h1><h2 id=\"Laravel\"><a href=\"#Laravel\" class=\"headerlink\" title=\"Laravel\"></a>Laravel</h2><ul>\n<li>全面无轮子</li>\n</ul>\n","excerpt":"","more":"<p>我用的框架还是不少的</p>\n<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><h2 id=\"Django\"><a href=\"#Django\" class=\"headerlink\" title=\"Django\"></a>Django</h2><ul>\n<li>全面无轮子</li>\n<li>后台管理类网站</li>\n<li>快速开发</li>\n<li>自带ORM</li>\n<li>速度最慢的</li>\n</ul>\n<h2 id=\"Tornado\"><a href=\"#Tornado\" class=\"headerlink\" title=\"Tornado\"></a>Tornado</h2><ul>\n<li>异步要求大的地方</li>\n<li>轻量快速</li>\n</ul>\n<h2 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h2><ul>\n<li>轻量快速</li>\n<li>后台接口</li>\n<li>几个里面速度最快的</li>\n</ul>\n<h1 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h1><h2 id=\"Laravel\"><a href=\"#Laravel\" class=\"headerlink\" title=\"Laravel\"></a>Laravel</h2><ul>\n<li>全面无轮子</li>\n</ul>\n"},{"title":"[读者]不应放弃的乌托邦","date":"2015-01-05T06:13:16.000Z","_content":"\n\n作者：叶克飞 摘自：《读者》2014第24期\n\n> 世间所有的选择，到最后其实都是五个字——你想要什么\n\n在大城市打拼还是回小城市过相对安逸的生活，这是一个近年来争论不休的问题。可是，它真的是一个大问题吗？\n\n20世纪60年代，刘大任从台湾去美国求学，恰在柏克莱遭遇了自由言论运动风潮。最终，他与许多同龄人一样，成为“乌托邦的寻找者”。\n\n尽管刘大任的左翼思维与我并不相投，但不妨碍我被其文章《柏克莱那几年》打动。这位如今已垂垂老矣的小说家写道：“也正是直接参与运动的亲身体验，因‘柏克莱人’而感\n染的‘寻找乌托邦’旅程，接受了残酷考验，所有事业梦想全部报废，学位自动抛弃，人生大转弯，甚至对人性的本质产生了难以解决的怀疑，然而，直到今天，扪心自问，没有\n一丝一毫后悔。”\n\n他还写道：“对于今天十八九岁的大孩子，我还是可以问心无愧地说这句话，任何机缘，当乌托邦出现在你的人生轨道上时，即使玉石俱焚，也千万不要放弃。因为，人活着，不\n为这个，为了什么？”\n\n他还提到了有名的《休伦港宣言》，开篇是那个著名的句子：“我们这一代的人，孕育于至少是相当舒服的环境，被安置在各地的大学殿堂里，不安地看着我们继承的世界……”\n\n这多像个预言，如今的中国年轻人，不也是身处一个至少相当舒服的环境，但又不安地看着这个世界吗？只是，比起那个风起云涌的大时代，如今的中国更加物质化，甚至使得许\n多年轻人不得不屈从于生活的压力。但反过来说，如今这种琐碎的物质化生活所遭遇的种种问题，在旧日的风起云涌面前也注定是小儿科。换言之，如果你是一个能为“寻找乌托\n邦”放弃一切的人，那么“大城市还是小城市”式的问题根本不值得一提。\n\n大城市和小城市都有显而易见的优缺点：大城市生活丰富，工作机会多，如果是非体制内领域，相对更注重能力，尤其是在创意产业、科技产业等新兴领域，一定程度上形成了业\n务重于人际的氛围，缺点是生活成本高、工作压力大；小城市生活成本低，日子相对安逸，但工作机会少，又普遍是人情社会，办任何事都得靠关系，又因人际关系复杂，隐私空\n间常被侵犯。\n\n这些优缺点并非绝对，往往会随着个体的特点而转化。比如在家办公的自由职业者，工作主要依靠网络传递，那么小城市的低房价就显得有诱惑力；但如果他又特别喜欢丰富的生\n活和多元化的资讯，那么大城市的高房价也不会阻挠他前行的脚步。\n\n正如有人所说，世间所有的选择，到最后其实都是五个字——你想要什么？\n\n许多过来人看到这句话，会不屑地说一句“too young too simple（很傻很天真）”，告诉你这种想法实在太不成熟了，因为许多事情不是想想就能实现的\n。他们会摆出各种大道理，列出一连串的“反面教材”，告诉你若不循规蹈矩，人生将会如何悲惨……可是，如果你连想想的勇气都没有，你又能实现什么？\n\n在大城市和小城市的问题上，我的感情一直倾向于前者。当然，我并不是认为大城市一定比小城市好，更不是说年轻人必须选择大城市，毕竟每个人都有自己的活法。但必须承认\n的是，在这个选择中，天平从一开始就是倾斜的，前者的生存压力更大，也因此更需要勇气。而遵循内心的勇气，不但是我自己缺少的，也是我喜欢并尊重的。\n\n对于逃离大城市的年轻人，我同样尊重，因为他们尝试过。对于选择小城市安逸生活的年轻人，我也并不反感，因为那也未必不是遵循内心的选择。我唯一不能认同的，是某些人\n对打拼者的嘲笑和他们庸俗化的论调。\n\n我见过不少世俗眼光中的失败者，他们无一例外地遭遇了嘲笑。比如有人被迫从北上广回到家乡，就有一些这辈子未曾离开家乡的人嘲笑他在外面混不下去了，当然还少不了“早\n说过这条路走不通”之类的论调。还有一些人正在大城市里打拼，可逢年过节回到家乡，就会成为七大姑八大姨的谈资以及被训导的对象，告诫你生活应该安守本分，结婚生子再\n去考个公务员才是世界上唯一的人生标准。\n\n我甚至认为，正是这群人的存在，才逼得许多年轻人背井离乡，宁愿在大城市孤独打拼，也绝不回去。\n\n没错，大城市里有许多平凡的打拼者，终其一生也无法跻身于这个城市的上游，他们甚至买不起一套小房子，终日为温饱奔波。但谁有资格嘲笑他们呢？没有人。正如毛利在《普\n通女孩，就该滚出大城市？》中所写：“为什么一定非要成功、出色，才能留在大城市？为什么女人不能像男人一样自由选择去留，她永远都该仰仗别人的意见生活吗？”\n\n在中国人的人生选择中，女性比男性的空间更为狭窄，没在30岁前把自己嫁出去仿佛是一条死罪，结婚后没生出孩子来同样是死罪。\n\n一个社会对女性的苛求与偏见，意味着整体价值观的缺陷。女性遭遇苛求，男性同样不会好过。认为女性留在小城市安于现状最好的七大姑八大姨，同样也是逼婚、逼考公务员的\n主力，她们的逼迫对象其实不分男女，这也许是小城市最让人窒息的一面。\n\n我有一个朋友，不谙世事、不善交际，有一份稳定的工作和中等收入。与许多独生子女一样，她在父母的支持下买房买车，一个人住着140平方米的房子，每日按部就班地开车\n上下班，不知不觉已经年过三十。也是在30岁这一年，她放弃了这一切，选择北漂，租房、挤地铁……\n\n当然有人会说她傻，可她比以前开心多了。她离开这个小城市的唯一理由是孤独，同时，她又不愿像长辈们所说的那样，随便找个人结婚生子，告别孤独——那样的话，也许会更\n孤独。\n\n在某些人看来，这种孤独似乎有点矫情。他们还会搬出“适应社会”这一万能法则，告诉你这是你自身的问题，你要改变自己、释放自己，接触社会，就能有更广阔的圈子。可是\n，这个说法从根本上抹杀了人与人之间原本就具有的差异，忽略了人的个性。\n\n价值观的差异也与身份、地位无关，即使都是高学历，即使都有体面的工作，但一个读哈耶克、萨义德和《古拉格群岛》的人，怎么可能和一个除了课本再没读过其他书的人有心\n灵上的契合呢？因为价值观而造成的孤独，无法因为自身的改变而缓解。而且，即使改变，也只能就高不就低，也就是说，你可以让自己变得更好，去适应别人的高度，但无法刻\n意拉低自己的智商，去迁就比自己更平庸的人。\n\n在男权社会里，有较高文化素养和能力的女性，更容易在小城市里感受到这种孤独。工作没有挑战性，缺少有共同话题的朋友，找不到看得上眼的男人，还要因为没对象、不结婚\n和没生孩子这样的事情被当成异端，这已经不仅仅是孤独的问题，更关乎尊严的丧失。\n\n所以，一个人越出色，小城市的面目就越可憎。别说那些内地封闭小城了，即使是东南沿海的富庶地区，即使距离港澳仅仅一两个小时的距离，小城市仍然只是小城市，你依然要\n忍受以下这些事情：同样的杂志和电影，比广州深圳迟一个多星期上市和上线；你还是得自己开着车跑去大城市看话剧和演唱会；如果你没考公务员，某些人更是会替你痛心疾首\n；即使是年轻人，也往往早早老去，坐下来就跟你谈赢在起跑线上的孩子经，见到育儿和养生讲座就像打了鸡血；许多你的同龄人，有着高学历和体面的工作，可家里没有一本书\n，你们永远找不到共同的话题；在事业上，你不能靠创意打动客户，跟人搂着肩膀，忍着满口酒气，称兄道弟干上几杯也许更管用……\n\n有时，我甚至会有这样的错觉：能忍受这些，简直需要比在大城市打拼还要多万倍的勇气。当然，后来我明白了，这不是勇气，而是妥协和懦弱。大城市当然也存在这些问题，但\n你起码有躲开的机会，如果你有足够的能力，还可以主宰自己的生活。\n\n我有一个朋友，他的故乡在一个内陆不发达省份的小城市，他曾说过这样一句话：“我死也不会回去的，因为我不想在20多岁时看到自己60岁的样子。”因为，在那样的小城\n市里，除了公务员、国企、学校、医院之外，你几乎没有什么其他的选择。他用可以在老家买别墅的钱，供了一套北京的小房子，然后告诉我：“房子再小，也是我买的；路再难\n，也是我自己选的，这样的话，谁也没有借口来干涉我的生活。”\n\n我知道，这就是勇气。它似乎可以回应某些人的另一种荒谬论调——年轻人选择大城市是一种逃避，比如逃避生活的责任和传宗接代的重任等。且不说年轻人选择大城市大多有理\n想和追求的因素，即使真的是逃避，我也建议持此论调的人先检讨一下自己：为什么人家甘愿放弃安逸，以孤身去大城市打拼的代价去逃避你和你所期盼的那些东西，是什么让你\n和你的期望比巨大的生活压力和激烈竞争更恐怖？\n\n很多时候，我们都过早老去，然后定义生活。比如认为房子、车子和金钱就代表生活的全部，认为别人也应该这样想，否则就是不成熟、不知足，或是以过来人的姿态强调平庸的\n可贵，把“平庸”等同于“平淡”。可是，许多人未曾想过，你认为好的未必是别人想要的，我们把自己认为好的东西强加于人，未必是关怀，而是侵犯。这样的事，在这个国家\n随处可见，小城市似乎更明显一些，同时让人无处可躲，也无从辩驳。越是没有能力选择自己生活的人，越是庸碌无知的人，越喜欢嘲笑那些有勇气去承受压力的人。\n\n不够现实的乌托邦，总会引来嘲笑。但是，如果你现在20多岁，你是希望看到一个乌托邦，还是看到自己60岁时的样子？\n","source":"_posts/wutuobang.md","raw":"---\ntitle: \"[读者]不应放弃的乌托邦\"\ndate: 2015-01-05 14:13:16\ncategories: 韦编三绝\n---\n\n\n作者：叶克飞 摘自：《读者》2014第24期\n\n> 世间所有的选择，到最后其实都是五个字——你想要什么\n\n在大城市打拼还是回小城市过相对安逸的生活，这是一个近年来争论不休的问题。可是，它真的是一个大问题吗？\n\n20世纪60年代，刘大任从台湾去美国求学，恰在柏克莱遭遇了自由言论运动风潮。最终，他与许多同龄人一样，成为“乌托邦的寻找者”。\n\n尽管刘大任的左翼思维与我并不相投，但不妨碍我被其文章《柏克莱那几年》打动。这位如今已垂垂老矣的小说家写道：“也正是直接参与运动的亲身体验，因‘柏克莱人’而感\n染的‘寻找乌托邦’旅程，接受了残酷考验，所有事业梦想全部报废，学位自动抛弃，人生大转弯，甚至对人性的本质产生了难以解决的怀疑，然而，直到今天，扪心自问，没有\n一丝一毫后悔。”\n\n他还写道：“对于今天十八九岁的大孩子，我还是可以问心无愧地说这句话，任何机缘，当乌托邦出现在你的人生轨道上时，即使玉石俱焚，也千万不要放弃。因为，人活着，不\n为这个，为了什么？”\n\n他还提到了有名的《休伦港宣言》，开篇是那个著名的句子：“我们这一代的人，孕育于至少是相当舒服的环境，被安置在各地的大学殿堂里，不安地看着我们继承的世界……”\n\n这多像个预言，如今的中国年轻人，不也是身处一个至少相当舒服的环境，但又不安地看着这个世界吗？只是，比起那个风起云涌的大时代，如今的中国更加物质化，甚至使得许\n多年轻人不得不屈从于生活的压力。但反过来说，如今这种琐碎的物质化生活所遭遇的种种问题，在旧日的风起云涌面前也注定是小儿科。换言之，如果你是一个能为“寻找乌托\n邦”放弃一切的人，那么“大城市还是小城市”式的问题根本不值得一提。\n\n大城市和小城市都有显而易见的优缺点：大城市生活丰富，工作机会多，如果是非体制内领域，相对更注重能力，尤其是在创意产业、科技产业等新兴领域，一定程度上形成了业\n务重于人际的氛围，缺点是生活成本高、工作压力大；小城市生活成本低，日子相对安逸，但工作机会少，又普遍是人情社会，办任何事都得靠关系，又因人际关系复杂，隐私空\n间常被侵犯。\n\n这些优缺点并非绝对，往往会随着个体的特点而转化。比如在家办公的自由职业者，工作主要依靠网络传递，那么小城市的低房价就显得有诱惑力；但如果他又特别喜欢丰富的生\n活和多元化的资讯，那么大城市的高房价也不会阻挠他前行的脚步。\n\n正如有人所说，世间所有的选择，到最后其实都是五个字——你想要什么？\n\n许多过来人看到这句话，会不屑地说一句“too young too simple（很傻很天真）”，告诉你这种想法实在太不成熟了，因为许多事情不是想想就能实现的\n。他们会摆出各种大道理，列出一连串的“反面教材”，告诉你若不循规蹈矩，人生将会如何悲惨……可是，如果你连想想的勇气都没有，你又能实现什么？\n\n在大城市和小城市的问题上，我的感情一直倾向于前者。当然，我并不是认为大城市一定比小城市好，更不是说年轻人必须选择大城市，毕竟每个人都有自己的活法。但必须承认\n的是，在这个选择中，天平从一开始就是倾斜的，前者的生存压力更大，也因此更需要勇气。而遵循内心的勇气，不但是我自己缺少的，也是我喜欢并尊重的。\n\n对于逃离大城市的年轻人，我同样尊重，因为他们尝试过。对于选择小城市安逸生活的年轻人，我也并不反感，因为那也未必不是遵循内心的选择。我唯一不能认同的，是某些人\n对打拼者的嘲笑和他们庸俗化的论调。\n\n我见过不少世俗眼光中的失败者，他们无一例外地遭遇了嘲笑。比如有人被迫从北上广回到家乡，就有一些这辈子未曾离开家乡的人嘲笑他在外面混不下去了，当然还少不了“早\n说过这条路走不通”之类的论调。还有一些人正在大城市里打拼，可逢年过节回到家乡，就会成为七大姑八大姨的谈资以及被训导的对象，告诫你生活应该安守本分，结婚生子再\n去考个公务员才是世界上唯一的人生标准。\n\n我甚至认为，正是这群人的存在，才逼得许多年轻人背井离乡，宁愿在大城市孤独打拼，也绝不回去。\n\n没错，大城市里有许多平凡的打拼者，终其一生也无法跻身于这个城市的上游，他们甚至买不起一套小房子，终日为温饱奔波。但谁有资格嘲笑他们呢？没有人。正如毛利在《普\n通女孩，就该滚出大城市？》中所写：“为什么一定非要成功、出色，才能留在大城市？为什么女人不能像男人一样自由选择去留，她永远都该仰仗别人的意见生活吗？”\n\n在中国人的人生选择中，女性比男性的空间更为狭窄，没在30岁前把自己嫁出去仿佛是一条死罪，结婚后没生出孩子来同样是死罪。\n\n一个社会对女性的苛求与偏见，意味着整体价值观的缺陷。女性遭遇苛求，男性同样不会好过。认为女性留在小城市安于现状最好的七大姑八大姨，同样也是逼婚、逼考公务员的\n主力，她们的逼迫对象其实不分男女，这也许是小城市最让人窒息的一面。\n\n我有一个朋友，不谙世事、不善交际，有一份稳定的工作和中等收入。与许多独生子女一样，她在父母的支持下买房买车，一个人住着140平方米的房子，每日按部就班地开车\n上下班，不知不觉已经年过三十。也是在30岁这一年，她放弃了这一切，选择北漂，租房、挤地铁……\n\n当然有人会说她傻，可她比以前开心多了。她离开这个小城市的唯一理由是孤独，同时，她又不愿像长辈们所说的那样，随便找个人结婚生子，告别孤独——那样的话，也许会更\n孤独。\n\n在某些人看来，这种孤独似乎有点矫情。他们还会搬出“适应社会”这一万能法则，告诉你这是你自身的问题，你要改变自己、释放自己，接触社会，就能有更广阔的圈子。可是\n，这个说法从根本上抹杀了人与人之间原本就具有的差异，忽略了人的个性。\n\n价值观的差异也与身份、地位无关，即使都是高学历，即使都有体面的工作，但一个读哈耶克、萨义德和《古拉格群岛》的人，怎么可能和一个除了课本再没读过其他书的人有心\n灵上的契合呢？因为价值观而造成的孤独，无法因为自身的改变而缓解。而且，即使改变，也只能就高不就低，也就是说，你可以让自己变得更好，去适应别人的高度，但无法刻\n意拉低自己的智商，去迁就比自己更平庸的人。\n\n在男权社会里，有较高文化素养和能力的女性，更容易在小城市里感受到这种孤独。工作没有挑战性，缺少有共同话题的朋友，找不到看得上眼的男人，还要因为没对象、不结婚\n和没生孩子这样的事情被当成异端，这已经不仅仅是孤独的问题，更关乎尊严的丧失。\n\n所以，一个人越出色，小城市的面目就越可憎。别说那些内地封闭小城了，即使是东南沿海的富庶地区，即使距离港澳仅仅一两个小时的距离，小城市仍然只是小城市，你依然要\n忍受以下这些事情：同样的杂志和电影，比广州深圳迟一个多星期上市和上线；你还是得自己开着车跑去大城市看话剧和演唱会；如果你没考公务员，某些人更是会替你痛心疾首\n；即使是年轻人，也往往早早老去，坐下来就跟你谈赢在起跑线上的孩子经，见到育儿和养生讲座就像打了鸡血；许多你的同龄人，有着高学历和体面的工作，可家里没有一本书\n，你们永远找不到共同的话题；在事业上，你不能靠创意打动客户，跟人搂着肩膀，忍着满口酒气，称兄道弟干上几杯也许更管用……\n\n有时，我甚至会有这样的错觉：能忍受这些，简直需要比在大城市打拼还要多万倍的勇气。当然，后来我明白了，这不是勇气，而是妥协和懦弱。大城市当然也存在这些问题，但\n你起码有躲开的机会，如果你有足够的能力，还可以主宰自己的生活。\n\n我有一个朋友，他的故乡在一个内陆不发达省份的小城市，他曾说过这样一句话：“我死也不会回去的，因为我不想在20多岁时看到自己60岁的样子。”因为，在那样的小城\n市里，除了公务员、国企、学校、医院之外，你几乎没有什么其他的选择。他用可以在老家买别墅的钱，供了一套北京的小房子，然后告诉我：“房子再小，也是我买的；路再难\n，也是我自己选的，这样的话，谁也没有借口来干涉我的生活。”\n\n我知道，这就是勇气。它似乎可以回应某些人的另一种荒谬论调——年轻人选择大城市是一种逃避，比如逃避生活的责任和传宗接代的重任等。且不说年轻人选择大城市大多有理\n想和追求的因素，即使真的是逃避，我也建议持此论调的人先检讨一下自己：为什么人家甘愿放弃安逸，以孤身去大城市打拼的代价去逃避你和你所期盼的那些东西，是什么让你\n和你的期望比巨大的生活压力和激烈竞争更恐怖？\n\n很多时候，我们都过早老去，然后定义生活。比如认为房子、车子和金钱就代表生活的全部，认为别人也应该这样想，否则就是不成熟、不知足，或是以过来人的姿态强调平庸的\n可贵，把“平庸”等同于“平淡”。可是，许多人未曾想过，你认为好的未必是别人想要的，我们把自己认为好的东西强加于人，未必是关怀，而是侵犯。这样的事，在这个国家\n随处可见，小城市似乎更明显一些，同时让人无处可躲，也无从辩驳。越是没有能力选择自己生活的人，越是庸碌无知的人，越喜欢嘲笑那些有勇气去承受压力的人。\n\n不够现实的乌托邦，总会引来嘲笑。但是，如果你现在20多岁，你是希望看到一个乌托邦，还是看到自己60岁时的样子？\n","slug":"wutuobang","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2poy007u9vnzkz0fazbn","content":"<p>作者：叶克飞 摘自：《读者》2014第24期</p>\n<blockquote>\n<p>世间所有的选择，到最后其实都是五个字——你想要什么</p>\n</blockquote>\n<p>在大城市打拼还是回小城市过相对安逸的生活，这是一个近年来争论不休的问题。可是，它真的是一个大问题吗？</p>\n<p>20世纪60年代，刘大任从台湾去美国求学，恰在柏克莱遭遇了自由言论运动风潮。最终，他与许多同龄人一样，成为“乌托邦的寻找者”。</p>\n<p>尽管刘大任的左翼思维与我并不相投，但不妨碍我被其文章《柏克莱那几年》打动。这位如今已垂垂老矣的小说家写道：“也正是直接参与运动的亲身体验，因‘柏克莱人’而感<br>染的‘寻找乌托邦’旅程，接受了残酷考验，所有事业梦想全部报废，学位自动抛弃，人生大转弯，甚至对人性的本质产生了难以解决的怀疑，然而，直到今天，扪心自问，没有<br>一丝一毫后悔。”</p>\n<p>他还写道：“对于今天十八九岁的大孩子，我还是可以问心无愧地说这句话，任何机缘，当乌托邦出现在你的人生轨道上时，即使玉石俱焚，也千万不要放弃。因为，人活着，不<br>为这个，为了什么？”</p>\n<p>他还提到了有名的《休伦港宣言》，开篇是那个著名的句子：“我们这一代的人，孕育于至少是相当舒服的环境，被安置在各地的大学殿堂里，不安地看着我们继承的世界……”</p>\n<p>这多像个预言，如今的中国年轻人，不也是身处一个至少相当舒服的环境，但又不安地看着这个世界吗？只是，比起那个风起云涌的大时代，如今的中国更加物质化，甚至使得许<br>多年轻人不得不屈从于生活的压力。但反过来说，如今这种琐碎的物质化生活所遭遇的种种问题，在旧日的风起云涌面前也注定是小儿科。换言之，如果你是一个能为“寻找乌托<br>邦”放弃一切的人，那么“大城市还是小城市”式的问题根本不值得一提。</p>\n<p>大城市和小城市都有显而易见的优缺点：大城市生活丰富，工作机会多，如果是非体制内领域，相对更注重能力，尤其是在创意产业、科技产业等新兴领域，一定程度上形成了业<br>务重于人际的氛围，缺点是生活成本高、工作压力大；小城市生活成本低，日子相对安逸，但工作机会少，又普遍是人情社会，办任何事都得靠关系，又因人际关系复杂，隐私空<br>间常被侵犯。</p>\n<p>这些优缺点并非绝对，往往会随着个体的特点而转化。比如在家办公的自由职业者，工作主要依靠网络传递，那么小城市的低房价就显得有诱惑力；但如果他又特别喜欢丰富的生<br>活和多元化的资讯，那么大城市的高房价也不会阻挠他前行的脚步。</p>\n<p>正如有人所说，世间所有的选择，到最后其实都是五个字——你想要什么？</p>\n<p>许多过来人看到这句话，会不屑地说一句“too young too simple（很傻很天真）”，告诉你这种想法实在太不成熟了，因为许多事情不是想想就能实现的<br>。他们会摆出各种大道理，列出一连串的“反面教材”，告诉你若不循规蹈矩，人生将会如何悲惨……可是，如果你连想想的勇气都没有，你又能实现什么？</p>\n<p>在大城市和小城市的问题上，我的感情一直倾向于前者。当然，我并不是认为大城市一定比小城市好，更不是说年轻人必须选择大城市，毕竟每个人都有自己的活法。但必须承认<br>的是，在这个选择中，天平从一开始就是倾斜的，前者的生存压力更大，也因此更需要勇气。而遵循内心的勇气，不但是我自己缺少的，也是我喜欢并尊重的。</p>\n<p>对于逃离大城市的年轻人，我同样尊重，因为他们尝试过。对于选择小城市安逸生活的年轻人，我也并不反感，因为那也未必不是遵循内心的选择。我唯一不能认同的，是某些人<br>对打拼者的嘲笑和他们庸俗化的论调。</p>\n<p>我见过不少世俗眼光中的失败者，他们无一例外地遭遇了嘲笑。比如有人被迫从北上广回到家乡，就有一些这辈子未曾离开家乡的人嘲笑他在外面混不下去了，当然还少不了“早<br>说过这条路走不通”之类的论调。还有一些人正在大城市里打拼，可逢年过节回到家乡，就会成为七大姑八大姨的谈资以及被训导的对象，告诫你生活应该安守本分，结婚生子再<br>去考个公务员才是世界上唯一的人生标准。</p>\n<p>我甚至认为，正是这群人的存在，才逼得许多年轻人背井离乡，宁愿在大城市孤独打拼，也绝不回去。</p>\n<p>没错，大城市里有许多平凡的打拼者，终其一生也无法跻身于这个城市的上游，他们甚至买不起一套小房子，终日为温饱奔波。但谁有资格嘲笑他们呢？没有人。正如毛利在《普<br>通女孩，就该滚出大城市？》中所写：“为什么一定非要成功、出色，才能留在大城市？为什么女人不能像男人一样自由选择去留，她永远都该仰仗别人的意见生活吗？”</p>\n<p>在中国人的人生选择中，女性比男性的空间更为狭窄，没在30岁前把自己嫁出去仿佛是一条死罪，结婚后没生出孩子来同样是死罪。</p>\n<p>一个社会对女性的苛求与偏见，意味着整体价值观的缺陷。女性遭遇苛求，男性同样不会好过。认为女性留在小城市安于现状最好的七大姑八大姨，同样也是逼婚、逼考公务员的<br>主力，她们的逼迫对象其实不分男女，这也许是小城市最让人窒息的一面。</p>\n<p>我有一个朋友，不谙世事、不善交际，有一份稳定的工作和中等收入。与许多独生子女一样，她在父母的支持下买房买车，一个人住着140平方米的房子，每日按部就班地开车<br>上下班，不知不觉已经年过三十。也是在30岁这一年，她放弃了这一切，选择北漂，租房、挤地铁……</p>\n<p>当然有人会说她傻，可她比以前开心多了。她离开这个小城市的唯一理由是孤独，同时，她又不愿像长辈们所说的那样，随便找个人结婚生子，告别孤独——那样的话，也许会更<br>孤独。</p>\n<p>在某些人看来，这种孤独似乎有点矫情。他们还会搬出“适应社会”这一万能法则，告诉你这是你自身的问题，你要改变自己、释放自己，接触社会，就能有更广阔的圈子。可是<br>，这个说法从根本上抹杀了人与人之间原本就具有的差异，忽略了人的个性。</p>\n<p>价值观的差异也与身份、地位无关，即使都是高学历，即使都有体面的工作，但一个读哈耶克、萨义德和《古拉格群岛》的人，怎么可能和一个除了课本再没读过其他书的人有心<br>灵上的契合呢？因为价值观而造成的孤独，无法因为自身的改变而缓解。而且，即使改变，也只能就高不就低，也就是说，你可以让自己变得更好，去适应别人的高度，但无法刻<br>意拉低自己的智商，去迁就比自己更平庸的人。</p>\n<p>在男权社会里，有较高文化素养和能力的女性，更容易在小城市里感受到这种孤独。工作没有挑战性，缺少有共同话题的朋友，找不到看得上眼的男人，还要因为没对象、不结婚<br>和没生孩子这样的事情被当成异端，这已经不仅仅是孤独的问题，更关乎尊严的丧失。</p>\n<p>所以，一个人越出色，小城市的面目就越可憎。别说那些内地封闭小城了，即使是东南沿海的富庶地区，即使距离港澳仅仅一两个小时的距离，小城市仍然只是小城市，你依然要<br>忍受以下这些事情：同样的杂志和电影，比广州深圳迟一个多星期上市和上线；你还是得自己开着车跑去大城市看话剧和演唱会；如果你没考公务员，某些人更是会替你痛心疾首<br>；即使是年轻人，也往往早早老去，坐下来就跟你谈赢在起跑线上的孩子经，见到育儿和养生讲座就像打了鸡血；许多你的同龄人，有着高学历和体面的工作，可家里没有一本书<br>，你们永远找不到共同的话题；在事业上，你不能靠创意打动客户，跟人搂着肩膀，忍着满口酒气，称兄道弟干上几杯也许更管用……</p>\n<p>有时，我甚至会有这样的错觉：能忍受这些，简直需要比在大城市打拼还要多万倍的勇气。当然，后来我明白了，这不是勇气，而是妥协和懦弱。大城市当然也存在这些问题，但<br>你起码有躲开的机会，如果你有足够的能力，还可以主宰自己的生活。</p>\n<p>我有一个朋友，他的故乡在一个内陆不发达省份的小城市，他曾说过这样一句话：“我死也不会回去的，因为我不想在20多岁时看到自己60岁的样子。”因为，在那样的小城<br>市里，除了公务员、国企、学校、医院之外，你几乎没有什么其他的选择。他用可以在老家买别墅的钱，供了一套北京的小房子，然后告诉我：“房子再小，也是我买的；路再难<br>，也是我自己选的，这样的话，谁也没有借口来干涉我的生活。”</p>\n<p>我知道，这就是勇气。它似乎可以回应某些人的另一种荒谬论调——年轻人选择大城市是一种逃避，比如逃避生活的责任和传宗接代的重任等。且不说年轻人选择大城市大多有理<br>想和追求的因素，即使真的是逃避，我也建议持此论调的人先检讨一下自己：为什么人家甘愿放弃安逸，以孤身去大城市打拼的代价去逃避你和你所期盼的那些东西，是什么让你<br>和你的期望比巨大的生活压力和激烈竞争更恐怖？</p>\n<p>很多时候，我们都过早老去，然后定义生活。比如认为房子、车子和金钱就代表生活的全部，认为别人也应该这样想，否则就是不成熟、不知足，或是以过来人的姿态强调平庸的<br>可贵，把“平庸”等同于“平淡”。可是，许多人未曾想过，你认为好的未必是别人想要的，我们把自己认为好的东西强加于人，未必是关怀，而是侵犯。这样的事，在这个国家<br>随处可见，小城市似乎更明显一些，同时让人无处可躲，也无从辩驳。越是没有能力选择自己生活的人，越是庸碌无知的人，越喜欢嘲笑那些有勇气去承受压力的人。</p>\n<p>不够现实的乌托邦，总会引来嘲笑。但是，如果你现在20多岁，你是希望看到一个乌托邦，还是看到自己60岁时的样子？</p>\n","excerpt":"","more":"<p>作者：叶克飞 摘自：《读者》2014第24期</p>\n<blockquote>\n<p>世间所有的选择，到最后其实都是五个字——你想要什么</p>\n</blockquote>\n<p>在大城市打拼还是回小城市过相对安逸的生活，这是一个近年来争论不休的问题。可是，它真的是一个大问题吗？</p>\n<p>20世纪60年代，刘大任从台湾去美国求学，恰在柏克莱遭遇了自由言论运动风潮。最终，他与许多同龄人一样，成为“乌托邦的寻找者”。</p>\n<p>尽管刘大任的左翼思维与我并不相投，但不妨碍我被其文章《柏克莱那几年》打动。这位如今已垂垂老矣的小说家写道：“也正是直接参与运动的亲身体验，因‘柏克莱人’而感<br>染的‘寻找乌托邦’旅程，接受了残酷考验，所有事业梦想全部报废，学位自动抛弃，人生大转弯，甚至对人性的本质产生了难以解决的怀疑，然而，直到今天，扪心自问，没有<br>一丝一毫后悔。”</p>\n<p>他还写道：“对于今天十八九岁的大孩子，我还是可以问心无愧地说这句话，任何机缘，当乌托邦出现在你的人生轨道上时，即使玉石俱焚，也千万不要放弃。因为，人活着，不<br>为这个，为了什么？”</p>\n<p>他还提到了有名的《休伦港宣言》，开篇是那个著名的句子：“我们这一代的人，孕育于至少是相当舒服的环境，被安置在各地的大学殿堂里，不安地看着我们继承的世界……”</p>\n<p>这多像个预言，如今的中国年轻人，不也是身处一个至少相当舒服的环境，但又不安地看着这个世界吗？只是，比起那个风起云涌的大时代，如今的中国更加物质化，甚至使得许<br>多年轻人不得不屈从于生活的压力。但反过来说，如今这种琐碎的物质化生活所遭遇的种种问题，在旧日的风起云涌面前也注定是小儿科。换言之，如果你是一个能为“寻找乌托<br>邦”放弃一切的人，那么“大城市还是小城市”式的问题根本不值得一提。</p>\n<p>大城市和小城市都有显而易见的优缺点：大城市生活丰富，工作机会多，如果是非体制内领域，相对更注重能力，尤其是在创意产业、科技产业等新兴领域，一定程度上形成了业<br>务重于人际的氛围，缺点是生活成本高、工作压力大；小城市生活成本低，日子相对安逸，但工作机会少，又普遍是人情社会，办任何事都得靠关系，又因人际关系复杂，隐私空<br>间常被侵犯。</p>\n<p>这些优缺点并非绝对，往往会随着个体的特点而转化。比如在家办公的自由职业者，工作主要依靠网络传递，那么小城市的低房价就显得有诱惑力；但如果他又特别喜欢丰富的生<br>活和多元化的资讯，那么大城市的高房价也不会阻挠他前行的脚步。</p>\n<p>正如有人所说，世间所有的选择，到最后其实都是五个字——你想要什么？</p>\n<p>许多过来人看到这句话，会不屑地说一句“too young too simple（很傻很天真）”，告诉你这种想法实在太不成熟了，因为许多事情不是想想就能实现的<br>。他们会摆出各种大道理，列出一连串的“反面教材”，告诉你若不循规蹈矩，人生将会如何悲惨……可是，如果你连想想的勇气都没有，你又能实现什么？</p>\n<p>在大城市和小城市的问题上，我的感情一直倾向于前者。当然，我并不是认为大城市一定比小城市好，更不是说年轻人必须选择大城市，毕竟每个人都有自己的活法。但必须承认<br>的是，在这个选择中，天平从一开始就是倾斜的，前者的生存压力更大，也因此更需要勇气。而遵循内心的勇气，不但是我自己缺少的，也是我喜欢并尊重的。</p>\n<p>对于逃离大城市的年轻人，我同样尊重，因为他们尝试过。对于选择小城市安逸生活的年轻人，我也并不反感，因为那也未必不是遵循内心的选择。我唯一不能认同的，是某些人<br>对打拼者的嘲笑和他们庸俗化的论调。</p>\n<p>我见过不少世俗眼光中的失败者，他们无一例外地遭遇了嘲笑。比如有人被迫从北上广回到家乡，就有一些这辈子未曾离开家乡的人嘲笑他在外面混不下去了，当然还少不了“早<br>说过这条路走不通”之类的论调。还有一些人正在大城市里打拼，可逢年过节回到家乡，就会成为七大姑八大姨的谈资以及被训导的对象，告诫你生活应该安守本分，结婚生子再<br>去考个公务员才是世界上唯一的人生标准。</p>\n<p>我甚至认为，正是这群人的存在，才逼得许多年轻人背井离乡，宁愿在大城市孤独打拼，也绝不回去。</p>\n<p>没错，大城市里有许多平凡的打拼者，终其一生也无法跻身于这个城市的上游，他们甚至买不起一套小房子，终日为温饱奔波。但谁有资格嘲笑他们呢？没有人。正如毛利在《普<br>通女孩，就该滚出大城市？》中所写：“为什么一定非要成功、出色，才能留在大城市？为什么女人不能像男人一样自由选择去留，她永远都该仰仗别人的意见生活吗？”</p>\n<p>在中国人的人生选择中，女性比男性的空间更为狭窄，没在30岁前把自己嫁出去仿佛是一条死罪，结婚后没生出孩子来同样是死罪。</p>\n<p>一个社会对女性的苛求与偏见，意味着整体价值观的缺陷。女性遭遇苛求，男性同样不会好过。认为女性留在小城市安于现状最好的七大姑八大姨，同样也是逼婚、逼考公务员的<br>主力，她们的逼迫对象其实不分男女，这也许是小城市最让人窒息的一面。</p>\n<p>我有一个朋友，不谙世事、不善交际，有一份稳定的工作和中等收入。与许多独生子女一样，她在父母的支持下买房买车，一个人住着140平方米的房子，每日按部就班地开车<br>上下班，不知不觉已经年过三十。也是在30岁这一年，她放弃了这一切，选择北漂，租房、挤地铁……</p>\n<p>当然有人会说她傻，可她比以前开心多了。她离开这个小城市的唯一理由是孤独，同时，她又不愿像长辈们所说的那样，随便找个人结婚生子，告别孤独——那样的话，也许会更<br>孤独。</p>\n<p>在某些人看来，这种孤独似乎有点矫情。他们还会搬出“适应社会”这一万能法则，告诉你这是你自身的问题，你要改变自己、释放自己，接触社会，就能有更广阔的圈子。可是<br>，这个说法从根本上抹杀了人与人之间原本就具有的差异，忽略了人的个性。</p>\n<p>价值观的差异也与身份、地位无关，即使都是高学历，即使都有体面的工作，但一个读哈耶克、萨义德和《古拉格群岛》的人，怎么可能和一个除了课本再没读过其他书的人有心<br>灵上的契合呢？因为价值观而造成的孤独，无法因为自身的改变而缓解。而且，即使改变，也只能就高不就低，也就是说，你可以让自己变得更好，去适应别人的高度，但无法刻<br>意拉低自己的智商，去迁就比自己更平庸的人。</p>\n<p>在男权社会里，有较高文化素养和能力的女性，更容易在小城市里感受到这种孤独。工作没有挑战性，缺少有共同话题的朋友，找不到看得上眼的男人，还要因为没对象、不结婚<br>和没生孩子这样的事情被当成异端，这已经不仅仅是孤独的问题，更关乎尊严的丧失。</p>\n<p>所以，一个人越出色，小城市的面目就越可憎。别说那些内地封闭小城了，即使是东南沿海的富庶地区，即使距离港澳仅仅一两个小时的距离，小城市仍然只是小城市，你依然要<br>忍受以下这些事情：同样的杂志和电影，比广州深圳迟一个多星期上市和上线；你还是得自己开着车跑去大城市看话剧和演唱会；如果你没考公务员，某些人更是会替你痛心疾首<br>；即使是年轻人，也往往早早老去，坐下来就跟你谈赢在起跑线上的孩子经，见到育儿和养生讲座就像打了鸡血；许多你的同龄人，有着高学历和体面的工作，可家里没有一本书<br>，你们永远找不到共同的话题；在事业上，你不能靠创意打动客户，跟人搂着肩膀，忍着满口酒气，称兄道弟干上几杯也许更管用……</p>\n<p>有时，我甚至会有这样的错觉：能忍受这些，简直需要比在大城市打拼还要多万倍的勇气。当然，后来我明白了，这不是勇气，而是妥协和懦弱。大城市当然也存在这些问题，但<br>你起码有躲开的机会，如果你有足够的能力，还可以主宰自己的生活。</p>\n<p>我有一个朋友，他的故乡在一个内陆不发达省份的小城市，他曾说过这样一句话：“我死也不会回去的，因为我不想在20多岁时看到自己60岁的样子。”因为，在那样的小城<br>市里，除了公务员、国企、学校、医院之外，你几乎没有什么其他的选择。他用可以在老家买别墅的钱，供了一套北京的小房子，然后告诉我：“房子再小，也是我买的；路再难<br>，也是我自己选的，这样的话，谁也没有借口来干涉我的生活。”</p>\n<p>我知道，这就是勇气。它似乎可以回应某些人的另一种荒谬论调——年轻人选择大城市是一种逃避，比如逃避生活的责任和传宗接代的重任等。且不说年轻人选择大城市大多有理<br>想和追求的因素，即使真的是逃避，我也建议持此论调的人先检讨一下自己：为什么人家甘愿放弃安逸，以孤身去大城市打拼的代价去逃避你和你所期盼的那些东西，是什么让你<br>和你的期望比巨大的生活压力和激烈竞争更恐怖？</p>\n<p>很多时候，我们都过早老去，然后定义生活。比如认为房子、车子和金钱就代表生活的全部，认为别人也应该这样想，否则就是不成熟、不知足，或是以过来人的姿态强调平庸的<br>可贵，把“平庸”等同于“平淡”。可是，许多人未曾想过，你认为好的未必是别人想要的，我们把自己认为好的东西强加于人，未必是关怀，而是侵犯。这样的事，在这个国家<br>随处可见，小城市似乎更明显一些，同时让人无处可躲，也无从辩驳。越是没有能力选择自己生活的人，越是庸碌无知的人，越喜欢嘲笑那些有勇气去承受压力的人。</p>\n<p>不够现实的乌托邦，总会引来嘲笑。但是，如果你现在20多岁，你是希望看到一个乌托邦，还是看到自己60岁时的样子？</p>\n"},{"title":"《云巅之上》——歌词感想","date":"2015-02-11T08:44:19.000Z","_content":"红尘往事莫笑痴人看不穿  \n百年间五行山下情仇如烟  \n望不断的前尘难用自由换  \n弃了心回忆偏又纠缠\n\n若经历过太多的爱恨嗔癫  \n谁还能潇洒纵横这人世间  \n回首早已沧海桑田物易人迁  \n徒留我在这云巅\n\n回想那年锁子金甲傲气敢齐天  \n呼风唤雨叱咤间风云变  \n流光一舞搅碎星辰日月山河颤  \n怒指苍穹要让诸佛烟消云散\n\n后来多少次落日凝望西边的天  \n迷失了自己也蹉跎了时间  \n谁不肯放过回忆在孤独中执念  \n五百年的沧桑不过是转眼\n\n爱过笑过终究是曲终人散  \n流年飞逝中早已无可逆转  \n无法抗争的命运遗忘了誓言  \n留下谁不甘的心酸\n\n那束住了回忆的不过是一个圈  \n却太轻易的遗忘了从前  \n某一刻回头看清了灵魂的背叛  \n才终于等到了旅途的终点\n\n是谁一次次寂寞凝望晚霞满天  \n杀死了回忆也斩断了羁绊  \n又是谁还孤独等在无尽的黑暗  \n怀念着故人守候在云巅\n\n五百年的沧桑不过是转念\n\n我听歌向来不去研究演唱者的唱功，最看重的必须是歌词，我想，就是因为方文山的歌词，才会有那么多杰迷。\n\n这首《云巅之上》是我在[中国原创音乐基地](http://5sing.kugou.com/yc/2580386.html)发现的，第一次听就被震撼到了，当时\n酷狗音乐里还没有它的歌词，我就立马为它添加了歌词文件。这首歌的歌词十分有意境，我想每一个身怀远大报复的人听到这首歌都会遥想一下自己站在云巅之上的感觉。\n\n十岁不愁、二十不悔、三十而立、四十不惑、五十知天命、六十 耳顺、七十古来稀。现在的我正处于风华正茂的二十几岁，马上步入大学，经常臆想着自己毕业不用多久就能升\n职加薪，当上总经理，出任CEO，赢取白富美，走上人生巅峰。可是，另一方面，我又有一些害怕，就像高考前夜，我很害怕，害怕的不是自己发挥失常，不是自己考不上理想\n的学校，害怕的是未知的未来。无论是高考还是大学毕业，都为我打开一扇通往未知的大门，门后究竟是什么，我完全不知道，有时我会想得很美，有时又想得很糟。很多次，我\n会想象，多年后的自己面对夕阳会在想什么呢?还会不会想起当年某一天自己曾许下的豪言壮语?身边又是否会有一个人陪伴呢？\n\n人生几何，只有走过后才有资格笑看人生，走出去吧，去看看这个世界，毕竟，只有看了这个世界，才会有世界观。\n","source":"_posts/yundianzhishang.md","raw":"---\ntitle: \"《云巅之上》——歌词感想\"\ndate: 2015-02-11 16:44:19\ncategories: 韦编三绝\n---\n红尘往事莫笑痴人看不穿  \n百年间五行山下情仇如烟  \n望不断的前尘难用自由换  \n弃了心回忆偏又纠缠\n\n若经历过太多的爱恨嗔癫  \n谁还能潇洒纵横这人世间  \n回首早已沧海桑田物易人迁  \n徒留我在这云巅\n\n回想那年锁子金甲傲气敢齐天  \n呼风唤雨叱咤间风云变  \n流光一舞搅碎星辰日月山河颤  \n怒指苍穹要让诸佛烟消云散\n\n后来多少次落日凝望西边的天  \n迷失了自己也蹉跎了时间  \n谁不肯放过回忆在孤独中执念  \n五百年的沧桑不过是转眼\n\n爱过笑过终究是曲终人散  \n流年飞逝中早已无可逆转  \n无法抗争的命运遗忘了誓言  \n留下谁不甘的心酸\n\n那束住了回忆的不过是一个圈  \n却太轻易的遗忘了从前  \n某一刻回头看清了灵魂的背叛  \n才终于等到了旅途的终点\n\n是谁一次次寂寞凝望晚霞满天  \n杀死了回忆也斩断了羁绊  \n又是谁还孤独等在无尽的黑暗  \n怀念着故人守候在云巅\n\n五百年的沧桑不过是转念\n\n我听歌向来不去研究演唱者的唱功，最看重的必须是歌词，我想，就是因为方文山的歌词，才会有那么多杰迷。\n\n这首《云巅之上》是我在[中国原创音乐基地](http://5sing.kugou.com/yc/2580386.html)发现的，第一次听就被震撼到了，当时\n酷狗音乐里还没有它的歌词，我就立马为它添加了歌词文件。这首歌的歌词十分有意境，我想每一个身怀远大报复的人听到这首歌都会遥想一下自己站在云巅之上的感觉。\n\n十岁不愁、二十不悔、三十而立、四十不惑、五十知天命、六十 耳顺、七十古来稀。现在的我正处于风华正茂的二十几岁，马上步入大学，经常臆想着自己毕业不用多久就能升\n职加薪，当上总经理，出任CEO，赢取白富美，走上人生巅峰。可是，另一方面，我又有一些害怕，就像高考前夜，我很害怕，害怕的不是自己发挥失常，不是自己考不上理想\n的学校，害怕的是未知的未来。无论是高考还是大学毕业，都为我打开一扇通往未知的大门，门后究竟是什么，我完全不知道，有时我会想得很美，有时又想得很糟。很多次，我\n会想象，多年后的自己面对夕阳会在想什么呢?还会不会想起当年某一天自己曾许下的豪言壮语?身边又是否会有一个人陪伴呢？\n\n人生几何，只有走过后才有资格笑看人生，走出去吧，去看看这个世界，毕竟，只有看了这个世界，才会有世界观。\n","slug":"yundianzhishang","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pp1007w9vnzm43wazr0","content":"<p>红尘往事莫笑痴人看不穿<br>百年间五行山下情仇如烟<br>望不断的前尘难用自由换<br>弃了心回忆偏又纠缠</p>\n<p>若经历过太多的爱恨嗔癫<br>谁还能潇洒纵横这人世间<br>回首早已沧海桑田物易人迁<br>徒留我在这云巅</p>\n<p>回想那年锁子金甲傲气敢齐天<br>呼风唤雨叱咤间风云变<br>流光一舞搅碎星辰日月山河颤<br>怒指苍穹要让诸佛烟消云散</p>\n<p>后来多少次落日凝望西边的天<br>迷失了自己也蹉跎了时间<br>谁不肯放过回忆在孤独中执念<br>五百年的沧桑不过是转眼</p>\n<p>爱过笑过终究是曲终人散<br>流年飞逝中早已无可逆转<br>无法抗争的命运遗忘了誓言<br>留下谁不甘的心酸</p>\n<p>那束住了回忆的不过是一个圈<br>却太轻易的遗忘了从前<br>某一刻回头看清了灵魂的背叛<br>才终于等到了旅途的终点</p>\n<p>是谁一次次寂寞凝望晚霞满天<br>杀死了回忆也斩断了羁绊<br>又是谁还孤独等在无尽的黑暗<br>怀念着故人守候在云巅</p>\n<p>五百年的沧桑不过是转念</p>\n<p>我听歌向来不去研究演唱者的唱功，最看重的必须是歌词，我想，就是因为方文山的歌词，才会有那么多杰迷。</p>\n<p>这首《云巅之上》是我在<a href=\"http://5sing.kugou.com/yc/2580386.html\" target=\"_blank\" rel=\"external\">中国原创音乐基地</a>发现的，第一次听就被震撼到了，当时<br>酷狗音乐里还没有它的歌词，我就立马为它添加了歌词文件。这首歌的歌词十分有意境，我想每一个身怀远大报复的人听到这首歌都会遥想一下自己站在云巅之上的感觉。</p>\n<p>十岁不愁、二十不悔、三十而立、四十不惑、五十知天命、六十 耳顺、七十古来稀。现在的我正处于风华正茂的二十几岁，马上步入大学，经常臆想着自己毕业不用多久就能升<br>职加薪，当上总经理，出任CEO，赢取白富美，走上人生巅峰。可是，另一方面，我又有一些害怕，就像高考前夜，我很害怕，害怕的不是自己发挥失常，不是自己考不上理想<br>的学校，害怕的是未知的未来。无论是高考还是大学毕业，都为我打开一扇通往未知的大门，门后究竟是什么，我完全不知道，有时我会想得很美，有时又想得很糟。很多次，我<br>会想象，多年后的自己面对夕阳会在想什么呢?还会不会想起当年某一天自己曾许下的豪言壮语?身边又是否会有一个人陪伴呢？</p>\n<p>人生几何，只有走过后才有资格笑看人生，走出去吧，去看看这个世界，毕竟，只有看了这个世界，才会有世界观。</p>\n","excerpt":"","more":"<p>红尘往事莫笑痴人看不穿<br>百年间五行山下情仇如烟<br>望不断的前尘难用自由换<br>弃了心回忆偏又纠缠</p>\n<p>若经历过太多的爱恨嗔癫<br>谁还能潇洒纵横这人世间<br>回首早已沧海桑田物易人迁<br>徒留我在这云巅</p>\n<p>回想那年锁子金甲傲气敢齐天<br>呼风唤雨叱咤间风云变<br>流光一舞搅碎星辰日月山河颤<br>怒指苍穹要让诸佛烟消云散</p>\n<p>后来多少次落日凝望西边的天<br>迷失了自己也蹉跎了时间<br>谁不肯放过回忆在孤独中执念<br>五百年的沧桑不过是转眼</p>\n<p>爱过笑过终究是曲终人散<br>流年飞逝中早已无可逆转<br>无法抗争的命运遗忘了誓言<br>留下谁不甘的心酸</p>\n<p>那束住了回忆的不过是一个圈<br>却太轻易的遗忘了从前<br>某一刻回头看清了灵魂的背叛<br>才终于等到了旅途的终点</p>\n<p>是谁一次次寂寞凝望晚霞满天<br>杀死了回忆也斩断了羁绊<br>又是谁还孤独等在无尽的黑暗<br>怀念着故人守候在云巅</p>\n<p>五百年的沧桑不过是转念</p>\n<p>我听歌向来不去研究演唱者的唱功，最看重的必须是歌词，我想，就是因为方文山的歌词，才会有那么多杰迷。</p>\n<p>这首《云巅之上》是我在<a href=\"http://5sing.kugou.com/yc/2580386.html\">中国原创音乐基地</a>发现的，第一次听就被震撼到了，当时<br>酷狗音乐里还没有它的歌词，我就立马为它添加了歌词文件。这首歌的歌词十分有意境，我想每一个身怀远大报复的人听到这首歌都会遥想一下自己站在云巅之上的感觉。</p>\n<p>十岁不愁、二十不悔、三十而立、四十不惑、五十知天命、六十 耳顺、七十古来稀。现在的我正处于风华正茂的二十几岁，马上步入大学，经常臆想着自己毕业不用多久就能升<br>职加薪，当上总经理，出任CEO，赢取白富美，走上人生巅峰。可是，另一方面，我又有一些害怕，就像高考前夜，我很害怕，害怕的不是自己发挥失常，不是自己考不上理想<br>的学校，害怕的是未知的未来。无论是高考还是大学毕业，都为我打开一扇通往未知的大门，门后究竟是什么，我完全不知道，有时我会想得很美，有时又想得很糟。很多次，我<br>会想象，多年后的自己面对夕阳会在想什么呢?还会不会想起当年某一天自己曾许下的豪言壮语?身边又是否会有一个人陪伴呢？</p>\n<p>人生几何，只有走过后才有资格笑看人生，走出去吧，去看看这个世界，毕竟，只有看了这个世界，才会有世界观。</p>\n"},{"title":"《西游日记》——又一段西游路","date":"2014-08-24T15:08:42.000Z","_content":"梦不醒之人，看不穿之人，惊不觉之人，痴不迷之人，疯不狂之人，尽数来此，，再叙西游，岂不快哉！\n\n—— 今何在\n\n继[《悟空传》](http://haofly.net/wukongzhuan/)这一经典之作十二年之后，今何在又带来一部巨作。虽然都以西游为题材且作者都运用\n了天马行空的想象力，但两部作品在表现形式上完全不一样。一部时空乱入，一部则按日记写成。无论是视觉还是风格都能给我们不同的感觉。十几年前《悟空传》刚出世的时候\n，我还在上小学，真正阅读它是在去年，短短一年后，我就看了这部《西游日记》，肯定不会有那些青春时候看《悟空传》，人到中年时看《西游日记》的人更有感触。人这一生\n也一样，正如《后会无期》中说道：你连世界都没观过，哪儿来的世界观。二十岁刚出头，经历太浅，不过还好，我对这个世界，对我的未来暂时充满了希望。今何在历经十年其\n作品的灵魂依然不变，曾经的狂妄，现在的哲思都是随人生经历的变化而变化的。\n\n我知道时间总会让人改变。就像几年前，我父母说现在最大的心愿就是给我买房子的时候，我当即拒绝，口出狂言：在结婚前我一定会自己买一套房子的。现在看来，也只能呵呵\n了，如果真那样或许我结婚的时候已经老了。前几天父亲又提起此事，我无言，不知道怎么回答他们，既没有接受，也没有拒绝。虽然还未在社会上走，但这几年我的锐气也是衰\n减了不少。不过时间在走，世界在变，人心也在变，很庆幸，这一路走来，我追逐梦想的心没变，棱角再怎么被打磨，也不可能变得和世俗一样。有些事情，我知道不能实现，早\n就有人告诉过我答案，但我就是想自己走一遍，用我一生去证明那个答案的对错。\n\n期待今何“西游三部曲”的第三部，很多人不希望再等十年，但作为正处青春期的我，希望真能等上十年，等我在尘世间走过一遭再回过头来看这几部作品，我想就会更加感同身\n受。\n\n语录：\n\n**为什么答案前人早已告诉了我，我却仍然不明白？**\n\n**我要自己去重新证明这一切**\n\n**如果你不能再拥有，唯一能做的，就是不再忘记**\n\n**究竟是谁铁石心肠，又是谁芳心暗动？是谁暗自猜度了谁的心，是谁不知你是风儿我是沙，本来无一物，何处惹尘埃。是谁不知你是佛来我是牛粪，佛心见佛粪心见粪，花心见色狼，而一颗纯洁无暇的心，看见的全是浮云**\n\n**成功秘诀就是：当一条路充满艰险，所有的人都不愿前行时，你却敢走。因为一亿亿人中，也许只有一万人敢走这条路，也许只有一百人活着到了终点，也许只有十个人还能活着再走回来，也许只有一个人侥幸能成功带回点什么。所以，这根本不是什么成功的路，只是冒险者的路而已。人们只看到了一人的成功，却没有看见其它九千九百九十九人的失败。**\n\n**我是心诚，却不一定要为你。**\n\n**你只是有一天突然觉得，必须去做这件事，你就去做了。我也一样。我们都只相信自己的心。**\n\n**世上哪有终点，什么时候你走不动了，倒下了，那才是终点。**\n\n**我虽不知结局，但我却从不害怕它的来临。**\n\n\n封面图片来自Pixebay\n","source":"_posts/xiyouriji.md","raw":"---\ntitle: \"《西游日记》——又一段西游路\"\ndate: 2014-08-24 23:08:42\ncategories: 韦编三绝\n---\n梦不醒之人，看不穿之人，惊不觉之人，痴不迷之人，疯不狂之人，尽数来此，，再叙西游，岂不快哉！\n\n—— 今何在\n\n继[《悟空传》](http://haofly.net/wukongzhuan/)这一经典之作十二年之后，今何在又带来一部巨作。虽然都以西游为题材且作者都运用\n了天马行空的想象力，但两部作品在表现形式上完全不一样。一部时空乱入，一部则按日记写成。无论是视觉还是风格都能给我们不同的感觉。十几年前《悟空传》刚出世的时候\n，我还在上小学，真正阅读它是在去年，短短一年后，我就看了这部《西游日记》，肯定不会有那些青春时候看《悟空传》，人到中年时看《西游日记》的人更有感触。人这一生\n也一样，正如《后会无期》中说道：你连世界都没观过，哪儿来的世界观。二十岁刚出头，经历太浅，不过还好，我对这个世界，对我的未来暂时充满了希望。今何在历经十年其\n作品的灵魂依然不变，曾经的狂妄，现在的哲思都是随人生经历的变化而变化的。\n\n我知道时间总会让人改变。就像几年前，我父母说现在最大的心愿就是给我买房子的时候，我当即拒绝，口出狂言：在结婚前我一定会自己买一套房子的。现在看来，也只能呵呵\n了，如果真那样或许我结婚的时候已经老了。前几天父亲又提起此事，我无言，不知道怎么回答他们，既没有接受，也没有拒绝。虽然还未在社会上走，但这几年我的锐气也是衰\n减了不少。不过时间在走，世界在变，人心也在变，很庆幸，这一路走来，我追逐梦想的心没变，棱角再怎么被打磨，也不可能变得和世俗一样。有些事情，我知道不能实现，早\n就有人告诉过我答案，但我就是想自己走一遍，用我一生去证明那个答案的对错。\n\n期待今何“西游三部曲”的第三部，很多人不希望再等十年，但作为正处青春期的我，希望真能等上十年，等我在尘世间走过一遭再回过头来看这几部作品，我想就会更加感同身\n受。\n\n语录：\n\n**为什么答案前人早已告诉了我，我却仍然不明白？**\n\n**我要自己去重新证明这一切**\n\n**如果你不能再拥有，唯一能做的，就是不再忘记**\n\n**究竟是谁铁石心肠，又是谁芳心暗动？是谁暗自猜度了谁的心，是谁不知你是风儿我是沙，本来无一物，何处惹尘埃。是谁不知你是佛来我是牛粪，佛心见佛粪心见粪，花心见色狼，而一颗纯洁无暇的心，看见的全是浮云**\n\n**成功秘诀就是：当一条路充满艰险，所有的人都不愿前行时，你却敢走。因为一亿亿人中，也许只有一万人敢走这条路，也许只有一百人活着到了终点，也许只有十个人还能活着再走回来，也许只有一个人侥幸能成功带回点什么。所以，这根本不是什么成功的路，只是冒险者的路而已。人们只看到了一人的成功，却没有看见其它九千九百九十九人的失败。**\n\n**我是心诚，却不一定要为你。**\n\n**你只是有一天突然觉得，必须去做这件事，你就去做了。我也一样。我们都只相信自己的心。**\n\n**世上哪有终点，什么时候你走不动了，倒下了，那才是终点。**\n\n**我虽不知结局，但我却从不害怕它的来临。**\n\n\n封面图片来自Pixebay\n","slug":"xiyouriji","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pp3007y9vnzcmzkq064","content":"<p>梦不醒之人，看不穿之人，惊不觉之人，痴不迷之人，疯不狂之人，尽数来此，，再叙西游，岂不快哉！</p>\n<p>—— 今何在</p>\n<p>继<a href=\"http://haofly.net/wukongzhuan/\">《悟空传》</a>这一经典之作十二年之后，今何在又带来一部巨作。虽然都以西游为题材且作者都运用<br>了天马行空的想象力，但两部作品在表现形式上完全不一样。一部时空乱入，一部则按日记写成。无论是视觉还是风格都能给我们不同的感觉。十几年前《悟空传》刚出世的时候<br>，我还在上小学，真正阅读它是在去年，短短一年后，我就看了这部《西游日记》，肯定不会有那些青春时候看《悟空传》，人到中年时看《西游日记》的人更有感触。人这一生<br>也一样，正如《后会无期》中说道：你连世界都没观过，哪儿来的世界观。二十岁刚出头，经历太浅，不过还好，我对这个世界，对我的未来暂时充满了希望。今何在历经十年其<br>作品的灵魂依然不变，曾经的狂妄，现在的哲思都是随人生经历的变化而变化的。</p>\n<p>我知道时间总会让人改变。就像几年前，我父母说现在最大的心愿就是给我买房子的时候，我当即拒绝，口出狂言：在结婚前我一定会自己买一套房子的。现在看来，也只能呵呵<br>了，如果真那样或许我结婚的时候已经老了。前几天父亲又提起此事，我无言，不知道怎么回答他们，既没有接受，也没有拒绝。虽然还未在社会上走，但这几年我的锐气也是衰<br>减了不少。不过时间在走，世界在变，人心也在变，很庆幸，这一路走来，我追逐梦想的心没变，棱角再怎么被打磨，也不可能变得和世俗一样。有些事情，我知道不能实现，早<br>就有人告诉过我答案，但我就是想自己走一遍，用我一生去证明那个答案的对错。</p>\n<p>期待今何“西游三部曲”的第三部，很多人不希望再等十年，但作为正处青春期的我，希望真能等上十年，等我在尘世间走过一遭再回过头来看这几部作品，我想就会更加感同身<br>受。</p>\n<p>语录：</p>\n<p><strong>为什么答案前人早已告诉了我，我却仍然不明白？</strong></p>\n<p><strong>我要自己去重新证明这一切</strong></p>\n<p><strong>如果你不能再拥有，唯一能做的，就是不再忘记</strong></p>\n<p><strong>究竟是谁铁石心肠，又是谁芳心暗动？是谁暗自猜度了谁的心，是谁不知你是风儿我是沙，本来无一物，何处惹尘埃。是谁不知你是佛来我是牛粪，佛心见佛粪心见粪，花心见色狼，而一颗纯洁无暇的心，看见的全是浮云</strong></p>\n<p><strong>成功秘诀就是：当一条路充满艰险，所有的人都不愿前行时，你却敢走。因为一亿亿人中，也许只有一万人敢走这条路，也许只有一百人活着到了终点，也许只有十个人还能活着再走回来，也许只有一个人侥幸能成功带回点什么。所以，这根本不是什么成功的路，只是冒险者的路而已。人们只看到了一人的成功，却没有看见其它九千九百九十九人的失败。</strong></p>\n<p><strong>我是心诚，却不一定要为你。</strong></p>\n<p><strong>你只是有一天突然觉得，必须去做这件事，你就去做了。我也一样。我们都只相信自己的心。</strong></p>\n<p><strong>世上哪有终点，什么时候你走不动了，倒下了，那才是终点。</strong></p>\n<p><strong>我虽不知结局，但我却从不害怕它的来临。</strong></p>\n<p>封面图片来自Pixebay</p>\n","excerpt":"","more":"<p>梦不醒之人，看不穿之人，惊不觉之人，痴不迷之人，疯不狂之人，尽数来此，，再叙西游，岂不快哉！</p>\n<p>—— 今何在</p>\n<p>继<a href=\"http://haofly.net/wukongzhuan/\">《悟空传》</a>这一经典之作十二年之后，今何在又带来一部巨作。虽然都以西游为题材且作者都运用<br>了天马行空的想象力，但两部作品在表现形式上完全不一样。一部时空乱入，一部则按日记写成。无论是视觉还是风格都能给我们不同的感觉。十几年前《悟空传》刚出世的时候<br>，我还在上小学，真正阅读它是在去年，短短一年后，我就看了这部《西游日记》，肯定不会有那些青春时候看《悟空传》，人到中年时看《西游日记》的人更有感触。人这一生<br>也一样，正如《后会无期》中说道：你连世界都没观过，哪儿来的世界观。二十岁刚出头，经历太浅，不过还好，我对这个世界，对我的未来暂时充满了希望。今何在历经十年其<br>作品的灵魂依然不变，曾经的狂妄，现在的哲思都是随人生经历的变化而变化的。</p>\n<p>我知道时间总会让人改变。就像几年前，我父母说现在最大的心愿就是给我买房子的时候，我当即拒绝，口出狂言：在结婚前我一定会自己买一套房子的。现在看来，也只能呵呵<br>了，如果真那样或许我结婚的时候已经老了。前几天父亲又提起此事，我无言，不知道怎么回答他们，既没有接受，也没有拒绝。虽然还未在社会上走，但这几年我的锐气也是衰<br>减了不少。不过时间在走，世界在变，人心也在变，很庆幸，这一路走来，我追逐梦想的心没变，棱角再怎么被打磨，也不可能变得和世俗一样。有些事情，我知道不能实现，早<br>就有人告诉过我答案，但我就是想自己走一遍，用我一生去证明那个答案的对错。</p>\n<p>期待今何“西游三部曲”的第三部，很多人不希望再等十年，但作为正处青春期的我，希望真能等上十年，等我在尘世间走过一遭再回过头来看这几部作品，我想就会更加感同身<br>受。</p>\n<p>语录：</p>\n<p><strong>为什么答案前人早已告诉了我，我却仍然不明白？</strong></p>\n<p><strong>我要自己去重新证明这一切</strong></p>\n<p><strong>如果你不能再拥有，唯一能做的，就是不再忘记</strong></p>\n<p><strong>究竟是谁铁石心肠，又是谁芳心暗动？是谁暗自猜度了谁的心，是谁不知你是风儿我是沙，本来无一物，何处惹尘埃。是谁不知你是佛来我是牛粪，佛心见佛粪心见粪，花心见色狼，而一颗纯洁无暇的心，看见的全是浮云</strong></p>\n<p><strong>成功秘诀就是：当一条路充满艰险，所有的人都不愿前行时，你却敢走。因为一亿亿人中，也许只有一万人敢走这条路，也许只有一百人活着到了终点，也许只有十个人还能活着再走回来，也许只有一个人侥幸能成功带回点什么。所以，这根本不是什么成功的路，只是冒险者的路而已。人们只看到了一人的成功，却没有看见其它九千九百九十九人的失败。</strong></p>\n<p><strong>我是心诚，却不一定要为你。</strong></p>\n<p><strong>你只是有一天突然觉得，必须去做这件事，你就去做了。我也一样。我们都只相信自己的心。</strong></p>\n<p><strong>世上哪有终点，什么时候你走不动了，倒下了，那才是终点。</strong></p>\n<p><strong>我虽不知结局，但我却从不害怕它的来临。</strong></p>\n<p>封面图片来自Pixebay</p>\n"},{"title":"[转]从0到100——知乎架构变迁史","date":"2015-04-04T00:38:44.000Z","_content":"转自：<http://www.admin10000.com/document/5744.html>\n\n许很多人还不知道，知乎在规模上是仅次于百度贴吧和豆瓣的中文互联网最大的UGC(用户生成内容)社区。知乎创业三年来，从0开始，到现在已经有了100多台服务器。\n目前知乎的注册用户超过了1100万，每个月有超过8000万人使用；网站每个月的PV超过2.2亿，差不多每秒钟的动态请求超过2500。\n\n在ArchSummit北京2014大会上，知乎联合创始人兼 CTO\n李申申带来了知乎创业三年多来的首次全面技术分享（幻灯片下载）。本文系根据演讲内容整理而成。\n\n## 初期架构选型\n\n在2010年10月真正开始动手做知乎这个产品时，包含李申申在内，最初只有两位工程师；到2010年12月份上线时，工程师是四个。\n\n知乎的主力开发语言是**Python**。因为Python简单且强大，能够快速上手，开发效率高，而且社区活跃，团队成员也比较喜欢。\n\n知乎使用的是**Tornado框架**。因为它支持异步，很适合做实时Comet应用，而且简单轻量，学习成本低，再就是有FriendFeed\n的成熟案例，Facebook 的社区支持。知乎的产品有个特性，就是希望跟浏览器端建立一个长连接，便于实时推送Feed和通知，所以Tornado比较合适。\n\n最初整个团队的精力全部放在产品功能的开发上，而其他方面，基本上能节约时间、能省的都用最简单的方法来解决，当然这在后期也带来了一些问题。\n\n最初的想法是用云主机，节省成本。知乎的第一台服务器是512MB内存的Linode主机。但是网站上线后，内测受欢迎程度超出预期，很多用户反馈网站很慢。跨国网络\n延迟比想象的要大，特别是国内的网络不均衡，全国各地用户访问的情况都不太一样。这个问题，再加上当时要做域名备案，知乎又回到了**自己买机器**找机房的老路上。\n\n买了机器、找了机房之后又遇到了新的问题，服务经常宕掉。当时服务商的机器内存总是出问题，动不动就重启。终于有一次机器宕掉起不来了，这时知乎就做了Web和数据库\n的高可用。创业就是这样一个情况，永远不知道明早醒来的时候会面临什么样的问题。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_0.jpg)  \n这是当时那个阶段的架构图，Web和数据库都做了主从。当时的图片服务托管在**又拍云**上。除了主从，为了性能更好还做了读写分离。为解决同步问题，又添加了一个\n服务器来跑离线脚本，避免对线上服务造成响应延迟。另外，为改进内网的吞吐量延迟，还更换了设备，使整个内网的吞吐量翻了20倍。\n\n在2011年上半年时，知乎对**Redis**已经很依赖。除了最开始的队列、搜索在用，后来像Cache也开始使用，单机存储成为瓶颈，所以引入了**分片**，\n同时做了**一致性**。\n\n知乎团队是一个很**相信工具**的团队，相信工具可以提升效率。工具其实是一个过程，工具并没有所谓的最好的工具，只有最适合的工具。而且它是在整个过程中，随着整\n个状态的变化、环境的变化在不断发生变化的。知乎自己开发或使用过的工具包括Profiling（函数级追踪请求，分析调优）、Werkzeug（方便调试的工具）、\nPuppet（配置管理）和Shipit（一键上线或回滚）等。\n\n## 日志系统\n\n知乎最初是**邀请制**的，2011年下半年，知乎上线了申请注册，没有邀请码的用户也可以通过填写一些资料申请注册知乎。用户量又上了一个台阶，这时就有了一些发\n广告的账户，需要扫除广告。日志系统的需求提上日程。\n\n这个日志系统必须支持分布式收集、集中存储、实时、可订阅和简单等特性。当时调研了一些开源系统，比如Scribe总体不错，但是不支持订阅。Kafka是Scala\n开发的，但是团队在Scala方面积累较少，Flume也是类似，而且比较重。所以开发团队选择了自己开发一个日志系统——Kids（Kids Is Data\nStream）。顾名思义，Kids是用来汇集各种数据流的。\n\nKids参考了Scribe的思路。Kdis在每台服务器上可以配置成Agent或Server。Agent直接接受来自应用的消息，把消息汇集之后，可以打给下一个\nAgent或者直接打给中心Server。订阅日志时，可以从Server上获取，也可以从中心节点的一些Agent上获取。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_1.jpg)  \n具体细节如下图所示：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_2.jpg)  \n知乎还基于Kids做了一个Web小工具（Kids Explorer），支持实时看线上日志，现在已经成为调试线上问题最主要的工具。\n\nKids已经开源，放到了Github上。\n\n## 事件驱动的架构\n\n知乎这个产品有一个特点，最早在添加一个答案后，后续的操作其实只有更新通知、更新动态。但是随着整个功能的增加，又多出了一些更新索引、更新计数、内容审查等操作，\n后续操作五花八门。如果按照传统方式，维护逻辑会越来越庞大，维护性也会非常差。这种场景很适合事件驱动方式，所以开发团队对整个架构做了调整，做了事件驱动的架构。\n\n这时首先需要的是一个消息队列，它应该可以获取到各种各样的事件，而且对一致性有很高的要求。针对这个需求，知乎开发了一个叫Sink的小工具。它拿到消息后，先做本\n地的保存、持久化，然后再把消息分发出去。如果那台机器挂掉了，重启时可以完整恢复，确保消息不会丢失。然后它通过Miller开发框架，把消息放到任务队列。Sin\nk更像是串行消息订阅服务，但任务需要并行化处理， Beanstalkd就派上了用场，由其对任务进行全周期管理。架构如下图所示：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_3.jpg)  \n举例而言，如果现在有用户回答了问题，首先系统会把问题写到MySQL里面，把消息塞到Sink，然后把问题返回给用户。Sink通过Miller把任务发给\nBeanstalkd，Worker自己可以找到任务并处理。\n\n最开始上线时，每秒钟有10个消息，然后有70个任务产生。现在每秒钟有100个事件，有1500个任务产生，就是通过现在的事件驱动架构支撑的。\n\n## 页面渲染优化\n\n知乎在2013年时每天有上百万的PV，页面渲染其实是计算密集型的，另外因为要获取数据，所以也有IO密集型的特点。这时开发团队就对页面进行了组件化，还升级了数\n据获取机制。知乎按照整个页面组件树的结构，自上而下分层地获取数据，当上层的数据已经获取了，下层的数据就不需要再下去了，有几层基本上就有几次数据获取。\n\n结合这个思路，知乎自己做了一套模板渲染开发框架——ZhihuNode。\n\n经历了一系列改进之后，页面的性能大幅度提升。问题页面从500ms 减少到150ms，Feed页面从1s减少到600ms。\n\n## 面向服务的架构（SOA）\n\n随着知乎的功能越来越庞杂，整个系统也越来越大。知乎是怎么做的服务化呢？\n\n首先需要一个最基本的RPC框架，RPC框架也经历了好几版演进。\n\n第一版是Wish，它是一个严格定义序列化的模型。传输层用到了STP，这是自己写的很简单的传输协议，跑在TCP上。一开始用的还不错，因为一开始只写了一两个服务\n。但是随着服务增多，一些问题开始出现，首先是ProtocolBuffer会 生成一些描述代码，很冗长，放到整个库里显得很丑陋。另外严格的定义使其不便使用。这\n时有位工程师开发了新的RPC框架——Snow。它使用简单的JSON做数据序列化。但是松散的数据定义面对的问题是，比如说服务要去升级，要改写数据结构，很难知道\n有哪几个服务在使用，也很难通知它们，往往错误就发生了。于是又出了第三个RPC框架，写RPC框架的工程师，希望结合前面两个框架的特点，首先保持Snow简单，其\n次需要相对严格的序列化协议。这一版本引入了 Apache\nAvro。同时加入了特别的机制，在传输层和序列化协议这一层都做成了可插拔的方式，既可以用JSON，也可以用Avro，传输层可以用STP，也可以用二进制协议。\n\n再就是搭了一个服务注册发现，只需要简单的定义服务的名字就可以找到服务在哪台机器上。同时，知乎也有相应的调优的工具，基于Zipkin开发了自己的\nTracing系统。\n\n按照调用关系，知乎的服务分成了3层：聚合层、内容层和基础层。按属性又可以分成3类：数据服务、逻辑服务和通道服务。数据服务主要是一些要做特殊数据类型的存储，比\n如图片服务。逻辑服务更多的是CPU密集、计算密集的操作，比如答案格式的定义、解析等。通道服务的特点是没有存储，更多是做一个转发，比如说Sink。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_4.jpg)  \n这是引入服务化之后整体的架构。  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_5.jpg)  \n","source":"_posts/zhihu.md","raw":"---\ntitle: \"[转]从0到100——知乎架构变迁史\"\ndate: 2015-04-04 08:38:44\ncategories: 编程之路\n---\n转自：<http://www.admin10000.com/document/5744.html>\n\n许很多人还不知道，知乎在规模上是仅次于百度贴吧和豆瓣的中文互联网最大的UGC(用户生成内容)社区。知乎创业三年来，从0开始，到现在已经有了100多台服务器。\n目前知乎的注册用户超过了1100万，每个月有超过8000万人使用；网站每个月的PV超过2.2亿，差不多每秒钟的动态请求超过2500。\n\n在ArchSummit北京2014大会上，知乎联合创始人兼 CTO\n李申申带来了知乎创业三年多来的首次全面技术分享（幻灯片下载）。本文系根据演讲内容整理而成。\n\n## 初期架构选型\n\n在2010年10月真正开始动手做知乎这个产品时，包含李申申在内，最初只有两位工程师；到2010年12月份上线时，工程师是四个。\n\n知乎的主力开发语言是**Python**。因为Python简单且强大，能够快速上手，开发效率高，而且社区活跃，团队成员也比较喜欢。\n\n知乎使用的是**Tornado框架**。因为它支持异步，很适合做实时Comet应用，而且简单轻量，学习成本低，再就是有FriendFeed\n的成熟案例，Facebook 的社区支持。知乎的产品有个特性，就是希望跟浏览器端建立一个长连接，便于实时推送Feed和通知，所以Tornado比较合适。\n\n最初整个团队的精力全部放在产品功能的开发上，而其他方面，基本上能节约时间、能省的都用最简单的方法来解决，当然这在后期也带来了一些问题。\n\n最初的想法是用云主机，节省成本。知乎的第一台服务器是512MB内存的Linode主机。但是网站上线后，内测受欢迎程度超出预期，很多用户反馈网站很慢。跨国网络\n延迟比想象的要大，特别是国内的网络不均衡，全国各地用户访问的情况都不太一样。这个问题，再加上当时要做域名备案，知乎又回到了**自己买机器**找机房的老路上。\n\n买了机器、找了机房之后又遇到了新的问题，服务经常宕掉。当时服务商的机器内存总是出问题，动不动就重启。终于有一次机器宕掉起不来了，这时知乎就做了Web和数据库\n的高可用。创业就是这样一个情况，永远不知道明早醒来的时候会面临什么样的问题。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_0.jpg)  \n这是当时那个阶段的架构图，Web和数据库都做了主从。当时的图片服务托管在**又拍云**上。除了主从，为了性能更好还做了读写分离。为解决同步问题，又添加了一个\n服务器来跑离线脚本，避免对线上服务造成响应延迟。另外，为改进内网的吞吐量延迟，还更换了设备，使整个内网的吞吐量翻了20倍。\n\n在2011年上半年时，知乎对**Redis**已经很依赖。除了最开始的队列、搜索在用，后来像Cache也开始使用，单机存储成为瓶颈，所以引入了**分片**，\n同时做了**一致性**。\n\n知乎团队是一个很**相信工具**的团队，相信工具可以提升效率。工具其实是一个过程，工具并没有所谓的最好的工具，只有最适合的工具。而且它是在整个过程中，随着整\n个状态的变化、环境的变化在不断发生变化的。知乎自己开发或使用过的工具包括Profiling（函数级追踪请求，分析调优）、Werkzeug（方便调试的工具）、\nPuppet（配置管理）和Shipit（一键上线或回滚）等。\n\n## 日志系统\n\n知乎最初是**邀请制**的，2011年下半年，知乎上线了申请注册，没有邀请码的用户也可以通过填写一些资料申请注册知乎。用户量又上了一个台阶，这时就有了一些发\n广告的账户，需要扫除广告。日志系统的需求提上日程。\n\n这个日志系统必须支持分布式收集、集中存储、实时、可订阅和简单等特性。当时调研了一些开源系统，比如Scribe总体不错，但是不支持订阅。Kafka是Scala\n开发的，但是团队在Scala方面积累较少，Flume也是类似，而且比较重。所以开发团队选择了自己开发一个日志系统——Kids（Kids Is Data\nStream）。顾名思义，Kids是用来汇集各种数据流的。\n\nKids参考了Scribe的思路。Kdis在每台服务器上可以配置成Agent或Server。Agent直接接受来自应用的消息，把消息汇集之后，可以打给下一个\nAgent或者直接打给中心Server。订阅日志时，可以从Server上获取，也可以从中心节点的一些Agent上获取。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_1.jpg)  \n具体细节如下图所示：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_2.jpg)  \n知乎还基于Kids做了一个Web小工具（Kids Explorer），支持实时看线上日志，现在已经成为调试线上问题最主要的工具。\n\nKids已经开源，放到了Github上。\n\n## 事件驱动的架构\n\n知乎这个产品有一个特点，最早在添加一个答案后，后续的操作其实只有更新通知、更新动态。但是随着整个功能的增加，又多出了一些更新索引、更新计数、内容审查等操作，\n后续操作五花八门。如果按照传统方式，维护逻辑会越来越庞大，维护性也会非常差。这种场景很适合事件驱动方式，所以开发团队对整个架构做了调整，做了事件驱动的架构。\n\n这时首先需要的是一个消息队列，它应该可以获取到各种各样的事件，而且对一致性有很高的要求。针对这个需求，知乎开发了一个叫Sink的小工具。它拿到消息后，先做本\n地的保存、持久化，然后再把消息分发出去。如果那台机器挂掉了，重启时可以完整恢复，确保消息不会丢失。然后它通过Miller开发框架，把消息放到任务队列。Sin\nk更像是串行消息订阅服务，但任务需要并行化处理， Beanstalkd就派上了用场，由其对任务进行全周期管理。架构如下图所示：  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_3.jpg)  \n举例而言，如果现在有用户回答了问题，首先系统会把问题写到MySQL里面，把消息塞到Sink，然后把问题返回给用户。Sink通过Miller把任务发给\nBeanstalkd，Worker自己可以找到任务并处理。\n\n最开始上线时，每秒钟有10个消息，然后有70个任务产生。现在每秒钟有100个事件，有1500个任务产生，就是通过现在的事件驱动架构支撑的。\n\n## 页面渲染优化\n\n知乎在2013年时每天有上百万的PV，页面渲染其实是计算密集型的，另外因为要获取数据，所以也有IO密集型的特点。这时开发团队就对页面进行了组件化，还升级了数\n据获取机制。知乎按照整个页面组件树的结构，自上而下分层地获取数据，当上层的数据已经获取了，下层的数据就不需要再下去了，有几层基本上就有几次数据获取。\n\n结合这个思路，知乎自己做了一套模板渲染开发框架——ZhihuNode。\n\n经历了一系列改进之后，页面的性能大幅度提升。问题页面从500ms 减少到150ms，Feed页面从1s减少到600ms。\n\n## 面向服务的架构（SOA）\n\n随着知乎的功能越来越庞杂，整个系统也越来越大。知乎是怎么做的服务化呢？\n\n首先需要一个最基本的RPC框架，RPC框架也经历了好几版演进。\n\n第一版是Wish，它是一个严格定义序列化的模型。传输层用到了STP，这是自己写的很简单的传输协议，跑在TCP上。一开始用的还不错，因为一开始只写了一两个服务\n。但是随着服务增多，一些问题开始出现，首先是ProtocolBuffer会 生成一些描述代码，很冗长，放到整个库里显得很丑陋。另外严格的定义使其不便使用。这\n时有位工程师开发了新的RPC框架——Snow。它使用简单的JSON做数据序列化。但是松散的数据定义面对的问题是，比如说服务要去升级，要改写数据结构，很难知道\n有哪几个服务在使用，也很难通知它们，往往错误就发生了。于是又出了第三个RPC框架，写RPC框架的工程师，希望结合前面两个框架的特点，首先保持Snow简单，其\n次需要相对严格的序列化协议。这一版本引入了 Apache\nAvro。同时加入了特别的机制，在传输层和序列化协议这一层都做成了可插拔的方式，既可以用JSON，也可以用Avro，传输层可以用STP，也可以用二进制协议。\n\n再就是搭了一个服务注册发现，只需要简单的定义服务的名字就可以找到服务在哪台机器上。同时，知乎也有相应的调优的工具，基于Zipkin开发了自己的\nTracing系统。\n\n按照调用关系，知乎的服务分成了3层：聚合层、内容层和基础层。按属性又可以分成3类：数据服务、逻辑服务和通道服务。数据服务主要是一些要做特殊数据类型的存储，比\n如图片服务。逻辑服务更多的是CPU密集、计算密集的操作，比如答案格式的定义、解析等。通道服务的特点是没有存储，更多是做一个转发，比如说Sink。  \n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_4.jpg)  \n这是引入服务化之后整体的架构。  \n\n![](http://7xnc86.com1.z0.glb.clouddn.com/zhihu_5.jpg)  \n","slug":"zhihu","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2pp700809vnz30nk7zux","content":"<p>转自：<a href=\"http://www.admin10000.com/document/5744.html\" target=\"_blank\" rel=\"external\">http://www.admin10000.com/document/5744.html</a></p>\n<p>许很多人还不知道，知乎在规模上是仅次于百度贴吧和豆瓣的中文互联网最大的UGC(用户生成内容)社区。知乎创业三年来，从0开始，到现在已经有了100多台服务器。<br>目前知乎的注册用户超过了1100万，每个月有超过8000万人使用；网站每个月的PV超过2.2亿，差不多每秒钟的动态请求超过2500。</p>\n<p>在ArchSummit北京2014大会上，知乎联合创始人兼 CTO<br>李申申带来了知乎创业三年多来的首次全面技术分享（幻灯片下载）。本文系根据演讲内容整理而成。</p>\n<h2 id=\"初期架构选型\"><a href=\"#初期架构选型\" class=\"headerlink\" title=\"初期架构选型\"></a>初期架构选型</h2><p>在2010年10月真正开始动手做知乎这个产品时，包含李申申在内，最初只有两位工程师；到2010年12月份上线时，工程师是四个。</p>\n<p>知乎的主力开发语言是<strong>Python</strong>。因为Python简单且强大，能够快速上手，开发效率高，而且社区活跃，团队成员也比较喜欢。</p>\n<p>知乎使用的是<strong>Tornado框架</strong>。因为它支持异步，很适合做实时Comet应用，而且简单轻量，学习成本低，再就是有FriendFeed<br>的成熟案例，Facebook 的社区支持。知乎的产品有个特性，就是希望跟浏览器端建立一个长连接，便于实时推送Feed和通知，所以Tornado比较合适。</p>\n<p>最初整个团队的精力全部放在产品功能的开发上，而其他方面，基本上能节约时间、能省的都用最简单的方法来解决，当然这在后期也带来了一些问题。</p>\n<p>最初的想法是用云主机，节省成本。知乎的第一台服务器是512MB内存的Linode主机。但是网站上线后，内测受欢迎程度超出预期，很多用户反馈网站很慢。跨国网络<br>延迟比想象的要大，特别是国内的网络不均衡，全国各地用户访问的情况都不太一样。这个问题，再加上当时要做域名备案，知乎又回到了<strong>自己买机器</strong>找机房的老路上。</p>\n<p>买了机器、找了机房之后又遇到了新的问题，服务经常宕掉。当时服务商的机器内存总是出问题，动不动就重启。终于有一次机器宕掉起不来了，这时知乎就做了Web和数据库<br>的高可用。创业就是这样一个情况，永远不知道明早醒来的时候会面临什么样的问题。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_0.jpg\" alt=\"\"><br>这是当时那个阶段的架构图，Web和数据库都做了主从。当时的图片服务托管在<strong>又拍云</strong>上。除了主从，为了性能更好还做了读写分离。为解决同步问题，又添加了一个<br>服务器来跑离线脚本，避免对线上服务造成响应延迟。另外，为改进内网的吞吐量延迟，还更换了设备，使整个内网的吞吐量翻了20倍。</p>\n<p>在2011年上半年时，知乎对<strong>Redis</strong>已经很依赖。除了最开始的队列、搜索在用，后来像Cache也开始使用，单机存储成为瓶颈，所以引入了<strong>分片</strong>，<br>同时做了<strong>一致性</strong>。</p>\n<p>知乎团队是一个很<strong>相信工具</strong>的团队，相信工具可以提升效率。工具其实是一个过程，工具并没有所谓的最好的工具，只有最适合的工具。而且它是在整个过程中，随着整<br>个状态的变化、环境的变化在不断发生变化的。知乎自己开发或使用过的工具包括Profiling（函数级追踪请求，分析调优）、Werkzeug（方便调试的工具）、<br>Puppet（配置管理）和Shipit（一键上线或回滚）等。</p>\n<h2 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h2><p>知乎最初是<strong>邀请制</strong>的，2011年下半年，知乎上线了申请注册，没有邀请码的用户也可以通过填写一些资料申请注册知乎。用户量又上了一个台阶，这时就有了一些发<br>广告的账户，需要扫除广告。日志系统的需求提上日程。</p>\n<p>这个日志系统必须支持分布式收集、集中存储、实时、可订阅和简单等特性。当时调研了一些开源系统，比如Scribe总体不错，但是不支持订阅。Kafka是Scala<br>开发的，但是团队在Scala方面积累较少，Flume也是类似，而且比较重。所以开发团队选择了自己开发一个日志系统——Kids（Kids Is Data<br>Stream）。顾名思义，Kids是用来汇集各种数据流的。</p>\n<p>Kids参考了Scribe的思路。Kdis在每台服务器上可以配置成Agent或Server。Agent直接接受来自应用的消息，把消息汇集之后，可以打给下一个<br>Agent或者直接打给中心Server。订阅日志时，可以从Server上获取，也可以从中心节点的一些Agent上获取。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_1.jpg\" alt=\"\"><br>具体细节如下图所示：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_2.jpg\" alt=\"\"><br>知乎还基于Kids做了一个Web小工具（Kids Explorer），支持实时看线上日志，现在已经成为调试线上问题最主要的工具。</p>\n<p>Kids已经开源，放到了Github上。</p>\n<h2 id=\"事件驱动的架构\"><a href=\"#事件驱动的架构\" class=\"headerlink\" title=\"事件驱动的架构\"></a>事件驱动的架构</h2><p>知乎这个产品有一个特点，最早在添加一个答案后，后续的操作其实只有更新通知、更新动态。但是随着整个功能的增加，又多出了一些更新索引、更新计数、内容审查等操作，<br>后续操作五花八门。如果按照传统方式，维护逻辑会越来越庞大，维护性也会非常差。这种场景很适合事件驱动方式，所以开发团队对整个架构做了调整，做了事件驱动的架构。</p>\n<p>这时首先需要的是一个消息队列，它应该可以获取到各种各样的事件，而且对一致性有很高的要求。针对这个需求，知乎开发了一个叫Sink的小工具。它拿到消息后，先做本<br>地的保存、持久化，然后再把消息分发出去。如果那台机器挂掉了，重启时可以完整恢复，确保消息不会丢失。然后它通过Miller开发框架，把消息放到任务队列。Sin<br>k更像是串行消息订阅服务，但任务需要并行化处理， Beanstalkd就派上了用场，由其对任务进行全周期管理。架构如下图所示：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_3.jpg\" alt=\"\"><br>举例而言，如果现在有用户回答了问题，首先系统会把问题写到MySQL里面，把消息塞到Sink，然后把问题返回给用户。Sink通过Miller把任务发给<br>Beanstalkd，Worker自己可以找到任务并处理。</p>\n<p>最开始上线时，每秒钟有10个消息，然后有70个任务产生。现在每秒钟有100个事件，有1500个任务产生，就是通过现在的事件驱动架构支撑的。</p>\n<h2 id=\"页面渲染优化\"><a href=\"#页面渲染优化\" class=\"headerlink\" title=\"页面渲染优化\"></a>页面渲染优化</h2><p>知乎在2013年时每天有上百万的PV，页面渲染其实是计算密集型的，另外因为要获取数据，所以也有IO密集型的特点。这时开发团队就对页面进行了组件化，还升级了数<br>据获取机制。知乎按照整个页面组件树的结构，自上而下分层地获取数据，当上层的数据已经获取了，下层的数据就不需要再下去了，有几层基本上就有几次数据获取。</p>\n<p>结合这个思路，知乎自己做了一套模板渲染开发框架——ZhihuNode。</p>\n<p>经历了一系列改进之后，页面的性能大幅度提升。问题页面从500ms 减少到150ms，Feed页面从1s减少到600ms。</p>\n<h2 id=\"面向服务的架构（SOA）\"><a href=\"#面向服务的架构（SOA）\" class=\"headerlink\" title=\"面向服务的架构（SOA）\"></a>面向服务的架构（SOA）</h2><p>随着知乎的功能越来越庞杂，整个系统也越来越大。知乎是怎么做的服务化呢？</p>\n<p>首先需要一个最基本的RPC框架，RPC框架也经历了好几版演进。</p>\n<p>第一版是Wish，它是一个严格定义序列化的模型。传输层用到了STP，这是自己写的很简单的传输协议，跑在TCP上。一开始用的还不错，因为一开始只写了一两个服务<br>。但是随着服务增多，一些问题开始出现，首先是ProtocolBuffer会 生成一些描述代码，很冗长，放到整个库里显得很丑陋。另外严格的定义使其不便使用。这<br>时有位工程师开发了新的RPC框架——Snow。它使用简单的JSON做数据序列化。但是松散的数据定义面对的问题是，比如说服务要去升级，要改写数据结构，很难知道<br>有哪几个服务在使用，也很难通知它们，往往错误就发生了。于是又出了第三个RPC框架，写RPC框架的工程师，希望结合前面两个框架的特点，首先保持Snow简单，其<br>次需要相对严格的序列化协议。这一版本引入了 Apache<br>Avro。同时加入了特别的机制，在传输层和序列化协议这一层都做成了可插拔的方式，既可以用JSON，也可以用Avro，传输层可以用STP，也可以用二进制协议。</p>\n<p>再就是搭了一个服务注册发现，只需要简单的定义服务的名字就可以找到服务在哪台机器上。同时，知乎也有相应的调优的工具，基于Zipkin开发了自己的<br>Tracing系统。</p>\n<p>按照调用关系，知乎的服务分成了3层：聚合层、内容层和基础层。按属性又可以分成3类：数据服务、逻辑服务和通道服务。数据服务主要是一些要做特殊数据类型的存储，比<br>如图片服务。逻辑服务更多的是CPU密集、计算密集的操作，比如答案格式的定义、解析等。通道服务的特点是没有存储，更多是做一个转发，比如说Sink。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_4.jpg\" alt=\"\"><br>这是引入服务化之后整体的架构。  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_5.jpg\" alt=\"\">  </p>\n","excerpt":"","more":"<p>转自：<a href=\"http://www.admin10000.com/document/5744.html\">http://www.admin10000.com/document/5744.html</a></p>\n<p>许很多人还不知道，知乎在规模上是仅次于百度贴吧和豆瓣的中文互联网最大的UGC(用户生成内容)社区。知乎创业三年来，从0开始，到现在已经有了100多台服务器。<br>目前知乎的注册用户超过了1100万，每个月有超过8000万人使用；网站每个月的PV超过2.2亿，差不多每秒钟的动态请求超过2500。</p>\n<p>在ArchSummit北京2014大会上，知乎联合创始人兼 CTO<br>李申申带来了知乎创业三年多来的首次全面技术分享（幻灯片下载）。本文系根据演讲内容整理而成。</p>\n<h2 id=\"初期架构选型\"><a href=\"#初期架构选型\" class=\"headerlink\" title=\"初期架构选型\"></a>初期架构选型</h2><p>在2010年10月真正开始动手做知乎这个产品时，包含李申申在内，最初只有两位工程师；到2010年12月份上线时，工程师是四个。</p>\n<p>知乎的主力开发语言是<strong>Python</strong>。因为Python简单且强大，能够快速上手，开发效率高，而且社区活跃，团队成员也比较喜欢。</p>\n<p>知乎使用的是<strong>Tornado框架</strong>。因为它支持异步，很适合做实时Comet应用，而且简单轻量，学习成本低，再就是有FriendFeed<br>的成熟案例，Facebook 的社区支持。知乎的产品有个特性，就是希望跟浏览器端建立一个长连接，便于实时推送Feed和通知，所以Tornado比较合适。</p>\n<p>最初整个团队的精力全部放在产品功能的开发上，而其他方面，基本上能节约时间、能省的都用最简单的方法来解决，当然这在后期也带来了一些问题。</p>\n<p>最初的想法是用云主机，节省成本。知乎的第一台服务器是512MB内存的Linode主机。但是网站上线后，内测受欢迎程度超出预期，很多用户反馈网站很慢。跨国网络<br>延迟比想象的要大，特别是国内的网络不均衡，全国各地用户访问的情况都不太一样。这个问题，再加上当时要做域名备案，知乎又回到了<strong>自己买机器</strong>找机房的老路上。</p>\n<p>买了机器、找了机房之后又遇到了新的问题，服务经常宕掉。当时服务商的机器内存总是出问题，动不动就重启。终于有一次机器宕掉起不来了，这时知乎就做了Web和数据库<br>的高可用。创业就是这样一个情况，永远不知道明早醒来的时候会面临什么样的问题。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_0.jpg\" alt=\"\"><br>这是当时那个阶段的架构图，Web和数据库都做了主从。当时的图片服务托管在<strong>又拍云</strong>上。除了主从，为了性能更好还做了读写分离。为解决同步问题，又添加了一个<br>服务器来跑离线脚本，避免对线上服务造成响应延迟。另外，为改进内网的吞吐量延迟，还更换了设备，使整个内网的吞吐量翻了20倍。</p>\n<p>在2011年上半年时，知乎对<strong>Redis</strong>已经很依赖。除了最开始的队列、搜索在用，后来像Cache也开始使用，单机存储成为瓶颈，所以引入了<strong>分片</strong>，<br>同时做了<strong>一致性</strong>。</p>\n<p>知乎团队是一个很<strong>相信工具</strong>的团队，相信工具可以提升效率。工具其实是一个过程，工具并没有所谓的最好的工具，只有最适合的工具。而且它是在整个过程中，随着整<br>个状态的变化、环境的变化在不断发生变化的。知乎自己开发或使用过的工具包括Profiling（函数级追踪请求，分析调优）、Werkzeug（方便调试的工具）、<br>Puppet（配置管理）和Shipit（一键上线或回滚）等。</p>\n<h2 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h2><p>知乎最初是<strong>邀请制</strong>的，2011年下半年，知乎上线了申请注册，没有邀请码的用户也可以通过填写一些资料申请注册知乎。用户量又上了一个台阶，这时就有了一些发<br>广告的账户，需要扫除广告。日志系统的需求提上日程。</p>\n<p>这个日志系统必须支持分布式收集、集中存储、实时、可订阅和简单等特性。当时调研了一些开源系统，比如Scribe总体不错，但是不支持订阅。Kafka是Scala<br>开发的，但是团队在Scala方面积累较少，Flume也是类似，而且比较重。所以开发团队选择了自己开发一个日志系统——Kids（Kids Is Data<br>Stream）。顾名思义，Kids是用来汇集各种数据流的。</p>\n<p>Kids参考了Scribe的思路。Kdis在每台服务器上可以配置成Agent或Server。Agent直接接受来自应用的消息，把消息汇集之后，可以打给下一个<br>Agent或者直接打给中心Server。订阅日志时，可以从Server上获取，也可以从中心节点的一些Agent上获取。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_1.jpg\" alt=\"\"><br>具体细节如下图所示：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_2.jpg\" alt=\"\"><br>知乎还基于Kids做了一个Web小工具（Kids Explorer），支持实时看线上日志，现在已经成为调试线上问题最主要的工具。</p>\n<p>Kids已经开源，放到了Github上。</p>\n<h2 id=\"事件驱动的架构\"><a href=\"#事件驱动的架构\" class=\"headerlink\" title=\"事件驱动的架构\"></a>事件驱动的架构</h2><p>知乎这个产品有一个特点，最早在添加一个答案后，后续的操作其实只有更新通知、更新动态。但是随着整个功能的增加，又多出了一些更新索引、更新计数、内容审查等操作，<br>后续操作五花八门。如果按照传统方式，维护逻辑会越来越庞大，维护性也会非常差。这种场景很适合事件驱动方式，所以开发团队对整个架构做了调整，做了事件驱动的架构。</p>\n<p>这时首先需要的是一个消息队列，它应该可以获取到各种各样的事件，而且对一致性有很高的要求。针对这个需求，知乎开发了一个叫Sink的小工具。它拿到消息后，先做本<br>地的保存、持久化，然后再把消息分发出去。如果那台机器挂掉了，重启时可以完整恢复，确保消息不会丢失。然后它通过Miller开发框架，把消息放到任务队列。Sin<br>k更像是串行消息订阅服务，但任务需要并行化处理， Beanstalkd就派上了用场，由其对任务进行全周期管理。架构如下图所示：<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_3.jpg\" alt=\"\"><br>举例而言，如果现在有用户回答了问题，首先系统会把问题写到MySQL里面，把消息塞到Sink，然后把问题返回给用户。Sink通过Miller把任务发给<br>Beanstalkd，Worker自己可以找到任务并处理。</p>\n<p>最开始上线时，每秒钟有10个消息，然后有70个任务产生。现在每秒钟有100个事件，有1500个任务产生，就是通过现在的事件驱动架构支撑的。</p>\n<h2 id=\"页面渲染优化\"><a href=\"#页面渲染优化\" class=\"headerlink\" title=\"页面渲染优化\"></a>页面渲染优化</h2><p>知乎在2013年时每天有上百万的PV，页面渲染其实是计算密集型的，另外因为要获取数据，所以也有IO密集型的特点。这时开发团队就对页面进行了组件化，还升级了数<br>据获取机制。知乎按照整个页面组件树的结构，自上而下分层地获取数据，当上层的数据已经获取了，下层的数据就不需要再下去了，有几层基本上就有几次数据获取。</p>\n<p>结合这个思路，知乎自己做了一套模板渲染开发框架——ZhihuNode。</p>\n<p>经历了一系列改进之后，页面的性能大幅度提升。问题页面从500ms 减少到150ms，Feed页面从1s减少到600ms。</p>\n<h2 id=\"面向服务的架构（SOA）\"><a href=\"#面向服务的架构（SOA）\" class=\"headerlink\" title=\"面向服务的架构（SOA）\"></a>面向服务的架构（SOA）</h2><p>随着知乎的功能越来越庞杂，整个系统也越来越大。知乎是怎么做的服务化呢？</p>\n<p>首先需要一个最基本的RPC框架，RPC框架也经历了好几版演进。</p>\n<p>第一版是Wish，它是一个严格定义序列化的模型。传输层用到了STP，这是自己写的很简单的传输协议，跑在TCP上。一开始用的还不错，因为一开始只写了一两个服务<br>。但是随着服务增多，一些问题开始出现，首先是ProtocolBuffer会 生成一些描述代码，很冗长，放到整个库里显得很丑陋。另外严格的定义使其不便使用。这<br>时有位工程师开发了新的RPC框架——Snow。它使用简单的JSON做数据序列化。但是松散的数据定义面对的问题是，比如说服务要去升级，要改写数据结构，很难知道<br>有哪几个服务在使用，也很难通知它们，往往错误就发生了。于是又出了第三个RPC框架，写RPC框架的工程师，希望结合前面两个框架的特点，首先保持Snow简单，其<br>次需要相对严格的序列化协议。这一版本引入了 Apache<br>Avro。同时加入了特别的机制，在传输层和序列化协议这一层都做成了可插拔的方式，既可以用JSON，也可以用Avro，传输层可以用STP，也可以用二进制协议。</p>\n<p>再就是搭了一个服务注册发现，只需要简单的定义服务的名字就可以找到服务在哪台机器上。同时，知乎也有相应的调优的工具，基于Zipkin开发了自己的<br>Tracing系统。</p>\n<p>按照调用关系，知乎的服务分成了3层：聚合层、内容层和基础层。按属性又可以分成3类：数据服务、逻辑服务和通道服务。数据服务主要是一些要做特殊数据类型的存储，比<br>如图片服务。逻辑服务更多的是CPU密集、计算密集的操作，比如答案格式的定义、解析等。通道服务的特点是没有存储，更多是做一个转发，比如说Sink。<br><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_4.jpg\" alt=\"\"><br>这是引入服务化之后整体的架构。  </p>\n<p><img src=\"http://7xnc86.com1.z0.glb.clouddn.com/zhihu_5.jpg\" alt=\"\">  </p>\n"},{"title":"写给这些女生","date":"2010-08-06T11:56:18.000Z","_content":"我说你们这些女生呀，为什么总是不相信男孩的誓言或者诺言呢？难道我们男人就真的全是骗子了吗？你们也不要因为某些个人的不守承诺就不再相信所有男人了，我们男人不是\n那样的，男人应担负的责任务更多，所以我们做事都是有原因的，如果认为我们有错，请千万慢下来听我们解释！\n\n——本文最早发表于QQ空间\n\n  \n\n","source":"_posts/write-to-girls.md","raw":"---\ntitle: \"写给这些女生\"\ndate: 2010-08-06 19:56:18\ncategories: 那时年少\n---\n我说你们这些女生呀，为什么总是不相信男孩的誓言或者诺言呢？难道我们男人就真的全是骗子了吗？你们也不要因为某些个人的不守承诺就不再相信所有男人了，我们男人不是\n那样的，男人应担负的责任务更多，所以我们做事都是有原因的，如果认为我们有错，请千万慢下来听我们解释！\n\n——本文最早发表于QQ空间\n\n  \n\n","slug":"write-to-girls","published":1,"updated":"2016-02-22T05:23:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir3l2ppb00829vnzs4knnryg","content":"<p>我说你们这些女生呀，为什么总是不相信男孩的誓言或者诺言呢？难道我们男人就真的全是骗子了吗？你们也不要因为某些个人的不守承诺就不再相信所有男人了，我们男人不是<br>那样的，男人应担负的责任务更多，所以我们做事都是有原因的，如果认为我们有错，请千万慢下来听我们解释！</p>\n<p>——本文最早发表于QQ空间</p>\n","excerpt":"","more":"<p>我说你们这些女生呀，为什么总是不相信男孩的誓言或者诺言呢？难道我们男人就真的全是骗子了吗？你们也不要因为某些个人的不守承诺就不再相信所有男人了，我们男人不是<br>那样的，男人应担负的责任务更多，所以我们做事都是有原因的，如果认为我们有错，请千万慢下来听我们解释！</p>\n<p>——本文最早发表于QQ空间</p>\n"},{"title":"看博客的人要的都是干货？","date":"2016-08-07T12:35:20.000Z","_content":"前几天，一位朋友突然问我道，为什么我的博客最近更新的都是有关读后感的，而少了以前那么多的技术干货。很欣慰，居然有朋友一直在看我的站点，虽然并没有看到它想看的，但是他所要的技术干货我现在其实也有，只是并没有放在主站，而是放在[豪翔天下的wiki](https://wiki.haofly.net)这个二级域名下。至于为什么，我想是因为厌倦了很多博客的内容样式，厌倦了很多教程的复制粘贴，才有了把它们一分为二的想法。\n\n看了一下百度统计和谷歌Analytics，博客从13年至今，统计在内的PV总共有20000+，单日最高PV居然有1300+，但是平日里也就10左右。虽然我有用统计工具，但是几乎不会去关注这些统计结果，一直以来我写博客都是为了自己在写，即使是技术干货，也是为了方便自己以后查阅。但是最近又有了一些新的方法，我认为，我现在可以宣传自己了。以前的我很自卑，觉得自己写的东西，那肯定都是别人写过的，而且自己写的东西更是没有多少技术深度的东西，但是事实好像并不是这样。我最骄傲的地方就是与身边的不一样，我每天都在浏览着很多科技博客、技术新闻，以为自己一直是站在技术前沿的人，也意识到自己学的东西范围非常广，自己的深度也不够，眼前有很多路，却不知道该往哪里走。这就像一个瓶子，明明上面就是瓶颈了，但就是怎么做也钻不出去，甚至在往下掉。\n到新公司也快半年了，新同事们很好，也很牛逼，感觉大家简直就像游侠一样，不想去北上广争夺，只想待在重庆这个小江湖，说实话，他们的技能水平，在北上广绝对也能称得上高手。这半年里，因为有人在旁边指导，在代码质量方面成长得挺快，至少现在写代码的时候能明显感觉到自己以前写的代码是有多么的bad smell。在给别人开发的时候也感觉自己的代码量真的太少了。以前都是自己开发自己的东西，觉得有时候有点错误没什么，但是给别人开发的过程中，一点儿不满意人家就会指出来，而且让人伤心的是，这里面起码有百分之五十确实是自己代码质量的问题。路漫漫其修远兮，编程之路，我还有很长的路要走。\n\n前几天翻了以前的博客，我去，居然没有今年的年初计划，不禁思考，我这半年是怎么浑浑噩噩过来的，接下来的半年又该怎样浑浑噩噩地过呢。浑浑噩噩这个词我不喜欢，你说我懒我会接受，我懒得开心，但是说我浑浑噩噩，说我不思进取，那肯定是不行的。在这里，补一下下半年的目标:\n\n1. 熟练日语五十音(说了很多次要学日语，结果到现在连五十音都还不认识，要想装逼，至少要会说吧)\n2. 结交三个以上IT界朋友(年龄相仿+忘年)\n3. 博客日访问量10+(我承认，现在的博客日访问量还有零的)\n4. 年底公司评级达到P4及以上(这就要求在公司好好工作啦)\n5. 给父母做全身检查(哪怕再缺钱也得做)\n6. SegmentFault声望达到1000以上","source":"_posts/kanbokederendouxiangyaoganhuo.md","raw":"---\ntitle: \"看博客的人要的都是干货？\"\ndate: 2016-08-07 20:35:20\ncategories: 编程之路\n---\n前几天，一位朋友突然问我道，为什么我的博客最近更新的都是有关读后感的，而少了以前那么多的技术干货。很欣慰，居然有朋友一直在看我的站点，虽然并没有看到它想看的，但是他所要的技术干货我现在其实也有，只是并没有放在主站，而是放在[豪翔天下的wiki](https://wiki.haofly.net)这个二级域名下。至于为什么，我想是因为厌倦了很多博客的内容样式，厌倦了很多教程的复制粘贴，才有了把它们一分为二的想法。\n\n看了一下百度统计和谷歌Analytics，博客从13年至今，统计在内的PV总共有20000+，单日最高PV居然有1300+，但是平日里也就10左右。虽然我有用统计工具，但是几乎不会去关注这些统计结果，一直以来我写博客都是为了自己在写，即使是技术干货，也是为了方便自己以后查阅。但是最近又有了一些新的方法，我认为，我现在可以宣传自己了。以前的我很自卑，觉得自己写的东西，那肯定都是别人写过的，而且自己写的东西更是没有多少技术深度的东西，但是事实好像并不是这样。我最骄傲的地方就是与身边的不一样，我每天都在浏览着很多科技博客、技术新闻，以为自己一直是站在技术前沿的人，也意识到自己学的东西范围非常广，自己的深度也不够，眼前有很多路，却不知道该往哪里走。这就像一个瓶子，明明上面就是瓶颈了，但就是怎么做也钻不出去，甚至在往下掉。\n到新公司也快半年了，新同事们很好，也很牛逼，感觉大家简直就像游侠一样，不想去北上广争夺，只想待在重庆这个小江湖，说实话，他们的技能水平，在北上广绝对也能称得上高手。这半年里，因为有人在旁边指导，在代码质量方面成长得挺快，至少现在写代码的时候能明显感觉到自己以前写的代码是有多么的bad smell。在给别人开发的时候也感觉自己的代码量真的太少了。以前都是自己开发自己的东西，觉得有时候有点错误没什么，但是给别人开发的过程中，一点儿不满意人家就会指出来，而且让人伤心的是，这里面起码有百分之五十确实是自己代码质量的问题。路漫漫其修远兮，编程之路，我还有很长的路要走。\n\n前几天翻了以前的博客，我去，居然没有今年的年初计划，不禁思考，我这半年是怎么浑浑噩噩过来的，接下来的半年又该怎样浑浑噩噩地过呢。浑浑噩噩这个词我不喜欢，你说我懒我会接受，我懒得开心，但是说我浑浑噩噩，说我不思进取，那肯定是不行的。在这里，补一下下半年的目标:\n\n1. 熟练日语五十音(说了很多次要学日语，结果到现在连五十音都还不认识，要想装逼，至少要会说吧)\n2. 结交三个以上IT界朋友(年龄相仿+忘年)\n3. 博客日访问量10+(我承认，现在的博客日访问量还有零的)\n4. 年底公司评级达到P4及以上(这就要求在公司好好工作啦)\n5. 给父母做全身检查(哪怕再缺钱也得做)\n6. SegmentFault声望达到1000以上","slug":"kanbokederendouxiangyaoganhuo","published":1,"updated":"2016-08-07T13:07:29.000Z","_id":"cirkmhuey0000feq8waf1sctk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前几天，一位朋友突然问我道，为什么我的博客最近更新的都是有关读后感的，而少了以前那么多的技术干货。很欣慰，居然有朋友一直在看我的站点，虽然并没有看到它想看的，但是他所要的技术干货我现在其实也有，只是并没有放在主站，而是放在<a href=\"https://wiki.haofly.net\" target=\"_blank\" rel=\"external\">豪翔天下的wiki</a>这个二级域名下。至于为什么，我想是因为厌倦了很多博客的内容样式，厌倦了很多教程的复制粘贴，才有了把它们一分为二的想法。</p>\n<p>看了一下百度统计和谷歌Analytics，博客从13年至今，统计在内的PV总共有20000+，单日最高PV居然有1300+，但是平日里也就10左右。虽然我有用统计工具，但是几乎不会去关注这些统计结果，一直以来我写博客都是为了自己在写，即使是技术干货，也是为了方便自己以后查阅。但是最近又有了一些新的方法，我认为，我现在可以宣传自己了。以前的我很自卑，觉得自己写的东西，那肯定都是别人写过的，而且自己写的东西更是没有多少技术深度的东西，但是事实好像并不是这样。我最骄傲的地方就是与身边的不一样，我每天都在浏览着很多科技博客、技术新闻，以为自己一直是站在技术前沿的人，也意识到自己学的东西范围非常广，自己的深度也不够，眼前有很多路，却不知道该往哪里走。这就像一个瓶子，明明上面就是瓶颈了，但就是怎么做也钻不出去，甚至在往下掉。<br>到新公司也快半年了，新同事们很好，也很牛逼，感觉大家简直就像游侠一样，不想去北上广争夺，只想待在重庆这个小江湖，说实话，他们的技能水平，在北上广绝对也能称得上高手。这半年里，因为有人在旁边指导，在代码质量方面成长得挺快，至少现在写代码的时候能明显感觉到自己以前写的代码是有多么的bad smell。在给别人开发的时候也感觉自己的代码量真的太少了。以前都是自己开发自己的东西，觉得有时候有点错误没什么，但是给别人开发的过程中，一点儿不满意人家就会指出来，而且让人伤心的是，这里面起码有百分之五十确实是自己代码质量的问题。路漫漫其修远兮，编程之路，我还有很长的路要走。</p>\n<p>前几天翻了以前的博客，我去，居然没有今年的年初计划，不禁思考，我这半年是怎么浑浑噩噩过来的，接下来的半年又该怎样浑浑噩噩地过呢。浑浑噩噩这个词我不喜欢，你说我懒我会接受，我懒得开心，但是说我浑浑噩噩，说我不思进取，那肯定是不行的。在这里，补一下下半年的目标:</p>\n<ol>\n<li>熟练日语五十音(说了很多次要学日语，结果到现在连五十音都还不认识，要想装逼，至少要会说吧)</li>\n<li>结交三个以上IT界朋友(年龄相仿+忘年)</li>\n<li>博客日访问量10+(我承认，现在的博客日访问量还有零的)</li>\n<li>年底公司评级达到P4及以上(这就要求在公司好好工作啦)</li>\n<li>给父母做全身检查(哪怕再缺钱也得做)</li>\n<li>SegmentFault声望达到1000以上</li>\n</ol>\n","excerpt":"","more":"<p>前几天，一位朋友突然问我道，为什么我的博客最近更新的都是有关读后感的，而少了以前那么多的技术干货。很欣慰，居然有朋友一直在看我的站点，虽然并没有看到它想看的，但是他所要的技术干货我现在其实也有，只是并没有放在主站，而是放在<a href=\"https://wiki.haofly.net\">豪翔天下的wiki</a>这个二级域名下。至于为什么，我想是因为厌倦了很多博客的内容样式，厌倦了很多教程的复制粘贴，才有了把它们一分为二的想法。</p>\n<p>看了一下百度统计和谷歌Analytics，博客从13年至今，统计在内的PV总共有20000+，单日最高PV居然有1300+，但是平日里也就10左右。虽然我有用统计工具，但是几乎不会去关注这些统计结果，一直以来我写博客都是为了自己在写，即使是技术干货，也是为了方便自己以后查阅。但是最近又有了一些新的方法，我认为，我现在可以宣传自己了。以前的我很自卑，觉得自己写的东西，那肯定都是别人写过的，而且自己写的东西更是没有多少技术深度的东西，但是事实好像并不是这样。我最骄傲的地方就是与身边的不一样，我每天都在浏览着很多科技博客、技术新闻，以为自己一直是站在技术前沿的人，也意识到自己学的东西范围非常广，自己的深度也不够，眼前有很多路，却不知道该往哪里走。这就像一个瓶子，明明上面就是瓶颈了，但就是怎么做也钻不出去，甚至在往下掉。<br>到新公司也快半年了，新同事们很好，也很牛逼，感觉大家简直就像游侠一样，不想去北上广争夺，只想待在重庆这个小江湖，说实话，他们的技能水平，在北上广绝对也能称得上高手。这半年里，因为有人在旁边指导，在代码质量方面成长得挺快，至少现在写代码的时候能明显感觉到自己以前写的代码是有多么的bad smell。在给别人开发的时候也感觉自己的代码量真的太少了。以前都是自己开发自己的东西，觉得有时候有点错误没什么，但是给别人开发的过程中，一点儿不满意人家就会指出来，而且让人伤心的是，这里面起码有百分之五十确实是自己代码质量的问题。路漫漫其修远兮，编程之路，我还有很长的路要走。</p>\n<p>前几天翻了以前的博客，我去，居然没有今年的年初计划，不禁思考，我这半年是怎么浑浑噩噩过来的，接下来的半年又该怎样浑浑噩噩地过呢。浑浑噩噩这个词我不喜欢，你说我懒我会接受，我懒得开心，但是说我浑浑噩噩，说我不思进取，那肯定是不行的。在这里，补一下下半年的目标:</p>\n<ol>\n<li>熟练日语五十音(说了很多次要学日语，结果到现在连五十音都还不认识，要想装逼，至少要会说吧)</li>\n<li>结交三个以上IT界朋友(年龄相仿+忘年)</li>\n<li>博客日访问量10+(我承认，现在的博客日访问量还有零的)</li>\n<li>年底公司评级达到P4及以上(这就要求在公司好好工作啦)</li>\n<li>给父母做全身检查(哪怕再缺钱也得做)</li>\n<li>SegmentFault声望达到1000以上</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cir3l2p0g00019vnzgrl2k342","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p31000a9vnzm5vx0uwu"},{"post_id":"cir3l2p2r00079vnz4l8v18ad","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p36000d9vnzfeui5xfp"},{"post_id":"cir3l2p1s00039vnzjrkjo0pk","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p3b000f9vnzte6h36dx"},{"post_id":"cir3l2p37000e9vnzctkxq45a","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p3q000j9vnzm2gi37uf"},{"post_id":"cir3l2p2200059vnz04spda8t","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p3y000m9vnzucqyptg4"},{"post_id":"cir3l2p3n000i9vnz83kyhm5t","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p44000o9vnzeursr29x"},{"post_id":"cir3l2p2a00069vnzkjxboygm","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p47000r9vnzgurtrirr"},{"post_id":"cir3l2p3r000k9vnz6q0sh0x7","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p4i000t9vnz2os4s6re"},{"post_id":"cir3l2p2v00099vnzt60hq5m2","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p4n000w9vnz984pjqg8"},{"post_id":"cir3l2p45000p9vnz5dusksxs","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p4q000y9vnzbspri0tn"},{"post_id":"cir3l2p48000s9vnzmrymk45b","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p4x00119vnzele6w760"},{"post_id":"cir3l2p32000b9vnzti350n30","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p5000139vnz79ehvcvj"},{"post_id":"cir3l2p4j000u9vnzmj0vvie9","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p5300159vnzk3ub8doh"},{"post_id":"cir3l2p4n000x9vnzmsq04j3o","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p5900179vnz7cua7gnv"},{"post_id":"cir3l2p3g000g9vnzvzow9nzb","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p5f00199vnzp93th0na"},{"post_id":"cir3l2p4r000z9vnz9lun5sp2","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p5k001b9vnzfpsji05n"},{"post_id":"cir3l2p4y00129vnz82jvcvjl","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p5n001d9vnz718v4ke6"},{"post_id":"cir3l2p40000n9vnznkagoi1h","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p5w001f9vnzs666gi0k"},{"post_id":"cir3l2p5000149vnz9as8mqks","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p63001h9vnzs5hlnuy5"},{"post_id":"cir3l2p5500169vnzv6en7qom","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p6b001j9vnz4dzfhpyo"},{"post_id":"cir3l2p5a00189vnzkz5mtm9u","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p6n001l9vnzqrpz1pjt"},{"post_id":"cir3l2p5h001a9vnzawczvnsg","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p6s001o9vnz7v7skmix"},{"post_id":"cir3l2p5k001c9vnzi6tya7u4","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p7a001q9vnzz0dcxu5q"},{"post_id":"cir3l2p5n001e9vnz0x8xo1z3","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p7n001s9vnzcizt2ons"},{"post_id":"cir3l2p5x001g9vnzirwwkikf","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p86001v9vnzdq49g1b9"},{"post_id":"cir3l2p64001i9vnzz86m0kcm","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p8c001x9vnz503wo0y2"},{"post_id":"cir3l2p75001p9vnzvfqcvat1","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p8l001z9vnz099fqana"},{"post_id":"cir3l2p7b001r9vnzrfinksu5","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p8r00219vnzfgb9futs"},{"post_id":"cir3l2p6j001k9vnzliwosui6","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2p8v00239vnzyzg6sjr8"},{"post_id":"cir3l2p7o001t9vnzhm3b827g","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p9500259vnzu7sozizk"},{"post_id":"cir3l2p89001w9vnz8hoh1u6g","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p9b00279vnz0kuek8tl"},{"post_id":"cir3l2p6p001m9vnz7u6dl069","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2p9e00299vnz9edgx43j"},{"post_id":"cir3l2p8d001y9vnz4uzkg8ko","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p9h002b9vnzb5uk3607"},{"post_id":"cir3l2p8p00209vnz7dcvafdm","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2p9k002d9vnzk61x6qgs"},{"post_id":"cir3l2p8s00229vnzvv2tkln1","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2p9o002f9vnz9tkph48q"},{"post_id":"cir3l2p9000249vnzk8bm1xxw","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p9q002h9vnz8itjv35j"},{"post_id":"cir3l2p9600269vnz85izyowi","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2p9s002j9vnzt827vwsn"},{"post_id":"cir3l2p9b00289vnztvqf5sm6","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pa3002l9vnz9vbe0jxm"},{"post_id":"cir3l2p9f002a9vnzsdo48h29","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pa6002n9vnzphntg7nl"},{"post_id":"cir3l2p9h002c9vnzkvuup7jx","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pa8002p9vnz1i87y43w"},{"post_id":"cir3l2p9k002e9vnzw6osxwsm","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2paa002r9vnzj4j4kyx0"},{"post_id":"cir3l2p9o002g9vnzsnd0wwti","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2paf002t9vnzn6x3tbq9"},{"post_id":"cir3l2p9q002i9vnzkxnoaphh","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2paj002v9vnzwpipvtju"},{"post_id":"cir3l2p9s002k9vnzafl34oc8","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pal002x9vnzzwemprbv"},{"post_id":"cir3l2pa3002m9vnzouwyp6h3","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pan002z9vnzj0flhicv"},{"post_id":"cir3l2pa6002o9vnz1binuxlz","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pax00319vnzak45lktd"},{"post_id":"cir3l2pa8002q9vnzu7y8o4n5","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pb100339vnznkmipd4p"},{"post_id":"cir3l2pab002s9vnzpb9z1ze8","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pb500359vnzip801bch"},{"post_id":"cir3l2paf002u9vnz0poazge9","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pb700379vnztnmm387w"},{"post_id":"cir3l2paj002w9vnzpd4bujr0","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pbg003a9vnzhhqfka37"},{"post_id":"cir3l2pam002y9vnz09q3m6tn","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pbl003c9vnzvnrjeoh8"},{"post_id":"cir3l2pan00309vnzqa8ygsyi","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pbo003e9vnzgoe7ww1p"},{"post_id":"cir3l2pay00329vnzsgquo8nh","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pc0003g9vnzpu8wedk0"},{"post_id":"cir3l2pb300349vnzdxttysxb","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pc4003i9vnzm1afiyq8"},{"post_id":"cir3l2pb800389vnzlk5hticg","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pc8003k9vnzhg7t70pg"},{"post_id":"cir3l2pbg003b9vnz6a3gzf29","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pce003m9vnza7raph1s"},{"post_id":"cir3l2pbl003d9vnzo09ow8h1","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pcu003o9vnz6g1obt7i"},{"post_id":"cir3l2pb500369vnzm0a830eh","category_id":"cir3l2pbf00399vnzioqpowq8","_id":"cir3l2pcx003q9vnzsmlj2qa2"},{"post_id":"cir3l2pbo003f9vnz76iqte16","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2pcz003s9vnzbjwc6wre"},{"post_id":"cir3l2pc1003h9vnzh1e5exp3","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pd3003u9vnzx5uuutgv"},{"post_id":"cir3l2pc5003j9vnzj8fomuuj","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pdb003w9vnzmsy36cz0"},{"post_id":"cir3l2pcb003l9vnzvaanba22","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pdf003y9vnzlzdg73bs"},{"post_id":"cir3l2pch003n9vnzpe6j88vf","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pdh00409vnz2ebn13bc"},{"post_id":"cir3l2pcv003p9vnz60towmhx","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pdo00429vnzbth2nmu4"},{"post_id":"cir3l2pcx003r9vnz7jrnfctk","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pdx00449vnzb0zn46si"},{"post_id":"cir3l2pcz003t9vnzwfk2ipbt","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pe200469vnz95w537kn"},{"post_id":"cir3l2pd4003v9vnzu3a9qws9","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pe900489vnzr7tyzf3i"},{"post_id":"cir3l2pdb003x9vnzbqbxlqco","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2ped004a9vnzvhaxky6e"},{"post_id":"cir3l2pdf003z9vnzf1bz8dhf","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pem004c9vnzs6psgffv"},{"post_id":"cir3l2pdh00419vnzqh99dmh5","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pf3004e9vnzspcsfe79"},{"post_id":"cir3l2pdp00439vnzu6m49284","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pf8004g9vnzm18vmqjq"},{"post_id":"cir3l2pdx00459vnzdsuw20s0","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pfb004i9vnzvfwgxxbx"},{"post_id":"cir3l2pe200479vnzglk8sz3n","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pfd004k9vnzctx0lb3f"},{"post_id":"cir3l2pea00499vnzyy4lifij","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2pfn004m9vnz1dygalqh"},{"post_id":"cir3l2ped004b9vnzun4rxc6w","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pfp004o9vnzy4mp5j7a"},{"post_id":"cir3l2pem004d9vnzb4absjdy","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pfq004q9vnzeaej6yjg"},{"post_id":"cir3l2pf6004f9vnz80n40hpy","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pfs004s9vnzhozjx4fo"},{"post_id":"cir3l2pf8004h9vnz3612q9e7","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pfu004u9vnzkj8418lk"},{"post_id":"cir3l2pfb004j9vnzrkf2eshz","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pfy004w9vnziqhql63m"},{"post_id":"cir3l2pfj004l9vnzn8qf63rm","category_id":"cir3l2pbf00399vnzioqpowq8","_id":"cir3l2pg3004y9vnzwjczumsj"},{"post_id":"cir3l2pfn004n9vnzo2etoggu","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pg400509vnzy133u0vc"},{"post_id":"cir3l2pfp004p9vnzh3o4y392","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pg800529vnz63vj2rh2"},{"post_id":"cir3l2pfr004r9vnzrir8nijt","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgd00549vnz6cmr7iau"},{"post_id":"cir3l2pfs004t9vnzm6sc7zxc","category_id":"cir3l2pbf00399vnzioqpowq8","_id":"cir3l2pgi00569vnz9yl4duu6"},{"post_id":"cir3l2pfu004v9vnz3gsy88rj","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgk00589vnzhf4tvsat"},{"post_id":"cir3l2pfz004x9vnzzdi5s08g","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgl005a9vnzflpmzn0k"},{"post_id":"cir3l2pg3004z9vnzavct54ly","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgn005c9vnzcteuew7p"},{"post_id":"cir3l2pg400519vnzeljvtkbf","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgo005e9vnzh6e9lhky"},{"post_id":"cir3l2pg900539vnzwn5fhaqg","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgq005g9vnzxgc17vgo"},{"post_id":"cir3l2pge00559vnz64sopqht","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgw005i9vnzwwvwbm2k"},{"post_id":"cir3l2pgi00579vnzq42h2zjv","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgx005k9vnzcvyz2e39"},{"post_id":"cir3l2pgk00599vnz59i3xy83","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pgz005m9vnz7ob0zxpa"},{"post_id":"cir3l2pgl005b9vnzyo8hpg52","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2ph0005o9vnz2ivjcatz"},{"post_id":"cir3l2pgn005d9vnz250xsdpq","category_id":"cir3l2pbf00399vnzioqpowq8","_id":"cir3l2ph4005q9vnzar9kkz85"},{"post_id":"cir3l2pgo005f9vnzwie5iwh1","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2ph6005s9vnzfresbsbw"},{"post_id":"cir3l2pgr005h9vnzr7rtjo89","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2phc005v9vnzwpen0s1a"},{"post_id":"cir3l2pgw005j9vnzp9x3dk73","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2phg005x9vnzpqbero32"},{"post_id":"cir3l2pgx005l9vnzikdsn6z0","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2phh005z9vnzm0yvjmak"},{"post_id":"cir3l2pgz005n9vnztcwkhf78","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2phk00619vnzo4nwfn39"},{"post_id":"cir3l2ph0005p9vnzsizlpj9p","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2phn00639vnzsb9mwu5w"},{"post_id":"cir3l2ph6005t9vnzdag1o8pq","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2php00659vnz0kaquo0r"},{"post_id":"cir3l2phd005w9vnzpt9dhzc8","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2phv00679vnzibwir9ak"},{"post_id":"cir3l2phg005y9vnzg0yvm2m2","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2phz00699vnz0gq14dze"},{"post_id":"cir3l2ph4005r9vnzsjzkstb0","category_id":"cir3l2phb005u9vnz56cdh01b","_id":"cir3l2pi2006b9vnz4orly2mh"},{"post_id":"cir3l2phh00609vnzvrgynsnu","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pig006d9vnzwez8em3n"},{"post_id":"cir3l2phl00629vnzbh1fn80g","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pik006f9vnz36vlst1m"},{"post_id":"cir3l2phn00649vnzery2rr2x","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pip006h9vnz8i4uspax"},{"post_id":"cir3l2php00669vnz5rxzroho","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pix006j9vnzs5arnvca"},{"post_id":"cir3l2phv00689vnzpi2yjssz","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pj2006l9vnzvceoo8cp"},{"post_id":"cir3l2phz006a9vnzwanbvbwt","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pje006n9vnz0wklm4dl"},{"post_id":"cir3l2pi2006c9vnzg2pnodfm","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pjg006p9vnzk1gtvdo4"},{"post_id":"cir3l2pig006e9vnzy9y6s8y3","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pjk006r9vnzm9qiq0ak"},{"post_id":"cir3l2pik006g9vnz2as378n3","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pjs006t9vnz1fud6j92"},{"post_id":"cir3l2pir006i9vnzq8ruvo4v","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pjw006v9vnzown9lszt"},{"post_id":"cir3l2pix006k9vnza169gysi","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pjx006w9vnzfe0axvqo"},{"post_id":"cir3l2pjb006m9vnziena0di0","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pjy006x9vnz79fv36xu"},{"post_id":"cir3l2pjf006o9vnzchrqfzg8","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pjz006y9vnzal1gl6pb"},{"post_id":"cir3l2pjh006q9vnzw2ckt7p8","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pk6006z9vnzaan6l764"},{"post_id":"cir3l2pjl006s9vnz1y4vg88j","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pk600709vnzjjr227cc"},{"post_id":"cir3l2pjt006u9vnzq6m4q818","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pk700719vnzn9r1d1fz"},{"post_id":"cir3l2pl600729vnzov1vzqyo","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2plq00759vnz484nr6ae"},{"post_id":"cir3l2pla00739vnz7rrtzavk","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pm400779vnzish0sz82"},{"post_id":"cir3l2plk00749vnzc0e6nupd","category_id":"cir3l2pbf00399vnzioqpowq8","_id":"cir3l2pm500789vnz9izccev0"},{"post_id":"cir3l2plr00769vnz29ch2g6h","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2pm700799vnz5fc7yhfk"},{"post_id":"cir3l2pn8007a9vnzu2im1pd6","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2png007d9vnzcxpl12px"},{"post_id":"cir3l2pnb007b9vnz5pe1cnbr","category_id":"cir3l2p1w00049vnzdhs3vluz","_id":"cir3l2pnl007f9vnzyi7qvooj"},{"post_id":"cir3l2pne007c9vnzpp3x085s","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pnq007h9vnz3jimy964"},{"post_id":"cir3l2png007e9vnzn5xfsg42","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pny007j9vnzlnrp80uh"},{"post_id":"cir3l2pnl007g9vnzqged2lu8","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2po0007l9vnzneailbpf"},{"post_id":"cir3l2pnu007i9vnzs8lup7nm","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pog007n9vnzhrh2f0kh"},{"post_id":"cir3l2pny007k9vnzx7guihu5","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2poq007p9vnzxwom5ufx"},{"post_id":"cir3l2po1007m9vnzwsngnog6","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pow007r9vnz35oit55h"},{"post_id":"cir3l2poj007o9vnz6wiuqqnf","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2poy007t9vnzu0ob9h6b"},{"post_id":"cir3l2por007q9vnzn7nv3xp7","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pp1007v9vnz0i22m4fh"},{"post_id":"cir3l2pow007s9vnzooy0ydu1","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2pp3007x9vnzoyzzeuq1"},{"post_id":"cir3l2poy007u9vnzkz0fazbn","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2pp6007z9vnz43lvk6kb"},{"post_id":"cir3l2pp1007w9vnzm43wazr0","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2ppa00819vnzeq5nd0rp"},{"post_id":"cir3l2pp3007y9vnzcmzkq064","category_id":"cir3l2p35000c9vnzc42wfmx8","_id":"cir3l2ppd00839vnzhcvh9oub"},{"post_id":"cir3l2pp700809vnz30nk7zux","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cir3l2ppe00849vnzatpi842f"},{"post_id":"cir3l2ppb00829vnzs4knnryg","category_id":"cir3l2p6r001n9vnzyebkvfy5","_id":"cir3l2ppf00859vnzjufiqgn6"},{"post_id":"cirkmhuey0000feq8waf1sctk","category_id":"cir3l2p47000q9vnzk57q4st6","_id":"cirkmhufg0001feq82zcrqh6l"}],"PostTag":[],"Tag":[]}}