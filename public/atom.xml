<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豪翔天下</title>
  <subtitle>Change My World by Program</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haofly.net/"/>
  <updated>2016-08-07T13:07:29.000Z</updated>
  <id>https://haofly.net/</id>
  
  <author>
    <name>haofly</name>
    <email>haoflynet@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看博客的人要的都是干货？</title>
    <link href="https://haofly.net/kanbokederendouxiangyaoganhuo/"/>
    <id>https://haofly.net/kanbokederendouxiangyaoganhuo/</id>
    <published>2016-08-07T12:35:20.000Z</published>
    <updated>2016-08-07T13:07:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天，一位朋友突然问我道，为什么我的博客最近更新的都是有关读后感的，而少了以前那么多的技术干货。很欣慰，居然有朋友一直在看我的站点，虽然并没有看到它想看的，但是他所要的技术干货我现在其实也有，只是并没有放在主站，而是放在<a href="https://wiki.haofly.net" target="_blank" rel="external">豪翔天下的wiki</a>这个二级域名下。至于为什么，我想是因为厌倦了很多博客的内容样式，厌倦了很多教程的复制粘贴，才有了把它们一分为二的想法。</p>
<p>看了一下百度统计和谷歌Analytics，博客从13年至今，统计在内的PV总共有20000+，单日最高PV居然有1300+，但是平日里也就10左右。虽然我有用统计工具，但是几乎不会去关注这些统计结果，一直以来我写博客都是为了自己在写，即使是技术干货，也是为了方便自己以后查阅。但是最近又有了一些新的方法，我认为，我现在可以宣传自己了。以前的我很自卑，觉得自己写的东西，那肯定都是别人写过的，而且自己写的东西更是没有多少技术深度的东西，但是事实好像并不是这样。我最骄傲的地方就是与身边的不一样，我每天都在浏览着很多科技博客、技术新闻，以为自己一直是站在技术前沿的人，也意识到自己学的东西范围非常广，自己的深度也不够，眼前有很多路，却不知道该往哪里走。这就像一个瓶子，明明上面就是瓶颈了，但就是怎么做也钻不出去，甚至在往下掉。<br>到新公司也快半年了，新同事们很好，也很牛逼，感觉大家简直就像游侠一样，不想去北上广争夺，只想待在重庆这个小江湖，说实话，他们的技能水平，在北上广绝对也能称得上高手。这半年里，因为有人在旁边指导，在代码质量方面成长得挺快，至少现在写代码的时候能明显感觉到自己以前写的代码是有多么的bad smell。在给别人开发的时候也感觉自己的代码量真的太少了。以前都是自己开发自己的东西，觉得有时候有点错误没什么，但是给别人开发的过程中，一点儿不满意人家就会指出来，而且让人伤心的是，这里面起码有百分之五十确实是自己代码质量的问题。路漫漫其修远兮，编程之路，我还有很长的路要走。</p>
<p>前几天翻了以前的博客，我去，居然没有今年的年初计划，不禁思考，我这半年是怎么浑浑噩噩过来的，接下来的半年又该怎样浑浑噩噩地过呢。浑浑噩噩这个词我不喜欢，你说我懒我会接受，我懒得开心，但是说我浑浑噩噩，说我不思进取，那肯定是不行的。在这里，补一下下半年的目标:</p>
<ol>
<li>熟练日语五十音(说了很多次要学日语，结果到现在连五十音都还不认识，要想装逼，至少要会说吧)</li>
<li>结交三个以上IT界朋友(年龄相仿+忘年)</li>
<li>博客日访问量10+(我承认，现在的博客日访问量还有零的)</li>
<li>年底公司评级达到P4及以上(这就要求在公司好好工作啦)</li>
<li>给父母做全身检查(哪怕再缺钱也得做)</li>
<li>SegmentFault声望达到1000以上</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天，一位朋友突然问我道，为什么我的博客最近更新的都是有关读后感的，而少了以前那么多的技术干货。很欣慰，居然有朋友一直在看我的站点，虽然并没有看到它想看的，但是他所要的技术干货我现在其实也有，只是并没有放在主站，而是放在&lt;a href=&quot;https://wiki.haof
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>MacTalk 人生元编程</title>
    <link href="https://haofly.net/renshegnyuanbiancheng/"/>
    <id>https://haofly.net/renshegnyuanbiancheng/</id>
    <published>2016-07-24T10:38:44.000Z</published>
    <updated>2016-07-24T13:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>我不知道有多少人因为池老师的一篇《先有Mac还是先有钱》而去买的苹果电脑，我现在也在用rmbp，但我可不是因为这个原因。从大一到大三，我那台宏碁的笔记本一直陪伴在我身边，经历了我各种摧残，更换了无数的操作系统(windows、linux系列的)，曾经最长用了半年的deepin单系统。虽说我自认为我用电脑一定比其他人用得好，毕竟一台三千多的电脑能用出人家五六千电脑的流畅度，但是依然不尽如我意。折腾累了，最终在大三结束刚进入实习期的我就找父母拿钱买了一台15年乞丐版的rmbp。刚好快一年了，这一年，mac带给我最大的感受就是我几乎没有任何感受…我已经完全忘记了去折腾电脑了，重装系统、电脑卡顿、木马病毒，统统都没有，我甚至都忘记了他们的存在了。买windows是买电脑送系统，买mac则是买系统送电脑。mac带给我们更多的是一种享受，我愿意为这样的服务买单。</p>
<p>作为一本talk mac的书籍，当然不乏众多的mac使用技巧，osx的强大，远比我当前的使用方式更强大，还需要我去探索。当然，现在的我已经不再是工具控了，因为我已经找到了一套自己认为最适合自己的工具，不用再为新工具的出现而浪费时间了。除了一些使用技巧外，池健强老师还谈了一些对编程的看法。让我了解了一个人，王小波，对他几乎没有什么认识，我想，我也该去拜读一下他的书了。</p>
<p>关于盗版，我的博客很早就有一篇《学生应该尽量购买正版书籍》，上个月从学校回来，收拾了一箱子舍不得卖的书，几乎全是在当当或者亚马逊上买的，这，也算是我对这些作者表达的基本的尊重。同时，在使用了mac过后，我的电脑／手机都与盗版彻底绝缘了。从此可以问心无愧地进行开发，也希望自己开发的东西有一天能让大众享受，能让用户主动掏钱。以下是池老师关于盗版的言论：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.盗版肯定是不对的，如果用了盗版软件，至少要有愧疚之心。如果你是个穷学生，学习软件开发用了盗版软件，谁忍心责备你呢？但大家千万不能无耻到开篇提到的那位父亲那样，不仅误己，而且误人。 2.程序员也是要吃饭的，你们每个人在自己的电脑上使用的每个软件都是程序员一行行的代码敲出来的。 3.在经济实力允许的基础上，尽可能用正版，尤其是程序员。程序员不支持程序员，还怎么指望别人呢？</div></pre></td></tr></table></figure>
<p>池老师也算是很多新一代程序员的领路人，不知道他现在怎么样了，不过，我算是真正走上了这条路了，一切，才刚刚开始。</p>
<h3 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h3><ul>
<li>反观观国内，很多公司把企业文化作为一种“秀”或“工具”，这就比较扯淡了。我觉得搞好企业文化，就两点： 1.利益，把公司利益和员工联系在一起，好员工钱得给足。 2.人文，少搞或不搞办公室政治，让员工自由一点、开放一点、平等一点，你会获得回报。 对于员工本身来说，不管企业是什么文化，</li>
<li>是啊，人怎么会有那么多时间学习那么多东西呢？其实这个不可能的设定，是在保证你有足够时间看电视、看美剧、刷微博、上网闲逛的基础之上的。只要把上述这些事情消费的时间减少一半，拿来持续学习，你就会发现学习效果是惊人的。</li>
</ul>
<ul>
<li>有一些穿高跟鞋走不到的路，有一些喷着香水闻不到的空气，有一些在楼宇里永远遇不到的人。</li>
</ul>
<ul>
<li>很多时候我们初入江湖，不知深浅，不知道什么事能做，怎么做，为什么要这么做，即使怯生生问了，得到的答复往往是，That’s just the way it’s done（我们向来这么做），于是我们慢慢也变得成熟、圆滑和懒惰，不再去从深层次思考『为什么要这么做？』因为别人也这么做。慢慢的，这些东西就成为了folklore（陈规陋习）。 一个坏的习惯或传统，可能延续十年、百年、千年，直到那个打破陈规陋习的人出现！ 提问、思考和努力工作，你就会抛弃这些陈规陋习，找到布满荆棘也满是鲜花的另一条鲜活的路。</li>
<li>经验告诉我，优秀的人才是那些一心想着产品的人，而不是关注管理和流程本身。</li>
<li>乔布斯认为，人活着是为了追求极致并分享美好的东西给人类，而不是做三流产品并赚钱。这样社会才能进步，让更多的人欣赏到更美好的东西。微软不过是另一个麦当劳，哈哈。</li>
<li>我以为我是个盖世程序猿，有一天我的程序会奔跑在千万台服务器上。我猜中了前头，可是我猜不着这结局……我们说，呸，你丫从头就错了！ </li>
<li>有人问，你为什么要从事IT技术研发工作？如果是乔布斯，可能的答案是改变世界；如果是人生导师，可能的答案是跟随你心。如果是我回答呢，答案就是如果不从事这个行业的话呢，我还真不知道该如何养家糊口</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不知道有多少人因为池老师的一篇《先有Mac还是先有钱》而去买的苹果电脑，我现在也在用rmbp，但我可不是因为这个原因。从大一到大三，我那台宏碁的笔记本一直陪伴在我身边，经历了我各种摧残，更换了无数的操作系统(windows、linux系列的)，曾经最长用了半年的deepi
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>OAuth和SSO</title>
    <link href="https://haofly.net/oauth-and-sso/"/>
    <id>https://haofly.net/oauth-and-sso/</id>
    <published>2016-06-16T06:08:00.000Z</published>
    <updated>2016-08-04T12:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">理解OAuth 2.0</a></p>
<p>目前网络上的数据传输普遍基于HTTP/HTTPS，然而，他们都是无状态的协议，也就是说你本次的请求与下一次的请求是毫无关系的，为了使得我们能够保存用户的状态，于是诞生了cookie，诞生了session，诞生了token，当然，这三者的概念其实都差不多，总体思想就是，在第一次请求过后，给用户生成唯一的一个标识，用户在下一次请求时，携带这个标识，这样服务端就能通过它来判断用户的状态以及合法性。</p>
<p>注意: OAuth确实增加了安全性，但是也增加了应用的复杂性，对于安全要求没那么高的应用，依然可以使用简单的加密算法进行双向加解密认证。</p>
<h2 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h2><p>OAuth主要用于社会化登录，仅仅需要一个系统来存储用户的信息，其他的系统或者第三方系统均可以使用，其他系统不需要维护自己的用户系统，免去了用户注册账号的麻烦，并且用户的密码等重要信息都集中保存在信任方，提高了安全性。</p>
<p>根据阮一峰的博客，客户端获取授权有以下几种认证方式:</p>
<ol>
<li>授权码模式（authorization code）: 是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。</li>
<li>简化模式（implicit）: 不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</li>
<li>密码模式（resource owner password credentials）:用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。</li>
<li>客户端模式（client credentials）:指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</li>
</ol>
<p><img src="http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-1.png" alt="举个例子"><br>具体流程(感觉不用图也能说清楚呀):</p>
<ol>
<li>第三方站点获取未授权的Request Token</li>
<li>获取用户授权的Request Token</li>
<li>用授权的Request Token换取Access Token</li>
<li>通过Access Token访问该用户的资源</li>
</ol>
<p>另外，对于客户端的每一次获取token的请求，都对应着一定的权限，比如微博的第三方认证，通常仅有获取用户基本信息的权限，或者如github的权限就更加详细一点，包括获取基本信息，公开库的访问权限和私有库的访问权限(github的认证请求权限使用的是<code>X-OAuth-Scopes</code>作为参数放在请求头部，例如<code>user</code>，表示能获取用户的所有信息，而<code>user.email</code>则表示只能获取用户的邮箱)。</p>
<p>对于第三方应用，仅需要维护token的值，一般来说，有一种用户基本信息表，多张token存储表对应着多个公开应用。例如接入了微博的第三方可以有这么一张表: (id, user_id, weibo_id, weibo_access_token, weibo_expires)</p>
<p>注: 社会化登录的回调地址(callback_url)与返回地址(next)的区别，回调地址指用户点击第三方登录过后，由资源服务器回调到的地址，而返回地址则是用户欲访问的地址，一般为应用自己的首页，但也有可能是用户直接知道url后想去的地址，这时候可以在请求的时候带上next参数，然后由资源服务器原样返回过去。</p>
<p>最后，几乎所有关于OAuth的文章都会遗漏的一点，那就是资源服务器和认证服务器之间的认证。当访问者获取了token过后，向资源服务器发送请求时，资源服务器肯定会向认证服务器验证这个token的合法性，这也是一个很危险的步骤，在实际项目中，我将token与访问者的appkey一起进行认证，并且作为认证服务器同样要对资源服务器的认证请求一起认证。具体可参考<a href="http://stackoverflow.com/questions/12296017/how-to-validate-an-oauth-2-0-access-token-for-a-resource-server" target="_blank" rel="external">stackoverflow</a></p>
<h2 id="SSO-单点登录"><a href="#SSO-单点登录" class="headerlink" title="SSO(单点登录)"></a>SSO(单点登录)</h2><p>解决的是跨域的用户校验问题，常用于一个公司内部有多个子网站，然后提供统一的登录，一个站点登录过后其他站点不用重复登录。多用于存在多个子系统的公司。<br>具体流程:</p>
<ol>
<li>用户请求任意一个子站的login页面</li>
<li>用户输入用户名密码，子站将它传递给认证中心SSO Server</li>
<li>SSO Server验证成功后</li>
</ol>
<p>虽然SSO和OAuth是不一样的东西，但是我认为SSO只是OAuth的一种简化模式，可以归为OAuth的一类。通常由于子系统的域名不一样，不方便设置各自的cookie，于是这里又有两种解决方案:</p>
<ol>
<li>使用公共加解密函数进行双向加解密(加密字符串直接放在GET请求中)</li>
<li>同样使用公共的加解密函数，但是是使用JSOPN解决跨域问题(用户登录子应用时，会带上父应用域名下的cookie访问父应用提供的JSONP接口，父应用验证登录状态，最后返回加密后的用户信息)</li>
</ol>
<p>例如，本人在一个项目中所使用的认证流程:</p>
<p><img src="http://7xnc86.com1.z0.glb.clouddn.com/oauth-and-sso-2.png" alt="图片"></p>
<h2 id="签名算法的设计"><a href="#签名算法的设计" class="headerlink" title="签名算法的设计"></a>签名算法的设计</h2><p>无论是OAuth或是SSO都涉及到认证的过程，一般都不推荐使用可逆的加密算法，而使用单向的加密算法，只要双方对数据进行加密后的结果一致就表示该请求是合法的。参考网上很多的签名算法，最后总结了一下使用最广也是最安全的一种签名算法步骤:</p>
<ol>
<li>将请求的参数转换为’key=value’形式的字符串，如: “k1=v1”, “k2=v2”</li>
<li>将格式化后的字符串以字典升序进行排序，然后拼接在一起，如: “k1=v1k2=v2”</li>
<li>在拼接后的字符串的前后加上Secret Key，如：”keyk1=v1k2=v2key”</li>
<li>对拼接后的字符串进行MD5加密得到最终的结果</li>
</ol>
<h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">apiSign</span><span class="params">(parameters, secret)</span>:</span></div><div class="line">	keys = list(parameters.keys())</div><div class="line">	keys.sort()</div><div class="line"></div><div class="line">	parameters_str = <span class="string">"%s%s%s"</span> % (</div><div class="line">		secret,</div><div class="line">		str().join(<span class="string">'%s%s'</span> % (key, parameters[key]) <span class="keyword">for</span> key <span class="keyword">in</span> keys),</div><div class="line">		secret)</div><div class="line">	<span class="keyword">return</span> hashlib.md5(parameters_str.encode(<span class="string">'utf8'</span>)).hexdigest()j</div></pre></td></tr></table></figure>
<h3 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">apiSign</span><span class="params">($parameters, $secret)</span></span></div><div class="line">&#123;</div><div class="line">	$str = <span class="string">''</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (gettype($parameters) === <span class="string">'array'</span>) &#123;</div><div class="line">		ksort($parameters);</div><div class="line">		<span class="keyword">foreach</span> ($parameters <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">			$str .= $k.$v;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">elseif</span> (gettype($parameters) === <span class="string">'string'</span>) &#123;</div><div class="line">		$str = $parameters;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	$str = $secret.$str.$secret;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> md5($str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">apiSign</span><span class="params">(List&lt;NameValuePair&gt; nvps)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, IOException </span>&#123;</div><div class="line">    List&lt;String&gt; nvs = Lists.newArrayList();</div><div class="line">    <span class="keyword">for</span> (NameValuePair nvp: nvps) &#123;</div><div class="line">        <span class="keyword">boolean</span> noSignValue = nvp == <span class="keyword">null</span> || nvp.getValue() == <span class="keyword">null</span> ||</div><div class="line">                SIGN_EXCEPTIONS.contains(nvp.getName());</div><div class="line">        <span class="keyword">if</span> (noSignValue) <span class="keyword">continue</span>;</div><div class="line">        nvs.add(String.format(<span class="string">"%s=%s"</span>, nvp.getName(), nvp.getValue()));</div><div class="line">    &#125;</div><div class="line">    Collections.sort(nvs);</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (String nv: nvs) sb.append(String.format(<span class="string">"%s"</span>, nv));</div><div class="line">    String encodeSource = String.format(<span class="string">"%s%s"</span>, sb.toString(), APP_SECRET);</div><div class="line">    <span class="keyword">return</span> MD5Util.MD5Encode(encodeSource, ENCRYPT_CHARSET).toLowerCase();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前网络上的数据传输普遍基于HTT
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>《把时间当作朋友》——别试图去管理时间</title>
    <link href="https://haofly.net/bashijiandangzuopengyou/"/>
    <id>https://haofly.net/bashijiandangzuopengyou/</id>
    <published>2016-06-05T13:56:05.000Z</published>
    <updated>2016-06-05T14:29:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>说实话，李笑来的这本《把时间当作朋友》确实绕过去绕过来，把我饶得有点晕了，但是书中的主要观点我还是非常认同的。把时间当作朋友。从来都只听过如何去管理时间，却从来没听说过要去和时间做朋友。上帝给每个人的时间都是一样的，不是说你想怎么管理就怎么管理，从小学到大学到工作，每次考试前你不都有很多的复习计划，每次假期前不都有很多的出游计划吗，但是，有多少我们真正实现过呢。很多时候计划越详细，我们反而越不会执行。为什么？因为我们不了解时间，也不了解自己。就像你想和一个人做朋友一样，你们都不互相了解，非要在一起，那也是互相折磨而已。所以，要想与时间和睦相处，首先是要了解自己，自己是一个怎么样的人，自己喜欢做什么样的事情，什么样的事情会让自己有动力去做，到底为什么而活？</p>
<p>没有人不懒惰，没有人不爱做计划，只是那些成功的人普遍都是做了计划就立马行动的，这真的真的是我目前为止发现的最大的缺点。想太多，做得少。基本上从高中就开始意识到这个缺点了，也一直在改，在改的过程中又发现了另一个缺点，那就是只要我心里有一块石头，就不能放下它去做其他的事情了。我在外面实习都快一年了，这一年里感觉还没我大一一个暑假成长得快，我知道自己遇到了一个瓶颈，也做了很多的计划去冲破它，但就是碍于学校里数不清的杂事，一直没放心大胆地去做。最后导致两边都互相拖着，然后两边都没做好。其实专注于一件事没有什么不好，但是心中担心一件事情，就直接把那件事情做了就好呀，这有什么好犹豫的呢，有什么好纠结的呢。那件事情制约着我，我干嘛就不把他做了呢，一定要拖到最后。不过还好，毕业答辩做了充足的准备，还是顺利通过了。在昨天那个不存在的日子里进行的答辩，而且在答辩前几天我就已经开始我的全栈实践之路了。马上进入社会，希望能真的和时间做好朋友，然后和它并肩作战。</p>
<h2 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h2><p>当你把时间花在一个人身上的时候，相当于在他的身上倾注了你生命的一段，不管最终结果如何，反正，那个人、那件事都成了你生命的一部分——不管最后你是喜欢还是不喜欢。</p>
<p>一个人遗忘痛苦的能力特别强的一个具体表现就是，这个人会很轻易地原谅自己。</p>
<p>往往并不是有兴趣才能做好，而是做好了才有兴趣。</p>
<p>浪费生命、虚度年华的人，有个共同的特征——他们拼命想控制自己完全不能控制的，却在自己真正能掌控的地方彻底失控。</p>
<p>当我们不停地鼓励所有人的时候，最大的受益者其实是我们自己，因为最终我们会发现，自己开始进入一种他人无法想象的状态，成为一个不需要他人鼓励的人。</p>
<p>心智真正成熟的人在一些情况下能够做到无须亲自经历，仅凭思考就得到深刻的体会。</p>
<p>所谓的幸运，就是当你准备好了的时候，机会来了。</p>
<p>你比别人强一点根本没用，真正有用的是你比别人强很多很多。</p>
<p>学东西前不用定义一定要有用——别觉得知识现在没用就拒绝去学它。</p>
<p>人是没办法管理时间的，时间也不听从任何人的管理，它只会自顾自一如既往地流逝。”管理时间”只不过是人们的一厢情愿而已。</p>
<p>这些人其实并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。</p>
<p>本科教育之”本”在于培养学生的自学能力。从理论上讲，一个人本科毕业之后，应该有能力自学他所需要的任何知识。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说实话，李笑来的这本《把时间当作朋友》确实绕过去绕过来，把我饶得有点晕了，但是书中的主要观点我还是非常认同的。把时间当作朋友。从来都只听过如何去管理时间，却从来没听说过要去和时间做朋友。上帝给每个人的时间都是一样的，不是说你想怎么管理就怎么管理，从小学到大学到工作，每次考试
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>Run for Fun，记第一次迷你马拉松之旅</title>
    <link href="https://haofly.net/run-for-fun/"/>
    <id>https://haofly.net/run-for-fun/</id>
    <published>2016-05-27T13:51:53.000Z</published>
    <updated>2016-05-27T14:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我顺利地完成了人生第一次的迷你马拉松。</p>
<p>其实在去年，我就最高跑过七公里，当时因为心情失落，所以闷着头跑，一直跑到手脚发麻才停下来。开始实习过后，我就几乎没有跑过步了。在上个公司是下班过后尽量提前几个站下车，然后走着回家。来了现在公司过后好一点，每天能够骑自行车上下班了。所以从体力上我还是觉得自己可以的。不过为了保险起见，在前天我去了石子山体育公园试跑了一下，感觉还不错，只不过跑完了过后腰酸背疼的。直到几天都还在痛。</p>
<p>今天六点钟，我们运维团的几个朋友就起床了，其实是听错了时间，以为8点开跑，结果是8点集合，10点开跑。到那儿过后天一直飘着雨，不过南滨路挨着嘉陵江，风景真的好，更好看的是…如图所示<br><img src="http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_0.JPG" alt="图片"><br>运维取经团的几个朋友：<br><img src="http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_1.JPG" alt="图片"><br>刚开始跑时，我突然感觉自己脚有点抽筋，于是放慢了一下脚步，之后才渐渐地匀速前进，但是主办方的路标是在是坑人，按常理来说应该是一公里一个提示，结果，它一个公里到两公里中间有一个提示，但是却没提示这时候的距离，只能让人以为这是1.5公里了，并且在折返点离2.5公里的路标是在太远，所以我们预计，总的里程大概在六公里多。折返跑有一个好处是，你能看到最前面的几个人，也能看到最后面的一群人。最后的一百米我还小小的冲刺了一下。其实我每次跑步最后都能够有冲刺的力气，但就是在前面无法提速，每次都是那样的速度，下次比赛我一定要克服这个问题，争取跑进半小时。今天的成绩大概在三十五六分钟。看看中途的我(白衣服短裤那个):<br><img src="http://7xnc86.com1.z0.glb.clouddn.com/run-for-fun_2.JPG" alt="图片"></p>
<p>总之，总体感觉真的很爽，虽然这次的比赛都是给公司的员工参加的，也就是说大家尽量在宣传自己的公司，不过，好多好多的人还是跑了个开心，run for fun，这才是比赛的宗旨。仔细想想自己为什么喜欢跑步呢，我想应该是因为跑步这个运动项目，每个人到达终点的距离一样，每个人的路线也都一样，只要坚持就一定可以到达终点，无论名词高低，到达终点后你都会如释重负，心胸特别舒畅。不像其他的运动项目，有很多的技巧、必须经过很多的练习或者场地总是有所限制。</p>
<p>随着马拉松的落幕，我的毕业论文也经过了查重，周末就上传毕业论文了，然后下周就答辩了，希望一切顺利，然后，就可以开始我的全栈工程师实践之旅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我顺利地完成了人生第一次的迷你马拉松。&lt;/p&gt;
&lt;p&gt;其实在去年，我就最高跑过七公里，当时因为心情失落，所以闷着头跑，一直跑到手脚发麻才停下来。开始实习过后，我就几乎没有跑过步了。在上个公司是下班过后尽量提前几个站下车，然后走着回家。来了现在公司过后好一点，每天能够骑
    
    </summary>
    
      <category term="平凡之路" scheme="https://haofly.net/categories/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>《我依然爱你，我只是不喜欢你了》——谁都不知道爱情是什么样</title>
    <link href="https://haofly.net/woyiranainiwozhishibuxihuannile/"/>
    <id>https://haofly.net/woyiranainiwozhishibuxihuannile/</id>
    <published>2016-05-14T10:19:29.000Z</published>
    <updated>2016-05-14T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>爱情是甜美的？爱情是苦涩的？花花世界，谁又能说得清呢。</p>
<p>《我依然爱你，我只是不喜欢你了》这本书是无意间在以前一位喜欢过的女生的一篇微博看到的，光看标题就有一种台湾的那种小清新爱情片的味道，看了一下简洁，是讲爱情的不是讲分手的爱情的，所以果断入手，毕竟和女朋友还处在热恋期，不知道为什么，我们俩热恋期咋这么长呢。</p>
<p>全书是由几十个小小的爱情故事汇聚而成，不知道真的是作者身边朋友的经历还是有很多朋友主动向作者倾诉的呢，我也好希望我身边能有一位情感专家，有什么心里问题她都能迎刃而解，什么心里话都能对她说，但是至今我的朋友圈也没出现过这样的人。作为书评，在这里我并不打算把我对爱情的理解写出来，因为也许可能大概我也写不出来，有些东西，在心里，就够了，是万万不能用我那笨拙的文字功底写出来的。另外，看了看豆瓣上的评分，其实还算不错，但是下面的有些评论我就不大赞成了。平淡、口水文，对于爱情来说，这样子有错吗？如果真的觉得平淡就觉得这是一本烂书，那我是该说你们不懂文学，还是该说你们不懂爱情呢？至少在我，一看到这个书名，就觉得这就是一本平平淡淡的书，就是一本贴近生活的书。这本书也绝不是一本只讲故事不走心的故事集，应该说它是很走心的，谁都可以深陷进那一个个的故事，也谁都可以从中体会到什么。</p>
<p>小井岩(作者)是个温柔的人，只有温柔的人，人们才会想他倾诉吧。很多时候，我也想做一个温柔的男朋友。虽然我比我女朋友小，我也很幼稚。和她刚在一起的时候就觉得她是那种很有气质型的，没想到，现在已经被我”调教“成一个每天都会向我撒娇的可爱女孩子了，虽然我也每天撒娇。她很好，我是她第五个男朋友，她是我第三个女朋友，我们谁都不知道会不会一直走下去，但又一直都朝着一直走下去的目标努力着。不仅我们过去爱的是人渣还是真的错过，过去的都已经翻篇了，就像我最开始说的以前喜欢过的那个女生，我现在女朋友也知道我以前喜欢过她，但是女朋友并不会阻止我和她聊天，说了半天，我到底想说什么呢，我也不知道。反正，米娜，有爱到来的时候就好好爱吧，不要刻意去回避，也不要刻意去追逐，一切随缘，不矫揉造作的爱，才是最真最纯的爱。(不要问我为什么不多谈谈书中的内容，因为看了大半年了吧，已经忘记了，只能从kindle里的笔记中找一点点当时的体会)</p>
<h4 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h4><p>我知道我已离开你的世界，也知道，彼此不再有交集，然而心中某块地方，始终无法抹去存在的痕迹。我依然爱你，我只是知道，自己不能再像以前那样喜欢你了。 依然祝你，平安幸福。</p>
<p>“你知道年轻的时候穷最大的问题是什么吗？”<br>“什么？”<br>“以为所有得不到的一切都是穷的错。眼睛盯着遥远的地方看不到身边一朵花的美丽。”</p>
<p>对那时的我来说，爱情是什么并不重要，就像我知道苹果就是苹果，而不需要知道它是蔷薇科还是落叶乔木；就像当我遇见你，我就知道遇见了爱情。</p>
<p>最温暖的相处模式，就是两个人在一起的时候，有一种自然而然的舒适氛围，能够消解心中的那些戾气，恢复成最放松而且淡然的自己。没有强烈的惴惴不安，也没有莫名的看不顺眼，没有所有那些消耗神经的累的东西。只要我知道你在，一切就都很好。</p>
<p>真的有些人，让你相信人是有上辈子的，不然为何一相见就可以自然而然跳过试探、了解、熟悉的人际程序直接成为那个直达灵魂的亲密之人。</p>
<p>做个称职的前任吧，不纠缠，不打扰，不撩拨。心里那些残存的想念，是怀念和感激。放下心中那多愁善感的郁金香，才会开出畅然伸展的蓝莲花。</p>
<p>我觉得真正爱一个人的表现肯定是努力使自己和对方变得更好，怎么会是拉着对方一起下沉呢？</p>
<p>我不认为一辈子只爱一个人是件可惜的事，也不认为一辈子爱过很多人就是一件不道德的事。</p>
<p>秒速五厘米间，樱花蹁跹了看客；人生聚散离合，伊人明媚了岁月。</p>
<p>如果我们费尽所有心力，都不能在那个心爱的心上留下一个深一点的痕迹，这不是对方的错，也不是你的错。因为不是你不努力，而是对方跑得太快，飞得太高。</p>
<p>感动不是爱情，爱情根本不需要这么累，你追我跑，那是狩猎，我又不是猎物！</p>
<h4 id="最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释"><a href="#最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释" class="headerlink" title="最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的解释"></a>最后献上知乎的几位朋友对”我爱你，我只是不再喜欢你了”的<a href="https://www.zhihu.com/question/31681497" target="_blank" rel="external">解释</a></h4><p>《One Day》里安妮海瑟薇的一句台词 我无法控制自己对你的难以忘怀 可是我关于你的一切已经再也没有了期待。    ——<a href="https://www.zhihu.com/people/peng-si-ya" target="_blank" rel="external">Pengsiya</a><br>我会想起我们的过去，却不会再去想我们的未来。    ——<a href="https://www.zhihu.com/people/bing-huang-ma-luan-66" target="_blank" rel="external">兵荒马乱</a><br>“不介意孤独，比爱你舒服”    ——<a href="https://www.zhihu.com/people/bai-zhou-12-64-95" target="_blank" rel="external">江白粥</a><br>我还是曾经的那个我，你已经不是曾经的那个你了。 —— <a href="https://www.zhihu.com/people/gui-mu-zhi" target="_blank" rel="external">鬼木知</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爱情是甜美的？爱情是苦涩的？花花世界，谁又能说得清呢。&lt;/p&gt;
&lt;p&gt;《我依然爱你，我只是不喜欢你了》这本书是无意间在以前一位喜欢过的女生的一篇微博看到的，光看标题就有一种台湾的那种小清新爱情片的味道，看了一下简洁，是讲爱情的不是讲分手的爱情的，所以果断入手，毕竟和女朋友还
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>《暗时间》</title>
    <link href="https://haofly.net/anshijian/"/>
    <id>https://haofly.net/anshijian/</id>
    <published>2016-05-08T12:06:20.000Z</published>
    <updated>2016-05-09T23:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近真的太忙，但是再忙我也强迫自己抽出一些碎片时间来阅读，所以写书评也是必要的，因为，一本书不写书评，我根本就看不下去另一本书。对了，其实前几天还看过一本书叫《程序员的数学思维修炼》，这本书几乎是直接翻过去的，因为里面的内容基本上是给没上过大学的人看的，所以也就没有写书评的必要了。</p>
<p>《暗时间》是本与效率有很大关系的书，有很多套路，但是也不乏新奇之处，很多章节虽然啰嗦而且段落太长(不知道是不是我kindle显示的原因)，但是书中对于每一个结论的得出，都是经过了层层推敲，循序渐进地引导我们进入作者的思维中去。而不是如其他效率书一样，上来就是一个结论，然后教我们步骤。整体感觉上，这本书还是挺不错的，可以给四分。对于“暗时间”的概念，我是觉得作者在这里并不是标题党，确实作者的“暗时间”并不仅仅是指传统意义上的碎片时间。</p>
<p>更深层次地讲，此书，并不是完全讲时间管理，而更多的是一种引导，引导我们认知、学习，文中提到很多关于学习的方法以及很多学习不好的方法对我来说都受益匪浅。对于时间管理，我现在使用的是番茄工作法，基本上解决了碎片时间的利用率问题和工作休息切换的问题；但另一方面，天秤座最主要的特点，犹豫不决，我在这一点上依然会浪费很多的时间，而且总是给自己和身边的人造成困扰。我想或许经历得更多，我就能有更多的果断和从容，但是又该怎样在有限的时间里比普通人经历更多呢？</p>
<p>书中关于学习算法那个章节我的印象是十分深刻的，因为我也曾经参加过ACM比赛，也曾经疯狂地刷题，虽然最终放弃了，但是那段一心钻研算法的日子真心值得回忆。看了该书，我仿佛茅塞顿开，仔细想想，曾经的很多算法书，特别是我们的教材上面讲算法，包括数学的公式证明，在引导我们的中途几乎都会突然来一个转折，“不妨在这里…”这样的坑我以前也踩过很多次，特别是在啃那部《算法导论》的时候，当时我就一直想弄明白，这里凭什么就突然要这么做了。事实上，正如作者所说好多的书籍都弱化了思考的这一环节，事实上，我猜，那些书的作者可能也没理解到这样转折的理由，如果真要把思考的过程全部加起来，那么随便一个K(kan)M(mao)P(pian)算法也足矣成一本书了。在刷OJ的那几个月里，我记住了很多算法，也记不住很多算法，但现在仔细想来，基本上能记住的算法，我都能清清楚楚地知道那个算法是怎么演变而来的以及为什么要用那个算法和什么时候用那个算法。</p>
<p>书中还提到几个日常中非常实用的思维训练以及时间管理方法：  </p>
<ul>
<li>设置自己的进度条，将目标分割成一个个里程碑，再讲里程碑分割为一个个TODO list列表</li>
<li>如果有什么难题困扰你了，那就在睡觉前一直想，你永远不知道大脑在你睡着的时候会怎么奇迹般地解决这个问题。这点相信很多人都是有实际体会的吧。 </li>
<li>走路睡觉吃饭都可以思考，当你完完全全陷入一个问题的时候你就会知道你突然多了好多的时间</li>
<li>时常反省和注意自己的思维过程。尤其是当遇到无法理解或解决的问题之后，最需要把原先的思维过程回顾一遍，看看到底是哪个过程被阻塞住了妨碍了理解。</li>
</ul>
<p>后记：写完了整个书评，突然觉得这本书比我之前认为的还要有意义得多，我现在可以给它五星了。</p>
<h2 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h2><p>你会在这本书当中看到的一个重复出现的现象就是自学，大规模的自学，逃课自学，上网找书自学，程序员行业是最适合自学的行业，网络是程序员的天堂，需要的资源、工具，比课堂上的多出何止百倍，如果说还有一个学科，并不需要传统的教育就可以成才，估计非程序员莫属了。作为程序员如果没有查过wikipedia，没有看过几本原版电子书，没有在国内外主要邮件列表里面提过问题吵过架，没有用技术博客记录学习的独特体会，没有订阅技术牛人们的博客，怎么好意思说身在这个行业呢？</p>
<p>利用走路和吃饭的时候思考，还有睡觉前必然要弄一个问题放在脑子里面，在思考中迷糊入睡。发现这样一来往往在不知不觉中多出来大量的思考时间。将思考成为习惯还有一个很大的好处–避免焦虑。</p>
<p>尽量避免琐事骚扰，不重要的事情能不做就不做。有时候，紧急的事情往往只是当事人觉得必须马上做完才显得紧急或者干脆就是紧他人之急，最糟糕的就是纯属性格上原因觉得每件事情都得第一时间完成，很多看上去紧急的事情实际上并不是真的”不能再拖了”，有的干脆就并不需要或值得去做。有很多事情都是可以先放一放甚至完全let go的，否则的话就整天被所谓”紧急”的事情牵着鼻子走了。</p>
<p>有一句话说：看一个人，只要看他读的书和见的人。还是很有道理的，这两者是一个人成长中最有价值的信息来源。</p>
<p>一个你不明白其证明的定理在我看来比不知道这个定理还要糟糕，因它给你造成一种懂了的错觉。与看定理必看证明类似，看一个问题的解法，必然要看解法所诞生的过程，背后是否隐藏着更具一般性的解决问题的思路和原则。否则一个解法就只是一个问题的解法，跟背口诀一样。即，知道了算法是怎样一步步被推导出来的，我们就一下拥有了大量的记忆提取线索：对算法发现过程中的任何一个关键步骤（尤其是本质）的回忆都可能使我们能够自己动手推导出剩余的内容</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近真的太忙，但是再忙我也强迫自己抽出一些碎片时间来阅读，所以写书评也是必要的，因为，一本书不写书评，我根本就看不下去另一本书。对了，其实前几天还看过一本书叫《程序员的数学思维修炼》，这本书几乎是直接翻过去的，因为里面的内容基本上是给没上过大学的人看的，所以也就没有写书评的
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>从Tornado谈异步与非阻塞</title>
    <link href="https://haofly.net/tornado-asynchronous/"/>
    <id>https://haofly.net/tornado-asynchronous/</id>
    <published>2016-04-11T15:59:57.000Z</published>
    <updated>2016-04-13T07:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做毕业设计的时候，由于后端有一个耗时任务，所以想到了异步，又由于长期使用Python，进而想到了Tornado，然后，我就半个月没做毕设了，说来全是坑啊。在了解异步与阻塞的原理之前我就盲目地想从代码层面去实现，这样只会浪费时间。所以这里我就先描述一下我对这几个概念的理解。</p>
<h3 id="异步与同步：是消息通信机制的层面"><a href="#异步与同步：是消息通信机制的层面" class="headerlink" title="异步与同步：是消息通信机制的层面"></a>异步与同步：是消息通信机制的层面</h3><p>采用异步的时候，程序并不关心该操作的结果，所以并不会有返回结果，比如ajax，一般会给异步操作赋予一个回调函数，通过这个回调函数对结果进行处理，而不是直接将结果返回给外部(在ajax如果return结果则会是一个null值)</p>
<h3 id="阻塞与非阻塞：指程序在等待调用结果时的状态"><a href="#阻塞与非阻塞：指程序在等待调用结果时的状态" class="headerlink" title="阻塞与非阻塞：指程序在等待调用结果时的状态"></a>阻塞与非阻塞：指程序在等待调用结果时的状态</h3><p>如果是阻塞，则程序会一直等待程序返回结果，如果是非阻塞，则不会等待，而继续执行下面或者其他的代码了。</p>
<h3 id="阻塞式IO"><a href="#阻塞式IO" class="headerlink" title="阻塞式IO"></a>阻塞式IO</h3><p>耗时型任务一般分为两类：CPU耗时型任务和IO耗时型任务。CPU指一般的代码运算执行过程，IO一般分为两大类，计算型IO和阻塞式IO。如果仅有一个线程，那么同一时刻只能有一个任务在计算，但如果是阻塞式IO，它可以让它先阻塞掉，然后去计算其他的任务，等到内核告诉程序那边没有被阻塞了就、再回到之前的地方进行之后的运算。</p>
<p>所以，在了解了这些概念过后，我就知道了为什么要发挥tornado的异步特性就得依赖异步库(<a href="https://github.com/tornadoweb/tornado/wiki/Links" target="_blank" rel="external">Tornado官方提供的第三方异步库</a>)，而不是随便一行代码都能变成异步非阻塞式的代码。比如我试验时使用的一个sleep函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def sleep(self):</div><div class="line">    for i in range(100000000):</div><div class="line">        if i % 100000 == 0:</div><div class="line">            print(i)</div><div class="line">    self.set_cookie(&apos;setting&apos;, &apos;hao&apos;)</div></pre></td></tr></table></figure>
<p>看吧，这是一个计算型任务，由于tornado是单进程单线程，所以无论怎么做也不可能实现在访问该请求的时候访问其他请求，因为CPU只能执行当前任务，其他请求必须等到这个请求结束后才能成功，这也是为什么部署tornado的时候几乎都是用nginx+多实例事实上，同理，其他的框架基本上都是需要nginx、apache等配合才能同时服务于多个请求的。Tornado的异步库，几乎都是用来进行阻塞式IO任务的，所以只有他们才能发挥其异步特性。</p>
<p>Tornado的异步实现就是将当前请求的协程暂停，等待其返回结果，在等待的过程中当前请求不能继续往下执行，但是如果有其他请求(同样是一个协程)，只要不也是阻塞式IO，那么就会直接去处理其他的请求了。</p>
<p>当然，包括nodejs的异步等，这些统统都是有历史原因的，JavaScript和Python在发展之初都只支持单进程单线程，即使使用多线程技术最多也只能利用到100%的单核，多核在这里似乎并不使用，而如果要使用多进程变成，光靠框架是做不到的，必须自己根据实际需求来处理多进程之前的数据共享、资源竞争等问题。所以，在我的理解里，如果能直接利用多线程编程就不需要用服务端异步，毕竟，多线程的发明本身也是为了解决阻塞式IO的问题。</p>
<h2 id="多线程实现异步、非阻塞、并行请求、并行计算"><a href="#多线程实现异步、非阻塞、并行请求、并行计算" class="headerlink" title="多线程实现异步、非阻塞、并行请求、并行计算"></a>多线程实现异步、非阻塞、并行请求、并行计算</h2><p>其实我认为多线程相比于异步非阻塞有很大的优点，不可否认，多线程在线程切换上存在开销，并且在资源竞争上需要写更多的逻辑，稍微控制不好就会导致服务出错，然而，多线程在处理并行任务上有先天的优势，这一点光看名字就看得出来，下面介绍Tornado的多线程和Flask多线程的用法，其中Tornado的多线程是指由程序将当前请求中的代码交由其他线程处理，而flask的多线程就是类似apache服务器，另起一个进程来处理请求。</p>
<p>注意：两者都可以使用global来引用全局变量</p>
<h4 id="Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie"><a href="#Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie" class="headerlink" title="Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie"></a>Tornado实现：当前请求会立马返回一个结果并断开当前http连接，所以不能在这里设置cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">import tornado.ioloop</div><div class="line">import tornado.web</div><div class="line">import time</div><div class="line">from concurrent.futures import ThreadPoolExecutor</div><div class="line">import tornado.httpclient</div><div class="line">from tornado.concurrent import run_on_executor</div><div class="line"></div><div class="line">class Executor(ThreadPoolExecutor):</div><div class="line">	_instance = None</div><div class="line"></div><div class="line">   	def __new__(cls, *args, **kwargs):</div><div class="line">       	if not getattr(cls, &apos;_instance&apos;, None):</div><div class="line">           	cls._instance = ThreadPoolExecutor(max_workers=10)</div><div class="line">       	return cls._instance</div><div class="line"></div><div class="line">class SleepHandler(tornado.web.RequestHandler):</div><div class="line">   	executor = ThreadPoolExecutor(10)</div><div class="line"></div><div class="line">   	def get(self):</div><div class="line">     	tornado.ioloop.IOLoop.instance().add_callback(self.sleep) # 相当于丢到下一个时间循环去  </div><div class="line">       	self.write(&quot;when i sleep&quot;)		# 请求会立马返回这个值并断开连接</div><div class="line"></div><div class="line">   	@run_on_executor</div><div class="line">   	def sleep(self):</div><div class="line">       	for i in range(100000000):</div><div class="line">           	if i % 100000 == 0:</div><div class="line">               	print(i)</div><div class="line">       	self.set_cookie(&apos;username&apos;, &apos;hao&apos;)</div><div class="line"></div><div class="line">       	print(&quot;yes&quot;)</div><div class="line">       	return 5</div><div class="line"></div><div class="line">class TestHandler(tornado.web.RequestHandler):</div><div class="line">   	def get(self):</div><div class="line">       	if not self.get_cookie(&apos;username&apos;):</div><div class="line">           	self.write(&apos;没有&apos;)</div><div class="line">       	else:</div><div class="line">           	self.write(&apos;有&apos;)</div><div class="line">           	</div><div class="line">application = tornado.web.Application([</div><div class="line">	(r&quot;/test&quot;, TestHandler),</div><div class="line">	(r&quot;/sleep&quot;, SleepHandler),</div><div class="line">	], debug=True)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">   	application.listen(8888)</div><div class="line">   	tornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>
<h4 id="flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie"><a href="#flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie" class="headerlink" title="flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie"></a>flask实现：直接在启动时添加参数，当前请求不会立马返回一个返回值，会一直处于连接状态，所以可以设置cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from flask import Flask,request,make_response</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def hello_world():</div><div class="line">	username = request.cookies.get(&apos;username&apos;)</div><div class="line">   	if username is None:</div><div class="line">      	return &apos;没有&apos;</div><div class="line">   	else:</div><div class="line">       	return &apos;有&apos;</div><div class="line">   	return username</div><div class="line"></div><div class="line">@app.route(&apos;/s&apos;)</div><div class="line">def sleep():</div><div class="line">   	for i in range(100000000):</div><div class="line">       	if i % 100000 == 0:</div><div class="line">			print(i)</div><div class="line">	resp = make_response(&apos;ok&apos;)</div><div class="line">   	resp.set_cookie(&apos;username&apos;, &apos;the username&apos;)</div><div class="line">   	return resp</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">	app.run(debug=True, threaded=True)</div></pre></td></tr></table></figure>
<p><strong>参考文章</strong><br><a href="https://www.zhihu.com/question/19732473" target="_blank" rel="external">知乎：怎样理解阻塞非阻塞与同步异步的区别?</a><br><a href="http://tornadocn.readthedocs.org/zh/latest/guide/async.html" target="_blank" rel="external">Tornado文档：异步非阻塞I/O</a><br><a href="http://docs.pythontab.com/tornado/introduction-to-tornado/ch5.html" target="_blank" rel="external">Tornado教程：异步Web服务</a><br><a href="http://cloudaice.com/tornado-coroutine/" target="_blank" rel="external">使用tornado的coroutine进行编程</a><br><a href="https://segmentfault.com/q/1010000004910793?_ea=722806" target="_blank" rel="external">我在segmentfault的提问：无法理解tornado的异步</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做毕业设计的时候，由于后端有一个耗时任务，所以想到了异步，又由于长期使用Python，进而想到了Tornado，然后，我就半个月没做毕设了，说来全是坑啊。在了解异步与阻塞的原理之前我就盲目地想从代码层面去实现，这样只会浪费时间。所以这里我就先描述一下我对这几个概念的理解。
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>《把生命浪费在美好的事物上》</title>
    <link href="https://haofly.net/bashengminglangfeizaimeihaodeshiwushang/"/>
    <id>https://haofly.net/bashengminglangfeizaimeihaodeshiwushang/</id>
    <published>2016-04-06T14:06:28.000Z</published>
    <updated>2016-04-06T14:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的kindle里面收藏了太多的书，此书就是一本我也不知道什么时候一时兴起将其收藏的，光看书名还以为是一部心灵励志类的小说，没想到竟是包含人生、哲理、财经、政治的集大成者。自然，在看本书前我对作者也是一无所知，到后面越看越觉得作者不是等闲之辈，便去维基了一下：吴晓波，就是那个《激荡三十年》和《跌宕一百年》等著作及纪录片的作者，他的《大败局》被评为‘影响中国商业界二十本书’之一。一路走来，吴晓波亲身经历了中国改革开放的几十年，并深入其中，握其精髓，无论书中哪一篇文章都让我感觉仿佛身临其中，无法自拔。</p>
<p>其实，这部作品从形式上来说是一篇文集，“把生命浪费在美好的事物上”只是这部著作其中一篇的标题，作者从人生谈到家国，谈了几个人，仿佛谈了几千年。他不仅经历过，而且还和很多成功或曾经成功的人士聊了很多事，历史的沉浮中升华出自己的理解。其间的内涵可能也只有自己能体会。我想，一个知识分子，姑且这样称呼自己，想要在浮躁的社会中，必然得有自己的一片精深田地，可以入世，但不能抛弃一个知识分子的道德、心境、理想。</p>
<p>当然，另一方面，有人读书的目的就是当前对自己有没有用。客观地说，书的前面一份主要讲一些鸡汤，中间以及后面的部分才是全书的内涵所在，从叙事中领悟不同的人生。</p>
<p>看完这本书，我也忍不住想去看作者其他几本书，光从书名上就感觉是我目前思想境界还未能企及的，所以暂时，放下，等我继续，沉淀。</p>
<p>最后关于“把生命浪费在美好的事物上”这几个字，我一直很喜欢。中考的时候，阅读理解，大意是“珍惜那些浪费的时光”，两个主题其实如出一辙。生命中总有好多的事，我们很喜欢，但是这些事可能无法给我们带来直接的价值，所以很多人尽量选择回避自己所喜欢的，而不得不接受自己不喜欢的。我一直不希望成为这样的人，因为这样子活着，真的好累。在这个浮躁的社会，每晚拿出kindle，摆上一杯清水，就这样，静静地看，这一刻你会发现，你的灵魂终于跟上了你的身体。</p>
<h3 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h3><p>其实，人生如草，活的就是“从容”两字。</p>
<p>这一生中，你遇见怎样的人，然后有机会成为那样的人。</p>
<p>我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了砂砾，但若放手出来，空掌仍能握铁。</p>
<p>你看，我们对这个世界还是这么好</p>
<p>你看，我们对这个世界还是这么好奇，我们还有舍弃一切的勇气，即便手中的黄金变成了沙砾，但若放手出来，空掌仍能握铁。还是邱兵同学说得好：“我只知道，我心澎湃如昨。”</p>
<p>自由是世俗的，它不在空中，不在别处，它就在地上。作为一个读书人，你能否自由地支配时间，你能否自由地选择和放弃职业，你能否自由地在四月去京都看樱花，你能否自由地与富可敌国的人平等对视，你能否自由地抵制任何利益集团的诱惑，这一切并不仅仅是心态或勇敢的问题，而是一种现实能力。</p>
<p>在这个世界上，不是每个国家、每个时代、每个家庭的年轻人都有权利去追求自己所喜欢的未来。所以，如果你侥幸可以，请千万不要错过。</p>
<p>每一件与众不同的绝世好东西，其实都是以无比寂寞的勤奋为前提的，要么是血，要么是汗，要么是大把大把的曼妙青春好时光。</p>
<p>金钱让人丧失的，无非是他原本就没有真正拥有的；而金钱让人拥有的，却是人并非与生俱有的从容和沉重。金钱会让深刻的人更深刻，让浅薄的人更浅薄。金钱可以改变人的一生，同样，人也可以改变金钱的颜色。 把金钱当对手和敌人的人，将一生为金钱而烦恼；而把金钱当朋友的人，将获得金钱给予的欢乐和平和。成为金钱的奴隶，或将金钱视为奴隶的人，都无法与金钱平视对坐。</p>
<p>花开在眼前/已经开了很多很多遍/每次我总是泪流满面/像一个不解风情的少年</p>
<p>一箪食，一瓢饮，在陋巷，人不堪其忧，回也不改其乐。贤哉，回也！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的kindle里面收藏了太多的书，此书就是一本我也不知道什么时候一时兴起将其收藏的，光看书名还以为是一部心灵励志类的小说，没想到竟是包含人生、哲理、财经、政治的集大成者。自然，在看本书前我对作者也是一无所知，到后面越看越觉得作者不是等闲之辈，便去维基了一下：吴晓波，就是那
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>懒不是最恐怖的，最恐怖的是没发现自己懒</title>
    <link href="https://haofly.net/terriable-lazy/"/>
    <id>https://haofly.net/terriable-lazy/</id>
    <published>2016-04-03T15:45:50.000Z</published>
    <updated>2016-04-03T16:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>重庆，真的是一座来了就跑不脱的城市。这里每个人干事都风风火火、雷厉风行，从不脱离带水，但是这里的每一个人骨子里貌似都藏着一份“不与世俗同流合污”的精神。磁器口喝茶，植物园赏花，歌乐山看树，朝天门游江，清晨找个公园晨跑，傍晚全家围着看生活麻辣烫，这样的生活，一直以来都是我所期待的，安静、舒适、简单、美好。曾经看过重庆时尚频道冷暖人生栏目的一个广告(应该是09年以前的了，始终找不到那个视频了)，广告语是：当生命在懵懂中灿烂/当情愫在无言中飘零/当我们在百转中千回/其实人生正如季节，冷暖交替/看人生故事，品故事人生。就像这样，当生活麻辣烫看久了，就真的感觉已经离不开这种生活方式了。推荐大家看看《火锅英雄》这部陈坤和白百合主演的富有重庆本色的电影，谈不上精彩，但是重庆的风土人情还是展现得不错的，特别是片中的几处取景，特别不错。<br><img src="http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy.jpg" alt="重庆"></p>
<p><center><em>haofly拍摄于重庆朝天门</em></center><br>以上说的并不是今天要讲的重点，重点是我现在发现在小城市生活与大城市一样，同样要面临很多困难，大城市多的是外界施加给你的压力，而小城市则是自己与自己抗争。如今，终于理解什么叫“努力不一定会成功，但是不努力一定会很舒服”。在大城市，压力是很大，但至少身边有各种拼了命也想要成功的朋友，你自然也不会松懈，但小城市就不一样了，你会感觉每个人好像都是安于现状的，每个人好像都没有多大的追求，当然，我并不了解每一个人，这些也只是表面上给我的感觉而已，但是自己还是潜移默化地被感染了。渐渐地，感觉到自己的棱角被磨平了，说不出年少时的豪言壮语，再提起曾经的梦想也只是一闪而过，生怕自己发现了自己的堕落。</p>
<p>近一年的实习经验经历，不仅没让我越来越强，反而使我觉得在这一年的时间里自己并没有多少成长。我是在吃老本吗？不知道。我是在骄傲吗？不知道。我是温水里的青蛙吗？不知道。仔细想想，我什么都不知道，确实，我已经好久好久没有静下来这么想了。遇到人生第一个瓶颈，我竟不知所措，最终选择视而不见，究其原因，可能是懒，因为懒，所以好多该做的事情没有做，因为懒，根本没有去发现什么事情该做，因为懒，连未来怎么走都不知道，只能走一步是一步。但是每个人不都有轻度的懒癌吗，为什么偏偏就我的懒癌就无可救药吗？</p>
<p>近日发现，身边的人都成长十分迅猛，而自己依然止步不前，心里十分焦虑，仿佛压力越大，行动力反而越差，事情越多就越不想做。清明回家，回想了一下自己近一年的实习，我发现，目前我要克服自己的最大的一个缺点就是反省。不会反省，所以每次我发现自己有点懒惰了，然后就会立马忽略；不会反省，有些事情总是一错再错；不会反省，永远不知道自己什么事情做了，什么事情没做，什么事情做好了，什么事情没做好。总之，“吾日三省吾身”，我要为自己制定一个计划，希望能通过这个计划提高自己的反省能力，并从中找到技术瓶颈的解决办法。<br><img src="http://7xnc86.com1.z0.glb.clouddn.com/terriable-lazy-1.png" alt=""><br>每天总结一次，并在每周周末形成一篇完整的周报。</p>
<p>看起来又是一篇无用的计划文，但是闹钟已设，毕竟不都说，21天就可以养成一个习惯了吗，加油，还是得多喝鸡汤呀。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重庆，真的是一座来了就跑不脱的城市。这里每个人干事都风风火火、雷厉风行，从不脱离带水，但是这里的每一个人骨子里貌似都藏着一份“不与世俗同流合污”的精神。磁器口喝茶，植物园赏花，歌乐山看树，朝天门游江，清晨找个公园晨跑，傍晚全家围着看生活麻辣烫，这样的生活，一直以来都是我所期
    
    </summary>
    
      <category term="边走边想" scheme="https://haofly.net/categories/%E8%BE%B9%E8%B5%B0%E8%BE%B9%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Web框架特点及应用场景</title>
    <link href="https://haofly.net/web-application-scenarios/"/>
    <id>https://haofly.net/web-application-scenarios/</id>
    <published>2016-03-29T09:06:21.000Z</published>
    <updated>2016-03-28T09:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>我用的框架还是不少的</p>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><ul>
<li>全面无轮子</li>
<li>后台管理类网站</li>
<li>快速开发</li>
<li>自带ORM</li>
<li>速度最慢的</li>
</ul>
<h2 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h2><ul>
<li>异步要求大的地方</li>
<li>轻量快速</li>
</ul>
<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><ul>
<li>轻量快速</li>
<li>后台接口</li>
<li>几个里面速度最快的</li>
</ul>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h2><ul>
<li>全面无轮子</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我用的框架还是不少的&lt;/p&gt;
&lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;h2 id=&quot;Django&quot;&gt;&lt;a href=&quot;#Django&quot; class
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL单机多实例</title>
    <link href="https://haofly.net/mysql-multi-instance/"/>
    <id>https://haofly.net/mysql-multi-instance/</id>
    <published>2016-03-09T06:37:29.000Z</published>
    <updated>2016-04-13T06:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我们公司的实习内容之一，以前一直以为在单机上部署多个MySQL就是起多个进程就行了，too yuang too simple，原来MySQL默认提供了单机多实例功能的。<br>配置和使用过程如下(CentOS)：</p>
<ol>
<li><code>mysqld_multi --example</code>这个可以直接查看MySQL提供的多实例配置文件的配置内容样例，基本上可以直接拿来就用</li>
<li><code>mysql_install_db --datadir=/tmp/mariadb/data1</code>以这种方式创建多个数据库存放目录，<strong>一定要注意不要放在/root目录下，不然会出现什么Aria无法加载的情况</strong></li>
<li><code>vim /etc/my.cnf</code>内容如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[mysqld_multi]</div><div class="line">mysqld     = /usr/bin/mysqld_safe</div><div class="line">mysqladmin = /usr/bin/mysqladmin</div><div class="line">user       = root # mysql</div><div class="line">password   = mysql</div><div class="line">	</div><div class="line">[mysqld2]</div><div class="line">socket     = /tmp/mysql.sock2</div><div class="line">port       = 3307</div><div class="line">pid-file   = /tmp/hostname.pid2</div><div class="line">datadir    = /tmp/data1</div><div class="line">user       = mysql</div><div class="line">	</div><div class="line">[mysqld3]</div><div class="line">socket     = /tmp/mysql.sock3</div><div class="line">port       = 3308</div><div class="line">pid-file   = /tmp/hostname.pid3</div><div class="line">datadir    = /tmp/data2</div><div class="line">user       = mysql</div></pre></td></tr></table></figure>
<ol>
<li>启动实例</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysqld_multi start      # 启动实例</div><div class="line">mysqld_multi stop</div><div class="line">mysqld_multi report     # 查看两个实例运行状态</div></pre></td></tr></table></figure>
<p>另外，实例的日志文件默认是在实例文件夹下的<code>localhost.localdomain.err</code>文件里，启动完实例后，还要连接实例进行初始密码设置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我们公司的实习内容之一，以前一直以为在单机上部署多个MySQL就是起多个进程就行了，too yuang too simple，原来MySQL默认提供了单机多实例功能的。&lt;br&gt;配置和使用过程如下(CentOS)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mysqld_mu
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>故乡，我可能真的回不来了</title>
    <link href="https://haofly.net/bye-myhome/"/>
    <id>https://haofly.net/bye-myhome/</id>
    <published>2016-02-17T13:49:29.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年情人节，和女朋友相约去最近的一个县城玩儿，但其中发生了各种不愉快，不过还好女朋友现在越来越像我了，遇到事情不会抱怨太久。又要离开家乡了，仔细想想这个寒假的种种经历，我想，可能，我再也回不来家乡了。</p>
<p>这里的回不来，不是指不回来，而是，我已经完全不适合在家乡生存了。我从大学一进城就发现，家乡的生存成本比城里高出了不知道多少倍，父母却总是不信。在家乡人眼里，城市依然是一个吃顿饭就会不小心花上几百上千的地方。然而，他们所不知道的是，农村因为信息的阻塞和大家生活水平的相对提高，物价可能比城市更高，至少在我眼里是这样的。城里有团购软件，你可以选择离你最近的地方，然后点你最想吃的餐，这些你都可以通过一个手机APP找到，并且全都明码标价，绝对不会作出宰客这种事情。如果你对商家提供的服务有一点点的不满意，你随时可以给一个差评或者直接向APP投诉，不出24小时基本上你的诉求都能得到回应。</p>
<p>我嫂子前几天去银行改手机号码，结果银行服务人员脾气太差，她直接被吓回来了，我就跟她说下次带我一起去，她一发脾气，我立马举报，如果举报不行，那就找12315投诉。同样，我另一个在城里待过几年的嫂子，想要将城里暂时用不到的宽带转移到家里来却被各种拖延，当时眼看对方要发脾气，立马说了一句，“你再不搞好我就投诉你”，对方立马焉了，我多么想看看服务员当时的面部表情。家乡的人由于信息闭塞与教育落后，真的受了太多的“欺负”，他们不知道还有这么多的合法渠道来维护自己的合理的权益，导致这里的不良商家像上帝一样对待顾客，不过这里，商家才是上帝。同样关于维权的，前几年，我家的电压一直不稳定，电力局一直说要解决，但是一直不见行动，当时的我十分气愤，给市长信箱写了邮件，第二天，一伙人赶来我家检查，最后还要我签字确认。不是我这人较真，我只是觉得，我付出了金钱，就应该享受这些服务，而且在我付钱的时候他们也都承诺过要给予这些服务的。包括12315这样的组织，我们虽然没有直接交钱，但是我们的税收里肯定包含了这些的，所以有问题不能解决，那我就找12315。</p>
<p>情人节去邻县看电影，整个县城两个电影院，我们去的中心那个，另一个在城边上，几乎没人会去那里。可是，居然有电影院不能网上团购选座，把我弄郁闷了。于是我们就自己走去购买，12点买到了下午2点的票，而且是最后几个位置，当然是第一排的边上了，2点去看电影的时候电影院简直人满为患，据说现在买到的都到晚上八点后的了。看电影的时候我惊奇地发现，屏幕咋那么小，而且屏幕边缘那些褶皱是什么鬼。总之，体验超级不好，还不能给差评。邻县的交通也是乱得无法形容，基本上是人和车都在抢道，没办法，人让了就过不了马路，车让了也过不了马路，政府也没办法，人流量大的地方正好车流量也大，设个红绿灯还不如不设呢。中午吃饭，这里居然有三顾冒菜，但是，价钱呢，怎么没标识，想着也没有团购吧。这里的出租车据说跑城内都很有可能不打表的，不过在这里我一般不坐出租车，毕竟公交车只要1元，虽然我不知道司机哪儿有那么多急刹车要踩。</p>
<p>这里的人际关系之复杂，与城里简直是天壤之别。简单地说，在大城市，有能力就可以，而在小地方，有关系，没能力你也可以。在这里无论做什么，你都得先想想，对方可能是你的某个亲戚或者某个亲戚的亲戚。比如去年，我一个大姨被一酒驾人员擦到了，由于年岁已高，当时就倒地不起，那人居然肇事逃逸了。之后家人居然叫我们不急打110。我是完全无法理解的。直到我大姨被送到医院，那人始终未出面，而那些大人们却一直在联系认识肇事人的亲戚过来。最后我们中有年轻人报了警，但是警察来的时候，那亲戚也来了，然后，就叫警察回去了，当时看得我是目瞪口呆的。最后，这件事也在一顿饭中不了了之了。对于肇事逃逸那个人，我只想说，幸亏你身在这儿，不然早就进监狱了。</p>
<p>再来说说家乡的酒桌文化和面子文化。为什么有人要把劝酒视为一种传统文化而世代相传呢，连七八岁的小孩都觉得，不喝酒怎么行，不喝酒怎么在社会上走。有些人劝起酒来，给我这种不喝酒的人的感受就是，不把你灌醉就是我照顾不周，而你不喝酒的话，那更严重，那就是不给我面子。面对这种人，我就有多远滚多远吧。我说我不能喝酒，我说我高血压，结果还非要我喝，你连我的命都不要，还奢求我给你什么面子，再说，我不想喝你偏要我喝，这到底是谁不给谁面子。当然，家乡的送礼文化我倒觉得没什么，一般也就送一些奶、火炮什么的，一般是你送给我多少，下次我就还给你多少，这个虽然也是有点麻烦，但是毕竟不会劳民伤财嘛。当然，请一定要记住，千万不要少给或者不给，不然的话，背地里一定会到处说的，你永远也不知道在家乡，一张嘴的传播速度与互联网的传播能力速度哪个更快。</p>
<p>我知道，家乡生我养我，我或许不该说得这么过分，但是现在，我真的越来越不懂家乡了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年情人节，和女朋友相约去最近的一个县城玩儿，但其中发生了各种不愉快，不过还好女朋友现在越来越像我了，遇到事情不会抱怨太久。又要离开家乡了，仔细想想这个寒假的种种经历，我想，可能，我再也回不来家乡了。&lt;/p&gt;
&lt;p&gt;这里的回不来，不是指不回来，而是，我已经完全不适合在家乡生
    
    </summary>
    
      <category term="边走边想" scheme="https://haofly.net/categories/%E8%BE%B9%E8%B5%B0%E8%BE%B9%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>我居然忘了写《三体》的读后感</title>
    <link href="https://haofly.net/santi/"/>
    <id>https://haofly.net/santi/</id>
    <published>2016-02-13T14:58:29.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>买了kindle已经看了七八本书了，其他的书在博客改版后都陆陆续续写了书评了，但是我居然还没有给《三体》写读后感。这两天，世界突然被一个发现震动了：<a href="http://www.guokr.com/article/441177/" target="_blank" rel="external">引力波</a>被证实了。虽然不知道其中的具体含义，但是可能真的如人们所说，引力波的发现可能会像万有引力被发现一样给基础物理学带来飞速的发展。</p>
<p>简单地说，我最初是因为急着看《三体》才去淘宝买kindle的。对于一个长大了的科幻迷来说，《三体》绝对是不可多得的好书，并且它是国产的，这是我最惊讶的一个部分。不是我看不起国内小说，国内小说总体来说武侠传奇的比较多，描写未来的确实罕见，而能这样引人入胜的，更是凤毛麟角。当然也有可能是由于我读的小说比较少的缘故吧，这部小说在开篇就把我吸引进去了，废寝忘食地看了一个星期。</p>
<p>全书分为三个部分：《地球往事》、《黑暗森林》、《死神永生》，其中最精彩的部分莫过于黑暗森林了，把宗教、伦理、科幻、爱情等统统融合在一起，体现了其宇宙社会学的深层含义。看了很多的书评，负面评价的原因主要有二，一是叙事手法上，二是科幻知识上相对低级。前者我不好评价，毕竟我对这方面没有研究，我只知道在阅读的时候我被深深地吸入进去了，只知道这本书的想象力至少在国内是极少见到的。(不过说实话，最后一部的结尾，确实有点粗糙，感觉就像是《火影忍者》一样，匆匆结尾，看起来像是文思枯竭了一样)对于后者，我只能说，正式因为此书所用到的物理知识对于一个大学生的我来说，刚好能够理解，不会显得晦涩难懂，我想，这已经很成功了。</p>
<p><strong>黑暗森林法则</strong>：宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭之。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景。<br>佩服作者的想象力，以前的我真的从没想过这一个层面的东西，认为我们就应该一直寻找宇宙中的智慧生物，去寻找另一个文明，现在看来，一切都太艰难了，宇宙中处处存在着猜疑链，你永远不知道另一个文明是怎么看你的，不要像程圣母(程心)一样只用善良的思维去思考这个世界。</p>
<p><strong>射手假说</strong>：有一名神枪手，在一个靶子上每隔十厘米打一个洞。设想这个靶子的平面上生活着一种二维智能生物，它们中的科学家在对自己的宇宙进行观察后，发现了一个伟大的定律： “宇宙每隔十厘米，必然会有一个洞。”它们把这个神枪手一时兴起的随意行为，看成了自己宇宙中的铁律。<br><strong>农场主假说</strong>：一个农场里有一一群火鸡，农场主每天中午十一点来给它们喂食。火鸡中的一名科学家观察这个现象，一直观察了近一年都没有例外，于是它也发现了自己宇宙中的伟大定律：“每天上午十一点，就有食物降临。”它在感恩节早晨向火鸡们公布了这个定律，但这天上午十一点食物没有降临，农场主进来把它们都捉去杀了。<br>这两个假说，我也只能仰望了，看过那么多科幻小说和纪录片，我也没能跳出这个牢笼，从外面的世界思考，比如这里，如果调到比我们更高维度来思考，他们也会不会认为我们只是纸上的一些小人儿呢。</p>
<h2 id="消灭人类暴政，世界属于三体"><a href="#消灭人类暴政，世界属于三体" class="headerlink" title="消灭人类暴政，世界属于三体"></a>消灭人类暴政，世界属于三体</h2><h2 id="一切都会逝去，只有死神永生"><a href="#一切都会逝去，只有死神永生" class="headerlink" title="一切都会逝去，只有死神永生"></a>一切都会逝去，只有死神永生</h2><p>推荐观看：<br><a href="https://www.youtube.com/watch?v=HL_o_if5it0" target="_blank" rel="external">神剪辑！12分钟看完90万字科幻小说神作《三体》
</a><br><a href="http://www.bilibili.com/bangumi/i/1704/" target="_blank" rel="external">我的三体(国内粉丝使用minecraft制作)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;买了kindle已经看了七八本书了，其他的书在博客改版后都陆陆续续写了书评了，但是我居然还没有给《三体》写读后感。这两天，世界突然被一个发现震动了：&lt;a href=&quot;http://www.guokr.com/article/441177/&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>大学全记事</title>
    <link href="https://haofly.net/my-university/"/>
    <id>https://haofly.net/my-university/</id>
    <published>2016-02-12T03:57:50.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生最后一个寒假，趁着还记得，回忆一下我这四年</p>
<h2 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h2><ul>
<li>比规定时间提前来了几天，学校里居然这么少的人。6栋真小，12平米的房间住了四个人。那几天有领导来关怀新生，整栋楼就没几个人，正好他们敲了我的房间，还和领导握了手。后来才知道，她就是大名鼎鼎的是书记</li>
<li>听学长的话，认为大学就该多去争取兼职机会，于是答应帮别人卖被子提成。但是遇到一个人得时候不忍心把被子高价卖给别人，也由于自己脸皮比较薄，所以放弃了</li>
<li>听别人的话，大学得多加社团，报了几个社团，基本上，如果有技术面的都能过，面试都没过，然后就没有然后了。当时不知道还有学生社团这种东西(和学生会的黑社会性质不一样，这个完全是兴趣)，也错过了社团的招新。</li>
<li>下学期的时候参加了C语言考前培训，认识了软件协会会长和副会长，给了我几道题，做好了，然后就跟着他们联系ACM，然后顺利成长的当上了副会长(当时叫我当会长，被我拒绝了)</li>
<li>大学有一次进某个实验室的机会，但我也放弃了，那老师就一个做外挂的</li>
<li>虽然我高三就开始学习C语言，但其实大一那个寒假我才真正学完，才真正学号了她</li>
<li>大一结束那个暑假，学了Python、Delphi、PHP，虽然都只是学了其语法，但也算入门了</li>
<li>我们是大一结束才军训的，厌恶透了</li>
<li>从大一下开始追海贼，也是这个时候入微博</li>
<li>大一暑假，我们一行人准备骑行去西藏，结果，我半途而废，至今是我心里永远的伤疤</li>
<li>对了，就在大一结束就开始写个人博客了</li>
</ul>
<h2 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h2><ul>
<li>当了一年的副会长，认识了很多人，技术也学到了一些，与服务器的第一次亲密接触，从此知道linuxinux server这种神奇的东西，从此会搭建个人网站了，从此走上了运维这条不归路。其实在软协这两年，我一直是想通过一些特殊的培训来帮助大家，提高大家的，不过没想到的是大二大三事情太多了</li>
<li>与软件协会另两位组队参加了重庆市的ACM比赛，不过没获奖，也没什么，至少我还是参加过一次比赛的(PS:别问我获奖队伍那么多为什么我们都没获奖，谁叫他规定每个学校最多三支队伍获奖的)</li>
<li>英语四六级考试都一次过，不过，说真的，每次考完我都觉得差着几百分呢，ps：四级是优</li>
<li>大概是从这一年开始接触微博的，从此完全成了微博控，花费了我大量的时间，不过带给我的启发却是不可估量的，通过微博，我才看到了世界。至少，不用再沉浸在C和C++的海洋里，原来外面的世界还有python，还有node，还有openstack，还有nosql，原来，我们永远也学不完，原来学校教的在外面真的很少能用到</li>
<li>这一年，也是我上自习上得最多的，导致我连续两年拿了奖学金，还拿奖学金买了一把国产机械键盘，那叫一个爽，那叫一个帅</li>
<li>大二下学期，进入了实验室，好吧，我那么晚才进实验室的，可是实验室的老师是一个刚从国外留学回来的，感觉他不怎么了解国内市场和国内的职场。不过，搞研究的老师应该都这样吧。模式识别，几十篇的全英文论文，看得心烦。也因为这次经历，导致我放弃了考研的想法。</li>
<li>放弃考研的那几天，我把以前的书都卖了，还美其名曰破釜沉舟。同时，也没怎么关心学习的事情了，一心钻研自己的技术。</li>
<li>这个学期分专业填志愿，我和以前毅然决然的选择了信安专业，虽然当时我已经不想学信安了，但是毕竟自己以前一直期待这个专业嘛，而且当时的我对选择什么专业已经不以为然了，无论哪个专业我都只会走我自己的路。</li>
<li>20岁生日这天，买了两瓶白酒和几瓶啤酒，在寝室喝，由于没有什么氛围，室友们并不想喝，于是我一个人喝了…反正我是不知道那晚吐了多少次，据说我吐了无数次，翻下了床无数次，多亏了我的室友啊，不过，你们看到我这样都不送我去医院吗…<br>醉了才知道自己有多么无力，20岁，我写过一篇文章，很伤心，很落寞，觉得自己太失败了，那晚我也仅仅是喝醉了而已，并没有把一切都看开，真正让我看开的，是我现在的女朋友，所以，忘掉一段感情最好的方式就是认真开始一段全新的感情</li>
<li>暑假的时候把qq相册所有的好友的图片抓下来了，这篇博客访问量上万了，而且因为这个，腾讯一个团队老大找过我，不过当时我实在不想去做前端…现在想想，还好没答应，不然怎么找得到女朋友呢</li>
<li>大二刚开始就买了台红米手机，从此入坑，直至现在都还在用着红米系列</li>
<li>大二暑假，我家终于买车了，突然想学车了，然而现在的我已经没时间去学习了</li>
</ul>
<h2 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h2><ul>
<li>既然不考研那就得找事儿了，找了一个工作室去练习，其实一直很佩服领导人眼光的(是一位在职百度贴吧大神创业)，但是他是在不懂得如何管理团队，导致大家最后都没什么激情了。而且由于没有项目管理人员，导致项目到最后居然和之前的需求不一致，最后就没让我们做了。在这个项目里面我主要做的是服务器、数据库的搭建与维护，还包括后台PHP程序的开发。虽然最终失败，不过经历过这个项目，我突然对运维感兴趣了，所以现在自然进入了运维开发这个行当。</li>
<li>大三下学期一直在找实习机会，也顺利在期末进入了一个传媒公司实习。实习到过年，同样，也是做的Python后台程序开发以及服务器的维护，也算是有大半年的Python工作经验了。我能说，我来这里一两个月了，团队里的人才知道我是实习生吗，原来人事和技术这么分离呀，原来我真的能胜任工作的。除了工资相对低以外，这个公司绝对是我见过的福利最好的公司，各种假期，中秋国庆连着放了13天，过年同事们都说毕业这么多年，第一次感觉到放寒假了，从2月3号放到23号。年会没人都抢了几百的红包，一人一块猪肉…对了当天我们还一人提一带猪肉去ktv的总统套房…</li>
<li>也正是因为实习，终于我过上了梦寐以求的租房的生活，想吃什么吃什么</li>
<li>也正是因为进了公司，开始大量使用微信了，原来这里又是另外一片天地</li>
<li>大三上学期，我居然挂科了，而且挂这个科的人基本上大学都是只挂了这一科，我只想说这个老师是个奇葩</li>
<li>在大三下学期刚开始就找到了女朋友，从此，每个周末都没有空了…很累但很幸福，对了，她可是我小学同学，隔壁村的哟</li>
<li>大三寒假，140斤，去医院检查，说肝上油太多，快发展成脂肪肝了，从此不敢海吃肥肉了，大三下每天运动，减了十几斤的肉，but，暑假的时候，老婆的菜确实太好吃了…</li>
<li>3月份，我的微博数量超过了1000</li>
<li>8月份，我终于申请到了人生的第一张信用卡，额度6000，写这篇文章的时候，这个月账单8000多</li>
</ul>
<h2 id="大四"><a href="#大四" class="headerlink" title="大四"></a>大四</h2><ul>
<li>大四上学期只回去上过一次课，都是找人代的，而且还没挂科，后来想想，要是大一大二就能做到这样该多好呀，但我们学校逼的，我只能呵呵</li>
<li>7月份校招就已经开始，但是我现在完全不像去外地了，只想找一个离家近的工作，好不容易得来的爱情，我不像就这样异地恋，别tm跟我说异地恋是一场考验，不像分开就是不像分开，交往一年，我现在觉得百多公里的距离就是银河那么远了。其实不离开家乡还有一个重要的原因是因为这里朋友多，我好想毕业了能像爱情公寓里面一样，所有的好朋友都能在一起。选择了重庆，自然就选择了猪八戒，好吧，其实我貌似只投过猪八戒。以我当时的能力，我想，在重庆，无论哪个公司应该都能投简历就能上吧，毕竟，我曾经那么努力，就是为了自己以后在选择的时候多一些自由。其实去不去外地，都是自己的选择，有很多人都不理解我，我也不奢求所有人都能理解，反正，你在那里奋斗，我再这里奋斗，大家一起努力嘛，都是自己选择的人生，站着跪着都要走完。</li>
<li>整个上学期都是在之前那个公司实习的…</li>
<li>大四上，我终于用上了苹果电脑，应了一句话，所有linux爱好者在有钱后都会转向mac的，不仅买了rmbp，还买了kindle，终于又开始大量看书的时代了</li>
<li>寒假，报名了学车了，以前我想学的时候他们不然我学，后来他们想让我学的时候我也不想学，现在终于抓紧最后时间学一下吧</li>
<li>大四寒假，二十几年来重庆看到的第一场大雪</li>
<li>这个寒假，爸爸50岁生日，终于能用自己的钱给爸爸买礼物了，一个机械表，信用卡刷爆…</li>
</ul>
<p>总之，我的大学并没有白过，四年大学生涯，学校没教会我什么，但是我是在这个学校学到了我想学的，也领悟到了我以前我不懂得。比以前更了解自己，这才是大学的意义嘛。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生最后一个寒假，趁着还记得，回忆一下我这四年&lt;/p&gt;
&lt;h2 id=&quot;大一&quot;&gt;&lt;a href=&quot;#大一&quot; class=&quot;headerlink&quot; title=&quot;大一&quot;&gt;&lt;/a&gt;大一&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比规定时间提前来了几天，学校里居然这么少的人。6栋真小，12平米的
    
    </summary>
    
      <category term="边走边想" scheme="https://haofly.net/categories/%E8%BE%B9%E8%B5%B0%E8%BE%B9%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>《动物庄园》——我从未见过如此讽刺的小说</title>
    <link href="https://haofly.net/dongwuzhuangyuan/"/>
    <id>https://haofly.net/dongwuzhuangyuan/</id>
    <published>2016-02-12T03:24:47.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在微博上看到有关敏感话题的讨论中看到该书名，然后出于愤世嫉俗的原因，我自然会去买来看。看了一点点后我就像说，在天朝，这本书没有被禁，简直是奇迹。</p>
<p>太像了，一切都太像了，为了自由，聪明的猪带领大家起义，最终赶走了农场主。但是随着猪的权利越来越大，得到的利益越来越多，野心越来越膨胀，最终，大家奋斗来的自由都被统治者剥削完了，生活甚至比以前更加艰难了，但是他们的洗脑工作却让下面的以为这样的日子比以前好多了，然而实则已经变成一个充满剥削的社会了。</p>
<p>据说，这部小说背景是俄国的十月革命到苏联1940年代，但我只想说，和某国太像了，既得利益者为了巩固和加强自己的权力，不顾一切地去掠夺，甚至有时候闹出一切滑稽的笑话，就像“所有动物生来平等，但有些动物比其他动物更平等。”这让我想起了某国的特供用品。对于对自己不利的一切消息，对内部一律封锁，甚至建立一堵堵厚厚的墙，声称这样是为了保护大家，实则是将好的东西都挡在了外面，最后的结局可想而知。</p>
<p>在我眼里，动物们升旗就是最大的讽刺，明显是为洗脑而生的行为。我能说某些国家即使到了大学还要经常升旗吗，升旗还要念文章，我去。自己生活十分艰苦，还一天嚷嚷着要去解放别人，别人的生活不知道比你好到哪里去了。他们还喜欢邀请别人来庄园，炫耀他们这里多么的繁华。还有被取消的“同志”这个词，看着真是搞笑。</p>
<p>至于这本书为什么没被禁，我是想不通了，或许他们根本不屑于审查这部“童话”，或许他们根本看不懂…反正我是推荐生在不平等国家的人都去看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在微博上看到有关敏感话题的讨论中看到该书名，然后出于愤世嫉俗的原因，我自然会去买来看。看了一点点后我就像说，在天朝，这本书没有被禁，简直是奇迹。&lt;/p&gt;
&lt;p&gt;太像了，一切都太像了，为了自由，聪明的猪带领大家起义，最终赶走了农场主。但是随着猪的权利越来越大，得到的利益越
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>我越来越像《麦田守望者》</title>
    <link href="https://haofly.net/maitianshouwangzhe/"/>
    <id>https://haofly.net/maitianshouwangzhe/</id>
    <published>2016-02-11T10:30:14.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>初看麦田里的守望者，我只看到一个满口脏话，觉得全世界都是傻逼，只有我是最纯洁的一个人。在看之前我并不了解这本书的历史背景，一直觉得这本书可能是90年代后的，不过看了几天后脑海中却始终浮现出一幅很老的画面，就像电视里美国刚开始有摄像机的无声电影一样，所有的人都穿着”老土”的服装，那是一个灯红酒绿、社会混乱，所有人都在寻找出路的时代，事实证明我是对的，此书出版于1951年，正是二战后美国的真实写照吧。</p>
<p>“一个不成熟的人的标志是他愿意为了某个理由而轰轰烈烈地死去，而一个成熟的人的标志是他愿意为了某个理由而谦恭地活下去。”这或许是此书最出名的一句话。不敢自谦，不过，正如我一直坚持的价值观一样：人，是可以平凡的。比如爱情，现在的社会本没有历史上那么轰轰烈烈，也不会有什么海枯石烂，最多相隔万里，那也能通过网络时时通讯。说的太多，感觉这段和此书的主题并无多大联系。</p>
<p>第一次接触意识流的小说，觉得有些晦涩，有些不解，但霍尔顿的世界可能每个人都经历过。比如我们的成长，每个人的成长或许都伴随着成年人的不理解，有的人在这过程中练就了挑战世界的本领，而有的人则在反抗的过程中渐渐成长为自己曾经讨厌的人。成长过程中，无论坚持了以我，还是改变了自我，都没有错，最终他们都会走向自己一样的人生，哪怕不是曾经希望的，但一个成年人可能更懂得珍惜现在。不是认命，而是认清了自己。</p>
<p>故事最后的结局也让人们争论不已，我想，霍尔顿现在已经长大了吧，理想被一个一个击破，到底是继续反抗世界还是改变自己，现在他已经知道答案了。</p>
<p>今年过年回家，我仿佛变成了故事里的男主角，愤世嫉俗，以前觉得没什么的事情今年却突然感觉十分愤怒。</p>
<pre><code>为什么我今年回到家成天就感觉这里活着真累呀，错综复杂的亲戚关系，成天都担心着别人眼中自己的形象，遇到各种不公平待遇却又忍气吞声，明明讨厌的事情却又有各种原因不去拒绝。。。
</code></pre><p>这是我2月7日发表的一篇微博，怎么说呢，以前可能觉得这些离自己太远，所以没去在意。但是即将毕业的我，又碰巧在这个节骨眼到了谈婚论嫁的时刻，实在无法适应，只能边骂边去接受自己能接受的。只希望，明天的我，依然是我曾经喜欢的模样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初看麦田里的守望者，我只看到一个满口脏话，觉得全世界都是傻逼，只有我是最纯洁的一个人。在看之前我并不了解这本书的历史背景，一直觉得这本书可能是90年代后的，不过看了几天后脑海中却始终浮现出一幅很老的画面，就像电视里美国刚开始有摄像机的无声电影一样，所有的人都穿着”老土”的服
    
    </summary>
    
      <category term="边走边想" scheme="https://haofly.net/categories/%E8%BE%B9%E8%B5%B0%E8%BE%B9%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据库升级过程</title>
    <link href="https://haofly.net/mysql-update/"/>
    <id>https://haofly.net/mysql-update/</id>
    <published>2016-01-06T00:06:50.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考地址：<a href="http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html</a><br>不知道为什么很多地方的官网都把一个完整的包打散了，然后完整包和分开的包放在同一级目录里，我也是醉了，最终我还是找到了正确的安装方法。  </p>
<ol>
<li><p>MySQL社区版官网下载地址：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/</a><br>需要注意的是，一定要下载结尾为.deb-bundle.tar的包，因为它包含了其它分开的包的所有数据</p>
</li>
<li><p>一步一步执行下列步骤就可以了：  </p>
</li>
</ol>
<pre><code>    sudo apt-get install libaio1   // 安装基本的依赖
tar -xvf mysql-server_MVER-DVER_CPU.deb-bundle.tar   //解压
sudo dpkg -i mysql-common_MVER-DVER_CPU.deb   // 安装common文件
dpkg-preconfigure mysql-community-server_MVER-DVER_CPU.deb // 预配置，进行mysql的配置，这时候会要求输入root密码等
sudo dpkg -i mysql-community-server_MVER-DVER_CPU.deb    // 安装mysql-server
sudo dpkg -i mysql-community-client_MVER-DVER_CPU.deb    // 安装mysql-client
sudo dpkg -i libmysqlclient18_MVER-DVER_CPU.deb   // 安装公共库
</code></pre><ol>
<li>收尾  </li>
</ol>
<pre><code>    # 运行兼容检查工具，自动解决不兼容的问题
命令行执行mysql_upgrade -uroot -pmysql




不然可能会出现这些错误：
MySQL unknown column &apos;password_last_changed&apos;
</code></pre><ol>
<li>So Easy</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考地址：&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/linux-installation-debian.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dev.mysql.com/
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql之主从复制</title>
    <link href="https://haofly.net/mysql-master-slave/"/>
    <id>https://haofly.net/mysql-master-slave/</id>
    <published>2016-01-05T23:35:43.000Z</published>
    <updated>2016-04-13T07:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考地址：<a href="http://369369.blog.51cto.com/319630/790921" target="_blank" rel="external">http://369369.blog.51cto.com/319630/790921</a><br>原来想要简单地实现MySQL的主从复制其实也是很简单的(<br>这里当然不包括服务监控和容错处理啦)</p>
<p>1.要检查主从服务器的MySQL版本，最好版本一致，不然会出现各种问题，特别是，5.5和5.6是不会兼容的  </p>
<p>2.修改两个服务器的mysql配置<code>vim /etc/my.cnf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">log-bin=mysql-bin    // 打开二进制日志</div><div class="line">server-id=41         // 服务器的唯一ID，为0表示拒绝所有从服务器的连接</div></pre></td></tr></table></figure></p>
<p>分别修改两个服务器配置然后分别重启</p>
<p>3.主服务器建立账户：这个账户与普通账户不一样，它只能用于主从复制中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* to &apos;master&apos;@&apos;%&apos; identified by &apos;mysql&apos;;</div></pre></td></tr></table></figure></p>
<p>4.查看服务器状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show master status;</div><div class="line">+------------------+----------+--------------+------------------+-------------------+  </div><div class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |  </div><div class="line">+------------------+----------+--------------+------------------+-------------------+  </div><div class="line">| mysql-bin.000004 |   615261 |              |                  |                   |  </div><div class="line">+------------------+----------+--------------+------------------+-------------------+  </div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>需要注意的是，这两个值都得记下来哟</p>
<p>5.将主服务器数据库dump然后导入到从服务器，记下了Position就不用担心dump后新增数据的情况，会自动同步的</p>
<p>6.配置从服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; change master to master_host=&apos;192.168.1.41&apos;, master_user=&apos;xiaohao&apos;, master_password=&apos;mysql&apos;, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=615261;  // 这里就是刚才的Position</div></pre></td></tr></table></figure></p>
<p>7.启动从服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; start slave;   # 同理，停止用stop slave</div></pre></td></tr></table></figure></p>
<p>8.查看复制状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    mysql&gt; show slave status\G  </div><div class="line">**_*_****_*_****_*_****_*_* 1. row ****_*_****_*_****_*_******  </div><div class="line">               Slave_IO_State: Waiting for master to send event  </div><div class="line">                  Master_Host: 192.168.1.41  </div><div class="line">                  Master_User: xiaohao  </div><div class="line">                  Master_Port: 3306  </div><div class="line">                Connect_Retry: 60  </div><div class="line">              Master_Log_File: mysql-bin.000004  </div><div class="line">          Read_Master_Log_Pos: 652289  </div><div class="line">               Relay_Log_File: ubuntu-relay-bin.000002  </div><div class="line">                Relay_Log_Pos: 37345  </div><div class="line">        Relay_Master_Log_File: mysql-bin.000004  </div><div class="line">             Slave_IO_Running: Yes  </div><div class="line">            Slave_SQL_Running: Yes  </div><div class="line">              Replicate_Do_DB:</div></pre></td></tr></table></figure></p>
<p>必须保证Slave_IO_Running和Slave_SQL_Running都为Yes的时候才正确的</p>
<h1 id="TroubleShooting："><a href="#TroubleShooting：" class="headerlink" title="TroubleShooting："></a><strong>TroubleShooting：</strong></h1><ul>
<li><p>出现错误：Slave SQL for channel ‘’: Slave failed to initialize relay log info structure from the repository, Error_code: 1872<br>是因为relay-log有问题，这时候修改从服务器mysql配置，在[mysqld]中加入relay-log-<br>recovery=1，这样表示，服务器启动之后，删除所有已有的relay日志，重新接收主库的relay日志</p>
</li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考地址：&lt;a href=&quot;http://369369.blog.51cto.com/319630/790921&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://369369.blog.51cto.com/319630/790921&lt;/a&gt;&lt;b
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Python多进程和多线程</title>
    <link href="https://haofly.net/python-multithreading-multiprocess/"/>
    <id>https://haofly.net/python-multithreading-multiprocess/</id>
    <published>2015-12-29T19:28:42.000Z</published>
    <updated>2016-02-22T05:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>多线程和多进程能极大限度的利用线代计算机强大的CPU，在IO密集型的应用场景里十分常见，目前项目中有个需求，是需要向别人网站发送请求等待响应，不过必须等页面<br>的js执行完毕后才能获取内容，就得将执行时间设置得长一点，比如10s，如果每个请求都等这么久那效率实在太慢，所以趁此机会，学习了一下Python的多进程和多<br>线程编程。  </p>
<p>在Python里面多进程和多线程的区别</p>
<ul>
<li>Python里的多线程只能利用CPU的一个核(由于全局解释锁的历史原因)，而多进程则能利用多核的优势</li>
<li>多线程一般来说比多进程快，毕竟共享内存，但是多线程也更危险，因为一个线程崩溃可能导致整个程序崩溃</li>
</ul>
<h1 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a><strong>Python多线程</strong></h1><ul>
<li>定义与使用  </li>
</ul>
<pre><code>    import threading

class Thread(threading.Thread):
    def __init__(self, 变量):
        threading.Thread.__init__(self)
        self.变量 = 变量
    def run(self):
        逻辑
thread = Thread(参数) # 定义一个线程
thread.start()        # 开启一个线程
</code></pre><ul>
<li>全局变量：加锁，对于全局变量，如果仅仅是引用其值，而不对其进行修改，那么可以直接引用，如果要进行修改，就必须加锁，否则会出现不可预期的错误，比如可能会导致MySQL连接意外断开  </li>
</ul>
<pre><code>    LOCK = threading.Lock()  # 在全局定义一个锁
# 局部使用
LOCK.acquire()
修改全局变量
LOCK.release()
</code></pre><ul>
<li>局部变量：虽然局部变量简单的使用直接用就行，但是如果要在run里面进行各个函数之间的传递那就麻烦了，所以提供了ThreadLocal来将线程内部的局部变量变为一个字典，其它函数直接调用即可  </li>
</ul>
<pre><code>    LOCAL = threading.local() # 在全局定义，每个线程引用该值结果都仅仅会得到自己的私有变量
# 在Thread类里面的run函数赋值，不能在__init__里面定义，因为那时候线程还没启起来
LOCAL.变量名 = 值 # 就这样
</code></pre><ul>
<li>常用方法  </li>
</ul>
<pre><code>    threading.activeCount()  # 获取当前线程数量，我一般用这个来控制线程最大的数量
threading.currentThread() # 获取当前线程对象
threading.currentThread().getName() # 获取当前线程的名称
exit()         # 终止当前线程，网上好多人问怎么没有API，后来发现exit就行了...并不会影响到其它线程和主线程
</code></pre><h1 id="Python多进程"><a href="#Python多进程" class="headerlink" title="Python多进程"></a><strong>Python多进程</strong></h1><p>waiting…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多线程和多进程能极大限度的利用线代计算机强大的CPU，在IO密集型的应用场景里十分常见，目前项目中有个需求，是需要向别人网站发送请求等待响应，不过必须等页面&lt;br&gt;的js执行完毕后才能获取内容，就得将执行时间设置得长一点，比如10s，如果每个请求都等这么久那效率实在太慢，所
    
    </summary>
    
      <category term="编程之路" scheme="https://haofly.net/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
</feed>
