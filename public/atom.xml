<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豪翔天下</title>
  <subtitle>Change My World by Program</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haofly.net/"/>
  <updated>2017-03-13T12:58:44.000Z</updated>
  <id>https://haofly.net/</id>
  
  <author>
    <name>haofly</name>
    <email>haoflynet@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程之美系列——数据之美</title>
    <link href="https://haofly.net/data-points/"/>
    <id>https://haofly.net/data-points/</id>
    <published>2017-03-13T12:26:00.000Z</published>
    <updated>2017-03-13T12:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于看完编程之美的三部曲，其实他们三本书完全不是同一个类型同一个方向的著作，感觉完全是因为中文翻译的书名的原因才把他们放在一起。不过，对比前面两者，我觉得这本书才真正把哲学上的美向大家展示了出来，毕竟，将大数据进行可视化既是当今的流行趋势，又是对数据的直观展现，相比于冷冰冰的数据，可视化的图表才是真的让他们能美起来的东西。当然这也是我觉得这本书更有意思的主要原因。</p>
<p>《数据之美》这本书，给我们提供了丰富的例子来说明，数据可视化的深刻意义以及非常多的应用场景。我对数据挖掘是没有多大兴趣的，但是对爬虫的兴趣倒是很深。我一直保持一个自信：只要正常浏览器能看到的，那么我就能爬取到。所以，我写了很多爬虫。爬取汽车之家的车型车系，爬取房天下的房产数据，都是自娱自乐。也挺喜欢去解决爬虫的难点问题，我自己不知道爬取数据对自己有多大用，但我只是喜欢爬数据而已。</p>
<p>最后，推荐两个数据可视化的前端库，<a href="http://www.highcharts.com/" target="_blank" rel="external">highcharts(可视化的先驱，功能可以说是最强大的)</a>和<a href="http://echarts.baidu.com/" target="_blank" rel="external">ECharts(百度出的可视化工具，功能强大，但是坑多，不是吹，是真的多)</a>，以及一些数据可视化的例子(<a href="http://www.datapointed.net/" target="_blank" rel="external">http://www.datapointed.net/</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于看完编程之美的三部曲，其实他们三本书完全不是同一个类型同一个方向的著作，感觉完全是因为中文翻译的书名的原因才把他们放在一起。不过，对比前面两者，我觉得这本书才真正把哲学上的美向大家展示了出来，毕竟，将大数据进行可视化既是当今的流行趋势，又是对数据的直观展现，相比于冷冰冰
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>Swagger与其他API文档编写工具对比</title>
    <link href="https://haofly.net/swagger/"/>
    <id>https://haofly.net/swagger/</id>
    <published>2017-02-26T15:26:00.000Z</published>
    <updated>2017-03-08T07:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swagger特点"><a href="#swagger特点" class="headerlink" title="swagger特点"></a>swagger特点</h2><p>swagger是我见过唯一还算将就的一个API文档制作与展示工具，其实最终都没让我找到一款完美的API文档编写工具。</p>
<p>swagger优点:</p>
<ul>
<li>一个文件就是一个文档</li>
</ul>
<ul>
<li>只针对API，而不针对特定的语言的API，很多自动生成API的工具基本都是只针对特定的API的</li>
<li>支持Json和yaml来编写API文档，并且支持导出为json、yaml、markdown等格式</li>
<li>如果编写好了API了，可以自动生成相应的SDK，没错，可能你的API接口代码还没有开始写，它就能帮你制作相应的SDK了，而且支持几乎所有主流编程语言的SDK</li>
<li>支持自动生成大量主流编程语言/框架的server端</li>
<li>界面清晰，无论是editor的实时展示还是ui的展示都十分人性化，其他的API编写工具基本上都做不到这一点，如果自己仅仅用markdown来编写，又要纠结该如何展现，十分痛苦。</li>
<li>官网有直接的demo，甚至都可以不用自己搞一套服务器</li>
</ul>
<p>swagger缺点:</p>
<ul>
<li>貌似无法更改主题</li>
<li>中英文的文档都比较少，其主要原因应该是官网的文档本身就不完善，只有针对不同模块儿的介绍，却没有针对具体用户的文档</li>
<li>yaml文件只能和API项目本身放在一起，这一点暂时还不知道有什么解决方案</li>
</ul>
<h3 id="其他的API文档编写工具"><a href="#其他的API文档编写工具" class="headerlink" title="其他的API文档编写工具"></a>其他的API文档编写工具</h3><h4 id="Apizza"><a href="#Apizza" class="headerlink" title="Apizza"></a>Apizza</h4><ul>
<li>外观模仿postman，但是只有网页版，必须谷歌浏览器并且必须安装插件，不开源，不能确定以后是否收费</li>
<li>由于外观模仿postman，所以ui上还是不大满意</li>
<li>能够自定义环境变量，并且可以不同的环境不同的环境变量</li>
<li>拥有团队协作功能，并且有一定的权限管理功能</li>
<li>可直接在接口处编写文档，并且能够导出HTML文档，导入Postman Json或者Swagger Json</li>
<li>偶尔会有缓存没有清理的问题</li>
<li>没有mock server的功能</li>
</ul>
<h4 id="APIBlueprint"><a href="#APIBlueprint" class="headerlink" title="APIBlueprint"></a>APIBlueprint</h4><ul>
<li>自定义markdown语法，用markdown来编写</li>
<li>由于自定义了太多的语法，个人认为最后的markdown文件非常混乱，因为很多时候多空格多空行不会影响结果</li>
<li>也能生成mock server</li>
<li>界面美观，但是不是很直观</li>
<li>能够导出markdown和yaml</li>
</ul>
<h4 id="RAP"><a href="#RAP" class="headerlink" title="RAP"></a>RAP</h4><ul>
<li>淘宝出品，Github上start数4000+</li>
<li>可以在公司内部搭建，不同的团队都可以在上面创建团队文档和分组</li>
<li>不能定义GET、POST、PUT、DELETE之外的请求</li>
<li>Model不能共享，写了一个地方另外一个地方还要写</li>
<li>只能定义200的响应，无法定义请求头、请求格式和相应格式</li>
<li>网页直接用js生成mock数据</li>
<li>界面有些地方好看，有些地方很丑。。。</li>
<li>只能导出为没有样式的html</li>
</ul>
<h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><p>我这里仅仅是简单地使用了swagger其中一项功能，即用<code>swagger-editor</code>编写API文档，生成yaml文件，然后通过<code>swagger-ui</code>来进行展示。由于仅仅是我本地搭建，所以两个组件都使用的docker搭建:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -i -t -p 8080:8080 --name swagger-ui -d swaggerapi/swagger-ui</div><div class="line">docker run -i -t -p 8081:8080 --name swagger-editor -d swaggerapi/swagger-editor</div></pre></td></tr></table></figure>
<p>然后访问<code>http://127.0.0.1:8080</code>即可访问<code>swagger-ui</code>，<code>http://127.0.0.1:8081</code>即可访问<code>swagger-editor</code>了。</p>
<p>接下来就是问题最多的如何使用的问题了，在第一次使用过程中，有诸多的问题需要解决，当然，主要的就是CROS问题。</p>
<h4 id="CROS跨域问题"><a href="#CROS跨域问题" class="headerlink" title="CROS跨域问题"></a>CROS跨域问题</h4><p>在使用editor的时候你可能会用到<code>Try this operation</code>功能，即把接口定义好，想要直接进行请求调试，填上参数后网页可能会在js报这样的错误: <code>XMLHttpRequest cannot load http://api.haofly.net/projects/test. Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://127.0.0.1:8081&#39; is therefore not allowed access.</code>这就是传说中的CROS问题了，原因是后台程序为了安全默认关闭了跨域的请求，这时候有两种方式，一种是修改nginx，使其能直接通过，一种是修改程序，使其在返回请求的时候能够附带加上CROS的信息。例如，我在Laravel下面，可以添加这样一个中间件:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnableCrossRequestMiddleware</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></div><div class="line">    &#123;</div><div class="line">        $response = $next($request);</div><div class="line">        $response-&gt;headers-&gt;set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://127.0.0.1:8081'</span>);</div><div class="line">        $response-&gt;headers-&gt;set(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Origin, Content-Type, Cookie, Accept, Authorization, Application, X-Requested-With'</span>);</div><div class="line">        $response-&gt;headers-&gt;set(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, PATCH, PUT, OPTIONS, DELETE'</span>);</div><div class="line">        $response-&gt;headers-&gt;set(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>);</div><div class="line">        <span class="keyword">return</span> $response;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，后台程序就允许<code>127.0.0.1:8081</code>这个域进行跨域访问了。</p>
<h4 id="OAuth2认证问题"><a href="#OAuth2认证问题" class="headerlink" title="OAuth2认证问题"></a>OAuth2认证问题</h4><p>swagger是无法自定义请求头的，这一点，其Github上面的Issues有解释，现在已经忘了，但是针对特殊的头，它还是会有特定的办法，比如OAuth2的认证，它本身就是支持的。</p>
<p>首先，需要在yaml文件中定义这样一些字段:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">securityDefinitions:</span>	<span class="comment"># 在根路径上添加这个字段</span></div><div class="line"><span class="attr">  Bearer:</span></div><div class="line"><span class="attr">    type:</span> apiKey</div><div class="line"><span class="attr">    name:</span> Authorization</div><div class="line"><span class="attr">    in:</span> header</div><div class="line">    </div><div class="line">/projects/&#123;projectName&#125;:</div><div class="line"><span class="attr">  get:</span></div><div class="line"><span class="attr">    summary:</span> 获取指定项目名的项目信息</div><div class="line"><span class="attr">    security:</span>			<span class="comment"># 在需要有认证的接口添加这个字段</span></div><div class="line"><span class="attr">      - Bearer:</span> []</div><div class="line"><span class="attr">    parameters:</span></div><div class="line"><span class="attr">      - name:</span> projectName</div><div class="line"><span class="attr">        in:</span> path</div><div class="line"><span class="attr">        type:</span> string</div><div class="line"><span class="attr">        description:</span> 项目名</div><div class="line"><span class="attr">        required:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    responses:</span></div><div class="line">      <span class="number">200</span>:</div><div class="line"><span class="attr">        description:</span> 项目信息</div></pre></td></tr></table></figure>
<p>之后，<code>swagger-editor</code>实时预览会出现<code>Security Authentication</code>的安全认证，可以将<code>token</code>填入其中，然后在<code>Try this operation</code>的时候勾选上<code>Security-&gt;Bearer</code>即可，可以看到自动在请求头中添加了<code>Authorization</code>字段了。</p>
<h4 id="Swagger-ui获取解析文件的问题"><a href="#Swagger-ui获取解析文件的问题" class="headerlink" title="Swagger-ui获取解析文件的问题"></a>Swagger-ui获取解析文件的问题</h4><p>其实<code>Swagger-ui</code>仅仅是接收一个url，通过该url获取yaml文件，然后负责解析而已。但是，这里的坑也是不少的。</p>
<p>首先，在<code>swagger-ui</code>中，默认发送的请求，是针对那个yaml文件所在的地方，这是十分坑的地方，所以yaml文件必须放在相应的API项目的文件里。暂时没有发现其他的解决方案。</p>
<p>其次，给定的url并不直接指向该文件的静态路径，而是需要添加CROS的响应头，所以不能直接用nginx的静态文件来处理。哎，所以基本上要做到的是，你直接访问那个url的时候，浏览器会弹出下载狂而不是直接显示那个文件的内容。</p>
<h3 id="文档编写语法"><a href="#文档编写语法" class="headerlink" title="文档编写语法"></a>文档编写语法</h3><p>虽然<code>json</code>比<code>yaml</code>好用，但是在这里我还是觉得<code>yaml</code>更好看，更方便，所以我这里都用<code>yaml</code>来用，并且如果要<code>json</code>，它都是可以互相转换的，语法都一样。以下来自<a href="http://swagger.io/specification/" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="attr">swagger:</span> <span class="string">'2.0'</span>						<span class="comment"># swagger的版本</span></div><div class="line"><span class="attr">info:</span></div><div class="line"><span class="attr">  title:</span> 文档标题</div><div class="line"><span class="attr">  description:</span>  描述</div><div class="line"><span class="attr">  version:</span> <span class="string">"v1.0"</span>					<span class="comment"># 版本号</span></div><div class="line"><span class="attr">  termsOfService:</span> <span class="string">""</span>				<span class="comment"># 文档支持截止日期</span></div><div class="line"><span class="attr">  contact:</span>							<span class="comment"># 联系人的信息</span></div><div class="line">  	name: <span class="string">""</span>						<span class="comment"># 联系人姓名</span></div><div class="line">  	url: <span class="string">""</span>							<span class="comment"># 联系人URL</span></div><div class="line">  	email: <span class="string">""</span>						<span class="comment"># 联系人邮箱</span></div><div class="line"><span class="attr">  license:</span>							<span class="comment"># 授权信息</span></div><div class="line">  	name: <span class="string">""</span>						<span class="comment"># 授权名称，例如Apache 2.0</span></div><div class="line">  	url: <span class="string">""</span>							<span class="comment"># 授权URL</span></div><div class="line"></div><div class="line"><span class="attr">host:</span> api.haofly.net				<span class="comment"># 域名，可以包含端口，如果不提供host，那么默认为提供yaml文件的host</span></div><div class="line"><span class="attr">basePath:</span> /							<span class="comment"># 前缀，比如/v1</span></div><div class="line"></div><div class="line"><span class="attr">schemes:</span>							<span class="comment"># 传输协议</span></div><div class="line"><span class="bullet">  -</span> http</div><div class="line"><span class="bullet">  -</span> https</div><div class="line">  </div><div class="line"><span class="attr">securityDefinitions:</span>				<span class="comment"># 安全设置</span></div><div class="line"><span class="attr">  api_key:</span></div><div class="line"><span class="attr">    type:</span> apiKey</div><div class="line"><span class="attr">    name:</span> Authorization				<span class="comment"># 实际的变量名比如，Authorization</span></div><div class="line"><span class="attr">    in:</span> header						<span class="comment"># 认证变量放在哪里，query或者header</span></div><div class="line"><span class="attr">  OauthSecurity:</span>					<span class="comment"># oauth2的话有些参数必须写全</span></div><div class="line"><span class="attr">    type:</span> oauth2</div><div class="line"><span class="attr">    flow:</span> accessCode				<span class="comment"># 可选值为implicit/password/application/accessCode</span></div><div class="line"><span class="attr">    authorizationUrl:</span> <span class="string">'https://oauth.simple.api/authorization'</span></div><div class="line"><span class="attr">    tokenUrl:</span> <span class="string">'https://oauth.simple.api/token'</span></div><div class="line"><span class="attr">    scopes:</span></div><div class="line"><span class="attr">      admin:</span> Admin scope</div><div class="line"><span class="attr">      user:</span> User scope</div><div class="line"><span class="attr">      media:</span> Media scope</div><div class="line"><span class="attr">  auth:</span></div><div class="line">  	type: oauth2</div><div class="line">  	description: <span class="string">""</span>					<span class="comment"># 描述</span></div><div class="line">  	authorizationUrl: http://haofly.net/api/oauth/</div><div class="line">  	name: Authorization				<span class="comment"># 实际的变量名比如，Authorization</span></div><div class="line">  	tokenUrl:</div><div class="line">  	flow: implicit					<span class="comment"># oauth2认证的几种形式，implicit/password/application/accessCode</span></div><div class="line">  	scopes:</div><div class="line">  	  write:post: 修改文件</div><div class="line">  	  read:post: 读取文章</div><div class="line">  	  </div><div class="line"><span class="attr">security:</span>							<span class="comment"># 全局的安全设置的一个选择吧</span></div><div class="line"><span class="attr">  auth:</span></div><div class="line"><span class="attr">    - write:</span>pets</div><div class="line"><span class="attr">    - read:</span>pets</div><div class="line">  	  </div><div class="line"></div><div class="line"><span class="attr">consumes:</span>							<span class="comment"># 接收的MIME types列表</span></div><div class="line"><span class="bullet">  -</span> application/json				<span class="comment"># 接收响应的Content-Type</span></div><div class="line"><span class="bullet">  -</span> application/vnd.github.v3+json</div><div class="line">  </div><div class="line"><span class="attr">produces:</span>							<span class="comment"># 请求的MIME types列表</span></div><div class="line"><span class="bullet">  -</span> application/vnd.knight.v1+json	<span class="comment"># 请求头的Accept值</span></div><div class="line"><span class="bullet">  -</span> text/plain; charset=utf<span class="bullet">-8</span></div><div class="line"></div><div class="line"><span class="attr">tags:</span>								<span class="comment"># 相当于一个分类</span></div><div class="line"><span class="attr">  - name:</span> post	</div><div class="line"><span class="attr">    description:</span> 关于post的接口</div><div class="line">    </div><div class="line"><span class="attr">externalDocs:</span></div><div class="line"><span class="attr">  description:</span> find more info here</div><div class="line"><span class="attr">  url:</span> https://haofly.net</div><div class="line">    </div><div class="line"><span class="attr">paths:</span>								<span class="comment"># 定义接口的url的详细信息</span></div><div class="line">  /projects/&#123;projectName&#125;:			<span class="comment"># 接口后缀，可以定义参数</span></div><div class="line"><span class="attr">    get:</span></div><div class="line"><span class="attr">      tags:</span>							<span class="comment"># 所属分类的列表</span></div><div class="line"><span class="bullet">        -</span> post	</div><div class="line"><span class="attr">      summary:</span> 接口描述				 <span class="comment"># 简介</span></div><div class="line"><span class="attr">      description:</span> 					<span class="comment"># 详细介绍</span></div><div class="line"><span class="attr">      externalDocs:</span>					<span class="comment"># 这里也可以加这个</span></div><div class="line">      	description:</div><div class="line">      	url:</div><div class="line"><span class="attr">      operationId:</span> <span class="string">""</span>				<span class="comment"># 操作的唯一ID</span></div><div class="line"><span class="attr">      consumes:</span> [string]			<span class="comment"># 可接收的mime type列表</span></div><div class="line"><span class="attr">      produces:</span> [string]			<span class="comment"># 可发送的mime type列表</span></div><div class="line"><span class="attr">      schemes:</span> [string]				<span class="comment"># 可接收的协议列表</span></div><div class="line"><span class="attr">      deprecated:</span> <span class="literal">false</span>				<span class="comment"># 该接口是否已经弃用</span></div><div class="line"><span class="attr">      security:</span>						<span class="comment"># OAuth2认证用</span></div><div class="line"><span class="attr">        - auth:</span> </div><div class="line">        	- write:post</div><div class="line">        	- read: read</div><div class="line"><span class="attr">      parameters:</span>					<span class="comment"># 接口的参数</span></div><div class="line"><span class="attr">        - name:</span> projectName			<span class="comment"># 参数名</span></div><div class="line"><span class="attr">          in:</span> path					<span class="comment"># 该参数应该在哪个地方，例如path、body、query等，但是需要注意的是如果in body，只能用schema来指向一个定义好的object，而不能直接在这里定义</span></div><div class="line"><span class="attr">          type:</span> string				<span class="comment"># 参数类型</span></div><div class="line"><span class="attr">          allowEmptyValue:</span> boolean			<span class="comment"># 是否允许为空值</span></div><div class="line"><span class="attr">          description:</span> 项目名		  <span class="comment"># 参数描述</span></div><div class="line"><span class="attr">          required:</span> <span class="literal">true</span>			<span class="comment"># 是否必须</span></div><div class="line"><span class="attr">          default:</span> *				<span class="comment"># 设置默认值</span></div><div class="line"><span class="attr">          maximum:</span> number			<span class="comment"># number的最大值</span></div><div class="line"><span class="attr">          exclusiveMaximum:</span> boolean	<span class="comment"># 是否排除最大的那个值</span></div><div class="line"><span class="attr">          minimum:</span> number			<span class="comment"># number的最小值</span></div><div class="line"><span class="attr">          exclusiveMinimum:</span> boolean</div><div class="line"><span class="attr">          maxLength:</span> integer		<span class="comment"># int的最大值</span></div><div class="line"><span class="attr">          minLength:</span> integer</div><div class="line"><span class="attr">          enum:</span> [*]					<span class="comment"># 枚举值</span></div><div class="line"><span class="attr">          items:</span>					<span class="comment"># type为数组的时候可以定义其项目的类型</span></div><div class="line"><span class="bullet">        -</span> $ref: <span class="string">"#/parameters/uuidParam"</span>	<span class="comment"># 这样可以直接用定义好的</span></div><div class="line"><span class="attr">      responses:</span>					<span class="comment"># 设置响应</span></div><div class="line">        <span class="number">200</span>:						<span class="comment"># 通过http状态来描述响应</span></div><div class="line"><span class="attr">          description:</span> Success		<span class="comment"># 该响应的描述</span></div><div class="line"><span class="attr">          schema:</span>					<span class="comment"># 定义返回数据的结构</span></div><div class="line">          	$ref: <span class="string">'#/definitions/ProjectDataResponse'</span>	<span class="comment"># 直接关联至某个model</span></div><div class="line">          </div><div class="line">  /another:	<span class="comment"># 另一个接口</span></div><div class="line">  	  responses:</div><div class="line">  	  	<span class="number">200</span>:</div><div class="line">  	  		description:</div><div class="line">  	  		schema:</div><div class="line">  	  		  type: object</div><div class="line">  	  		  properitis:</div><div class="line">  	  		  	data:</div><div class="line">  	  		  		$ref: <span class="string">'#/definitions/User'</span>	<span class="comment"># 关联</span></div><div class="line">  </div><div class="line"><span class="attr">definitions:</span>			<span class="comment"># Model/Response的定义，这里的定义不强制要求返回数据必须和这个一致，但是在swagger-ui上，会展示这里面的字段。</span></div><div class="line"><span class="attr">  Product:</span>				<span class="comment"># 定义一个model</span></div><div class="line"><span class="attr">    type:</span> object		<span class="comment"># model类型</span></div><div class="line"><span class="attr">    properties:</span>			<span class="comment"># 字段列表</span></div><div class="line"><span class="attr">      product_id:</span>		<span class="comment"># 字段名</span></div><div class="line"><span class="attr">        type:</span> integer	<span class="comment"># 字段类型</span></div><div class="line"><span class="attr">        description:</span> 	<span class="comment"># 字段描述</span></div><div class="line">	  product_name:</div><div class="line">	  	type: string</div><div class="line">	  	description: </div><div class="line"><span class="attr">  ProjectDataResponse:</span></div><div class="line">  	type: object</div><div class="line">  	properties:</div><div class="line">  		data:</div><div class="line">  			$ref: <span class="string">'#/definitions/ProjectResponse'</span>	<span class="comment"># model之间的关联，表示在data字段里面包含的是一个ProjectResponse对象</span></div><div class="line"></div><div class="line"><span class="attr">parameters:</span>				<span class="comment"># 可以供很多接口使用的params</span></div><div class="line"><span class="attr">  limitParam:</span></div><div class="line"><span class="attr">    name:</span> limit</div><div class="line"><span class="attr">    in:</span> query</div><div class="line"><span class="attr">    description:</span> max records to return</div><div class="line"><span class="attr">    required:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    type:</span> integer</div><div class="line"><span class="attr">    format:</span> int32</div><div class="line"></div><div class="line"><span class="attr">responses:</span>				<span class="comment"># 可以供很多接口使用的responses</span></div><div class="line"><span class="attr">  NotFound:</span></div><div class="line"><span class="attr">    description:</span> Entity not found.</div></pre></td></tr></table></figure>
<h4 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">integer: int32</div><div class="line">long: int64</div><div class="line">float</div><div class="line">double</div><div class="line">string</div><div class="line">byte</div><div class="line">binary</div><div class="line">boolean</div><div class="line">date</div><div class="line">dateTime</div><div class="line">password</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;swagger特点&quot;&gt;&lt;a href=&quot;#swagger特点&quot; class=&quot;headerlink&quot; title=&quot;swagger特点&quot;&gt;&lt;/a&gt;swagger特点&lt;/h2&gt;&lt;p&gt;swagger是我见过唯一还算将就的一个API文档制作与展示工具，其实最终都没让我找
    
    </summary>
    
      <category term="tools" scheme="https://haofly.net/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>编程之美系列——架构之美</title>
    <link href="https://haofly.net/beautiful-rchiecture/"/>
    <id>https://haofly.net/beautiful-rchiecture/</id>
    <published>2017-02-15T06:26:00.000Z</published>
    <updated>2017-02-20T03:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几个月我正在阅读的是编程之美系列书籍，《架构之美》是我看的第一部。全书只有前面两个部分吸引了我，后面的基本上是食之无味地略过。后来想想，此书成书于2009年，有些思想以及对编程的认识，在那个时候可能还是特别有吸引力的，但是拿到现在，可能并没有那么大的吸引力，一是因为这本书的后面部分讲得并不深入，另一个原因是新时代的语言满天飞，老式的语言对于我这种半吊子来说毫无兴趣。</p>
<p>书的前面部分主要讲了一些架构的基本概念和原则。比如，美丽的架构所展示的一些普遍的原则:</p>
<ul>
<li>一处一个事实：重复导致错误，所以应该避免</li>
<li>自动传播：由一些构建工具支持</li>
<li>架构包含构建：架构不仅包含运行时系统，而且必须包含它的构建方式</li>
<li>最少量机制：实现某个功能的最佳方式要视情况而定，但是美丽的架构不会追求“最佳”。</li>
<li>构建引擎</li>
<li>增长的阶</li>
<li>抵制熵增</li>
</ul>
<p>以及相应的更完整的解释:</p>
<ul>
<li>功能性(Functionality)：产品向他的用户提供哪些功能</li>
<li>可变性(Changeability)：软件将来可能需要哪些改变？哪些改变不太可能发生，不需要特别容易进行这些改变？</li>
<li>性能(Performance)：产品将达到什么性能？</li>
<li>容量(Capacity)：多少用户将并发使用该系统？该系统将为用户保存多少数据？</li>
<li>生态系统(Ecosystem): 该系统将与其他系统进行哪些交互</li>
<li>模块化(Modularity):</li>
<li>可构建行(Buildability): 如何将软件构建为一组组建，并能够独立实现和验证这些组件？哪些组件应该复用其他的产品，哪些应该从外部供应商处获得</li>
<li>产品化(Producibiity): 如果产品将以几种变体的形式存在，如何开发一个产品线，并利用这些变体的共性？产品线中的产品以怎样的步骤开发等</li>
<li>安全心(Security)</li>
</ul>
<p>概念性的东西其实到处都有，但是在第一部分里面，即使是讲述概念方面，作者的表达方式也是非常让人有读下去的欲望的。于是顺着作者的思路就来到了一个伟大软件架构的诞生的历程，不过那几个软件奇葩的名字还真是让人费解。好在作者用了最有效最真实的方法来讲述一个软件架构如何做到完美的。要想往完美的架构迈进，首先要做的就是承认，世界上没有完美的架构，只有在不断演化中，不断适应需求中，架构才能越来越完美。其实架构本身就已经很美了，每次我看到同事画的或是自己画的架构图，都觉得真美呀，特别是当自己画的架构图能够一下子让大家都看懂的时候。正如我在实际工作中所体验的一样，本书也认为架构的输出图是最重要的，有了图，我们的工程师才知道该做什么，才知道为什么要那样做。由于保密的问题，我肯定不会把公司内部的架构图放在这里，但是相信我，我们工程师画的每一张架构图，都是特别美的。</p>
<p>以前的我会认为编程是一件十分简单的事情，因为无论什么语言，只需要花两三天看一下基本的语法就能用那种语言写一个东西出来，但是在实际的工作中，我才明白，编程最重要的绝对不是编程语言，编程语言反而是最次要的，最重要的是如何根据当前的需求以及未来可能出现的需求而设计出的“最完美的架构”。</p>
<p>语录:</p>
<p><strong>软件的架构其实是和公司的组织结构及开发流程相互影响的。当然大多数情况下是软件的架构是被动者。但好的软件架构设计原则反作用于组织机构及开发流程也不是不可能的。</strong></p>
<p><strong>没有完美的架构。架构师就是力求做一个务实的“平衡美人”。不能一边坐拥着间接、长远才见效、容易视而不见的幕后优点，一边又对为了实现前者随之带来的小小应付成本挑三拣四，这样很容易捡了芝麻丢了瓜。。。</strong></p>
<p><strong>好的架构就是要分离关注点，也即“庖丁解牛，分而治之”。降低耦合性，这样复杂性也随着降低了，让参与系统各个方面的开发测试人员只需了解自己需要了解的模块，不需要了解整个系统，就能并行地进行工作了。只有这样才能开发出超越了单个人智慧所能理解的复杂软件生态系统平台。对于复杂系统的大部分参与人员：“知其然，也要知所以然”未必适用。</strong></p>
<p><strong>构架在最初构想的时候，可以脱离实际，思考出解决问题的最佳途径，但是在实施过程中，必须要考虑细节。</strong></p>
<p><strong>架构是一个过程，而非一个结果。</strong></p>
<p><strong>但是，你仍然可以不必过多担心功能就开始设计架构。你关注的是需要满足的品质。</strong></p>
<p><strong>Fred Brooks说，概念完整性是架构最重要的特征：“最好是让系统反映一组设计思想，而不是让系统包含许多好的思想，而这些思想却彼此独立而不协调”（1995）</strong></p>
<p><strong>注意：软件架构不是一成不变的。需要时就改变它。要想做到可以修改，架构就必须保持简单</strong></p>
<p><strong>像一座建筑或一个城市的物理架构一样，系统的架构必须适应环境，利用该架构创建的工件将存在于该环境之中。</strong></p>
<p><strong>在每一种情况下，我们都会先探索所有可能性，然后再做决定。我们会在“最后可能的时刻”做出决定，即不做决定的代价超过了实现该特征的代价。尽管如果一开始就用Spring，有些事情我们可能会做得不一样，但在后来加入它也没有让我们受苦。在早期的迭代中，我们关注的是发现应用想成为什么样子，而不是Spring希望我们如何构建应用。</strong></p>
<p><strong>如果，在采取了所有让任务能够由单人处理的方法之后，架构任务仍然巨大而复杂，不能由一人来完成，那么产品肯定是太复杂了，以致不实用且不应构建。换言之，单个用户必须能够理解计算机的架构。如果计划的架构不能由一个人设计，那它也不能被一个人理解。（1997）</strong></p>
<p><strong>例如，如果我们请你来设计一个“基于Web的应用”，你首先问我们页面布局和导航树，还是问下面这些问题： ·谁提供应用主机托管？托管的环境有什么技术限制吗？ ·你想运行在Windows服务器上还是在LAMP栈上？ ·你想支持多少并发用户？ ·应用需要怎样的安全性？有需要保护的数据吗？应用将运行在公网上还是在私有的内部网上？ ·你能为这些答案排列优先级吗？例如，用户数是否比响应时间更重要？</strong></p>
<p><strong>软件架构师的首要关注点不是系统的功能。</strong></p>
<p><strong>架构的最主要产出是什么？我的答案是：图。这里面有两层含义：一层含义是如同建筑师描绘的蓝图一样，用于引导实施者；另一层含义是架构师头脑中清晰的目标系统。如果架构师头脑中没有系统清晰的图像，他是没有办法把它画出来的。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几个月我正在阅读的是编程之美系列书籍，《架构之美》是我看的第一部。全书只有前面两个部分吸引了我，后面的基本上是食之无味地略过。后来想想，此书成书于2009年，有些思想以及对编程的认识，在那个时候可能还是特别有吸引力的，但是拿到现在，可能并没有那么大的吸引力，一是因为这本书
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>编程之美系列——安全之美</title>
    <link href="https://haofly.net/beautiful-security/"/>
    <id>https://haofly.net/beautiful-security/</id>
    <published>2017-02-15T06:26:00.000Z</published>
    <updated>2017-02-20T03:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>看完《架构之美》过后就开始看《安全之美》，感觉大量的章节读起来的感觉都差不多，并没有深入的体会也没有感觉对我有什么启发。我想，主要的原因可能是我大学本来就是学习的计算机大类里面的信息安全专业，书里面的大部分内容以及相关推理和讨论，学校的教材里面就讲过。当然我推测，学校的教材可能也是借鉴了外国的著作，也有可能是我们学校所使用的教材本来就是高手编写的。</p>
<p>当然，绝对不能说这本书写得差，只能说此书在我现在的阶段所能给我的帮助太少了，如果我刚刚接触信息安全这方面，可能会特别感兴趣，也会学习到很多。不过，确实有一点，安全确实很美，但是这本书却一直没有像预期的那样透过哲学或是其他什么方式突出安全的”美“。后来，我去看了豆瓣对此书的评价，评分只有6.7，果然比《架构之美》的7.1要少。而且评价里面几乎都是差评，即使有好评，也仅仅是读者对安全的评价，并没有对此书做过多的评价。只希望最后一部《数据之美》能不再让我失望了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看完《架构之美》过后就开始看《安全之美》，感觉大量的章节读起来的感觉都差不多，并没有深入的体会也没有感觉对我有什么启发。我想，主要的原因可能是我大学本来就是学习的计算机大类里面的信息安全专业，书里面的大部分内容以及相关推理和讨论，学校的教材里面就讲过。当然我推测，学校的教材
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>极客机械扫盲</title>
    <link href="https://haofly.net/%E6%9E%81%E5%AE%A2%E6%9C%BA%E6%A2%B0%E6%89%AB%E7%9B%B2/"/>
    <id>https://haofly.net/极客机械扫盲/</id>
    <published>2017-02-08T13:00:39.000Z</published>
    <updated>2017-02-20T16:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我从小就是一个机械迷，喜欢木匠，喜欢硬件开发，喜欢各种DIY，有了自己的房子，我就能搭建自己的小小工作间了。</p>
<h2 id="电器"><a href="#电器" class="headerlink" title="电器"></a>电器</h2><h3 id="电机"><a href="#电机" class="headerlink" title="电机"></a>电机</h3><ul>
<li>舵机: 里面有一个控制板和一个普通电机以及减速齿轮。可以精准控制旋转角度，但是只能180度旋转。常用于机器人的手臂旋转等。</li>
<li>减速电机: 和直流电机差不多，但是因为能减速所以扭矩非常大。</li>
<li>直流电机: 普通的一直转的电机，扭矩比较小。</li>
<li>步进电机: 能够控制旋转角度，扭矩属于中等。<a href="http://c.b1za.com/h.2UaXF7?cv=y8peSBG34A&amp;sm=fa8fa4" target="_blank" rel="external">淘宝链接: 混合式57步进电机，扭矩2.3Nm，高75.5mm</a></li>
</ul>
<h3 id="钻"><a href="#钻" class="headerlink" title="钻"></a>钻</h3><ul>
<li>电钻通常用于木材、薄金属，不用于混凝土。<ul>
<li>锂电钻：手上一个12V不能变速的锂电钻，买了过后幸福感爆棚啊，从此螺丝再也不用手动去拧了，嗯一下按钮即可。</li>
</ul>
</li>
</ul>
<ul>
<li>冲击钻: 和电锤原理一样，都是在旋转的时候做小幅度活塞运动。</li>
<li>电锤: 冲击钻打不动的就用电锤了。</li>
</ul>
<h3 id="线"><a href="#线" class="headerlink" title="线"></a>线</h3><ul>
<li>杜邦线: 用于实验板的引脚扩展，可以非常牢靠地和插针连接，无需焊接，可以快速进行电路试验。</li>
</ul>
<h2 id="非电器"><a href="#非电器" class="headerlink" title="非电器"></a>非电器</h2><h3 id="木料"><a href="#木料" class="headerlink" title="木料"></a>木料</h3><h3 id="铁料"><a href="#铁料" class="headerlink" title="铁料"></a>铁料</h3><h4 id="钉子"><a href="#钉子" class="headerlink" title="钉子"></a>钉子</h4><ul>
<li><p>水泥钉</p>
</li>
<li><p>膨胀螺丝(膨胀螺栓): 固定式灯具，如无特殊要求，墙壁开孔一般均为6毫米。</p>
<p>| 螺栓规格(毫米) | 钻孔尺寸 | (毫米) | 受力性能 | (公斤) |<br>| ——– | —- | —- | —- | —- |<br>|          | 直径   | 深度   | 允许拉力 | 允许剪力 |<br>| M6       | 10.5 | 40   | 240  | 180  |<br>| M8       | 12.5 | 50   | 440  | 330  |<br>| M10      | 14.5 | 60   | 700  | 520  |<br>| M12      | 19   | 75   | 1030 | 740  |<br>| M16      | 23   | 100  | 1940 | 1440 |</p>
</li>
<li><p>​</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我从小就是一个机械迷，喜欢木匠，喜欢硬件开发，喜欢各种DIY，有了自己的房子，我就能搭建自己的小小工作间了。&lt;/p&gt;
&lt;h2 id=&quot;电器&quot;&gt;&lt;a href=&quot;#电器&quot; class=&quot;headerlink&quot; title=&quot;电器&quot;&gt;&lt;/a&gt;电器&lt;/h2&gt;&lt;h3 id=&quot;电机&quot;
    
    </summary>
    
      <category term="tools" scheme="https://haofly.net/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>2016总结以及2017的计划</title>
    <link href="https://haofly.net/2016-to-2017/"/>
    <id>https://haofly.net/2016-to-2017/</id>
    <published>2017-01-27T14:11:48.000Z</published>
    <updated>2017-02-02T01:58:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2016总结"><a href="#2016总结" class="headerlink" title="2016总结"></a>2016总结</h2><p>2017年是我的本命年，果然，在2017一开始的时候就遇到几件大事，和女朋友吵了一场很大的架，差点错过彼此。可以说，整个一月份都是在吵架、和好的过程中度过的，最后还是和好了，并且我也确定了她，过年的时候居然还订了婚，果然，吵架是情侣关系的一个坎，过去了，就一生一世，过不去，就只是路人。这里又一次，站在农历的过年前，写下了我的总结，再一次感叹，那些每次在新年一开始就写总结的人在最后的一个月里是多么的空闲。</p>
<p>今年，是我和她在一起的第二年，今年吵架的次数肯定是无数次的，吵到要分手的程度也有四五次吧，不过，基本上是我转正过后，准确地说是在我拿到现在这份期待已久的工资的时候。有了这份工资，我终于可以买到自己想要的东西了，也因为有了这份工资，无形中，自己被欲望所奴役，导致忘记了曾经那个理性的自己，忘记了曾经那个善良的自己，少了对她的疼爱，多了对房、车、以及所有希望买的东西的欲望。一直以来我都在忙着做自己的事情，在乎自己在乎的东西，总是觉得自己认为的就是对的，但是我并没有真正去了解她，并没有真正走进过她，被欲望遮住了双眼的我，甚至多次讽刺她，瞧不起她。即使这样，她都还是原谅了我，最终还是和好如初，这样的女人，我怎么可能不把她留在身边呢，所以，我们决定今年请双方家长一起过来团年，明年春节订婚。具体结婚的日期，我希望是2018年10月1日，因为那一天我生日，我在大概10岁的时候就算好了那一天是我的生日，从小学开始我就告诉身边的人，我要在那一天结婚，没想到，这个愿望还真有可能实现。而且晚婚假15天，那天我刚好25岁，真巧。</p>
<p>今年，我们买房了。一套走几分钟才能看到江的”江景房“，两室一厅，不算大，但是住我们倆，再加父母偶尔来一下，完全够了，而且阳台和厨房超大，以后可以更多的享受做饭和休闲的乐趣。旁边有两个公园，距离嘉陵江很近，非常适合养生，感觉住在这里可以多活好几年呢。贷款加上利息接近百万，要还款30年，其实没什么，刚需房，想买的时候就买，毕竟回头看去，只过了两个月，那套房子的价格又涨了我一年多的工资总数。另外，对于爸爸妈妈出钱付首付和花精力来帮我装修房子，还是只能说此生报不完的恩情。</p>
<p>今年，毕业了，正式工作了，虽然工作经验已经有了一年半，但是今年算是真正的开始工作了。毕业答辩有惊无险的过了，对于同班同学，由于大三才呆在一起，所以感情并不大，反而对以前那个班的同学感情比较深一点，当然，最深的还是室友，经常会想起他们，经常想起我在寝室飙歌，可惜，一切都回不去了。现在大家每天都有各自的工作，晚上回到家，大家也都很累，根本没时间大家联系了。不过还是希望大家，前程似锦。工作了三个月顺利转正，由于已经工作一年，对这些并无感，而且上家公司福利待遇超级好，哈哈。</p>
<p>今年，学日语的目标没有达成，连五十音都还不会呀。因为买房，所以给父母做全身检查的目标也没达成，结交IT界好友的目标没达成。。。。唯一达成的是博客日访问量10+盒SegmentFault声望1k+。当然，这些是我在今年年中定下的目标。每次，我的生命中有大事的时候，我就会每天想着它而不能干其他的事情，比如要毕业了，我心里一直想着毕业的事情，要买房了，一直想着买房的事情，要装修就一直想着装修的事情，这样一件接着一件，我觉得我每天都在浪费时间，突然觉得每个人的生命中都会遇到这样或者那样的大事，但可能只有我，需要花特别多的精力在上面，甚至不去想它就无法用心做其他的事情。无论怎样，希望明年的自己能够更强大，能够战胜拖延症。。。</p>
<p>2016，感谢你，让我变成今天的自己。</p>
<h2 id="2017计划"><a href="#2017计划" class="headerlink" title="2017计划"></a>2017计划</h2><h3 id="豪翔天下"><a href="#豪翔天下" class="headerlink" title="豪翔天下"></a>豪翔天下</h3><ul>
<li>[ ] 简书: 1000+喜欢</li>
<li>[ ] 微信: 100+订阅</li>
<li>[ ] 微博: 粉丝+1000</li>
<li>[ ] 博客: 日均20+</li>
<li>[ ] 专栏: 1个</li>
<li>[ ] 阅读: 20+本</li>
<li>[ ] GitHub: 100+ star</li>
<li><p>[ ] SegmentFault: 3k+声望</p>
</li>
<li><p>玩玩儿硬件开发</p>
</li>
<li>搭建家庭NAS</li>
<li>多做几个side project</li>
<li>日语二级(这是我2014年定下的2015年的目标，2016年并没有完成。。。)</li>
</ul>
<h3 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h3><ul>
<li>[ ] 研究理财产品: 10+</li>
<li><p>[ ] 和女朋友存款1w+(婚戒、买车)，(2017年1月26日，发年终奖了，婚戒已买)</p>
</li>
<li><p>坚持记账</p>
</li>
<li>把家装修成想要的样子</li>
</ul>
<h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ul>
<li>平均每天1w+步</li>
<li>每周一次，运动量大一点的运动</li>
<li>参加一次集体运动，如马拉松等</li>
</ul>
<h3 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h3><ul>
<li>和女朋友至少一次出省旅游</li>
<li>至少一次带家人旅游</li>
<li>和女朋友多次省内旅游</li>
<li>多去和老朋友聚聚会</li>
<li>家人生日尽量回家</li>
<li>带双方父母做健康检查</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2016总结&quot;&gt;&lt;a href=&quot;#2016总结&quot; class=&quot;headerlink&quot; title=&quot;2016总结&quot;&gt;&lt;/a&gt;2016总结&lt;/h2&gt;&lt;p&gt;2017年是我的本命年，果然，在2017一开始的时候就遇到几件大事，和女朋友吵了一场很大的架，差点错过彼此。
    
    </summary>
    
      <category term="边走边想" scheme="https://haofly.net/categories/%E8%BE%B9%E8%B5%B0%E8%BE%B9%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>MAC使用Aria2高速下载百度网盘内容</title>
    <link href="https://haofly.net/aria2/"/>
    <id>https://haofly.net/aria2/</id>
    <published>2017-01-18T05:47:00.000Z</published>
    <updated>2017-01-18T05:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Aria2简介"><a href="#Aria2简介" class="headerlink" title="Aria2简介"></a>Aria2简介</h3><p><a href="https://github.com/aria2/aria2/" target="_blank" rel="external">Aria2</a>是一个轻量级的多源多线程的跨平台的命令行下载工具，支持HTTP/HTTPs、FTP、SFTP、BitTorrent和Metalink等下载方式。</p>
<h3 id="Mac安装和使用Aria2"><a href="#Mac安装和使用Aria2" class="headerlink" title="Mac安装和使用Aria2"></a>Mac安装和使用Aria2</h3><ol>
<li>安装Aria2命令行工具</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install aria2	# 这样即可，如果下载不下来，就让brew走全局shadowsocks代理</div></pre></td></tr></table></figure>
<ol>
<li><p>(可选)安装<a href="https://github.com/yangshun1029/aria2gui" target="_blank" rel="external">ria2GUI</a>，这是Aria2的桌面GUI程序，集成了aria2c，支持多线程下载，为完成任务退出自动保存，支持PT/BT，可以显示整体下载速度。方便管理，从github进行下载，下载完成后直接解压打开就是个dmg应用了。</p>
</li>
<li><p>安装百度网盘的导出工具，<a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="external">谷歌浏览器插件下载地址</a>，由于谷歌把它禁用了，得自己下载来使用(貌似是违反了谷歌插件的不能改变网页内容的条例)。</p>
</li>
<li><p>现在可以打开百度网盘，直接选择导出到rpc即可开始下载了。</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Aria2简介&quot;&gt;&lt;a href=&quot;#Aria2简介&quot; class=&quot;headerlink&quot; title=&quot;Aria2简介&quot;&gt;&lt;/a&gt;Aria2简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/aria2/aria2/&quot; target=&quot;
    
    </summary>
    
      <category term="tools" scheme="https://haofly.net/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka 教程</title>
    <link href="https://haofly.net/kafka/"/>
    <id>https://haofly.net/kafka/</id>
    <published>2016-12-23T03:20:44.000Z</published>
    <updated>2016-12-26T03:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="生产者-Producer"><a href="#生产者-Producer" class="headerlink" title="生产者(Producer)"></a>生产者(Producer)</h3><h3 id="消费者-Consumer"><a href="#消费者-Consumer" class="headerlink" title="消费者(Consumer)"></a>消费者(Consumer)</h3><p>消费消息。每个<code>consumer</code>属于一个特定的<code>consumer group</code>。使用<code>consumer high level API</code>时，同一个topic的一条消息只能被同一个<code>consumer group</code>内的一个<code>consumer</code>消费，但多个<code>consumer group</code>可同时消费这一消息。</p>
<h3 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群(Cluster)"></a>集群(Cluster)</h3><p>宏观来看，Kafka主体包含的就是三部分: 生产者、消费者和集群，一个集群就是多个Broker的集合。</p>
<h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>已经发布的消息就会保存在集群中的某个Broker中去。</p>
<h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>用来区别message的种类，比如很多时候，与A相关的日志统一的topic定义为A，B相关的日志统一的topic定义为B，这样就不用一个一个单独地订阅了。物理上不通topic的消息分开存储，逻辑上一个topic的消息虽然保存于一个或多个broker上，但是用户只需指定消息的topic即可生产或消费数据而不必关心数据在哪里。</p>
<h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>Kafka中每个Topic都会有一个或多个Partition，每个Partition对应一个文件夹，文件夹下存储这个Partition的所有消息和索引。Kafka内部会根据算法得出一个值，根据这个值放入对应的partition目录中。所以读取时间复杂度为O(1)。分区的每一个消息都有一个连续的序列号叫做offset，用来在分区中唯一标识这个消息。</p>
<h3 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h3><p>一个partition由多个Segment组成，一个Partition代表一个文件夹，一个Segment则代表该文件夹下的文件。Segment有大小限制，由<code>log.segment.bytes</code> 定义。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker方式安装"><a href="#docker方式安装" class="headerlink" title="docker方式安装"></a>docker方式安装</h3><p><code>docker-compose.yml</code>文件:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  zookeeper:</span></div><div class="line"><span class="attr">    image:</span> wurstmeister/zookeeper</div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      JMX:</span> <span class="number">9000</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"2181:2181"</span></div><div class="line"><span class="attr">  kafka:</span></div><div class="line"><span class="attr">    image:</span> wurstmeister/kafka	<span class="comment"># 这个镜像使用文档见https://github.com/wurstmeister/kafka-docker</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"9092"</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      KAFKA_ADVERTISED_HOST_NAME:</span> <span class="number">172.31</span><span class="number">.148</span><span class="number">.174</span>	<span class="comment"># docker宿主机的IP，直接ifconfig获取，这是重点，否则，在容器内部启动生产者消费者都会失败的</span></div><div class="line"><span class="attr">      KAFKA_CREATE_TOPICS:</span> <span class="string">"test:1:1"</span>				<span class="comment"># 自动创建一个默认的topic</span></div><div class="line"><span class="attr">      KAFKA_ZOOKEEPER_CONNECT:</span> zookeeper:<span class="number">2181</span></div><div class="line"><span class="attr">      KAFKA_AUTO_CREATE_TOPICS_ENABLE:</span> <span class="string">"false"</span>		<span class="comment"># 禁用掉自动创建topic的功能，使用上面的镜像，kafka的参数设置都可以以这样的方式进行设置</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> /var/run/docker.sock:/var/run/docker.sock</div><div class="line"><span class="attr">  kafka-manager:</span></div><div class="line"><span class="attr">    image:</span> sheepkiller/kafka-manager		<span class="comment"># 如果要安装web管理工具可以同时安装这个，最后通过苏主机IP的9000端口进行访问，例如172.31.148.174:9000</span></div><div class="line"><span class="attr">    links:</span></div><div class="line"><span class="bullet">      -</span> kafka</div><div class="line"><span class="bullet">      -</span> zookeeper</div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      ZK_HOSTS:</span> zookeeper:<span class="number">2181</span></div><div class="line"><span class="attr">      APPLICATION_SECRET:</span> <span class="string">"letmein"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"9000:9000"</span></div><div class="line"><span class="attr">    expose:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"9000"</span></div></pre></td></tr></table></figure>
<p>安装命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker-compose up -d			# 默认只会有一个kafka实例</div><div class="line">docker-compose scale kafka=n	# 将kafka实例增加到n个，什么都不用修改，就能直接建立一个集群</div><div class="line">docker-compose stop				# 暂停所有容器</div><div class="line">docker-compose start 			# 开启所有容器</div><div class="line">docker-compose rm -f 			# 删除所有容器</div></pre></td></tr></table></figure>
<h3 id="kafka命令"><a href="#kafka命令" class="headerlink" title="kafka命令"></a>kafka命令</h3><h4 id="kafka-console-consumer-sh"><a href="#kafka-console-consumer-sh" class="headerlink" title="kafka-console-consumer.sh"></a>kafka-console-consumer.sh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic test	# 启动一个消费者，监听test这个topic</div></pre></td></tr></table></figure>
<h4 id="kafka-console-producer-sh"><a href="#kafka-console-producer-sh" class="headerlink" title="kafka-console-producer.sh"></a>kafka-console-producer.sh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic test	# 启动一个生产者，直接输入消息回车即可发送消息了</div></pre></td></tr></table></figure>
<h4 id="kafka-consumer-groups-sh"><a href="#kafka-consumer-groups-sh" class="headerlink" title="kafka-consumer-groups.sh"></a>kafka-consumer-groups.sh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kafka-consumer-groups.sh --new-consumer --bootstrap-server localhost:9092 --list	# 查看新消费者列表</div><div class="line">kafka-consumer-groups.sh --new-consumer --bootstrap-server localhost:9092 --describe --group kafka-python-default-group	# 查看某消费者的消费详情，这里的消费者名称就是kafka-python-default-group</div></pre></td></tr></table></figure>
<h4 id="kafka-producer-perf-test-sh自带的压测工具"><a href="#kafka-producer-perf-test-sh自带的压测工具" class="headerlink" title="kafka-producer-perf-test.sh自带的压测工具"></a>kafka-producer-perf-test.sh自带的压测工具</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kafka-producer-perf-test.sh --topic test --num-records 10000 --record-size 1 --throughput 100  --producer-props bootstrap.servers=localhost:9092	# 总共100条数据，每条大小是1</div></pre></td></tr></table></figure>
<h4 id="kafka-topics-sh"><a href="#kafka-topics-sh" class="headerlink" title="kafka-topics.sh"></a>kafka-topics.sh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kafka-topics.sh --list --zookeeper zookeeper:2181		# 列出所有的topic</div><div class="line">kafka-topics.sh --describe --zookeeper zookeeper:2181	# 查看集群描述</div></pre></td></tr></table></figure>
<h2 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a>安全认证</h2><p>Kafka可以配合SSL+ACL来进行安全认证: <a href="http://orchome.com/185" target="_blank" rel="external">http://orchome.com/185</a></p>
<h2 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h2><ul>
<li><p><strong>容器内部启动生产者出现错误:<code>[2016-12-26 03:03:39,983] WARN Error while fetching metadata with correlation id 0 : {test=UNKNOWN_TOPIC_OR_PARTITION} (org.apache.kafka.clients.NetworkClient)</code></strong></p>
<p>是因为<code>docker-compose</code>文件里面的宿主讥IP设置出错，如果是动态IP的话就没办法了，只能删除重新创建了</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;重要概念&quot;&gt;&lt;a href=&quot;#重要概念&quot; class=&quot;headerlink&quot; title=&quot;重要概念&quot;&gt;&lt;/a&gt;重要概念&lt;/h2&gt;&lt;h3 id=&quot;生产者-Producer&quot;&gt;&lt;a href=&quot;#生产者-Producer&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="tools" scheme="https://haofly.net/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>《一生里的某一刻》——超简短书评</title>
    <link href="https://haofly.net/yishenglidemouyike/"/>
    <id>https://haofly.net/yishenglidemouyike/</id>
    <published>2016-12-20T13:52:00.000Z</published>
    <updated>2016-12-20T13:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>之所以要叫超简短书评，是因为这本书我根本没看完，只看了前面几篇文章，我就毫无继续看下去的动力了。说来也怪，我看过那么多的书，还从来没有这种感觉。可能是最近身边的杂事太多，也可能是这本书确实不如期望中的那样好。给人的感觉就是作者在写身边的小故事，但是故事平平静静，并且平静中并没有什么惊喜，甚至我连他到底在讲什么都不知道。最后，和大多数散文集一样，此书书名“一生里的某一刻”同样取自其中一篇。然后我就直接跳到那一篇。果然，依然是云里雾里的。超简短书评，就这样吧，相信大家也能看出我对此书的态度了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之所以要叫超简短书评，是因为这本书我根本没看完，只看了前面几篇文章，我就毫无继续看下去的动力了。说来也怪，我看过那么多的书，还从来没有这种感觉。可能是最近身边的杂事太多，也可能是这本书确实不如期望中的那样好。给人的感觉就是作者在写身边的小故事，但是故事平平静静，并且平静中并
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>Python教程</title>
    <link href="https://haofly.net/python/"/>
    <id>https://haofly.net/python/</id>
    <published>2016-12-20T04:05:30.000Z</published>
    <updated>2017-03-13T09:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><a href="http://cpython-devguide.readthedocs.io/en/latest/#python-developer-s-guide" target="_blank" rel="external">Python Developer’s Guide</a></p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># for CentOS</div><div class="line">yum groupinstall -y &apos;development tools&apos;</div><div class="line">yum install -y zlib-dev openssl-devel sqlite-devel bzip2-devel xz-libs</div><div class="line"># for Ubuntu</div><div class="line">apt-get install -y build-essential libssl-dev</div><div class="line"></div><div class="line"># Linux下不区分64和32位</div><div class="line">wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz	</div><div class="line">xz -d Python-3.6.0.tar.xz</div><div class="line">tar -xvf Python-3.6.0.tar</div><div class="line">cd Python-3.6.0</div><div class="line">./configure &amp;&amp; make &amp;&amp; make altinstall</div><div class="line">cd</div><div class="line"></div><div class="line"># 如果默认没有安装pip，那么可以这样安装</div><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div><div class="line">python3.5 get-pip.py</div><div class="line"></div><div class="line"># Python3.5版本默认有安装pip的，如果没有，那么就酱紫</div><div class="line">wget https://bootstrap.pypa.io/get-pip.py</div><div class="line">python3.3 get-pip.py</div></pre></td></tr></table></figure>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">all([])	<span class="comment"># 判断列表里面是否所有的值都为1</span></div><div class="line">any([])	<span class="comment"># 判断列表里面是否有值都为1</span></div><div class="line"></div><div class="line">li[::<span class="number">-1</span>]	<span class="comment"># 逆序列表</span></div><div class="line">li[::<span class="number">2</span>]		<span class="comment"># 列表里面的奇数位，最后那个2表示不长，前面::表示整个数组</span></div><div class="line">li[<span class="number">1</span>::<span class="number">2</span>]	<span class="comment"># 列表里面的偶数位</span></div><div class="line"><span class="keyword">del</span>(list[<span class="string">'下标'</span>])	<span class="comment"># 删除指定位置的元素，要注意每次都会更新，比如del(list[0], list[0])就是删除前面两个元素</span></div><div class="line">li.index(min(li))	<span class="comment"># 列表最小值，返回位置，最大用max</span></div><div class="line">li.index(obj)		<span class="comment"># 获取指定值在数组里面的下标</span></div><div class="line">li.remove(obj)	<span class="comment"># 删除指定元素</span></div><div class="line"></div><div class="line"><span class="comment"># while/for循环都能用else，我擦嘞</span></div><div class="line"><span class="keyword">while</span> false:</div><div class="line">	sdaghoahg</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	aosdhgo</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> reversed(list) <span class="comment"># 列表的反向迭代</span></div><div class="line">list(set(list))  <span class="comment"># 列表去重，不过会乱序</span></div><div class="line">li.append([<span class="number">1</span>,<span class="number">2</span>])	<span class="comment"># 添加一个元素</span></div><div class="line">li.extend([<span class="number">1</span>,<span class="number">2</span>])	<span class="comment"># 添加多个元素</span></div></pre></td></tr></table></figure>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><pre><code># 字典遍历
for key in dict:
    print(key, dict[key])
for key, vlaue in dict.items():
    print(key, value)

# 特殊的key
li = {
    &apos;a&apos;: &apos;b&apos;,
    None: &apos;c&apos;,
    &apos;&apos;: &apos;&apos;
}

if &apos;a&apos; in dict        # 判断key是否存在
dict.get(&apos;a&apos;, &apos;b&apos;)    # 如果不存在那么给一个默认值
dict.keys()            # 获取所有的key

# 表达式解析
a = {&apos;x&apos;: 1, &apos;y&apos;: 2}
globals().update(a)
print(x, y)

# 漂亮地打印json数据
print(json.dump(sdata, indent=2))

# 有序字典(占用的内存是普通字典的两倍)
from collections import OrderedDict
d = OrderedDict()

# 字典组成的列表排序
通过某个关键字来排序
rows = [{}, {}]  # 假设这是一个由字典组成的列表
from operation import itemgetter
result = sorted(rows, key=itemgetter(&apos;onekey&apos;))
通过某个值排序，使用zip()函数，它会先将键和值翻转过来，需要注意的是zip()函数是一个只能访问一次的迭代器
prices = {&apos;A&apos;: 1, &apos;B&apos;: 2, &apos;C&apos;: 3}
min_price = min(zip(prices.values(), prices.keys()))  # 获取value最小的
prices_sorted = sorted(zip(prices.values(), prices.keys()))

# 字典合并（ChainMap只是将两个字典在逻辑上变为一个，在它上面的修改只会影响第一个字典a)
from collections import ChainMap
c = ChainMap(a, b)
</code></pre><h4 id="类-函数"><a href="#类-函数" class="headerlink" title="类/函数"></a>类/函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 几个特殊的方法</span></div><div class="line">x.__class__.__name__  <span class="comment"># 获取实例的类名</span></div><div class="line"></div><div class="line"><span class="comment"># 继承相关</span></div><div class="line">ChildClass.mro()	<span class="comment"># 按顺序打印类当前类的继承顺序，多继承也会有顺序</span></div><div class="line">super().func()	<span class="comment"># 调用父类的方法</span></div><div class="line">super(ChildClass, self).func()	<span class="comment"># 2里面调用父类的方法</span></div><div class="line"></div><div class="line"><span class="comment"># 通过字符串调用方法</span></div><div class="line">getattr(foo, <span class="string">'bar'</span>)()</div><div class="line"></div><div class="line"><span class="comment"># lambda表达式，相当于一个简单的函数，例如:</span></div><div class="line">g = <span class="keyword">lambda</span> x: x*<span class="number">2</span></div><div class="line">g(<span class="number">3</span>) <span class="comment"># 输出6</span></div><div class="line"></div><div class="line"><span class="comment"># 自定义Beans，类似Java Beans，将字典直接转换为对象的形式，例如</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line">UserResponse = namedtuple(<span class="string">'UserResponse'</span>, [</div><div class="line">  <span class="string">'uid'</span>,</div><div class="line">  <span class="string">'name'</span></div><div class="line">])</div></pre></td></tr></table></figure>
<h4 id="类型检查-Type-Hint"><a href="#类型检查-Type-Hint" class="headerlink" title="类型检查(Type Hint)"></a>类型检查(Type Hint)</h4><p>从3.5开始，Python提供了类型检查功能，当然类型检查仅仅用于检查，并不会对程序的执行有任何的影响，但是配合IDE有代码提示过后，一切都变得方便了起来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a: int)</span> -&gt; int	# 这表示该函数的参数a要求是整型，返回值是整型号</span></div><div class="line"></div><div class="line">name: str = <span class="string">'haofly'</span>	<span class="comment"># 直接给变量指定类型</span></div><div class="line"></div><div class="line"><span class="comment"># 返回组合类型</span></div><div class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Tuple</div><div class="line">Result = Tuple[Tuple[int, int], str]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(strings: str, lines: List[str], line_number: int)</span> -&gt; Result:</span>	<span class="comment"># 这样子定义组合的返回类型</span></div></pre></td></tr></table></figure>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 随机数</span></div><div class="line"><span class="keyword">import</span> random</div><div class="line">random.choice(list)  <span class="comment"># 随机选择一个</span></div><div class="line">random.sample(list, n) <span class="comment"># 随机选择n个</span></div><div class="line">random.shuffle(list)  <span class="comment"># 打乱选择择后的顺序</span></div><div class="line">random.randint(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 0到10的随机整数</span></div><div class="line">random.random()   <span class="comment"># 0到1得浮点数</span></div><div class="line">random.getrandbits(<span class="number">100</span>) <span class="comment"># 获取100位随机数</span></div><div class="line">random.uniform(begin, end)  <span class="comment"># 生成0到10的随机浮点数</span></div><div class="line"></div><div class="line"><span class="comment"># 四舍五入</span></div><div class="line">round(<span class="number">1.23</span>, <span class="number">1</span>)   <span class="comment"># 第二个参数表示保留几位小数</span></div><div class="line">format(x, <span class="string">'0.2f'</span>)  <span class="comment"># 保留两位小数</span></div><div class="line"></div><div class="line"><span class="comment"># 除法</span></div><div class="line"><span class="number">10</span>%<span class="number">3</span> = <span class="number">3</span>  <span class="comment"># 整除</span></div><div class="line"></div><div class="line"><span class="comment"># 生成一组数</span></div><div class="line">range(<span class="number">2</span>)	// 生成[<span class="number">0</span>, <span class="number">1</span>]</div><div class="line">range(<span class="number">1</span>, <span class="number">2</span>) // 生成[<span class="number">1</span>]</div><div class="line">range(<span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>)	// 生成(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>)</div><div class="line">xrange用法与range一样，只是返回的不是一个生成好的列表，而是一个生成器，所以性能更好</div></pre></td></tr></table></figure>
<h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">os.mkdir # 新建目录、文件</div><div class="line">os.makedires('a/b')  # 创建多级目录</div><div class="line">os.path.join(path, filename)	# 合并成全路径，用这个函数不用管路径用/还是\，也不用管最后有没有/</div><div class="line">os.remove(filename)  # 删除单个文件</div><div class="line">os.rmdir(dirname)   # 删除空目录</div><div class="line"></div><div class="line"># 用其他库</div><div class="line">import shutil</div><div class="line">shutil.rmtree('mydir')   # 删除非空目录</div><div class="line">shutil.copy(originame, tmpname)  # 复制单个文件</div><div class="line">shutil.copytree(root_of_tree, desetination_dir, True) # 复制目录树</div><div class="line">os.listdir('dirname')  # 显示一个目录下的所有文件和文件夹的名称</div><div class="line">os.path.isdir(filename)  # 是否是目录</div><div class="line">os.path.isfile(filename) # 是否是文件</div><div class="line">os.path.islink  # 是否是链接</div><div class="line">os.path.getsize(filename) # 获取文件大小</div><div class="line">os.path.basename(fname)  # 从完整路径获取其路径</div><div class="line">os.path.dirname(fname) # 从完整路径获取其名称</div><div class="line">os.getcwd()   # 获取当前目录</div><div class="line">os.chdir(newdir)  # 切换目录</div><div class="line">os.path.exists(name)  # 判断目录是否存在</div><div class="line">os.rename(original_name, new_name) # 修改文件名称</div><div class="line"></div><div class="line"># 文件打开与关闭</div><div class="line">fp = open('a.txt', 'w')</div><div class="line">fp.close()</div><div class="line">或者</div><div class="line">with open('a.txt', 'w') as fp:   # 这种方式不需要close</div><div class="line">	print('it's...', file=fp)</div><div class="line"># 或者</div><div class="line">import codecs</div><div class="line">fp = codecs.open(filename, 'w', 'utf-8') # 这种方式可以解决很多编码问题</div><div class="line">fp.write(string)</div><div class="line">fp.close()</div><div class="line"></div><div class="line"># 文件操作的标识</div><div class="line">w: 只读</div><div class="line">r: 只写</div><div class="line">r+: 可用于读写，但是如果打开不读，直接就写，可能会覆盖，因为一打开的时候文件指针是在文件开头的</div><div class="line"></div><div class="line"># 读取文件</div><div class="line">fp.readline()  # 从文件读取一行数据</div><div class="line">for each_line in fp:   # 可迭代获取每一行数据</div><div class="line">	print(each_line)</div><div class="line">fp.read()  # 读取所有数据</div><div class="line">fp.readlines()  # 读取所有的行，返回一个列表，需要注意的是这个只会读取一次，读取第二次的时候就会返回空了</div><div class="line">codecs.open(path, 'r', 'utf-8').read().splitlines() # 获取所有的数据，并使用splitlines()分隔行，这样在每行的后面就不会出现换行符了</div><div class="line">print('string', file=fp)  # 直接写入文件</div><div class="line"></div><div class="line"># 清空文件内容</div><div class="line">fp.seek(0, 0) # 这一句可以保证之前是否读取，都能清空</div><div class="line">fp.truncate() # 清空语句</div><div class="line"></div><div class="line"># 文件压缩zip库，这个库是纯Python写的，不是用C，解压速度比较慢，而且不支持压缩的时候加密，如果要想在压缩的时候加密，可以使用网上现成的一个库https://github.com/smihica/pyminizip，依赖于zlib库，但是如果要依赖zlib库为什么不直接用python调用zlib库的代码呢</div><div class="line">          </div><div class="line"># 计算文件的md5值</div><div class="line">import hashlib</div><div class="line">hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()</div></pre></td></tr></table></figure>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><pre><code>try:
    raise RuntimeError(&apos;错误原因&apos;)
except Exception as e:
    print(e)或者print(str(e))或者print(unicode(e))
    # 上面是打印基本的错误信息，如果要打印错误信息／文件名／错误行数，那么可以这样子:
    exc_type, exc_obj, exc_tb = sys.exc_info()
    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    print(exc_type, fname, exc_tb.tb_lineno)
</code></pre><h4 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 执行系统命令</span></div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line">subprocess.check_output(command, shell=<span class="keyword">True</span>)	<span class="comment"># 这个命令就是为了代替os.system,os.spawn,os.popen,popen2,commands的</span></div><div class="line"></div><div class="line"><span class="comment"># 接收输入</span></div><div class="line">a = input(<span class="string">'Input: '</span>)</div></pre></td></tr></table></figure>
<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">在目录下面加上__init__.py就变成了一个包，<span class="keyword">import</span>包内部的模块使用<span class="string">'.'</span>来分割，__init__.py里面可以定义一些全局变量，__all__指定了此包被<span class="keyword">import</span> *的时候，哪些模块会被<span class="keyword">import</span>进来</div><div class="line"><span class="comment"># 带点号，表示当前目录下的模块，如</span></div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> client</div><div class="line"><span class="comment"># 可以在一个模块的根目录下得__init__.py定义一些基本的东西，比如加载一些模块呀，设置一些全局变量(__author__这样的东西)啥的</span></div><div class="line"></div><div class="line">package.__version__  ＃获取package的版本</div><div class="line"></div><div class="line"><span class="comment"># 从github直接安装包的方法http://stackoverflow.com/questions/8247605/configuring-so-that-pip-install-can-work-from-github?answertab=active#tab-top</span></div><div class="line"><span class="comment"># 需要注意的是github上的库要有个固定的目录格式，还要有个setup.py文件，才能直接使用如下的命令，</span></div><div class="line">pip install git+git@github.com:lynzt/python_people_names.git</div><div class="line">    </div><div class="line"><span class="comment"># 将python包打包成debian包，可以用https://github.com/spotify/dh-virtualenv</span></div><div class="line"></div><div class="line"><span class="comment"># 使用豆瓣的PIP源，例如</span></div><div class="line">sudo pip3 install scrapy -i https://pypi.douban.com/simple</div></pre></td></tr></table></figure>
<h4 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h4><p>程序在使用一个名字时，会从当前名字空间开始搜索，顺序则是LEGB:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># locals: 函数内部的名字空间，一般包括函数的局部变量以及形参</span></div><div class="line"><span class="comment"># enclosing function: 潜逃函数中外部函数的名字空间</span></div><div class="line"><span class="comment"># globals: 当前的模块空间，类似于全局变量</span></div><div class="line"><span class="comment"># __builtins__: 内置模块空间</span></div></pre></td></tr></table></figure>
<h2 id="魔术-自省方法"><a href="#魔术-自省方法" class="headerlink" title="魔术/自省方法"></a>魔术/自省方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># __dir__</span></div><div class="line"><span class="comment"># 实现动态属性</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttrDict</span><span class="params">(dict)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span>	<span class="comment"># 是为了直接用点号可以访问动态属性</span></div><div class="line">        <span class="keyword">return</span> self[item]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dir__</span><span class="params">(self)</span>:</span>				<span class="comment"># 是为了能自动完成，和用__dir__能够查找到该动态属性</span></div><div class="line">        <span class="keyword">return</span> super().__dir__() + [str(k) <span class="keyword">for</span> k <span class="keyword">in</span> self.keys()]</div><div class="line">    </div><div class="line"><span class="comment"># __new__和__init__</span></div><div class="line"><span class="comment">## __new__用来创建类并返回这个类的实例，而__init__只是将传入的参数来初始化实例。__new__在创建一个实例的过程中必定会被调用，但__init__不一定，比如通过pickle.load方式反序列化一个实例就不会调用__init__</span></div><div class="line"></div><div class="line"><span class="comment"># __getattr__(self, name)</span></div><div class="line"><span class="comment">## 定义了试图访问一个不存在的属性时的行为，重载该方法可以实现捕获错误拼写然后进行重定向, 或者对一些废弃的属性进行警告</span></div><div class="line"></div><div class="line"><span class="comment"># __setattr__(self, name, value)</span></div><div class="line"><span class="comment">## 定义了对属性进行赋值和修改操作时的行为</span></div><div class="line"></div><div class="line"><span class="comment"># __delattr__(self, name)</span></div><div class="line"><span class="comment">## 定义删除属性时的行为</span></div><div class="line"></div><div class="line"><span class="comment"># __getattribute__(self, name)</span></div><div class="line"><span class="comment">## 定时访问属性时的行为，无论属性存不存在</span></div><div class="line"></div><div class="line"><span class="comment"># __get__(self, instance, owner)</span></div><div class="line"><span class="comment">## 描述起对象，instance是拥有者类的实例，参数owner是拥有者类本身。__get__在其拥有者对其读值的时候调用。</span></div><div class="line"></div><div class="line"><span class="comment"># __set__(self, instance, value)</span></div><div class="line"><span class="comment">## 在其拥有者对其进行修改值的时候调用。</span></div><div class="line"></div><div class="line"><span class="comment"># __delete(self, instance)</span></div><div class="line"><span class="comment">## 在其拥有者对其进行删除的时候调用。</span></div><div class="line"></div><div class="line"><span class="comment"># __getitem__(self, key)</span></div><div class="line"><span class="comment">## 当执行self[key]的时候，调用的就是该方法</span></div><div class="line"></div><div class="line"><span class="comment"># __setitem__(self, key, value)</span></div><div class="line"><span class="comment">## 当执行self[key] = value时调用</span></div><div class="line"></div><div class="line"><span class="comment"># __delitem__(self, key)</span></div><div class="line"><span class="comment">## 执行del self[key]时调用</span></div><div class="line"></div><div class="line"><span class="comment"># __iter__(self)</span></div><div class="line"><span class="comment">## 返回一个迭代器，当执行for x in container或者iter(container)时调用</span></div><div class="line"></div><div class="line"><span class="comment"># __contains__(self, item)</span></div><div class="line"><span class="comment">## 执行item in container或者item not in container时调用</span></div><div class="line"></div><div class="line"><span class="comment"># __missing__(slef, key)</span></div><div class="line"><span class="comment">## 定义key不在容器中的触发行为</span></div><div class="line"></div><div class="line"><span class="comment"># with关键字的几个魔术方法，用with可以实现在函数前后执行某些语句</span></div><div class="line"><span class="comment">## __enter__(self): 会返回一个值，并赋值给as关键词之后的变量</span></div><div class="line"><span class="comment">## __exit__(self, exception_type, exception_value, traceback): 定义代码段结束后的一些操作，如果返回True，那么下面的异常会被屏蔽，如果返回None，那么会抛出</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        print(time())</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self)</span>:</span></div><div class="line">        print(time())</div><div class="line"><span class="keyword">with</span> Count():</div><div class="line">    func()		<span class="comment"># 这样在函数的开始与结束都能打印出时间了，这只是一个简单例子而已</span></div><div class="line"></div><div class="line"><span class="comment"># 用于序列化的魔术方法</span></div><div class="line"><span class="comment">## __getinitargs__(self): </span></div><div class="line"><span class="comment">## __getnewargs__(self)</span></div><div class="line"><span class="comment">## __getstate__(self)</span></div><div class="line"><span class="comment">## __setstate__(self, state)</span></div><div class="line"><span class="comment">## __reduce__(self)</span></div><div class="line"><span class="comment">## __reduce_ex__(self)</span></div><div class="line"></div><div class="line"><span class="comment"># 运算符相关的魔术方法，相当于重载运算符</span></div><div class="line"><span class="comment">## __cmp__(self, other)</span></div><div class="line"><span class="comment">## __eq__(self, other)</span></div><div class="line"><span class="comment">## __ne__(self, other)</span></div><div class="line"><span class="comment">## __lt__(self, other)</span></div><div class="line"><span class="comment">## __ge__(self, other)</span></div><div class="line"><span class="comment">## __pos__(self)</span></div><div class="line"><span class="comment">## __neg__(self)</span></div><div class="line"><span class="comment">## __invert__(self)</span></div><div class="line"><span class="comment">## __abs__(self)</span></div><div class="line"><span class="comment">## __round__(self, n)</span></div><div class="line"><span class="comment">## __floor__(self)</span></div><div class="line"><span class="comment">## __ceil__(self)</span></div><div class="line"><span class="comment">## __trunc__(self)</span></div><div class="line"><span class="comment">## __add__(self, other)</span></div><div class="line"><span class="comment">## __sub__(self, other)</span></div><div class="line"><span class="comment">## __mul__(self, other)</span></div><div class="line"><span class="comment">## __floordiv__(self, other)</span></div><div class="line"><span class="comment">## __div__(self, other)</span></div><div class="line"><span class="comment">## __truediv__(self, other)</span></div><div class="line"><span class="comment">## __mod__(self, other)</span></div><div class="line"><span class="comment">## __divmod__(self, other)</span></div><div class="line"><span class="comment">## __pow__(self, other)</span></div><div class="line"><span class="comment">## __lshift__(self, other)</span></div><div class="line"><span class="comment">## __rshift__(self, other)</span></div><div class="line"><span class="comment">## __and__(self, other)</span></div><div class="line"><span class="comment">## __or__(self, other)</span></div><div class="line"><span class="comment">## __xor__(self, other)</span></div><div class="line"></div><div class="line"><span class="comment"># 类型转换相关魔术方法</span></div><div class="line"><span class="comment">## __int__(self): 实现了类型转化为int的行为</span></div><div class="line"><span class="comment">## __long__(self)</span></div><div class="line"><span class="comment">## __float__(self)</span></div><div class="line"><span class="comment">## __complex__(self)</span></div><div class="line"><span class="comment">## __oct__(self)</span></div><div class="line"><span class="comment">## __hex__(self)</span></div><div class="line"><span class="comment">## __index__(self)</span></div><div class="line"><span class="comment">## __str__(self)</span></div><div class="line"><span class="comment">## __sizeof__(self)</span></div></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h4 id="property-描述符"><a href="#property-描述符" class="headerlink" title="property(描述符)"></a>property(描述符)</h4><p>可将类的方法变为类的属性，比如之前用<code>person.name()</code>，现在可以直接<code>person.name</code>了</p>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h4 id="argparse-命令行程序"><a href="#argparse-命令行程序" class="headerlink" title="argparse(命令行程序)"></a>argparse(命令行程序)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> argparse</div><div class="line"></div><div class="line">parser = argparse.ArgumentParser(description=<span class="string">'命令介绍'</span>)</div><div class="line">parser.add_argument(<span class="string">'-d'</span>, help=<span class="string">'添加一个参数'</span>)</div><div class="line">parser.add_argument(<span class="string">'-f'</span>, help=<span class="string">'再添加一个参数'</span>)</div><div class="line">args = parser.parse_args()</div><div class="line"></div><div class="line">args.d	<span class="comment"># 获取名为d的参数</span></div></pre></td></tr></table></figure>
<h4 id="cProfile-Profile-函数运行时间度量"><a href="#cProfile-Profile-函数运行时间度量" class="headerlink" title="cProfile/Profile: 函数运行时间度量"></a>cProfile/Profile: 函数运行时间度量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cProfile</div><div class="line"><span class="keyword">from</span> time_profile <span class="keyword">import</span> *</div><div class="line"> </div><div class="line">cProfile.run(<span class="string">"timeit_profile()"</span>)</div></pre></td></tr></table></figure>
<h4 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 偏函数partial: 用于固定函数中的某几个参数形成新的函数</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line"></div><div class="line">plus3 = functools.partial(add, <span class="number">3</span>)</div><div class="line">plus3(<span class="number">4</span>)	<span class="comment"># 输出7</span></div><div class="line"></div><div class="line"><span class="comment"># update_wrapper：主要用在装饰器函数中，使得装饰器返回函数反射得到的是包装函数定义而不是原始函数定义</span></div><div class="line"></div><div class="line"><span class="comment"># wraps：调用函数装饰器partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)的简写</span></div><div class="line"></div><div class="line"><span class="comment"># reduce：等同于内置函数reduce()</span></div><div class="line"></div><div class="line"><span class="comment"># cmp_to_key：将一个函数转换为比较函数</span></div><div class="line"><span class="comment"># total_ordering</span></div></pre></td></tr></table></figure>
<h4 id="logging日志模块"><a href="#logging日志模块" class="headerlink" title="logging日志模块"></a>logging日志模块</h4><p>日志格式</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%(name)s Logger的名字</span></div><div class="line"><span class="comment">%(levelno)s 数字形式的日志级别</span></div><div class="line"><span class="comment">%(levelname)s 文本形式的日志级别</span></div><div class="line"><span class="comment">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span></div><div class="line"><span class="comment">%(filename)s 调用日志输出函数的模块的文件名</span></div><div class="line"><span class="comment">%(module)s 调用日志输出函数的模块名|</span></div><div class="line"><span class="comment">%(funcName)s 调用日志输出函数的函数名|</span></div><div class="line"><span class="comment">%(lineno)d 调用日志输出函数的语句所在的代码行</span></div><div class="line"><span class="comment">%(created)f 当前时间，用UNIX标准的表示时间的浮点数表示|</span></div><div class="line"><span class="comment">%(relativeCreated)d 输出日志信息时的，自Logger创建以来的毫秒数|</span></div><div class="line"><span class="comment">%(asctime)s 字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”。逗号后面的是毫秒</span></div><div class="line"><span class="comment">%(thread)d 线程ID。可能没有</span></div><div class="line"><span class="comment">%(threadName)s 线程名。可能没有</span></div><div class="line"><span class="comment">%(process)d 进程ID。可能没有</span></div><div class="line"><span class="comment">%(message)s 用户输出的消息</span></div></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 最复杂的使用</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logger = logging.getLogger(<span class="string">'AppName'</span>)	<span class="comment"># 初始化日志处理器实例，可以用AppName来区分不同的模块</span></div><div class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s %(levelname)-8s: %(message)s'</span>)	<span class="comment"># 定义日志格式</span></div><div class="line"></div><div class="line">file_handler = logging.FileHandler(<span class="string">"test.log"</span>)		<span class="comment"># 文件日志</span></div><div class="line">console_handler = logging.StreamHandler(sys.stdout)	<span class="comment"># 控制台日志</span></div><div class="line">file_handler.setFormatter(formatter)				<span class="comment"># 设置日志格式</span></div><div class="line"></div><div class="line">logger.addHandler(file_handler)			<span class="comment"># 为logger添加的日志处理器</span></div><div class="line">logger.removeHandler(file_handler)		<span class="comment"># 移除日志处理器</span></div><div class="line"></div><div class="line">logger.setLevel(logging.INFO)		<span class="comment"># 设置日志输出最低级别</span></div><div class="line"></div><div class="line">logger.debug(<span class="string">'this is debug info'</span>)</div><div class="line">logger.info(<span class="string">'this is information'</span>)</div><div class="line">logger.warn(<span class="string">'this is warning message'</span>)</div><div class="line">logger.error(<span class="string">'this is error message'</span>)	<span class="comment"># 与logger.exception()相同</span></div><div class="line">logger.fatal(<span class="string">'this is fatal message, it is same as logger.critical'</span>)</div><div class="line">logger.critical(<span class="string">'this is critical message'</span>)</div><div class="line"></div><div class="line">logger.error(<span class="string">'%s service is down'</span>, <span class="string">'own'</span>)	<span class="comment"># 格式化输出日志</span></div><div class="line"></div><div class="line"><span class="comment"># 比较简单的使用</span></div><div class="line">logging.basicConfig(filename=<span class="string">'test.log'</span>, level=logging.DEBUG)	<span class="comment"># 这样接口</span></div></pre></td></tr></table></figure>
<h4 id="http-server-SimpleHTTPServer"><a href="#http-server-SimpleHTTPServer" class="headerlink" title="http.server(SimpleHTTPServer)"></a>http.server(SimpleHTTPServer)</h4><p>最简单的web服务器，十分方便，最多的用途是用来进行局域网其他设备访问本机文件目录<code>python -m SimpleHTTPServer 8000</code>即可，<code>Python3</code>里面，模块更改为<code>python3 -m http.server</code>另外，如果要想使<code>SimpleHTTPServer</code>能增加CORS特性，可以创建一个这样的文件<code>simple-cors-http-server.py</code>，之后直接用python执行即可，文件内容如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</div><div class="line"><span class="keyword">import</span> BaseHTTPServer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CORSRequestHandler</span> <span class="params">(SimpleHTTPRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_headers</span> <span class="params">(self)</span>:</span></div><div class="line">        self.send_header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</div><div class="line">        SimpleHTTPRequestHandler.end_headers(self)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    BaseHTTPServer.test(CORSRequestHandler, BaseHTTPServer.HTTPServer)</div></pre></td></tr></table></figure>
<h4 id="smtplib-用于发送邮件"><a href="#smtplib-用于发送邮件" class="headerlink" title="smtplib: 用于发送邮件"></a>smtplib: 用于发送邮件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</div><div class="line"></div><div class="line"><span class="comment"># 腾讯SMTP</span></div><div class="line">mail_host = <span class="string">'发件服务器'</span></div><div class="line">mail_user = <span class="string">'发件人'</span></div><div class="line">mail_pass = <span class="string">'收件人'</span></div><div class="line"></div><div class="line">sender = <span class="string">'发件人'</span></div><div class="line">receivers = [<span class="string">'收件人'</span>]</div><div class="line"></div><div class="line">message = MIMEText(<span class="string">'这是邮件内容'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</div><div class="line">message[<span class="string">'From'</span>] = <span class="string">"\"%s\" &lt;%s&gt;"</span> % (Header(<span class="string">'发件人'</span>, <span class="string">'utf-8'</span>), Header(<span class="string">'发件人'</span>, <span class="string">'utf-8'</span>))</div><div class="line">message[<span class="string">'To'</span>] = Header(<span class="string">'to'</span>, <span class="string">'utf-8'</span>)</div><div class="line">message[<span class="string">'Subject'</span>] = Header(<span class="string">'邮件主题'</span>, <span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line">smtpObj = smtplib.SMTP()</div><div class="line">smtpObj.connect(mail_host)</div><div class="line">smtpObj.login(mail_user, mail_pass)</div><div class="line">smtpObj.sendmail(sender, receivers, message.as_string())</div><div class="line">print(<span class="string">'邮件发送成功'</span>)</div></pre></td></tr></table></figure>
<h4 id="timeit-时间度量"><a href="#timeit-时间度量" class="headerlink" title="timeit: 时间度量"></a>timeit: 时间度量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> timeit</div><div class="line">timeit.Timer(<span class="string">'x=range(1000)'</span>).timeit()	<span class="comment"># 可以直接得到代码的执行时间</span></div><div class="line">timeit.Timer(<span class="string">'sum(x)'</span>, <span class="string">'x = (i for i in range(1000)'</span>).timeit() <span class="comment"># 参数</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>collections</strong>：<a href="http://my.oschina.net/leejun2005/blog/222236" target="_blank" rel="external">参考</a>，提供额外的数据类型</p>
<ul>
<li><strong>namedtuple()</strong>：生成可以使用名字来访问元素内容的tuple子类</li>
<li><strong>deque</strong>：双端队列</li>
<li><strong>Counter</strong>：计数器，可用于统计字符串中字符数量</li>
<li><strong>OrderedDict</strong>：有序字典</li>
<li><strong>defaultdict</strong>：带有默认值的字典，这样访问不存在的dict就不会出错了</li>
</ul>
</li>
<li><p><strong>heapq</strong>：Python里面的最小堆</p>
</li>
<li><p><strong>itertools</strong>：<a href="http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html#itertoolscountstart0-step1" target="_blank" rel="external">参考</a></p>
<ul>
<li><strong>count(start=0, step=1)</strong>：创建连续整数</li>
<li><strong>cycle(iterable)</strong>：创建一个迭代器，可以反复循环的，此时用在for里面如果不加终止条件会无限循环</li>
<li><strong>repeat(object, times)</strong>：创建一个迭代器，根据指定数量，生成重复的对象</li>
<li><strong>chain(*iterables)</strong>：将多个迭代器作为参数, 但只返回单个迭代器, 它产生所有参数迭代器的内容, 就好像他们是来自于一个单一的序列.</li>
<li><strong>compress(data, selectors)</strong>：提供一个选择列表，对原始数据进行筛选</li>
<li><strong>dropwhile(predicate, iterable)</strong>：创建一个迭代器，只要函数predicate(item)为True，就丢弃iterable中的项，如果predicate返回False，就会生成iterable中的项和所有后续项</li>
<li><strong>groupby(iterable, key)</strong>：返回一个产生按照key进行分组后的值集合的迭代器.</li>
<li><strong>ifilter(predicate, iterable)</strong>：与dropwhile相反</li>
<li><strong>ifilterfalce(predicate, iterable)</strong>：与上面这个相反</li>
<li><strong>islice(iterable, stop)</strong>：返回的迭代器是返回了输入迭代器根据索引来选取的项</li>
<li><strong>imap(function, *iterables)</strong>：返回一个迭代器, 它是调用了一个其值在输入迭代器上的函数, 返回结果. 它类似于内置函数 map() , 只是前者在任意输入迭代器结束后就停止(而不是插入None值来补全所有的输入).</li>
<li><strong>starmap(function, iterable)</strong>：创建一个迭代器，生成值func(*item),其中item来自iterable，只有当iterable生成的项适用于这种调用函数的方式时，此函数才有效。</li>
<li><strong>tee(iterable[, n=2])</strong>：从iterable创建n个独立的迭代器，创建的迭代器以n元组的形式返回，n的默认值为2</li>
<li><strong>takewhile(predicate, iterable)</strong>：与takewhile相反</li>
<li><strong>izip(*iterables)</strong>：返回一个合并了多个迭代器为一个元组的迭代器. 它类似于内置函数zip(), 只是它返回的是一个迭代器而不是一个列表</li>
<li><strong>izip_longest(*iterables[, fillvalue])</strong>：与izip()相同，但是迭代过程会持续到所有输入迭代变量iter1,iter2等都耗尽为止，如果没有使用fillvalue关键字参数指定不同的值，则使用None来填充已经使用的迭代变量的值。</li>
<li><strong>product(*iterables[, repeat])</strong>：笛卡尔积</li>
<li><strong>permutations(iterable[, r])</strong>：排列</li>
<li><strong>combinations(ierable, r)</strong>：创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (不带重复)</li>
<li><strong>combinations_with_replacement(iterable, r)</strong>：创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (带重复)</li>
</ul>
</li>
<li><p><strong>SocketServer</strong>：<a href="http://blog.marchtea.com/archives/60" target="_blank" rel="external">参考</a>两种服务模型：ThreadingMinxln(有新请求时，创建一个新的进程)、ForkingMinln(有新请求时，创建一个新的线程)</p>
<ul>
<li><strong>TCPServer</strong></li>
<li><strong>UDPServer</strong></li>
<li><strong>UnixStreamServer</strong></li>
<li><strong>UnixDatagramServer</strong></li>
</ul>
</li>
<li><p><strong>weakref</strong>：弱引用，与常规的引用相对，这种引用在对象只剩下一个弱引用的时候，就可能会被回收，多见于类的嵌套定义防止错误回收，weakref的失效依赖于对象实际销毁。gc销毁的时机未知，引用计数的销毁则是可控的，比如(del)，可以减少异常的发生。使用方式例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.children = [Child(self)]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        self.parent = weakref.proxy(parent)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="PIP版本管理"><a href="#PIP版本管理" class="headerlink" title="PIP版本管理"></a>PIP版本管理</h2><p><code>pip</code>可以使用<code>==、&gt;=、&lt;=、&gt;、&lt;</code>几个符号来指定需要安装的依赖版本，并且可以同时使用多个，例如<code>Django&gt;1.0,&lt;2.0</code>则安装的是她们之间的最新版本</p>
<h2 id="语言本身"><a href="#语言本身" class="headerlink" title="语言本身"></a>语言本身</h2><h4 id="性能分析与优化"><a href="#性能分析与优化" class="headerlink" title="性能分析与优化"></a>性能分析与优化</h4><ul>
<li>使用timeit</li>
<li>使用cProfile，精确到函数</li>
<li>使用vprof，可视化</li>
<li>line_profiler，精确到行</li>
</ul>
<h4 id="Python设计模式"><a href="#Python设计模式" class="headerlink" title="Python设计模式"></a>Python设计模式</h4><ul>
<li><strong>Python设计模式</strong>：<a href="https://github.com/faif/python-patterns" target="_blank" rel="external">https://github.com/faif/python-patterns</a></li>
<li><strong>静态方法(@staticmethod)</strong>：跟类有管，和实例无关.静态方法没有默认的第一个参数.</li>
<li><strong>类方法(@classmethod)</strong>：跟类有管，和实例无关.默认的第一个参数是类本身，而不像其它函数那样是对象本身</li>
<li><p><strong>元类</strong>：<a href="http://blog.jobbole.com/21351/" target="_blank" rel="external">参考</a> <a href="http://www.jianshu.com/p/d643d6f0ec82" target="_blank" rel="external">参考2</a> <a href="http://www.cnblogs.com/russellluo/p/3409602.html" target="_blank" rel="external">参考3</a>元类的主要用途是创建API，比如Django的Model里面，record.field，这会返回该字段的值，而不是model定义里面的Field对象.最简单的例子：</p>
<h1 id="给类添加作者信息"><a href="#给类添加作者信息" class="headerlink" title="给类添加作者信息"></a>给类添加作者信息</h1><pre><code>class AuthorTag(type):
    def __new__(cls, name, bases, dict):
        dict[&apos;__author__&apos;] = &apos;RussellLuo&apos;
        return super(AuthorTag, cls).__new__(cls, name, bases, dict)

class MyBlog:
    __metaclass__ = AuthorTag

class MyGitHub:
    __metaclass__ = AuthorTag
</code></pre></li>
<li><strong>自省</strong>：<a href="https://www.ibm.com/developerworks/cn/linux/l-pymeta/" target="_blank" rel="external">参考</a>自省对象能够描述自己：实例属于哪个类？类有哪些祖先？对象可以用哪些方法和属性？自省让处理对象的函数或方法根据传递给函数或方法的对象类型来做决定</li>
<li><p><strong>管理属性</strong>：</p>
<ul>
<li><strong>__new__</strong>：在构造函数之前，可以决定是否用__init__方法来实例化类，是一个静态方法.</li>
<li><strong>__init__</strong>：负责将类实例化</li>
<li><strong>__del__</strong>：类的析构函数</li>
<li><p><strong>__call__</strong>：在定义类的时候，实现该函数，这样该类的实例就变成可调用的了，相当于重载了括号运算符.例如，md5那几个库，使用的时候就是md5(…)，但其实它肯定是个类的实例而不是个简单的函数撒.<a href="http://qa.helplib.com/523801" target="_blank" rel="external">使用场景</a>例如：</p>
<p> class A():</p>
<pre><code>    def __call__(self, key):
        print(key)
a = A()
a(&apos;key&apos;)    # 打印&apos;key&apos;
</code></pre></li>
</ul>
</li>
<li><strong>多态</strong>：Python中的多态，就相当于重载的方法</li>
<li><strong>Mixin</strong>：在运行期间动态改变类的基类或类的方法，哦，就是在运行时给改变基类，这样随之所有的子类都改变了</li>
<li><strong>迭代器</strong>：<a href="https://github.com/lzjun567/note/blob/master/note/python/iterator_generator.md" target="_blank" rel="external">参考</a>对象的类有next和iter方法返回自身</li>
<li><strong>生成器</strong>：<a href="https://github.com/lzjun567/note/blob/master/note/python/iterator_generator.md" target="_blank" rel="external">参考</a>生成器都是迭代器，使用yield来生成的结果</li>
<li><strong>下划线</strong>: 单下划线开头的变量可以理解为不重要的需要抛弃的变量，比如循环中的计数，而如果是一根下划线作为函数，通常用于翻译功能</li>
<li><p><strong>包管理器pip</strong>:</p>
<h1 id="升级所有的包"><a href="#升级所有的包" class="headerlink" title="升级所有的包"></a>升级所有的包</h1><pre><code>pip freeze --local | grep -v &apos;^\-e&apos; | cut -d = -f 1  | xargs pip install -U
</code></pre></li>
</ul>
<pre><code>  # 跳过可迭代对象的前面几个值，例如for循环里面跳过前面几个
  from itertools import islice
  for x in islice(items, 3, None)   # 这里跳过了前面3个

  # 迭代时获取序号
  for index, val in enumerate(my_list)

  # 多个列表同时迭代，让长度取决于最短的那一个
  for a, b in zip(x, y) # 这样就不会超出长度

* 输入与输出  


      # 在调试某些代码的时候发现print没有输出，这是有可能将print重定向了，这是用sys.stdout.write(&apos;&apos;)可以实现打印输出到控制台

  # 将输出重定向到文件
  fp = open(&apos;log&apos;, &apos;w&apos;)
  sys.stdout = fp

* 系统环境相关  


      import sys, platform
  platform.system()  # 当前操作系统
  platform.release()  # 当前系统版本
  sys.version     # python版本
  os.environ[&apos;name&apos;]  # 获取系统环境变量
  os.environ[&apos;name&apos;] = value  # 设置系统环境变量  


* 执行系统命令  


      import os, sys
  os.system(&apos;命令&apos;)
  os.popen(&apos;命令&apos;)  # 这个的返回值直接就是输出内容了

  exec：总是返回None
  eval：会获取到返回值

* 动态导入模块  


      __import__(module_name)   # 相当于import
  __import__(name = module_name, formlist=[a,b]) # 相当于from module_name import a, b


* 类、函数、对象  


      x.__class__  # 获取对象的类名
  id(x)   # 返回对象标识，即内存地址
  setattr(my_model, &apos;name&apos;, &apos;value&apos;)  # 给对象动态添加属性

  # 函数参数注释:
  def fun(参数: &apos;这是注释&apos;, 参数: &apos;这是注释&apos;) -&gt; 返回释义

* 序列化：有时候还是挺方便的，比如后面的操作依赖前面的数据，但是前面的数据不能多次快速抓取，就需要将变量直接写到本地  


      import pickle
  # 如果序列化出现maximum recursion depth错误，那么可以设置sys.setrecursionlimit(1000)来解决

* 排列组合  


      import itertoolrs
  for i in itertools.product(&apos;ABCD&apos;, repeat

* 其他模块：  


      collections.Counter：找出序列中出现次数最多的元素
  heqpq：查找最大或最小的几个元素
  itertoolrs：排列组合

* 装饰器  
</code></pre><p>​    </p>
<pre><code>* 变量  


      sys.getsizeof(name)  # 获取变量占用内存的大小

  # 如果要改变全局变量的值，那么需要用global来声明，如果仅仅是使用该值那么可以不用global声明

  del name  # 删除一个变量

  # 弱引用：在不增加引用计数的情况下使用对象的引用，以防止对象错误回收

*   
</code></pre><h2 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h2><ul>
<li><p><strong>CentOS安装pip</strong>  </p>
<p> yum install epel-release</p>
<pre><code>rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
yum install -y python-pip
</code></pre></li>
<li><p><strong>AttributeError: ‘EntryPoint’ object has no attribute ‘resolve’</strong><br>原因是<code>cryptography</code>版本过高或过低，需要制定版本，一般是<code>pip install cryptography==1.2.1</code></p>
</li>
<li><p><strong>PEP8三目运算符的换行</strong><br>可以加括号，例如:</p>
<pre><code>re = (
    &apos;a&apos;
    if &apos;a&apos; == &apos;b&apos;
    else &apos;c&apos;
)
</code></pre></li>
</ul>
<ul>
<li><p><strong>ValueError: Attempted relative import in non-package</strong>  </p>
<p>相对路径问题，所谓的相对路径其实是相对于当前module的路径，而不是当前目录的路径，如果当前目录不是module，那么当前module的name就是<code>__main__</code>，所以会出错</p>
</li>
<li><p><strong>Python中一切都是对象，a=1，b=1，两个是同一个对象，所以Python是无法通过变量名获取同名字符串的</strong></p>
</li>
</ul>
<h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python" target="_blank" rel="external">Hidden features of Python</a></p>
<p><a href="https://pymotw.com/3/" target="_blank" rel="external">PyMOTW-3</a>: 由 <a href="http://doughellmann.com/" target="_blank" rel="external">Doug Hellmann</a>所写的Python标准库的示例用法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://cpython-devguide.readthedocs.io/en/lat
    
    </summary>
    
      <category term="python" scheme="https://haofly.net/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift开发MacOS应用</title>
    <link href="https://haofly.net/swift-macos/"/>
    <id>https://haofly.net/swift-macos/</id>
    <published>2016-12-10T04:05:30.000Z</published>
    <updated>2016-12-30T06:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念及程序框架"><a href="#基本概念及程序框架" class="headerlink" title="基本概念及程序框架"></a>基本概念及程序框架</h2><h3 id="主要目录文件"><a href="#主要目录文件" class="headerlink" title="主要目录文件"></a>主要目录文件</h3><p><code>AppDelegate.swift</code>: 所有应用开始都有一个AppDelegate，是整个应用程序的一个代理，在应用启动的时候，最先被调用的就是这个AppDelegate中的applicationDidFinishLaunching方法，可以在这里做全局初始化，但一般为了保持代码的整洁，具体逻辑并不放在这里</p>
<p><code>ViewController.swift</code>: 这是主Controller，Controller对应着view，view的拥有者则是Controller。所以新建Controller的时候默认继承NSViewController，创建Controller的时候可以同时创建相应的.xib文件。而关联Controller和View的方式有两种，一种是通过代码，一种是通过IB。在IB里面修改，只需要添加Object Library，然后将它的controller指定到目标即可。</p>
<p><code>Assets.xcasserts</code>:</p>
<p><code>Main.storyboard</code>: 项目主要的UI文件</p>
<p><code>Info.plist</code>: 项目的基础配置</p>
<h2 id="IB-Interface-Builder"><a href="#IB-Interface-Builder" class="headerlink" title="IB(Interface Builder)"></a>IB(Interface Builder)</h2><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="Labels-and-Text-Field"><a href="#Labels-and-Text-Field" class="headerlink" title="Labels and Text Field"></a>Labels and Text Field</h4><h4 id="Combo-Boxes"><a href="#Combo-Boxes" class="headerlink" title="Combo Boxes"></a>Combo Boxes</h4><h4 id="Popup-Buttons"><a href="#Popup-Buttons" class="headerlink" title="Popup Buttons"></a>Popup Buttons</h4><h4 id="Text-Views"><a href="#Text-Views" class="headerlink" title="Text Views"></a>Text Views</h4><h4 id="Sliders"><a href="#Sliders" class="headerlink" title="Sliders"></a>Sliders</h4><h4 id="Date-Pickers"><a href="#Date-Pickers" class="headerlink" title="Date Pickers"></a>Date Pickers</h4><h4 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h4><h4 id="Radio-Buttons"><a href="#Radio-Buttons" class="headerlink" title="Radio Buttons"></a>Radio Buttons</h4><h4 id="Check-Buttons"><a href="#Check-Buttons" class="headerlink" title="Check Buttons"></a>Check Buttons</h4><h4 id="Image-Views"><a href="#Image-Views" class="headerlink" title="Image Views"></a>Image Views</h4><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="居中定位"><a href="#居中定位" class="headerlink" title="居中定位"></a>居中定位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># 直接选择该Object右下角的Align的Horizontally in Container和Vertically in Container全部设置为0，然后选择Update Frame修改为Items of New Constraints，再点击Add 2 Constraints button.</div></pre></td></tr></table></figure>
<p>widget也都可以通过代码来设置他们的属性，例如</p>
<p>在applicationDidFinishLaunching函数内部写上</p>
<p>label1.stringValue = “wanghao”<br>button1.title = “Change Text”<br>Toolbar 菜单栏<br>view controller，也就是最开始的那种storyboard<br>container view，这里应该是可以放其他的view，相当于网页里面的iframe<br>custom view<br>vertical Split view/horizontal split view :水平或者垂直分割的view<br>Collection view：就是将一些列的数据以表格的形式展（包含了Collecotion Item），datasource可以直接outlets到view controller<br>object：就是一个对象，它可以与类帮顶起来（右上角custom class进行定义），定义了过后，又可以将它与下面的view相联系(control＋拖曳，选择outlets)，<br>table view：表格</p>
<p>Array Controller：好像是管理一组controller</p>
<p>menu bar：</p>
<p>要连接两个view，也是control拖曳</p>
<p>这个地方可以添加绝对定位或者想对定位 <img src="../../../../Downloads/绝对定位想对定位.jpg" alt="绝对定位想对定位"></p>
<p>右边那个按钮则是像html里面的margin</p>
<p>上面是Day 2:auto layout</p>
<p>创建新的类的时候也可以同时创建xib文件，上面的collection controller，如果要有一个复杂的item那么久需要自己创建一个类</p>
<p>menu bar</p>
<p>直接在appdelegate里面：要设置application is agent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">let statusItem = NSStatusBar.systemStatusBar().statusItemWithLength(NSVariableStatusItemLength)</div><div class="line">//let menu = NSMenu()</div><div class="line">let popover = NSPopover()</div><div class="line"></div><div class="line">func applicationDidFinishLaunching(...)&#123;</div><div class="line">  if let button = statusItem.button &#123;</div><div class="line">    button.image = NSImage(named: &quot;图片名称&quot;)// 在asets里面添加了的图片</div><div class="line">  	//button.action = Selector(&quot;showWeatheraaa&quot;)</div><div class="line">  	</div><div class="line">  	button.actoin = Selector(&quot;toggleWeather:&quot;)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  //menu.addItem(NSMenuItem(title: &quot;直接加&quot;, action: Selector(&quot;showWeather:&quot;), keyEquivalent:&quot;S&quot;))</div><div class="line">  //menu.addItem(NSMEnuItem.separatorItem())</div><div class="line">  //menu.addItem(NSMenuItem(title:&quot;quit&quot;, action: Selector(&quot;terminate:&quot;), keyEquivalent:&quot;q&quot;))</div><div class="line">  </div><div class="line"> // statusItem.menu = menu</div><div class="line"> popover.contentViewController = </div><div class="line">&#125;</div><div class="line"></div><div class="line">func showWeather(sender: NSStatusBarButton)&#123;</div><div class="line">  print(&quot;我靠&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func toogleWeather(sender: NSStatusBarButton)&#123;</div><div class="line">  if popover.shown&#123;</div><div class="line">    popover.performClose(sender)</div><div class="line">  &#125;else&#123;</div><div class="line">    if let button = statusItem.button &#123;</div><div class="line">      popover.shownRelativeToRect(button.bounds, ofView: button, perferredEdge: .MinY)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建了NSOBbject过后，要让它MainMenu .xib加载的时候久被加载，需要把它以object的形式添加到XIB中去</p>
<p>而这个object的Outlets就是相对应的view，比如Status Menu</p>
<p>同理如果创建的是一个NSview，那么一个view泽可以与之关联</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念及程序框架&quot;&gt;&lt;a href=&quot;#基本概念及程序框架&quot; class=&quot;headerlink&quot; title=&quot;基本概念及程序框架&quot;&gt;&lt;/a&gt;基本概念及程序框架&lt;/h2&gt;&lt;h3 id=&quot;主要目录文件&quot;&gt;&lt;a href=&quot;#主要目录文件&quot; class=&quot;head
    
    </summary>
    
      <category term="swift" scheme="https://haofly.net/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>AngularJS</title>
    <link href="https://haofly.net/angularjs/"/>
    <id>https://haofly.net/angularjs/</id>
    <published>2016-12-07T01:00:39.000Z</published>
    <updated>2017-01-05T03:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>循环语句</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li *ngFor="let item of items; let i = index"&gt;</div><div class="line">  	&#123;&#123;i&#125;&#125;:&#123;&#123;item&#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>Angular1里元素绑定点击事件用<code>ng-click</code>，但是Angular2里元素绑定点击事件用<code>(click)</code>，例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;button ng-click=&quot;vm.toggleImage()&quot;&gt;</div><div class="line">&lt;button (click)=&quot;toggleImage()&quot;&gt;</div></pre></td></tr></table></figure>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>所有的单元测试文件均以<code>.spec.ts</code>结尾，该文件具体语法规则如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'test haofly"s function'</span>, () =&gt;&#123;</div><div class="line">  it(<span class="string">'true is true'</span>, () =&gt; expect(<span class="literal">true</span>).toEqual(<span class="literal">true</span>));</div><div class="line">  it(<span class="string">'null is true'</span>, () =&gt; exect(<span class="literal">null</span>).not.toEqual(<span class="literal">true</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AngularJS&quot;&gt;&lt;a href=&quot;#AngularJS&quot; class=&quot;headerlink&quot; title=&quot;AngularJS&quot;&gt;&lt;/a&gt;AngularJS&lt;/h1&gt;&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="frontend" scheme="https://haofly.net/categories/frontend/"/>
    
    
  </entry>
  
  <entry>
    <title>毕业过后，一切都来得太快</title>
    <link href="https://haofly.net/biyeguohouyiqiedoulaidetaikuai/"/>
    <id>https://haofly.net/biyeguohouyiqiedoulaidetaikuai/</id>
    <published>2016-11-22T12:38:44.000Z</published>
    <updated>2016-11-22T15:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在是2016年11月22日，毕业大约5个月，外面飘着小雨，突然想起以前好像每次都喜欢在这样的场景下看着书思考人生呢。细想毕业的这几个月，感觉我的人生是不是走得太快了。<br>原以为，毕业以后，至少能每周都找个地方玩儿吧，周末约上三五个好友，踏踏青，赏赏水，坐坐长江的邮轮，顺便回南山看看母校的樱花。原以为，毕业以后，至少能挥金如土吧，刚签约的时候感觉自己的工资和同学比起来虽然不高，但是相比于大学每个月的生活费，那可不止三四倍呀，是不是很快就可以过上想买就买的日子了呢。原以为，毕业以后，至少能经常给家人朋友买点礼物吧，每个人生日的时候我都能当面送上一份特别的礼物，给他们来个惊喜。<br>但是，生活在这短短的时间里给我泼了好几大盆的冷水。<br>虽然每天朝九晚六，可以睡到八点半再起床，但是每天还是不够睡。即使是运气好不用加班，六点就能下班，也实在不想拖着疲惫的身体去找好朋友逛吃逛吃。看似每天工作只有7.5小时，实际上，剩下的时间都只能用于恢复精力。只想在家躺着，哪儿也不去，能够躺在舒适的床上才是我最大的希冀。周末？哪里来的周末。周末得坐长途车去看女朋友，女朋友比我更累吧，周末都得上班，所以周末必须好好陪陪她，陪伴的形式就是陪她上班。没有踏青，没有赏水，只有偶尔互相之间温柔的眼神。那是我每周长途跋涉唯一的安慰。<br>是谁发明的挥金如土这个词，难道不应该是挥金然后吃土吗。白领的意思就是每个月发了工资还了信用卡然后惊讶的发现，我靠，这个月工资又白领了。总有那么多花钱的地方，房租、水、电、气、长途车费、吃，基本上每个月会有1/3的钱会花在能让我活下去的这些需求上。接下来的1/3，偶尔吃个大餐，偶尔买个礼物，偶尔送个红包，基本上也花出去了，再剩下的1/3可以存下来，然后隔一两个月，心血来潮想买一个大件，然后，就没有然后了。买不起礼物，记住了每个朋友的生日，但是朋友生日的时候顶多说一声生日快乐，朋友结婚或者生孩子，有时候连“赞”都不敢点。<br>有位室友遇到公司裁员，丢了工作。对，就是那个我认为他是我大学见过最聪明的一位室友，居然被公司开除了，我完全不敢相信。听到这个消息的那天，我情绪很激动，想立马给他找到一份工作，但是问了好几家，基本上对工龄的要求都至少是两年。这可是一位刚毕业的本科大学生啊，哪儿来两年的工作经验呢。还好，写这篇文章的时候，他应该已经过了某个公司的的面试了，不过，那个地方，真的好偏远。<br>室友被离职的同一天，我另一个朋友也打电话来了，说他准备报一个培训班，从零开始学开发，问我要一些建议。这位朋友是我从小玩儿到大的，碰巧连所学的专业也相近，都跟计算机有关，不过我偏软件，他便硬件。毕业后他去了格力，结果发现里面有好多不可描述的内部危机，所以干脆直接回家乡发展，但是，同样的，也是一个工作经验连半年都没有的人，甚至他连基本的技能也差好大一截，所以不得不去报培训班。我一直觉得他比我努力好多倍，但总感觉他的运气总是不好，总是会在人生面对重大决策的时候或者人生将要迎来更加光明的时候生活给他泼一盆冷水。<br>更甚的，在前面的文章中有提到，我的妹妹去世了，一个二十出头的女孩子，刚当上妈妈就离开了这个原本美丽的世界。<br>相比于他们，或许，我算是很幸运的了。毕业以后找了一份“相对”稳定的工作。只能说相对，这两年是IT业的寒冬，谁也说不准明天会怎样，唯一知道的是如果要裁员，多半是拿新人开刀。另外，我还在重庆买了房子，走在了百分之九十几的同学前面了。贷款50万，分30年还清，利息大概30万。为什么那么急着买房子？说简单点，一是怕房价继续上涨(从去年的趋势看，基本上我要是提前一年买房，我可以少奋斗一年，这一年还不吃不喝才能补上那个差价)，二是害怕突如其来的婚姻，不是不想结婚，只是还没准备好，不过，由于某些原因，我还是选择提前准备一下，我不想我的孩子一生下来，就呆在别人的房子里。最近，公司开始从PHP转Java了，动作挺大的，而我，确是一个PHP程序员，看样子我不得不去学曾经最讨厌，黑得最多的一门垃圾语言了。<br>我知道，当我们进入社会后，会面临各种各样的压力，各种各样的困难，各种各样的挫折。这些我真的都知道，只是，真的没想到，这一切会来得那么快，以迅雷不及掩耳之势一棒子打在刚脱离“青春”的我们头上，把我们打得晕头转向，不知所措。长夜漫漫，夜晚越来越睡不着了，想好多事，憧憬一下未来的样子，反正，就是不敢想现在，害怕发现现在的自己正在远离曾经的梦想。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在是2016年11月22日，毕业大约5个月，外面飘着小雨，突然想起以前好像每次都喜欢在这样的场景下看着书思考人生呢。细想毕业的这几个月，感觉我的人生是不是走得太快了。&lt;br&gt;原以为，毕业以后，至少能每周都找个地方玩儿吧，周末约上三五个好友，踏踏青，赏赏水，坐坐长江的邮轮，
    
    </summary>
    
      <category term="平凡之路" scheme="https://haofly.net/categories/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>《MacTalk跨越边界》书评</title>
    <link href="https://haofly.net/mactalk-kuayuebianjie/"/>
    <id>https://haofly.net/mactalk-kuayuebianjie/</id>
    <published>2016-11-07T13:28:44.000Z</published>
    <updated>2016-11-07T13:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>先有Mac还是先有钱？我不知道有多少人是因为池老师的一句话而买的苹果电脑，反正，我买苹果电脑的很大一部分原因是因为池老师的影响，说池老师是苹果亚太区总布道师不足为过。</p>
<p>之前看过池老师的《人生元编程》(<a href="https://haofly.net/renshegnyuanbiancheng/">读后感</a>)，没想到半年不到我就拜读了池老师的第二本书了。看上一本书的时候我的电脑还没满一年，看这本书时，已经换了一个电源插座了(500多，心里十分痛)。不过，让我有点小小失望的是，池老师自诩为一个作家，但是读完他的第二部作品，我发现，他的作品并不能称之为一部经典的著作。可能是我看的书越来越多了，像这集合各种网文的书籍有了一点反感，不过还好，池老师的作品并没有那么“鸡汤”性质，干货还是满满的，只是这个价钱，稍贵。</p>
<p>池老师看起来已经老了，这本书读起来有点像他的归山之作，看样子，他可能要把他最后的青春献给锤子了。虽然我一直不看好锤子，但是他们认真做事的态度着实让我佩服，真的找不到第三家像他们那样在自己的产品上投入那么多感情的手机厂商了。</p>
<p>这本书讲述了池老师在五个方面的见解：写给走在编程路上的人、文艺中年、自省、跨越、人物，写出了他这么多年经历中的各种感悟，读来让人回味无穷。原来我们确实只是普通人，原来成功的人确实做了很多我们常人做不到的事情。我也有运营者一个公众号，也有自己业余的小项目，也有很多很多的idea，但总是因为下班后的各种琐事而推迟，渐渐地被遗忘，最后变成了岁月中的一抹尘埃，随着年华被侵蚀。此书更多的是纠正了我在编程领域的一些错误的思想，甚至是最近经常在自己周围发生的。</p>
<p>池老师，加油，希望有一天我也能站在你那样的高度。</p>
<h2 id="语录"><a href="#语录" class="headerlink" title="语录"></a>语录</h2><p>全世界都放弃，至少还有我在聆听。——《他居然是这种人》</p>
<p>以最小的代价解决问题！知行合一，方可无敌于天下。——《程序员真正的价值》</p>
<p>我不是懂得多，我只是学得快而已。——《程序员如何选择技术方向》</p>
<p>年轻的时候谁能不犯错？重要的是犯错之后你做了什么。强大了，还是沉沦了。<br>无论犯什么错，永远不要执行：sudo rm -rf /<br>无论如何，最好不要犯全天下男人都会犯的错。<br>——《程序员犯过的错误》</p>
<p>只有疯狂到自以为能够改变世界的人，才能真正地改变世界。——《把时间“浪费”在美好的事物上》</p>
<p>老树终归会老去，朝花有一天会盛开，每个人都有自己的时代，自己的路自己走，走不动了，就是终点。——《朝花与老树》</p>
<p>你本布衣，只要躬耕于南阳，终能指点江山争天下。——《旅途中的思考》</p>
<p>无论世界多么浮躁，总会有人潜于浮华之下，在深水河中静静地打磨那些精美的鹅卵石和珍珠，追逐自己的梦想。无论在哪个时代，这样的人才是推动世界向前的力量。——《年龄的故事》</p>
<p>王小波用他短暂的生命给时间留下了丰厚的遗产。有人欣赏他杂文的讥诮反讽，有人享受他小说的天马行空，有人赞扬他激情浪漫，有人仰慕他特立独行。在这些表象的背后，他一生最珍贵的东西，是对自由的追求。——《我的阅读之路》</p>
<p>Write the code, change the world.——《专访：谈技术、成长及锤子》</p>
<p>不管做什么，从年轻的时候，你就要对你做的事情有深入的了解，不肤浅，不浮躁，坚持去做一件事情，同时有意识地去提升自己的能力。——《专访：谈技术、成长及锤子》</p>
<p>世界上优秀的人本来就是少数，认识到这一点，你会更容易理解这个世界。——《专访：谈技术、成长及锤子》</p>
<p>有的鸟儿注定是无法被困住的，因为它们的予以是如此的流光溢彩。——《希望可能意味着一切》</p>
<p>人的一辈子活满了，最多也就3万多天，我们不可能从开始就知道结局，也不可能像朝阳升起和夕阳西下那样精准地规划自己的每一天，未知才是最美好的，所以，最初的选择可能没有想象的重要，在路上，才是最重要的。——《你是牛儿我是渣》</p>
<p>人类所能想象到的所有美好和黑暗，都能从书里找到。——《我在大学里学到的几件事》</p>
<p>A reader lives a thousand lives before he dies. The man who never reads lives only one. ——《我在大学里学到的几件事》</p>
<p>我对生命的意义有种理论。我们可以在第一章里对读者解释生命的意义何在。这样可以吸引住他们。一旦他们被吸引住，并且付钱买了书，剩下的章节里我们就可以胡扯了。——《你需要多久才能变成一个“傻瓜”》</p>
<p>如果你工作时，经常在“能不能行呢”的不安感和“啊，成功了”的成就感之间往复行走，那么恭喜你，离成功已经没有几公里了。——《你需要多久才能变成一个“傻瓜”》</p>
<p>既然已经知道了无论怎么努力都很难提前完成，还不如踏踏实实等待截止日期的降临，具体的做法大致如此。<br>1.确定截止日期和最晚的开始时间。如11月30日要提交演讲稿，那最好11月25日开始动手准备。<br>2.25日之前不要开始真正的准备工作，踏下心来忙其他事情，但是要留出点时间来做相关的思考和阅读，有好的创意或想法，记下来。<br>3.不要焦虑，但是告诉自己的大脑，月底还有这么一件事情在等你，别忘了。<br>4.一旦进入预定的启动时间，立刻开足马力工作，截止日期带来的恐惧和焦虑会帮助你迅速进入“深度优先处理”的状态，之前的阅读、思考和想法会让你专注、果断、创意十足，也许你真的能在这个时间段提前完成既定目标。<br>——《如何克服焦虑——深度优先处理》</p>
<p>年轻的时候常常会产生一种错觉，无论看长河落日，望滚滚常见，还是在史书中阅尽人世沧桑，人事渺小，你还是感到，日子会这样一天天长长久久地过下去。——《40岁了，还有没有路走》</p>
<p>如果你忙的不可开交，除了提醒自己要时不时地抬头看路之外，真的没什么可抱怨的，这是好事，生活的本质就是让自己忙碌起来，然后把一件事情做成，再把另一件事情做成。真正该抱怨的是那些处于舒适区的、闲散的人们。我清楚地记得自己每一次处于恐慌和焦虑的时候，都是因为在某个领域处于舒适区太久，缺乏挑战，生活闲适造成的，每一次改变也是由此开始。——《闲适有毒》</p>
<p>1.基于工具和平台提供服务。企业愿意要什么软件，就用这些工具和平台做什么软件，费用按人月结算，算是实现了真正的人月神话。遇到外包项目或工具做不了的项目，直接拉黑。<br>2.做垂直小软件，解决某行业80%中小企业客户的80%的需求，价格低，走量。<br>3.为企业软件公司提供互联网和数据服务，如云存储、项目管理、信息流协作、数据服务等，在免费和收费之间兜兜转转，也有生存之道。<br>——《淤出来的聪明之企业软件》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先有Mac还是先有钱？我不知道有多少人是因为池老师的一句话而买的苹果电脑，反正，我买苹果电脑的很大一部分原因是因为池老师的影响，说池老师是苹果亚太区总布道师不足为过。&lt;/p&gt;
&lt;p&gt;之前看过池老师的《人生元编程》(&lt;a href=&quot;https://haofly.net/re
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>ThinkPHP教程</title>
    <link href="https://haofly.net/thinkphp/"/>
    <id>https://haofly.net/thinkphp/</id>
    <published>2016-10-27T16:08:39.000Z</published>
    <updated>2016-11-21T06:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h2><p>垃圾框架，用了<code>Laravel</code>过后感觉其他的PHP框架都是垃圾。但是由于生活所迫，不得不研究一下ThinkPHP框架了，哎。</p>
<h2 id="帮助函数"><a href="#帮助函数" class="headerlink" title="帮助函数"></a>帮助函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;redirect(<span class="string">''</span>)	<span class="comment"># 重定向</span></div></pre></td></tr></table></figure>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义model对象</span></div><div class="line">$model = M(<span class="string">'Product'</span>)</div><div class="line">  </div><div class="line"><span class="comment"># 直接执行sql语句</span></div><div class="line">$Model = <span class="keyword">new</span> Model()</div><div class="line">$Model-&gt;query(sql)</div><div class="line"></div><div class="line"><span class="comment"># 获取上一次执行的sql语句</span></div><div class="line">M()-&gt;getLastSql();</div><div class="line"></div><div class="line"><span class="comment"># 查询数据</span></div><div class="line">$model-&gt;select()	<span class="comment"># findall功能</span></div><div class="line">$model-&gt;where(<span class="string">'name="haofly"'</span>)-&gt;find()	<span class="comment"># 查找满足条件的第一条数据</span></div><div class="line">$model-&gt;where(<span class="string">'name="haofly"'</span>)-&gt;select()<span class="comment"># 查找满足条件的所有数据</span></div><div class="line">  </div><div class="line"><span class="comment"># 删除数据</span></div><div class="line">$model-&gt;where(<span class="string">'id=5'</span>)-&gt;delete()</div></pre></td></tr></table></figure>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># volist: 用于在模版中循环输出数据集</span></div><div class="line"><span class="comment"># 首先有$this-&gt;assign('list, $list)</span></div><div class="line"><span class="comment"># 然后在模版中这样写循环</span></div><div class="line">&lt;volist name=<span class="string">"list"</span> id=<span class="string">"vo"</span>&gt;</div><div class="line">  &#123;$vo[<span class="string">'name'</span>]&#125;&lt;br&gt;</div><div class="line">  &#123;$vo[<span class="string">'pass'</span>]&#125;&lt;br&gt;</div><div class="line">&lt;/volist&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ThinkPHP&quot;&gt;&lt;a href=&quot;#ThinkPHP&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP&quot;&gt;&lt;/a&gt;ThinkPHP&lt;/h2&gt;&lt;p&gt;垃圾框架，用了&lt;code&gt;Laravel&lt;/code&gt;过后感觉其他的PHP框架都是垃圾。但是
    
    </summary>
    
      <category term="php" scheme="https://haofly.net/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>纪念我那已在天堂的妹妹</title>
    <link href="https://haofly.net/my-sister-dead/"/>
    <id>https://haofly.net/my-sister-dead/</id>
    <published>2016-10-23T01:05:44.000Z</published>
    <updated>2016-10-23T01:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>此时此刻，我正在市二院里写着文字，我不知道这个医院的太平间在哪儿，但是想起了前不久我那去世了的妹妹。</p>
<p>妹妹与June的中文音同，不是我的亲妹妹，只是在上学的时候认识的一个好女生。她爸爸是学医的，所以她很会照顾人，人也很温柔，很善良。那时候，每天中午睡午觉，她都会主动给我一床被子给我盖好，每次我有任何健康方面的问题都会问她。我也会经常给她买糖葫芦，给她买好吃的，我知道这不是爱情，就像哥哥与妹妹的感情一样，所以，自然而然我们就成了兄妹了。高中的时候，我们很幸运能在同一所学校，虽然没有在同一个班级，但是，那三年，我们依然在一起照顾对方。那时候，我谈恋爱了，不知道她有没有，但是她总是会说班上有人在追求她，我好担心，担心我这么善良的妹妹会被其他男人骗，担心她不会处理感情中遇到的事。虽然那时候我也不太懂怎么谈恋爱，但身为哥哥的我自然有强烈的保护欲望。我们还认识了一些对方的朋友，那时候真的好开心，那时候周末放半天出去和女朋友买奶茶也会单独给她带一杯。</p>
<p>可是后来，毕业了。毕业以后，我就很少和他们联系了，可能，更多的，是我变了。我不知道她在哪里上学，不知道她有没有找到男朋友，连她在哪儿都不知道。只是在后来的几次电话中得知她已经找到男朋友了，并且，男朋友的老家在东北，几千公里呀。我不知道她那些日子都经历了什么，我不知道为什么她那固执的爸爸会让她一个人嫁到那么遥远的地方，只知道后来的后来，她突然结婚了，她说是“奉子成婚”。我由衷地祝福她，只是在心里却很难受。一个人在那么远的地方，如果娘家人对她不好，可怎么办呀。我没有说出来，只是叫她多看看书，因为我知道，无论一个人在什么困境，只要还会看书，至少心里面会知道什么叫做甜。再后来，只是听她说她生了一个女孩子，然后过了不到一年居然又怀孕了。她说通常是她一个人在家里，老公在外面打工，娘家人在不多远，只是没有过来照顾她。再后来，就是听到她的死讯了。那之前她还发了说说，心情不错，应该是刚生了第二个孩子。据说是在散步的时候失足掉下去的，也有人说是娘家人看她生了两个女孩而不是男孩而产后抑郁的，甚至有人说是谋杀。至于到底什么是真想，我已经不想去深究了。我的妹妹已经走了，再多的真想也换不来她的重生，只希望，那么善良的她，现在已经到了天堂，静静地看着我们，祝福着我们。   </p>
<p>我觉得我十分对不起我的妹妹，在那边她一个人的时候，我没有经常去陪她，她只能靠和远在故乡的父亲通通电话，而我，作为一个同龄人，却没有给她带来任何的安慰。这是我一个哥哥的失职。大概有两次吧，她回到家乡，我都说要去看她，但是因为这样或那样的事情，最后都拖到她的再次离开。那几晚，我挨着给我的姐姐妹妹以及那些曾经说过“下次见面一起吃个饭”的朋友都问候了一遍，还好，他们在电话或者QQ里，心情仿佛都还不错。我不希望还会有人从我身边离开，但，哪怕是离开，我也希望能看到它们现在是快快乐乐的。</p>
<p>妹妹，哥哥不知道几十年后还会不会记起你，希望你不要把我怪罪。再见了，妹妹。我已经好几年没吃糖葫芦了，以后可能也不会吃了，我好想下一串糖葫芦，依然是买给你的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此时此刻，我正在市二院里写着文字，我不知道这个医院的太平间在哪儿，但是想起了前不久我那去世了的妹妹。&lt;/p&gt;
&lt;p&gt;妹妹与June的中文音同，不是我的亲妹妹，只是在上学的时候认识的一个好女生。她爸爸是学医的，所以她很会照顾人，人也很温柔，很善良。那时候，每天中午睡午觉，她都
    
    </summary>
    
      <category term="平凡之路" scheme="https://haofly.net/categories/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>买房了，但我不做房奴</title>
    <link href="https://haofly.net/buy-my-house/"/>
    <id>https://haofly.net/buy-my-house/</id>
    <published>2016-10-17T14:22:22.000Z</published>
    <updated>2016-10-18T12:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天，终于完成了人生中的一件大事——买房。以前觉得买房，看着好就买，应该不是一件麻烦的事情，但通过最近几个月的看房经历来看，其麻烦程度完全超乎了我的想象，甚至给我带来了极大的心理压力。我不知道现在买房是不是好时机，但是我愿意以后花更多的努力来将损失降到最低，来让房子带给我的是更多的幸福感，而不是一辈子的压力。这两天想了很多很多，或许也是我的一次比较大的成长。</p>
<h3 id="最累不过买房"><a href="#最累不过买房" class="headerlink" title="最累不过买房"></a>最累不过买房</h3><p>从我毕业开始，父母就开始问我什么时候买房，我知道他们一直都尊重我的意见，我也觉得不用那么早买房，毕竟我和女朋友结婚，可能要等到下一个猴年马月了。但是，今年的重庆房价仿佛一下子变成了网红，国庆前后，当20个城市开启“限购模式”后，仿佛所有人都把焦点投向了重庆，质疑这座新一线城市为何房价迟迟配不上自己的地位。作为一个土生土长的重庆人，我由衷地感谢市政府的能力，也深刻的意识到重庆的房价，可能不会再那么平静了。我和我的父母，以及周围的好多亲戚，都认为，重庆的房价肯定会继续涨，虽然没外地涨得快，但涨价是肯定的。当然，按照往常的规律来说，涨价一般发生在四月份和九十月份。于是我们就决定慢慢看。但是由于我对房子要求并不高，每看一套房子就觉得喜欢，父母就得周末专程从老家跑到城里来看。上周末一连看了两天，每天看个三四套，耳边一直是中介的各种吹嘘，简直筋疲力竭，我也不想再看了，于是匆忙之中选了一套。额，最终我买了最偏远的一套，远离喧嚣，旁边有公园，交通还算方便，我觉得，那才是我理想中的房子。</p>
<h3 id="最愧不过父母"><a href="#最愧不过父母" class="headerlink" title="最愧不过父母"></a>最愧不过父母</h3><p>确定买房的那个夜晚，我侧夜难眠，自小时候得的一场重大疾病过后，我就从来没有一下子向父母要过这么多的钱。这让我感到很大的心里压力，我也知道这套房几乎会花光家里所有的积蓄，但是，面对突如其来的房价泡沫，我也不得不硬着头皮下手，哪怕我心里也觉得这个泡沫可能会破灭。本来还说这周末带父母去做一次全身体检，结果没想到，反而让他们这般劳累。没想到，即使是毕业了，也没能让他们过上舒服的生活，现在的我，只希望从装修完了开始不再让他们花哪怕一分钱。不花父母钱，这个日子我已经期待了那么久，也延迟了那么久，希望这次不会再延迟。趁着父母还健健康康的，多让他们享福，最不想听到子欲养而亲不在。</p>
<p>他们没有给我最好的，但给了我他们所有的。</p>
<h3 id="最傻不过曾经"><a href="#最傻不过曾经" class="headerlink" title="最傻不过曾经"></a>最傻不过曾经</h3><p>果然，到目前为止，还是有些事情我无法控制。从大学开始，我就努力地提高自己，以使得自己能够在面临两难选择的时候能够轻松应对，比如大二分专业，我已经锻炼到无论哪一个专业我都能应对自如，比如毕业后选工作，我也自认为锻炼到无论哪一个公司哪一个地方，我都能继续成长、持续学习。但是，当面临买房的时候，我软弱了。没有足够的知识去确定哪个房子最好，也没有足够的面对未来的信心，这一次，我没有了当年的豪言壮语，多了几分面对现实的无奈。</p>
<p>还记得曾经的曾经，我们傲气冲天，敢说出“上大学以后不再要父母一分钱”，敢说出“买房完全靠自己”，敢说出“毕业的时候开自己买的车出去”这样的话，但是后来，多少次凝望西边的天空，心里无不充满遗憾，如今的我，依然能说出这样的话，只是已没有了当年的底气，潜意识里否定了这样的话，否定了现在的自己。</p>
<p>是啊，没想到，成长为了曾经讨厌的人。成长怎么会是这样的，难道成长不是一次又一次的实现曾经许下的梦想的过程吗？</p>
<h3 id="最美不过将来"><a href="#最美不过将来" class="headerlink" title="最美不过将来"></a>最美不过将来</h3><p>幸运的是，买房确实给我带来了极大的安全感。我曾经以为，女生眼里的安全感就是男生要保护好女生不受伤害，但后来又觉得是感受到自己的男朋友不会离开自己，再后来我又觉得是看到男人的努力觉得以后会过上好日子。女人我永远不懂，但是，买房让我体验到了什么是我的安全感。不用再担心房价是上涨还是下跌，不用再每天去看哪个楼盘更好。买房的第二天，我心里就放轻松了许多。既然买了，就不要后悔。接下来，我要和爸爸妈妈还有我的女朋友一起规划新家的样子。这套房子离我上班的地方很近，但是离女朋友上班的地方很远，所以，希望明年能买辆车，当然，依然只能贷款😂。以后，我们的宝宝会降临在这套房子里，可能要一直等到她上小学才会换房子。我是买了房，但是这样一个我每天居住的地方怎么能反过来把我奴役了，我会把它装扮得漂漂亮亮的，一起走过接下来的几年时光。不做房奴，美好的未来，才刚刚开始。</p>
<h3 id="最好不过现在"><a href="#最好不过现在" class="headerlink" title="最好不过现在"></a>最好不过现在</h3><p>我很幸福，从小到大，爸爸妈妈哥哥一直没有离开我，并且现在的女朋友居然是自己的小学同学，并且我身边所有最亲近的人都健康，都很幸福。我们挣的钱不多，但不至于每天为了钱焦头烂额；我们的学历不怎么高，但不会每天找无趣的事情；我们没有住在一起，但都在一个美丽的城市里。想回家看爸爸妈妈，长途车2小时，想去看女朋友，高铁2小时，基本上，随时都能找到理由去看看他们。我和爸爸性格一样，为了多陪陪亲人，宁愿不去外面挣大钱，就过过温馨的小日子，一辈子这样平静，多好呀。现在这么美好，为什么不珍惜呢，我还那么年轻，为什么不趁现在就努力呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天，终于完成了人生中的一件大事——买房。以前觉得买房，看着好就买，应该不是一件麻烦的事情，但通过最近几个月的看房经历来看，其麻烦程度完全超乎了我的想象，甚至给我带来了极大的心理压力。我不知道现在买房是不是好时机，但是我愿意以后花更多的努力来将损失降到最低，来让房子带给我的
    
    </summary>
    
      <category term="平凡之路" scheme="https://haofly.net/categories/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>《人为什么活着》——传奇程序员王小波</title>
    <link href="https://haofly.net/why-people-live/"/>
    <id>https://haofly.net/why-people-live/</id>
    <published>2016-10-02T15:38:44.000Z</published>
    <updated>2016-10-03T06:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>此书采购于<a href="https://www.amazon.cn/b/ref=asw1_33a33f50-c60b-3949-a622-f72461d31482_1_kind_KINDLE?_encoding=UTF8&amp;ie=UTF8&amp;node=1841469071&amp;pf_rd_p=354279cf-91dc-46db-8dd0-b5f8da015308&amp;pf_rd_s=desktop-takeover&amp;pf_rd_t=36701&amp;pf_rd_i=desktop&amp;pf_rd_m=A1AJ19PSB66TGU&amp;pf_rd_r=4NN4991RM0DBPG0NPM2A" target="_blank" rel="external">Amazon的0元限时购活动</a>，同时，我表示很激动，终于能拜读期待已久的“初代程序员”王小波的作品了。第一次那么想了解王小波是在我读了<a href="https://haofly.net/bashijiandangzuopengyou/">《把时间当作朋友》</a>过后，果然，不出半年，我就读到了王小波的作品。和《把时间当作朋友》一样，《人为什么活着》也是一本杂文集，署名只是取了其中某一篇的标题，当然是最富有吸引力的标题。</p>
<p>在我的关于王小波的种种映象里，他应该是一个，很正统，并且很有写鸡汤文潜质的那么一个伟大的作家，不过在阅读了这本书过后，我只想说，这TM是怎样一个有趣的人呀？他反对儒家思想，反对道德至上，以他独特的眼光反抗者外部的不解，哪怕他用脏话骂一个人我都觉得毫不做作，反而要拍手称绝，骂得有理有据，骂得头头是道，骂得真爽。和近现代的一些作家比起来，他的人生经历了这个国家太多的路程，但是作品却没有流露出太多的历史厚重感，没有那么多的包袱，他的文章读起来便有趣多了。看到不到十分之一的时候我最大的感受就是，这个作家，太接地气了。</p>
<p>也是通过这本书，我第一次，对孔孟时期的思想有了深一步的思考。求学的时候，我们只知道这些名家的思想中最出名的几句名言(这就像我每次看完一本书，下面都会摘了很多名言一样)，却不了解他们的知识体系，体系必然有一个中心，然而，孔孟思想的中心，似乎都不太正确，或许只能说是政治正确。他们为我们当今的世界定了太多的规矩，其中，很大一部分是我们一直沿用的，只是，很少有人去问对不对，反正周围的人只是认为不按照那样做，便是不对的。</p>
<p>最最让我佩服的是，他一个经历过文革的作家，居然也是一名程序员，他对知识的涉猎程度完全超乎我的想象。首先，他是我知道的唯一一位经历过文革的还会写代码的人，其次他还是上个世纪的程序员，也就是说，电脑刚在国内发展起来的时候，他就已经开始使用电脑，并能自己编写软件解决自己的需求。放在今天，这完全就是一位极客了。肯定会有无数的粉丝。今天的程序员作家也不少，但是经历像他这么丰富的人，肯定是没有的。所以关上书的时候，我感慨了一句：经历丰富的人，写日记都像是在写诗。</p>
<p>最后，这是我女朋友最近和她母亲聊天的截图:</p>
<p><img src="http://7mnpj8.com1.z0.glb.clouddn.com/image/why-people-live.png" alt="宝宝">真的好庆幸，我有这么“不管我”的父母，让我从小能拥有一般农村孩子无法理解的自由，他们带给我的不仅仅是生活上的轻松，更是我一辈子的财富。也很高兴女朋友和我一样能有自由的思想，而不是唯父母命是从。</p>
<p>看了全书，我还是不知道人为什么活着，或许，好好玩儿，活在当下，这才是人生的答案。自由，哪怕仅仅是思维能够自由，那就足够了。</p>
<h5 id="名言"><a href="#名言" class="headerlink" title="名言"></a>名言</h5><ul>
<li>只希望你和我好，互不猜忌，也互不称誉，安如平日，你和我说话像对自己说话一样，我和你说话也像对自己说话一样。说吧，和我好吗？——《孤独的灵魂多么寂寞啊》</li>
<li>我不喜欢稀里糊涂地过日子。我妈妈有时说：真奇怪啊，我们稀里糊涂地就过来了。他们真的是这样。我们的生活就是我们本身。我们本身不傻，也不斤斤计较大衣柜一头沉。干嘛要求我们有什么外在的样子，比方说，规规矩矩，和某些人一样等等。有时候我真想叉着腰骂：滚你的，什么样子！真的，我们的生活是一些给人看的仪式吗？或者叫人安分守己。不知什么叫“分”，假如人活到世上之前“分”都叫人安排好了，不如再死回去的好。——《人为什么活着》</li>
<li>理性就像贞操，失去了就不会再有；只要碰上了开心的事，乐观还会回来的。——《积极的结论》</li>
<li>我现在所教的数学，你们也许一生都用不到，但我还要教，因为这些知识是好的，应该让你们知道。——《跳出手掌心》</li>
<li>在文学艺术及其他人文的领域之内，国人的确是在使用一种双重标准，那就是对外国人的作品，用艺术或科学的标准来审评；而对中国人的作品，则用道德的标准来审评。——《跳出手掌心》</li>
<li>我最赞成罗素先生的一句话：”须知参差多台，乃是幸福的本源。”——《思维的乐趣》</li>
<li>能够带来思想快乐的东西，只能是人类智慧之高的产物。——《思维的乐趣》</li>
<li>假设有某君思想高尚，我是十分敬佩的；可是如果你因此想把我的脑子扔出来挖掉，换上他的，我决不肯，除非你能够证明我罪大恶极，死有余辜。人既然活着，就有权保证他思想的连续性，到死方休。更何况那些高尚和地下完全是以他们自己的立场来度量的，假如我全盘接受，无异于请那些善良的思想母鸡到我脑子里下蛋，而我总不肯相信，自己的脖子上方，原来是长了一座鸡窝。——《思维的乐趣》</li>
<li>于是人人盛赞节烈妇女。翻开历史一看，女人味了节烈，割鼻子拉耳朵的都有。鼻子耳朵不比头发指甲，割了张不出来，而且人身上有此零件，必有用处，拿掉了肯定有不便处。若是为“节烈”之名而自杀，肯定是更加不妥的了。此类行为，就像那条抽疯的海豚。——《西方快乐观区别之我见》</li>
<li>罗素在讨论伦理问题时曾经指出，人人都希求幸福。假如说，人得到自己希求的东西就是幸福，那就言之成理；倘若说因为某件事是幸福的，所以我们就希求它，那就是错误的。——《西方快乐观之我见》</li>
<li>大多数人在受到重视之后，行为就会好。——《居住环境与尊严》</li>
<li>从孔孟到如今，中国的哲学家从来不挑担、不推车，所以他们的智慧从不考虑降低肉体的痛苦，专门营造站着说话不腰疼的理论。——《人生的逆转》</li>
<li>假如从整个人类来考虑问题，早就回发现，趋利避害，直截了当地解决实际问题最重要——说实话，中国人在这方面已经很不像样了——这不是什么哲学的思辨，而是我们的生活经验。我们的社会里，必须有改变物质生活的原动力，这样才能把未来的命脉握在自己的手里。——《人生的逆转》</li>
<li>花钱不说，还下了很多功夫，现在用的软件都是我自己写的。——《从Internet说起》</li>
<li>不知为什么，傻人道德上的敏感度总是很高，也许这纯属巧合。——《奸近杀》</li>
<li>我既不是同性恋，也不想自杀，所以我对计算机没兴趣。得的全是三分。但我现在时常用得着它，所以还要买书看看，关心一下最新的进展，以免用时抓瞎。这是因为我写文章的软件时自己编的，别人编的软件我即使不惯，也信不过，就这么点原因。但就因为这点小原因，握在编程这件事上，还真正有点修为。由此可见，为研究某种学问这件事感兴趣和对这门学问本身感兴趣可以完全是两回事。——《苏东坡与东坡肉》</li>
<li>有人告诉我说，没你这么写杂文的！杂文里应该有点典故，有点考证，有点文化气味。典故我知道一些，考证也会，但就是不肯这么些。——《有关天圆地方》</li>
<li>罗素举这个例子是要说，人们的见识总要受处境的限制，这种限制既不知不觉，又牢不可破——这是一个极好的说明。——《有关天圆地方》</li>
<li>很不幸的是，任何一种负面的生活都能产生很多乱七八糟的细节，使它变得蛮有趣的。人就在这种趣味中沉沦下去，从根本上忘记了这种生活需要改进。——《有关贫穷》</li>
<li>古人说，食色性也。想爱和想吃都是人性的一部分，如果得不到，就称为人性的障碍。——《从&lt;黄金时代&gt;谈小说艺术》</li>
<li>我们的生活有这么多的障碍，真他妈的有意思。——《从&lt;黄金时代&gt;谈小说艺术》</li>
<li>我相信如果不能把已写出的每一根线索都记在心里，就不能写出好的结构；如果不能把写出的每一句话记在心里，就不能写出好的风格。——《&lt;怀疑三部曲&gt;序》</li>
<li>当然，人有贤愚之分。但一个人认为思维是快乐的，那他就可说是热爱智慧的。——《&lt;怀疑三部曲&gt;序》</li>
<li>我认为没有智慧、性爱而且没意思的生活不足取，但有些人却以为这样的生后就是一切。他们还说，假如有什么需要热爱，那就是这种生活里面的规矩——在我看来，这种生活态度简直是种怪癖。很不幸的事，有这种怪癖的人是很多的，有人甚至把这种怪癖叫做文化，甚至当做了生活本身。——《&lt;怀疑三部曲&gt;序》</li>
<li>细读过《孟子》之后，我发现里面全是这样的一些想法。这世界上有很多书都是这样的：内容不可挑剔，只是很没有意思。除了显而易见的坏处，这种书还有一种害人之处就在于：有人从这些书中受到了鼓舞，把整个生活朝更没意思的方向推动。——《&lt;怀疑三部曲&gt;序》</li>
<li>一切人间的荒唐事，整个社会的环境虽是一个原因，但不主要。主要的是：那个闹事的人是在借酒撒疯。——《肚子里的故事》</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此书采购于&lt;a href=&quot;https://www.amazon.cn/b/ref=asw1_33a33f50-c60b-3949-a622-f72461d31482_1_kind_KINDLE?_encoding=UTF8&amp;amp;ie=UTF8&amp;amp;node=184
    
    </summary>
    
      <category term="韦编三绝" scheme="https://haofly.net/categories/%E9%9F%A6%E7%BC%96%E4%B8%89%E7%BB%9D/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift教程</title>
    <link href="https://haofly.net/swift/"/>
    <id>https://haofly.net/swift/</id>
    <published>2016-09-28T08:05:30.000Z</published>
    <updated>2016-09-28T08:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h5 id="基本变量使用"><a href="#基本变量使用" class="headerlink" title="基本变量使用"></a>基本变量使用</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>	<span class="comment">// 声明常量</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>	<span class="comment">// 声明变量</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span>: <span class="type">String</span>	<span class="comment">// 声明变量类型</span></div><div class="line"></div><div class="line"><span class="comment">// 可选类型表示允许常量或者变量没有值，即nil，可选类型用？表明</span></div><div class="line"><span class="keyword">var</span> d: <span class="type">String</span>?	<span class="comment">// 可选变量，会自动将其值设置为nil</span></div><div class="line"><span class="keyword">var</span> e: <span class="type">Int</span>? = <span class="number">404</span> <span class="comment">// 可选变量，这样可以把nil赋值给该变量</span></div><div class="line"><span class="built_in">println</span>(e!)	<span class="comment">// 需要!来获取值</span></div><div class="line"><span class="comment">// 隐式解析可选类型，用!声明，表明强制要求该变量一定有值。一个隐式解析可选类型其实就是一个普通的可选类型，只是可以被当作非可选类型来使用，如果该变量没有值，那么去获取的时候就会报错</span></div><div class="line"><span class="keyword">let</span> f: <span class="type">String</span>? = <span class="string">"test"</span></div><div class="line"><span class="built_in">println</span>(f)	<span class="comment">// 不需要!</span></div><div class="line"></div><div class="line"><span class="comment">// 三木运算符</span></div><div class="line">?:  <span class="comment">// 和php一样吧</span></div><div class="line"></div><div class="line"><span class="comment">// 空合运算符</span></div><div class="line">a ?? b	<span class="comment">// 如果a包含一个值则是a，否则就是b</span></div><div class="line"></div><div class="line"><span class="comment">// 闭区间运算符</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span> &#123;&#125;	<span class="comment">// 返回一个a到b区间的所有的值</span></div><div class="line"><span class="comment">// 半开区间运算符</span></div><div class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">5</span> &#123;&#125;</div></pre></td></tr></table></figure>
<h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">string.isEmpty    	<span class="comment">// 判断字符串是否为空</span></div><div class="line"><span class="built_in">count</span>(string)		<span class="comment">// 求长度</span></div><div class="line"><span class="keyword">let</span> g = <span class="string">"<span class="subst">\(var1)</span> 呵呵"</span>	<span class="comment">// 直接将变量的值插入字符串，用反斜线为前缀的括号中</span></div><div class="line">string.hasPrefix(<span class="string">"abc"</span>)		<span class="comment">// 判断前缀</span></div><div class="line">string.hasSuffix(<span class="string">"def"</span>)		<span class="comment">// 判断后缀</span></div><div class="line">string.uppercaseString		<span class="comment">// 转换为大写</span></div><div class="line">string.lowercaseString		<span class="comment">// 转换为小写</span></div></pre></td></tr></table></figure>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strList = [<span class="string">"A"</span>, <span class="string">"B"</span>]	<span class="comment">// 直接定义</span></div><div class="line"><span class="keyword">var</span> strList: [<span class="type">String</span>] = [<span class="string">"A"</span>, <span class="string">"B"</span>]	<span class="comment">// 定义</span></div><div class="line"><span class="keyword">var</span> strList = [<span class="type">Int</span>](<span class="built_in">count</span>: <span class="number">10</span>, repeatedValue: <span class="number">0</span>)<span class="comment">// 定一个一个包含10个零的数组</span></div><div class="line"><span class="keyword">var</span> <span class="type">StrList</span> = <span class="type">Array</span>(<span class="built_in">count</span>: <span class="number">10</span>, repeatedValue: <span class="number">1</span>)</div><div class="line">strList.<span class="built_in">count</span>	<span class="comment">// 数组长度</span></div><div class="line">strList.isEmpty	<span class="comment">// 是否为零</span></div><div class="line">strList += [<span class="string">"C"</span>]	<span class="comment">// 可以直接加</span></div><div class="line">strList[<span class="number">5</span>...<span class="number">7</span>] = [<span class="string">"E"</span>, <span class="string">"F"</span>]		<span class="comment">// 能这样插入 </span></div><div class="line">strList.insert(<span class="string">"G"</span>, atIndex: <span class="number">0</span>)	<span class="comment">// 也能这样插</span></div><div class="line">strList.removeAtIndex(<span class="number">0</span>)		<span class="comment">// 删除一个元素</span></div><div class="line">strList.removeLast()			<span class="comment">// 删除最后一个元素</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> strList &#123;&#125;			<span class="comment">// 数组遍历</span></div><div class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> <span class="built_in">enumerate</span>(strList) &#123;&#125; <span class="comment">// 遍历的同时获取到当前索引</span></div></pre></td></tr></table></figure>
<h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> h = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()	<span class="comment">// 定义</span></div><div class="line">h.insert(<span class="string">"B"</span>)				<span class="comment">// 插入</span></div><div class="line">h.<span class="built_in">count</span>						<span class="comment">// 数量</span></div><div class="line">h.isEmpty					<span class="comment">// 是否为空</span></div><div class="line">h.remove(<span class="string">"B"</span>)				<span class="comment">// 删除一个元素，返回值为该函数本身</span></div><div class="line">h.<span class="built_in">contains</span>(<span class="string">"B"</span>)				<span class="comment">// 集合是否包含一个特定的值</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> h &#123;&#125;			<span class="comment">// 遍历</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sorted(h) &#123;&#125;	<span class="comment">// 有序遍历</span></div><div class="line">h.intersection(i)			<span class="comment">// 求两个集合的交集</span></div><div class="line">h.symmetricDifference(b)	<span class="comment">// 求两个集合不同的</span></div><div class="line">h.union(b)					<span class="comment">// 求两个集合的并集</span></div><div class="line">h.subtracting(b)			<span class="comment">// 求在h集合但不在b集合的</span></div><div class="line">h.isSubsetOf(b)				<span class="comment">// h是否为b的子集</span></div><div class="line">h.isSupersetOf(b)			<span class="comment">// h是否为b的父集</span></div><div class="line">h.isDisjointWith(b)			<span class="comment">// h和b是否完全不一样</span></div></pre></td></tr></table></figure>
<h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> z: [<span class="type">String</span>:<span class="type">String</span>] = [<span class="string">"A"</span>: <span class="string">"a"</span>, <span class="string">"B"</span>: <span class="string">"b"</span>]</div><div class="line">z.<span class="built_in">count</span>		<span class="comment">// 字典元素数量</span></div><div class="line">z.isEmpty	<span class="comment">// 是否为空</span></div><div class="line">z[<span class="string">"C"</span>] = <span class="string">"c"</span><span class="comment">// 添加值</span></div><div class="line">z.updateValue(<span class="string">"C"</span>, forKey:<span class="string">"C"</span>) <span class="comment">// 更新值，返回老值</span></div><div class="line">z[<span class="string">"C"</span>] = <span class="literal">nil</span>	<span class="comment">// 移除值</span></div><div class="line">z.removeValueForKey(<span class="string">"C"</span>)	<span class="comment">// 移除值</span></div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> z &#123;&#125;	<span class="comment">// 字典遍历</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> z.keys &#123;&#125;		<span class="comment">// 遍历key</span></div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> z.values &#123;&#125;	<span class="comment">// 遍历value</span></div><div class="line"><span class="keyword">let</span> a = <span class="type">Array</span>(z.keys)	</div><div class="line"><span class="keyword">let</span> b = <span class="type">Array</span>(z.values)</div></pre></td></tr></table></figure>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简单定义，函数的参数默认是常量，如果在函数题中更改参数值居然会编译错误，如果要传入一个变量参数，可以在参数名前加var，加了var，就可以在函数内部进行修改，但修改后的值并不能影响函数外部该值的原来的值，如果真的要修改外部的，那么要将参数定义为inout，表示是输入输出参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(userName: String, second: String = <span class="string">"默认值"</span>)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="string">"B"</span> + userName</div><div class="line">  <span class="keyword">return</span> a</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 多返回值定义</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(string: String)</span></span> -&gt; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) &#123;</div><div class="line">  <span class="keyword">return</span> (a, b)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 提供外部参数名的，在调用时必须提供外部的参数名</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">function</span><span class="params">(externalParamterName localParameterName: int)</span></span> &#123;&#125;</div><div class="line"><span class="comment">// 调用时</span></div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(外部变量名: <span class="string">"abc"</span>)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 好吧，这样就不用单独定义外部参数名了，外部参数名和内部参数名一样</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">function</span><span class="params">(#string: String)</span></span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 可变参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">function</span><span class="params">(numbers: Double...)</span></span> &#123;&#125;</div></pre></td></tr></table></figure>
<h5 id="结构体-类"><a href="#结构体-类" class="headerlink" title="结构体/类"></a>结构体/类</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// getter/setter</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Size</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span>, height = <span class="number">0.0</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> origin = <span class="type">Point</span>()</div><div class="line">    <span class="keyword">var</span> size = <span class="type">Size</span>()</div><div class="line">    <span class="keyword">var</span> center: <span class="type">Point</span> &#123;</div><div class="line">      <span class="keyword">get</span> &#123;</div><div class="line">          <span class="keyword">let</span> centerX = origin.x + (size.width / <span class="number">2</span>)</div><div class="line">          <span class="keyword">let</span> centerY = origin.y + (size.height / <span class="number">2</span>)</div><div class="line">          <span class="keyword">return</span> <span class="type">Point</span>(x: centerX, y: centerY)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">set</span>(newCenter) &#123;</div><div class="line">          origin.x = newCenter.x - (size.width / <span class="number">2</span>)</div><div class="line">          origin.y = newCenter.y - (size.height / <span class="number">2</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> square = <span class="type">Rect</span>(origin: <span class="type">Point</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>),</div><div class="line">    size: <span class="type">Size</span>(width: <span class="number">10.0</span>, height: <span class="number">10.0</span>))</div><div class="line"><span class="keyword">let</span> initialSquareCenter = square.center</div><div class="line">square.center = <span class="type">Point</span>(x: <span class="number">15.0</span>, y: <span class="number">15.0</span>)</div><div class="line"></div><div class="line"><span class="comment">// 属性观察器，每次属性被设置的时候都会调用属性观察器，有两种</span></div><div class="line"><span class="keyword">willSet</span>: 在设置新的值之前调用</div><div class="line"><span class="keyword">didSet</span>: 在新的值呗设置之后调用</div><div class="line"><span class="comment">// 直接在定义结构体或类内部变量时使用</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> test: <span class="type">Int</span> = <span class="number">0</span> &#123;</div><div class="line">    <span class="keyword">willSet</span>(newValue) &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"hehe"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">      <span class="built_in">println</span>(<span class="string">"haha"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 下标脚本</span></div><div class="line"><span class="comment">// 构造器</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teset</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> a: <span class="type">Double</span></div><div class="line">  <span class="keyword">init</span>() &#123;</div><div class="line">    a = <span class="number">12.0</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h5 id=&quot;基本变量使用&quot;&gt;&lt;a href=&quot;#基本变量使用&quot; class=&quot;headerlink&quot; title=&quot;基本变量使
    
    </summary>
    
      <category term="apple" scheme="https://haofly.net/categories/apple/"/>
    
    
  </entry>
  
  <entry>
    <title>Web站点常见安全问题</title>
    <link href="https://haofly.net/web-safe-question/"/>
    <id>https://haofly.net/web-safe-question/</id>
    <published>2016-09-10T01:02:30.000Z</published>
    <updated>2016-12-03T03:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h3><p>通过手段欺骗用户访问第三方页面，通过用户在第三方页面执行常规的操作来进行欺骗，这些操作包含了用户已登陆网站的一些请求，当用户点击该请求时，请求会发往原站，同时由于用户已经登录，所以原站是能验证用户的，通常会判断为合法请求。防御:</p>
<p>1.表单增加hash值，就像laravel和django自带的表单csrf验证一样，而这个hash值和用户是对应起来的，第三方是无法同时拿到这两个东西的</p>
<p>2.验证码</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSRF-跨站请求伪造&quot;&gt;&lt;a href=&quot;#CSRF-跨站请求伪造&quot; class=&quot;headerlink&quot; title=&quot;CSRF(跨站请求伪造)&quot;&gt;&lt;/a&gt;CSRF(跨站请求伪造)&lt;/h3&gt;&lt;p&gt;通过手段欺骗用户访问第三方页面，通过用户在第三方页面执行常规的操
    
    </summary>
    
      <category term="code" scheme="https://haofly.net/categories/code/"/>
    
    
  </entry>
  
</feed>
